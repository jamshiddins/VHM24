#!/usr/bin/env node

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –¥–µ–ø–ª–æ—é
 */

const fs = require('fs');
const path = require('path');

console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ VHM24 –∫ –¥–µ–ø–ª–æ—é...\n');

let readyForDeployment = true;
const issues = [];

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
const criticalFiles = [
  'backend/src/index.js',
  'backend/src/routes/auth.js',
  'backend/src/routes/health.js',
  'backend/src/middleware/auth.js',
  'backend/package.json',
  'backend/prisma/schema.prisma',
  'docker-compose.production.yml',
  '.env.example'
];

console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...');
criticalFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${file}`);
    readyForDeployment = false;
  }
});

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö JS —Ñ–∞–π–ª–æ–≤...');
const jsFiles = [
  'backend/src/index.js',
  'backend/src/routes/auth.js',
  'backend/src/routes/health.js',
  'backend/src/middleware/auth.js'
];

jsFiles.forEach(file => {
  if (fs.existsSync(file)) {
    try {
      const content = fs.readFileSync(file, 'utf8');
      // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —è–≤–Ω—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      if (content.includes('module.exports') || content.includes('const ') || content.includes('function ')) {
        console.log(`‚úÖ ${file} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å OK`);
      } else {
        console.log(`‚ö†Ô∏è ${file} - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã`);
        issues.push(`–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ ${file}`);
      }
    } catch (error) {
      console.log(`‚ùå ${file} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${error.message}`);
      issues.push(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å ${file}: ${error.message}`);
      readyForDeployment = false;
    }
  }
});

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json dependencies
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
try {
  const packageJson = JSON.parse(fs.readFileSync('backend/package.json', 'utf8'));
  const requiredDeps = ['express', 'jsonwebtoken', 'cors', 'dotenv'];
  
  requiredDeps.forEach(dep => {
    if (packageJson.dependencies && packageJson.dependencies[dep]) {
      console.log(`‚úÖ ${dep} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
    } else {
      console.log(`‚ùå ${dep} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
      issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${dep}`);
      readyForDeployment = false;
    }
  });
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json');
  issues.push('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å package.json');
  readyForDeployment = false;
}

// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
console.log('\nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
if (fs.existsSync('docker-compose.production.yml')) {
  try {
    const dockerCompose = fs.readFileSync('docker-compose.production.yml', 'utf8');
    if (dockerCompose.includes('backend') && dockerCompose.includes('postgres')) {
      console.log('‚úÖ Docker Compose - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OK');
    } else {
      console.log('‚ö†Ô∏è Docker Compose - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
      issues.push('Docker Compose –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è docker-compose.production.yml');
    issues.push('Docker Compose –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }
} else {
  console.log('‚ùå docker-compose.production.yml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  issues.push('Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  readyForDeployment = false;
}

// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º environment example
console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ environment –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
if (fs.existsSync('.env.example')) {
  try {
    const envExample = fs.readFileSync('.env.example', 'utf8');
    const requiredVars = ['DATABASE_URL', 'JWT_SECRET', 'NODE_ENV'];
    let envOK = true;
    
    requiredVars.forEach(varName => {
      if (envExample.includes(varName)) {
        console.log(`‚úÖ ${varName} - –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env.example`);
      } else {
        console.log(`‚ö†Ô∏è ${varName} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env.example`);
        envOK = false;
      }
    });
    
    if (!envOK) {
      issues.push('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env.example');
    issues.push('.env.example –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }
} else {
  console.log('‚ö†Ô∏è .env.example –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  issues.push('.env.example –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º Kubernetes –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
console.log('\n‚ò∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Kubernetes –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
const k8sFiles = [
  'k8s/production/backend.yaml',
  'k8s/production/database.yaml',
  'k8s/production/ingress.yaml'
];

let k8sReady = true;
k8sFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ö†Ô∏è ${file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    k8sReady = false;
  }
});

if (k8sReady) {
  console.log('‚úÖ Kubernetes –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞');
} else {
  console.log('‚ö†Ô∏è Kubernetes –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è');
  issues.push('Kubernetes –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è');
}

// –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
console.log('\n' + '='.repeat(60));
console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ');
console.log('='.repeat(60));

if (readyForDeployment && issues.length === 0) {
  console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –î–ï–ü–õ–û–Æ!');
  console.log('üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å production deployment');
  console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è:');
  console.log('   docker-compose -f docker-compose.production.yml up -d');
  console.log('   kubectl apply -f k8s/production/');
} else if (readyForDeployment) {
  console.log('‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ì–û–¢–û–í–´ –ö –î–ï–ü–õ–û–Æ');
  console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
  issues.forEach(issue => console.log(`   - ${issue}`));
  console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é, –ø—Ä–æ–±–ª–µ–º—ã –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø–æ–∑–∂–µ');
} else {
  console.log('‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –î–ï–ü–õ–û–Æ');
  console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:');
  issues.forEach(issue => console.log(`   - ${issue}`));
  console.log('\n‚è∞ –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É');
}

console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:');
console.log(`   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: ${criticalFiles.filter(f => fs.existsSync(f)).length}/${criticalFiles.length}`);
console.log(`   –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã`);
console.log(`   Docker: ${fs.existsSync('docker-compose.production.yml') ? '–≥–æ—Ç–æ–≤' : '—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}`);
console.log(`   Environment: ${fs.existsSync('.env.example') ? '–≥–æ—Ç–æ–≤' : '—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}`);
console.log(`   Kubernetes: ${k8sReady ? '–≥–æ—Ç–æ–≤' : '—á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤'}`);

console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
if (readyForDeployment) {
  console.log('1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å production environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
  console.log('2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å production –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
  console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç—å deployment');
  console.log('4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å health checks');
  console.log('5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
} else {
  console.log('1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
  console.log('2. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é');
  console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç—å deployment –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
}

process.exit(readyForDeployment ? 0 : 1);
