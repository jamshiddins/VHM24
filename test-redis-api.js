require('dotenv').config();
const axios = require('axios');

const API_URL = 'http://localhost:8000';
const MACHINES_URL = 'http://localhost:3002';

// –¢–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ login)
const TEST_TOKEN = 'test-token';

async function testRedisCache() {
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É machines
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É machines...');
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –±–µ–∑ –∫–µ—à–∞
    console.log('   –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫–µ—à–∞)...');
    const start1 = Date.now();
    const response1 = await axios.get(`${MACHINES_URL}/health`);
    const time1 = Date.now() - start1;
    console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${response1.data.status}, –í—Ä–µ–º—è: ${time1}ms`);
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—à–∏–Ω (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)...');
    console.log('   ‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω');
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–µ—à–∞
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Redis...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis
    const { redis, cacheManagers } = require('./packages/shared-types/src/redis');
    const cache = cacheManagers.machines;
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testKey = 'api:test:machines';
    const testData = {
      machines: [
        { id: 1, name: 'Machine 1', status: 'ONLINE' },
        { id: 2, name: 'Machine 2', status: 'OFFLINE' }
      ],
      timestamp: new Date()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    console.log('   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à...');
    await cache.set(testKey, testData, 60);
    console.log('   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    
    // –ß–∏—Ç–∞–µ–º –∏–∑ –∫–µ—à–∞
    console.log('   –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞...');
    const cachedData = await cache.get(testKey);
    console.log('   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', cachedData ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
    const ttl = await cache.ttl(testKey);
    console.log(`   ‚úÖ TTL: ${ttl} —Å–µ–∫—É–Ω–¥`);
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cache.delete(testKey);
    console.log('   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    const perfKey = 'perf:test:api';
    const largData = Array(1000).fill(null).map((_, i) => ({
      id: i,
      name: `Item ${i}`,
      data: { index: i, value: Math.random() }
    }));
    
    // –ë–µ–∑ –∫–µ—à–∞ (—ç–º—É–ª—è—Ü–∏—è)
    const dbStart = Date.now();
    await new Promise(resolve => setTimeout(resolve, 100)); // –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
    const dbTime = Date.now() - dbStart;
    console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbTime}ms`);
    
    // –° –∫–µ—à–µ–º
    await cache.set(perfKey, largData, 60);
    const cacheStart = Date.now();
    await cache.get(perfKey);
    const cacheTime = Date.now() - cacheStart;
    console.log(`   Redis –∫–µ—à: ${cacheTime}ms`);
    console.log(`   ‚úÖ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${Math.round(dbTime / cacheTime)}x`);
    
    // –û—á–∏—Å—Ç–∫–∞
    await cache.delete(perfKey);
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üéâ Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await redis.quit();
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
  }
  
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testRedisCache();
