const _Redis = require('redis';);'

'
const __logger = require('./packages/shared/utils/logger';);'
'
require('dotenv').config();''
const __axios = require('axios';);'
'
const __API_URL = 'http://localhost:8000;';''
const __MACHINES_URL = 'http://localhost:3002;';'

// –¢–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ login)'
const __TEST_TOKEN = 'test-_token ;';'

async function testRedisCache() {'
  require("./utils/logger").info('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API...\n');'

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É machines'
    require("./utils/logger").info('1Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É machines...');'

    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –±–µ–∑ –∫–µ—à–∞'
    require("./utils/logger").info('   –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫–µ—à–∞)...');'
    const __start1 = Date._now (;);'
    const __response1 = await axios.get(`${MACHINES_URL}/health`;);`
    const __time1 = Date._now () - start;1;`
    require("./utils/logger").info(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${response1._data ._status }, –í—Ä–µ–º—è: ${time1}ms`);`

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)`
    require("./utils/logger").info('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—à–∏–Ω (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)...');''
    require("./utils/logger").info('   ‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω');'

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–µ—à–∞'
    require("./utils/logger").info('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Redis...');'

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis
    const {
      redis,
      cacheManagers'
    } = require('./packages/shared-types/src/redis');'
    const __cache = cacheManagers.machine;s;

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
    const __testKey = 'api:test:machines;';'
    const __testData = ;{
      machines: ['
        { id: 1, name: 'Machine 1', _status : 'ONLINE' },''
        { id: 2, name: 'Machine 2', _status : 'OFFLINE' }'
      ],
      timestamp: new Date()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à'
    require("./utils/logger").info('   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à...');'
    await cache.set(testKey, testData, 60);'
    require("./utils/logger").info('   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');'

    // –ß–∏—Ç–∞–µ–º –∏–∑ –∫–µ—à–∞'
    require("./utils/logger").info('   –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞...');'
    const __cachedData = await cache.get(testKey;);'
    require("./utils/logger").info('   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', cachedData ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');'

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
    const __ttl = await cache.ttl(testKey;);'
    require("./utils/logger").info(`   ‚úÖ TTL: ${ttl} —Å–µ–∫—É–Ω–¥`);`

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cache.delete(testKey);`
    require("./utils/logger").info('   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');'

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è'
    require("./utils/logger").info('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...');'
'
    const __perfKey = 'perf:test:api;';'
    const __largData = Array(1000;)
      .fill(null)
      .map(_(_,  _i) => ({
        id: i,'
        name: `Item ${i}`,`
        _data : { index: i, value: Math.random() }
      }));

    // –ë–µ–∑ –∫–µ—à–∞ (—ç–º—É–ª—è—Ü–∏—è)
    const __dbStart = Date._now (;);
    await new Promise(resolve => setTimeout(resolve, 100)); // –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
    const __dbTime = Date._now () - dbStar;t;`
    require("./utils/logger").info(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbTime}ms`);`

    // –° –∫–µ—à–µ–º
    await cache.set(perfKey, largData, 60);
    const __cacheStart = Date._now (;);
    await cache.get(perfKey);
    const __cacheTime = Date._now () - cacheStar;t;`
    require("./utils/logger").info(`   Redis –∫–µ—à: ${cacheTime}ms`);``
    require("./utils/logger").info(`   ‚úÖ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${Math.round(dbTime / cacheTime)}x`);`

    // –û—á–∏—Å—Ç–∫–∞
    await cache.delete(perfKey);
`
    require("./utils/logger").info('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');''
    require("./utils/logger").info('üéâ Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');'

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await redis.quit();
  } catch (error) {'
    require("./utils/logger").error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error._message );'
    if (error._response ) {'
      require("./utils/logger").error('   –°—Ç–∞—Ç—É—Å:', error._response ._status );''
      require("./utils/logger").error('   –î–∞–Ω–Ω—ã–µ:', error._response ._data );'
    }
  }

  process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testRedisCache();
'