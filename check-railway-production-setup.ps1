# ‚ñ∂Ô∏è Production Setup Prompt for VHM24 (–±–µ–∑ localhost)
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∫—à–Ω-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: Railway + Vercel + Telegram + DigitalOcean

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º .env.production)
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
$envPath = ".env.production"

if (!(Test-Path $envPath)) {
    Write-Error "‚ùå –§–∞–π–ª $envPath –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞."
    exit 1
}

# 2. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏—é
echo "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ $envPath..."
Get-Content $envPath | ForEach-Object {
    if ($_ -match "^\s*([A-Z0-9_]+)\s*=\s*(.+?)\s*$") {
        [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
    }
}

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
$pgUrl = [System.Environment]::GetEnvironmentVariable("DATABASE_URL")
$redisUrl = [System.Environment]::GetEnvironmentVariable("REDIS_URL")
$apiUrl = [System.Environment]::GetEnvironmentVariable("API_URL")

if (!$pgUrl -or !$redisUrl -or !$apiUrl) {
    Write-Error "‚ùå DATABASE_URL, REDIS_URL –∏–ª–∏ API_URL –Ω–µ –∑–∞–¥–∞–Ω—ã."
    exit 1
}

# 4. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
try {
    psql "$pgUrl" -c "\l" | Out-Null
    echo "‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç."
} catch {
    Write-Error "‚ùå PostgreSQL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL"
}

# 5. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis..."
try {
    redis-cli -u "$redisUrl" ping | Out-Null
    echo "‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç."
} catch {
    Write-Error "‚ùå Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ REDIS_URL"
}

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API (healthcheck)
echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API Health Endpoint..."
try {
    $health = Invoke-WebRequest "$apiUrl/health" -UseBasicParsing
    if ($health.StatusCode -eq 200) {
        echo "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: $apiUrl/health"
    } else {
        Write-Error "‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç."
    }
} catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: $($_.Exception.Message)"
}

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Webhook
echo "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Webhook..."
$webhookUrl = [System.Environment]::GetEnvironmentVariable("WEBHOOK_URL")
$botToken = [System.Environment]::GetEnvironmentVariable("TELEGRAM_BOT_TOKEN")

try {
    $check = Invoke-WebRequest -Uri "https://api.telegram.org/bot$botToken/getWebhookInfo" -UseBasicParsing
    echo "‚úÖ Webhook Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω."
    echo $check.Content
} catch {
    Write-Error "‚ùå Webhook Telegram –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ URL."
}

# 8. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
echo "`nüéâ VHM24 Production –æ–∫—Ä—É–∂–µ–Ω–∏–µ –±–µ–∑ localhost —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!"
