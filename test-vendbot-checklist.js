/**
 * VendBot Platform Checklist Tester
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ VHM24 —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º VendBot
 */

require('dotenv').config();
const fs = require('fs');
const { execSync } = require('child_process');

console.log('=== VendBot Platform Checklist Test ===\n');

const results = {
  infrastructure: {},
  database: {},
  services: {},
  applications: {},
  functionality: {},
  total: { passed: 0, failed: 0 }
};

// –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function check(condition, message) {
  if (condition) {
    console.log(`${colors.green}‚úÖ ${message}${colors.reset}`);
    results.total.passed++;
    return true;
  } else {
    console.log(`${colors.red}‚ùå ${message}${colors.reset}`);
    results.total.failed++;
    return false;
  }
}

function warn(message) {
  console.log(`${colors.yellow}‚ö†Ô∏è  ${message}${colors.reset}`);
}

// 1. –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê
console.log('\nüì¶ 1. –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ\n');

// Docker containers
try {
  const dockerPs = execSync('docker ps --format "table {{.Names}}\t{{.Status}}"', { encoding: 'utf8' });
  results.infrastructure.docker = check(dockerPs.includes('postgres'), 'PostgreSQL (5432)');
  results.infrastructure.redis = check(dockerPs.includes('redis'), 'Redis (6379)');
  results.infrastructure.minio = check(dockerPs.includes('minio'), 'MinIO (9000/9001)');
} catch (e) {
  warn('Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

// Environment variables
results.infrastructure.env = check(fs.existsSync('.env'), '–§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
if (process.env.DATABASE_URL) {
  check(true, 'DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
} else {
  check(false, 'DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

check(!process.env.BOT_TOKEN, 'BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');
check(process.env.JWT_SECRET, 'JWT_SECRET –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

// Node.js version
const nodeVersion = process.version;
results.infrastructure.node = check(nodeVersion >= 'v18.0.0', `Node.js ${nodeVersion} (—Ç—Ä–µ–±—É–µ—Ç—Å—è >= 18.0.0)`);

// Python check
try {
  const pythonVersion = execSync('python --version', { encoding: 'utf8' });
  check(false, `Python –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (VendBot —Ç—Ä–µ–±—É–µ—Ç Python –¥–ª—è Telegram bot)`);
} catch (e) {
  check(false, 'Python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot Telegram bot)');
}

// 2. –ë–ê–ó–ê –î–ê–ù–ù–´–•
console.log('\nüóÑÔ∏è 2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n');

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkDatabase() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await prisma.$connect();
    check(true, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü VHM24
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `;
    
    const tableNames = tables.map(t => t.table_name);
    
    // VHM24 —Ç–∞–±–ª–∏—Ü—ã
    check(tableNames.includes('User'), '–¢–∞–±–ª–∏—Ü–∞ User');
    check(tableNames.includes('Machine'), '–¢–∞–±–ª–∏—Ü–∞ Machine');
    check(tableNames.includes('Task'), '–¢–∞–±–ª–∏—Ü–∞ Task');
    
    // VendBot —Ç–∞–±–ª–∏—Ü—ã (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
    check(!tableNames.includes('Bunker'), '–¢–∞–±–ª–∏—Ü–∞ Bunker (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');
    check(!tableNames.includes('BunkerSet'), '–¢–∞–±–ª–∏—Ü–∞ BunkerSet (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');
    check(!tableNames.includes('Ingredient'), '–¢–∞–±–ª–∏—Ü–∞ Ingredient (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');
    check(!tableNames.includes('Recipe'), '–¢–∞–±–ª–∏—Ü–∞ Recipe (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');
    check(!tableNames.includes('Payment'), '–¢–∞–±–ª–∏—Ü–∞ Payment (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');
    check(!tableNames.includes('FiscalRecord'), '–¢–∞–±–ª–∏—Ü–∞ FiscalRecord (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');
    check(!tableNames.includes('Discrepancy'), '–¢–∞–±–ª–∏—Ü–∞ Discrepancy (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');

  } catch (e) {
    check(false, '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ' + e.message);
  } finally {
    await prisma.$disconnect();
  }
}

// 3. –°–ï–†–í–ò–°–´
console.log('\nüîß 3. –°–µ—Ä–≤–∏—Å—ã\n');

async function checkServices() {
  const services = [
    { name: 'Gateway', port: 8000, path: '/health' },
    { name: 'Auth', port: 3001, path: '/health' },
    { name: 'Machines', port: 3002, path: '/health' },
    { name: 'Inventory', port: 3003, path: '/health' },
    { name: 'Tasks', port: 3004, path: '/health' },
    { name: 'Reconciliation', port: 3005, exists: false },
    { name: 'Notifications', port: 3006, exists: false }
  ];

  for (const service of services) {
    if (service.exists === false) {
      check(false, `${service.name} Service (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)`);
      continue;
    }

    try {
      const response = await fetch(`http://localhost:${service.port}${service.path}`);
      const data = await response.json();
      check(data.status === 'ok', `${service.name} Service (${service.port})`);
    } catch (e) {
      check(false, `${service.name} Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
  }
}

// 4. –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
console.log('\nüì± 4. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n');

// Telegram Bot
check(!fs.existsSync('apps/telegram-bot/bot.py'), 'Telegram Bot –Ω–∞ Python (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');
check(!fs.existsSync('apps/telegram-bot/requirements.txt'), 'Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');

// Web Dashboard
check(!fs.existsSync('apps/web-dashboard/package.json'), 'Web Dashboard –Ω–∞ Next.js (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');
check(!fs.existsSync('apps/web-dashboard/app'), 'Next.js App Router (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');

// Mobile PWA
check(!fs.existsSync('apps/mobile-pwa'), 'Mobile PWA (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)');

// 5. API ENDPOINTS
console.log('\nüåê 5. API Endpoints\n');

async function checkEndpoints() {
  // Login test
  try {
    const loginResponse = await fetch('http://localhost:8000/api/v1/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'admin@vhm24.ru',
        password: 'admin123'
      })
    });
    
    if (loginResponse.ok) {
      const data = await loginResponse.json();
      check(data.token, 'POST /api/v1/auth/login (VHM24 –≤–µ—Ä—Å–∏—è)');
      warn('VendBot —Ç—Ä–µ–±—É–µ—Ç admin@vendbot.ru');
      
      // Test protected endpoints
      const headers = { 'Authorization': `Bearer ${data.token}` };
      
      // Dashboard stats
      const statsResponse = await fetch('http://localhost:8000/api/v1/dashboard/stats', { headers });
      check(statsResponse.ok, 'GET /api/v1/dashboard/stats');
      
      // Tasks
      const tasksResponse = await fetch('http://localhost:8000/api/v1/tasks', { headers });
      check(tasksResponse.ok, 'GET /api/v1/tasks');
      
      // VendBot specific endpoints (missing)
      check(false, 'GET /api/v1/inventory/ingredients (VendBot)');
      check(false, 'GET /api/v1/inventory/bunkers (VendBot)');
      check(false, 'POST /api/v1/inventory/bunker-weight (VendBot)');
      check(false, 'POST /api/v1/tasks/:id/actions (VendBot)');
      check(false, 'POST /api/v1/upload (—Ñ–æ—Ç–æ –≤ MinIO)');
      
    } else {
      check(false, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
  } catch (e) {
    check(false, 'API Gateway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }
}

// 6. –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨
console.log('\n‚ú® 6. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n');

// RBAC roles
check(false, 'RBAC —Ä–æ–ª–∏ (admin, manager, warehouse, operator, technician, driver)');
warn('VHM24 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ä–æ–ª–∏');

// Equipment tracking
check(false, '–£—á–µ—Ç –±—É–Ω–∫–µ—Ä–æ–≤ (SET-00001)');
check(false, '–£—á–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏');
check(false, '–í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ/—Å–Ω—è—Ç–∏–∏');
warn('VHM24 –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π —É—á–µ—Ç –º–∞—à–∏–Ω');

// Business processes
check(false, '–§–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π');
check(false, '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π');
check(false, '–°–ª–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á (CREATED ‚Üí ASSIGNED ‚Üí IN_PROGRESS ‚Üí COMPLETED)');
warn('VHM24 –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏');

// Payment reconciliation
check(false, '–ú–æ–¥—É–ª—å —Å–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π');
check(false, '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å VendHub');
check(false, '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º—É–ª—å—Ç–∏–∫–∞—Å—Å–æ–π');
check(false, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π');

// WebSocket
check(fs.existsSync('node_modules/@fastify/websocket'), '@fastify/websocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
check(false, 'WebSocket endpoint —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');

// 7. –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–û–í
console.log('\nüìÇ 7. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤\n');

const requiredFiles = [
  { path: 'package.json', exists: true },
  { path: 'turbo.json', exists: true },
  { path: 'docker-compose.yml', exists: true },
  { path: '.env', exists: true },
  { path: 'services/gateway/src/index.js', exists: true },
  { path: 'services/auth/src/index.js', exists: true },
  { path: 'services/reconciliation/src/index.js', exists: false },
  { path: 'services/notifications/src/index.js', exists: false },
  { path: 'apps/telegram-bot/bot.py', exists: false },
  { path: 'apps/web-dashboard/app/page.tsx', exists: false },
  { path: 'packages/utils/src/index.ts', exists: false },
  { path: 'packages/ui-kit/src/index.ts', exists: false }
];

for (const file of requiredFiles) {
  const exists = fs.existsSync(file.path);
  if (file.exists) {
    check(exists, file.path);
  } else {
    check(!exists, `${file.path} (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è VendBot)`);
  }
}

// MAIN
async function runTests() {
  await checkDatabase();
  await checkServices();
  await checkEndpoints();
  
  // –û–¢–ß–ï–¢
  console.log('\n' + '='.repeat(50));
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢\n');
  
  const percentage = Math.round((results.total.passed / (results.total.passed + results.total.failed)) * 100);
  
  console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${colors.green}${results.total.passed}${colors.reset}`);
  console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${colors.red}${results.total.failed}${colors.reset}`);
  console.log(`\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ VendBot: ${percentage < 30 ? colors.red : percentage < 70 ? colors.yellow : colors.green}${percentage}%${colors.reset}`);
  
  console.log('\nüìã –û–°–ù–û–í–ù–´–ï –†–ê–ó–õ–ò–ß–ò–Ø:\n');
  console.log('1. VHM24 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Node.js –≤–µ–∑–¥–µ, VendBot —Ç—Ä–µ–±—É–µ—Ç Python –¥–ª—è Telegram');
  console.log('2. VHM24 –∏–º–µ–µ—Ç –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö, VendBot - —Å–ª–æ–∂–Ω—É—é (–±—É–Ω–∫–µ—Ä—ã, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã)');
  console.log('3. VHM24 –Ω–µ –∏–º–µ–µ—Ç Web Dashboard, VendBot —Ç—Ä–µ–±—É–µ—Ç Next.js 14');
  console.log('4. VHM24 –Ω–µ –∏–º–µ–µ—Ç –º–æ–¥—É–ª—è —Å–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π');
  console.log('5. VHM24 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—é –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é');
  
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
  if (percentage < 30) {
    console.log(`${colors.yellow}–ü—Ä–æ–µ–∫—Ç VHM24 –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π VendBot.`);
    console.log(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ª–∏–±–æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ (~40 –¥–Ω–µ–π),`);
    console.log(`–ª–∏–±–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω—É–ª—è.${colors.reset}`);
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  const report = {
    timestamp: new Date().toISOString(),
    project: 'VHM24 vs VendBot',
    compatibility: `${percentage}%`,
    results: results
  };
  
  fs.writeFileSync('vendbot-compatibility-report.json', JSON.stringify(report, null, 2));
  console.log('\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ vendbot-compatibility-report.json');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);
