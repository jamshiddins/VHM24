#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const { spawn } = require('child_process');
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);

console.log('üöÄ VHM24 - –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫\n');

async function fixGateway() {
  const gatewayPath = path.join(__dirname, 'services/gateway/src/index.js');
  const content = `const logger = console;

require('dotenv').config({ path: require('path').join(__dirname, '../../../.env') });

const Fastify = require('fastify');
const { getPrismaClient } = require('@vhm24/database');

const fastify = Fastify({ logger: true });
const prisma = getPrismaClient();

// CORS
fastify.register(require('@fastify/cors'), {
  origin: true,
  credentials: true
});

// Health check
fastify.get('/health', async () => {
  return { 
    status: 'ok', 
    service: 'gateway',
    timestamp: new Date().toISOString()
  };
});

// Simple proxy setup
const services = {
  auth: 'http://localhost:3001',
  machines: 'http://localhost:3002',
  inventory: 'http://localhost:3003',
  tasks: 'http://localhost:3004',
  routes: 'http://localhost:3005',
  warehouse: 'http://localhost:3006',
  recipes: 'http://localhost:3007',
  notifications: 'http://localhost:3008',
  audit: 'http://localhost:3009',
  monitoring: 'http://localhost:3010'
};

// Proxy routes
Object.entries(services).forEach(([name, url]) => {
  fastify.all(\`/api/v1/\${name}/*\`, async (request, reply) => {
    const path = request.url.replace(\`/api/v1/\${name}\`, '');
    try {
      const response = await fetch(\`\${url}\${path}\`, {
        method: request.method,
        headers: request.headers,
        body: request.body ? JSON.stringify(request.body) : undefined
      });
      const data = await response.json();
      return reply.code(response.status).send(data);
    } catch (error) {
      return reply.code(503).send({ error: \`Service \${name} unavailable\` });
    }
  });
});

// Start server
const start = async () => {
  try {
    const port = process.env.GATEWAY_PORT || 8000;
    await fastify.listen({ 
      port: port,
      host: '0.0.0.0'
    });
    logger.log('Gateway is running on port', port);
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};

start();
`;

  await fs.writeFile(gatewayPath, content, 'utf8');
  console.log('‚úÖ Gateway –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
}

async function generatePrismaClient() {
  console.log('üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞...');
  try {
    await exec(
      'npx prisma generate --schema=packages/database/prisma/schema.prisma'
    );
    console.log('‚úÖ Prisma –∫–ª–∏–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Prisma –∫–ª–∏–µ–Ω—Ç');
  }
}

async function installDashboardDeps() {
  console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Web Dashboard...');
  try {
    await exec('npm install', {
      cwd: path.join(__dirname, 'apps/web-dashboard')
    });
    console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Web Dashboard —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Web Dashboard');
  }
}

async function main() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º...\n');

  // 1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å Gateway
  await fixGateway();

  // 2. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Prisma –∫–ª–∏–µ–Ω—Ç
  await generatePrismaClient();

  // 3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Dashboard
  await installDashboardDeps();

  console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...\n');

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç
  const workingServices = [
    { name: 'Gateway', path: 'services/gateway', port: 8000 },
    { name: 'Auth', path: 'services/auth', port: 3001 },
    { name: 'Recipes', path: 'services/recipes', port: 3007 },
    { name: 'Notifications', path: 'services/notifications', port: 3008 },
    { name: 'Audit', path: 'services/audit', port: 3009 },
    { name: 'Monitoring', path: 'services/monitoring', port: 3010 }
  ];

  const processes = [];

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
  for (let i = 0; i < workingServices.length; i++) {
    const service = workingServices[i];
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ ${service.name} –Ω–∞ –ø–æ—Ä—Ç—É ${service.port}...`);

    const proc = spawn('npm', ['start'], {
      cwd: path.join(__dirname, service.path),
      shell: true,
      env: { ...process.env, PORT: service.port }
    });

    proc.stdout.on('data', data => {
      console.log(`[${service.name}] ${data.toString().trim()}`);
    });

    proc.stderr.on('data', data => {
      const msg = data.toString().trim();
      if (
        msg &&
        !msg.includes('ExperimentalWarning') &&
        !msg.includes('npm warn')
      ) {
        console.error(`[${service.name}] ‚ö†Ô∏è  ${msg}`);
      }
    });

    processes.push(proc);

    // –ñ–¥–µ–º –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  // –ó–∞–ø—É—Å–∫ Web Dashboard
  setTimeout(async () => {
    console.log('\nüåê –ó–∞–ø—É—Å–∫ Web Dashboard...');

    const dashboard = spawn('npm', ['run', 'dev'], {
      cwd: path.join(__dirname, 'apps/web-dashboard'),
      shell: true
    });

    dashboard.stdout.on('data', data => {
      console.log(`[Dashboard] ${data.toString().trim()}`);
    });

    dashboard.stderr.on('data', data => {
      const msg = data.toString().trim();
      if (msg && !msg.includes('ExperimentalWarning')) {
        console.error(`[Dashboard] ‚ö†Ô∏è  ${msg}`);
      }
    });

    processes.push(dashboard);
  }, 10000);

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  setTimeout(() => {
    console.log('\n‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!');
    console.log('\nüìç –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:');
    console.log('   Gateway API: http://localhost:8000');
    console.log('   Web Dashboard: http://localhost:3000');
    console.log('   Auth Service: http://localhost:3001/health');
    console.log('   Recipes Service: http://localhost:3007/health');
    console.log('\nüìù –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
  }, 15000);

  // Graceful shutdown
  process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
    processes.forEach(proc => {
      if (proc && !proc.killed) {
        proc.kill('SIGINT');
      }
    });
    setTimeout(() => {
      process.exit(0);
    }, 2000);
  });
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  process.exit(1);
});
