#!/usr/bin/env node

const axios = require('axios');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞ VHM24...\n');

const AUDIT_SERVICE_URL = process.env.AUDIT_SERVICE_URL || 'http://localhost:3009';
const TEST_USER_ID = 'test-user-123';
const TEST_SESSION_ID = 'test-session-456';

async function testAuditService() {
  try {
    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏—Ç–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
    const healthResponse = await axios.get(`${AUDIT_SERVICE_URL}/health`);
    console.log('‚úÖ –°–µ—Ä–≤–∏—Å –∞—É–¥–∏—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω:', healthResponse.data);

    // –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è...');
    const logResponse = await axios.post(`${AUDIT_SERVICE_URL}/api/audit/log`, {
      userId: TEST_USER_ID,
      sessionId: TEST_SESSION_ID,
      action: 'CREATE',
      entity: 'TEST_ENTITY',
      entityId: 'test-entity-789',
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏',
      inputData: { name: 'Test Entity', value: 123 },
      ipAddress: '127.0.0.1',
      userAgent: 'Test Agent'
    });
    console.log('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ:', logResponse.data);

    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤...');
    const logsResponse = await axios.get(`${AUDIT_SERVICE_URL}/api/audit/logs?limit=5`);
    console.log('‚úÖ –õ–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã:', logsResponse.data.logs.length, '–∑–∞–ø–∏—Å–µ–π');

    // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    const statsResponse = await axios.get(`${AUDIT_SERVICE_URL}/api/audit/stats/activity`);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', statsResponse.data);

    // –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö...');
    const dataChangeResponse = await axios.post(`${AUDIT_SERVICE_URL}/api/audit/log-data-change`, {
      entity: 'TEST_ENTITY',
      entityId: 'test-entity-789',
      oldData: { name: 'Old Name', value: 100 },
      newData: { name: 'New Name', value: 200 },
      action: 'UPDATE'
    }, {
      headers: {
        'x-user-id': TEST_USER_ID
      }
    });
    console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã:', dataChangeResponse.data);

    // –¢–µ—Å—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const incompleteDataResponse = await axios.get(`${AUDIT_SERVICE_URL}/api/incomplete-data/`);
    console.log('‚úÖ –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', incompleteDataResponse.data.data.length, '–∑–∞–ø–∏—Å–µ–π');

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    console.log('\n‚úîÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
    const validationResponse = await axios.post(`${AUDIT_SERVICE_URL}/api/audit/validate`, {
      entity: 'TEST_ENTITY',
      entityId: 'test-entity-789',
      fieldName: 'email',
      fieldValue: 'test@example.com',
      validationType: 'EMAIL'
    }, {
      headers: {
        'x-user-id': TEST_USER_ID
      }
    });
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', validationResponse.data);

    // –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–æ–≤
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤...');
    const reportResponse = await axios.get(`${AUDIT_SERVICE_URL}/api/reports/system-activity`);
    console.log('‚úÖ –û—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω:', reportResponse.data);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞:', error.message);
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
    process.exit(1);
  }
}

async function testDatabase() {
  try {
    console.log('\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∞—É–¥–∏—Ç–∞
    const auditLogs = await prisma.systemAuditLog.findMany({
      take: 1
    });
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ SystemAuditLog –¥–æ—Å—Ç—É–ø–Ω–∞');

    const incompleteLogs = await prisma.incompleteDataLog.findMany({
      take: 1
    });
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ IncompleteDataLog –¥–æ—Å—Ç—É–ø–Ω–∞');

    const userSessions = await prisma.userSession.findMany({
      take: 1
    });
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ UserSession –¥–æ—Å—Ç—É–ø–Ω–∞');

    const validationLogs = await prisma.dataValidationLog.findMany({
      take: 1
    });
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ DataValidationLog –¥–æ—Å—Ç—É–ø–Ω–∞');

    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∞—É–¥–∏—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

async function testMiddleware() {
  try {
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ middleware...');

    const AuditMiddleware = require('./packages/shared/middleware/auditMiddleware');
    const auditMiddleware = new AuditMiddleware();

    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID —Å–µ—Å—Å–∏–∏
    const sessionId = auditMiddleware.generateSessionId();
    console.log('‚úÖ ID —Å–µ—Å—Å–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', sessionId);

    // –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ HTTP –º–µ—Ç–æ–¥–∞
    const action = auditMiddleware.getActionFromMethod('POST');
    console.log('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ:', action);

    // –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ URL
    const entity = auditMiddleware.getEntityFromUrl('/api/users/123');
    console.log('‚úÖ –°—É—â–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:', entity);

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ID
    const isValidId = auditMiddleware.isValidId('123');
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è ID:', isValidId);

    // –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const testData = {
      name: 'Test User',
      password: 'secret123',
      email: 'test@example.com'
    };
    const sanitized = auditMiddleware.removeSensitiveFields(testData, ['password']);
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã:', sanitized);

    console.log('‚úÖ Middleware —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ middleware:', error.message);
    process.exit(1);
  }
}

async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞ VHM24\n');
  
  await testDatabase();
  await testMiddleware();
  await testAuditService();
  
  console.log('\nüéä –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  console.log('üìã –°–∏—Å—Ç–µ–º–∞ –∞—É–¥–∏—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
  
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests().catch((error) => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  process.exit(1);
});
