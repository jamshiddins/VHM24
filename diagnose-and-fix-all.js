const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const logger = require('./packages/shared/utils/logger');
require('dotenv').config();

/**
 * VHM24 Complete Diagnosis and Auto-Fix System
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 */
class VHM24DiagnosisAndFix {
  constructor() {
    this.fixes = [];
    this.issues = [];
    this.log('üîß VHM24 Diagnosis and Auto-Fix System', 'info');
  }

  log(message, level = 'info') {
    const colors = {
      info: '\x1b[36m',
      success: '\x1b[32m',
      warning: '\x1b[33m',
      error: '\x1b[31m',
      reset: '\x1b[0m'
    };
    
    const timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Asia/Tashkent',
      hour12: false
    });
    
    console.log(`${colors[level]}[${timestamp}] ${message}${colors.reset}`);
    logger.info(`[${timestamp}] ${message}`);
  }

  async runFullDiagnosis() {
    this.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º VHM24', 'info');
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      await this.checkAndInstallDependencies();
      
      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Redis
      await this.checkAndFixRedis();
      
      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await this.checkAndFixLocalUrls();
      
      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
      await this.checkProjectStructure();
      
      // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤
      await this.checkServiceConfigurations();
      
      // 6. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
      await this.installMissingPackages();
      
      // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      this.generateReport();
      
    } catch (error) {
      this.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
      this.issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  async checkAndInstallDependencies() {
    this.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', 'info');
    
    const requiredDeps = [
      'pg', 'redis', 'aws-sdk', 'axios', 'dotenv', 'winston'
    ];
    
    // –ß–∏—Ç–∞–µ–º package.json
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const installedDeps = {
      ...packageJson.dependencies || {},
      ...packageJson.devDependencies || {}
    };
    
    const missingDeps = requiredDeps.filter(dep => !installedDeps[dep]);
    
    if (missingDeps.length > 0) {
      this.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDeps.join(', ')}`, 'warning');
      try {
        execSync(`npm install ${missingDeps.join(' ')}`, { stdio: 'inherit' });
        this.fixes.push(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDeps.join(', ')}`);
        this.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'success');
      } catch (error) {
        this.issues.push(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${error.message}`);
        this.log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error.message}`, 'error');
      }
    } else {
      this.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'success');
    }
  }

  async checkAndFixRedis() {
    this.log('\nüî¥ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Redis...', 'info');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL Redis
      const redisUrl = process.env.REDIS_URL;
      this.log(`üìç Redis URL: ${redisUrl?.substring(0, 50)}...`, 'info');
      
      if (!redisUrl) {
        this.issues.push('REDIS_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        return;
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const redis = require('redis');
      
      // –í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      try {
        this.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ)...', 'info');
        const client = redis.createClient({
          url: redisUrl,
          socket: {
            tls: true,
            rejectUnauthorized: false,
            connectTimeout: 10000,
            commandTimeout: 5000
          }
        });
        
        await client.connect();
        await client.ping();
        this.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
        await client.disconnect();
        return;
      } catch (error) {
        this.log(`‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: ${error.message}`, 'error');
      }
      
      // –í–∞—Ä–∏–∞–Ω—Ç 2: –ë–µ–∑ TLS
      try {
        this.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis (–±–µ–∑ TLS)...', 'info');
        const client = redis.createClient({
          url: redisUrl.replace('rediss://', 'redis://'),
          socket: {
            connectTimeout: 10000,
            commandTimeout: 5000
          }
        });
        
        await client.connect();
        await client.ping();
        this.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–±–µ–∑ TLS)', 'success');
        await client.disconnect();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        this.updateEnvFile('REDIS_URL', redisUrl.replace('rediss://', 'redis://'));
        this.fixes.push('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω REDIS_URL (—É–¥–∞–ª–µ–Ω TLS)');
        return;
      } catch (error) {
        this.log(`‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ TLS: ${error.message}`, 'error');
      }
      
      // –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º
      try {
        this.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis (–ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º)...', 'info');
        const client = redis.createClient({
          url: redisUrl,
          socket: {
            tls: false,
            connectTimeout: 15000,
            commandTimeout: 10000,
            keepAlive: false
          },
          retryStrategy: () => false
        });
        
        await client.connect();
        await client.ping();
        this.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º)', 'success');
        await client.disconnect();
        return;
      } catch (error) {
        this.log(`‚ùå –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º: ${error.message}`, 'error');
      }
      
      this.issues.push(`Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã`);
      
    } catch (error) {
      this.issues.push(`–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Redis: ${error.message}`);
      this.log(`‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Redis: ${error.message}`, 'error');
    }
  }

  async checkAndFixLocalUrls() {
    this.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...', 'info');
    
    // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const localApiUrl = 'http://localhost:8000';
    const localFrontendUrl = 'http://localhost:3000';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.updateEnvFile('LOCAL_API_URL', localApiUrl);
    this.updateEnvFile('LOCAL_FRONTEND_URL', localFrontendUrl);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    try {
      const axios = require('axios');
      await axios.get(`${localApiUrl}/health`, { timeout: 1000 });
      this.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
    } catch (error) {
      this.log('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω', 'warning');
      this.issues.push('–õ–æ–∫–∞–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');
    }
    
    this.fixes.push('–î–æ–±–∞–≤–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  }

  async checkProjectStructure() {
    this.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...', 'info');
    
    const requiredDirs = [
      'packages/shared/utils',
      'services',
      'backend',
      'apps',
      'logs'
    ];
    
    for (const dir of requiredDirs) {
      if (!fs.existsSync(dir)) {
        this.log(`üîß –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dir}`, 'warning');
        fs.mkdirSync(dir, { recursive: true });
        this.fixes.push(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
      } else {
        this.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${dir}`, 'success');
      }
    }
  }

  async checkServiceConfigurations() {
    this.log('\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤...', 'info');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ecosystem.config.js –¥–ª—è PM2
    if (!fs.existsSync('ecosystem.config.js')) {
      this.log('üîß –°–æ–∑–¥–∞–µ–º ecosystem.config.js –¥–ª—è PM2...', 'warning');
      const pm2Config = {
        apps: [{
          name: 'vhm24-main',
          script: 'backend/src/index.js',
          instances: 1,
          autorestart: true,
          watch: false,
          max_memory_restart: '1G',
          env: {
            NODE_ENV: 'development'
          },
          env_production: {
            NODE_ENV: 'production'
          }
        }]
      };
      
      fs.writeFileSync('ecosystem.config.js', `module.exports = ${JSON.stringify(pm2Config, null, 2)}`);
      this.fixes.push('–°–æ–∑–¥–∞–Ω ecosystem.config.js –¥–ª—è PM2');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.yml
    if (!fs.existsSync('docker-compose.yml')) {
      this.log('üîß –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π docker-compose.yml...', 'warning');
      const dockerCompose = `version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - redis
      
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
`;
      
      fs.writeFileSync('docker-compose.yml', dockerCompose);
      this.fixes.push('–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π docker-compose.yml');
    }
  }

  async installMissingPackages() {
    this.log('\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...', 'info');
    
    const devDeps = [
      '@types/node',
      'typescript',
      'nodemon',
      'jest'
    ];
    
    try {
      this.log('üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...', 'warning');
      execSync(`npm install -D ${devDeps.join(' ')}`, { stdio: 'inherit' });
      this.fixes.push(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${devDeps.join(', ')}`);
    } catch (error) {
      this.log(`‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${error.message}`, 'warning');
    }
  }

  updateEnvFile(key, value) {
    try {
      let envContent = '';
      if (fs.existsSync('.env')) {
        envContent = fs.readFileSync('.env', 'utf8');
      }
      
      const lines = envContent.split('\n');
      const keyIndex = lines.findIndex(line => line.startsWith(`${key}=`));
      
      if (keyIndex !== -1) {
        lines[keyIndex] = `${key}=${value}`;
      } else {
        lines.push(`${key}=${value}`);
      }
      
      fs.writeFileSync('.env', lines.join('\n'));
      this.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω .env: ${key}`, 'success');
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env: ${error.message}`, 'error');
    }
  }

  generateReport() {
    this.log('\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö...', 'info');
    
    const report = `# VHM24 Diagnosis and Fix Report

## üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Tashkent' })}

## ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (${this.fixes.length}):

${this.fixes.map((fix, index) => `${index + 1}. ${fix}`).join('\n')}

## ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (${this.issues.length}):

${this.issues.map((issue, index) => `${index + 1}. ${issue}`).join('\n')}

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: \`node VHM24_COMPLETE_TESTING_SYSTEM.js\`
2. –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: \`npm run dev\`
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ: \`node test-redis-connection.js\`
4. –î–ª—è production —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–æ–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã

## üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Railway –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è production

---

*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ VHM24*
`;

    fs.writeFileSync('VHM24_DIAGNOSIS_REPORT.md', report);
    
    this.log('\n' + '='.repeat(80), 'info');
    this.log('üìä –û–¢–ß–ï–¢ –û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•', 'info');
    this.log('='.repeat(80), 'info');
    this.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${this.fixes.length}`, 'success');
    this.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${this.issues.length}`, this.issues.length > 0 ? 'warning' : 'success');
    this.log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: VHM24_DIAGNOSIS_REPORT.md', 'info');
    this.log('='.repeat(80), 'info');
    
    if (this.fixes.length > 0) {
      this.log('\n‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.', 'success');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
const diagnostics = new VHM24DiagnosisAndFix();
diagnostics.runFullDiagnosis().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
});
