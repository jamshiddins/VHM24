#!/usr/bin/env node

/**
 * VHM24 Quick Start
 * –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã VHM24
 */

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ VHM24...\n');

// –°–µ—Ä–≤–∏—Å—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
const services = [
  {
    name: 'Gateway',
    script: 'services/gateway/src/index.js',
    port: 8000,
    color: '\x1b[36m' // cyan
  },
  {
    name: 'Auth',
    script: 'services/auth/src/index.js',
    port: 3001,
    color: '\x1b[32m' // green
  },
  {
    name: 'Machines',
    script: 'services/machines/src/index.js',
    port: 3002,
    color: '\x1b[33m' // yellow
  },
  {
    name: 'Notifications',
    script: 'services/notifications/src/index.js',
    port: 3006,
    color: '\x1b[35m' // magenta
  },
  {
    name: 'Audit',
    script: 'services/audit/src/index.js',
    port: 3007,
    color: '\x1b[34m' // blue
  }
];

const processes = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
function startService(service) {
  return new Promise((resolve) => {
    console.log(`${service.color}üîß –ó–∞–ø—É—Å–∫ ${service.name}...\x1b[0m`);
    
    const childProcess = spawn('node', [service.script], {
      cwd: __dirname,
      stdio: 'pipe',
      env: {
        ...process.env,
        PORT: service.port
      }
    });

    let started = false;

    childProcess.stdout.on('data', (data) => {
      const output = data.toString();
      console.log(`${service.color}[${service.name}]\x1b[0m ${output.trim()}`);
      
      if (!started && (output.includes('listening') || output.includes('running') || output.includes('started'))) {
        started = true;
        console.log(`${service.color}‚úÖ ${service.name} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${service.port}\x1b[0m`);
        resolve(childProcess);
      }
    });

    childProcess.stderr.on('data', (data) => {
      const output = data.toString();
      if (!output.includes('ExperimentalWarning')) {
        console.log(`${service.color}[${service.name} ERROR]\x1b[0m ${output.trim()}`);
      }
    });

    childProcess.on('close', (code) => {
      console.log(`${service.color}‚ùå ${service.name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}\x1b[0m`);
    });

    childProcess.on('error', (error) => {
      console.log(`${service.color}üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${service.name}: ${error.message}\x1b[0m`);
      if (!started) {
        resolve(null);
      }
    });

    processes.push(childProcess);

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    setTimeout(() => {
      if (!started) {
        console.log(`${service.color}‚ö†Ô∏è  ${service.name} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ...\x1b[0m`);
        resolve(childProcess);
      }
    }, 5000);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîß –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ VHM24...\n');

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  for (const service of services) {
    await startService(service);
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  console.log('\nüéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!');
  console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
  console.log('   üåê API Gateway: http://localhost:8000');
  console.log('   üîê Auth Service: http://localhost:3001');
  console.log('   ü§ñ Machines Service: http://localhost:3002');
  console.log('   üîî Notifications Service: http://localhost:3006');
  console.log('   üîç Audit Service: http://localhost:3007');
  
  console.log('\nüß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
  console.log('   node test-complete-system-with-notifications.js');
  
  console.log('\nüìä –î–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
  console.log('   npm run dashboard');
  
  console.log('\n‚ö†Ô∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
  
  processes.forEach((proc, index) => {
    if (proc && !proc.killed) {
      console.log(`üî¥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${services[index]?.name || '—Å–µ—Ä–≤–∏—Å–∞'}...`);
      proc.kill('SIGTERM');
    }
  });
  
  setTimeout(() => {
    console.log('üëã –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    process.exit(0);
  }, 2000);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
