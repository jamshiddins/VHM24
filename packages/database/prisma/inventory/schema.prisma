generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/client/inventory"
}

datasource db {
  provider = "postgresql"
  url      = env("INVENTORY_DATABASE_URL")
}

// ENUMS
enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
}

enum InventoryUnit {
  KG
  L
  PCS
  PACK
}

// MODELS
model InventoryItem {
  id           String         @id @default(cuid())
  name         String
  sku          String         @unique
  unit         InventoryUnit
  category     String
  description  String?
  quantity     Float          @default(0)
  minQuantity  Float?
  maxQuantity  Float?
  price        Float?
  isActive     Boolean        @default(true)
  lastUpdated  DateTime       @default(now())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations
  stockMovements    StockMovement[]
  machineInventory  MachineInventory[]
  
  @@index([category])
  @@index([sku])
}

model StockMovement {
  id             String            @id @default(cuid())
  itemId         String
  item           InventoryItem     @relation(fields: [itemId], references: [id])
  userId         String            // User ID from auth service
  type           StockMovementType
  quantity       Float
  quantityBefore Float
  quantityAfter  Float
  reason         String
  reference      String?           // Document number
  fromLocation   String?
  toLocation     String?
  machineId      String?           // Machine ID from machines service
  metadata       Json?
  createdAt      DateTime          @default(now())
  
  @@index([itemId])
  @@index([type])
  @@index([createdAt])
  @@index([machineId])
}

model MachineInventory {
  id          String        @id @default(cuid())
  machineId   String        // Machine ID from machines service
  itemId      String
  item        InventoryItem @relation(fields: [itemId], references: [id])
  quantity    Float         @default(0)
  minQuantity Float?
  maxQuantity Float?
  lastRefill  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@unique([machineId, itemId])
  @@index([machineId])
  @@index([itemId])
}

// Warehouse locations for inventory
model WarehouseLocation {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  inventoryLocations InventoryLocation[]
}

// Track inventory by location
model InventoryLocation {
  id         String            @id @default(cuid())
  itemId     String
  locationId String
  quantity   Float             @default(0)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  
  item       InventoryItem     @relation(fields: [itemId], references: [id])
  location   WarehouseLocation @relation(fields: [locationId], references: [id])
  
  @@unique([itemId, locationId])
  @@index([itemId])
  @@index([locationId])
}
