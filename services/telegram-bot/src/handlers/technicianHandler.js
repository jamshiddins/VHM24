const { FSMManager } = require('../fsm/manager');
const { STATES } = require('../fsm/states');
const logger = require('@vhm24/shared/utils/logger');

class TechnicianHandler {
    constructor(bot, prisma) {
        this.bot = bot;
        this.prisma = prisma;
        this.fsmManager = new FSMManager();
    }

    async showTechnicianMenu(chatId, userId) {
        try {
            logger.info(`Showing technician menu for user ${userId}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.prisma.user.findUnique({
                where: { telegramId: userId.toString() },
                include: { role: true }
            });

            if (!user || user.role.name !== 'TECHNICIAN') {
                await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Ç–µ—Ö–Ω–∏–∫–∞');
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await this.fsmManager.setState(userId, STATES.TECHNICIAN_MENU);

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üîß –ù–∞—á–∞—Ç—å –¢–û', callback_data: 'tech_start_maintenance' },
                        { text: 'üìã –ß–µ–∫-–ª–∏—Å—Ç—ã', callback_data: 'tech_checklists' }
                    ],
                    [
                        { text: 'üî© –ó–∞–º–µ–Ω–∞ –¥–µ—Ç–∞–ª–µ–π', callback_data: 'tech_parts_replacement' },
                        { text: 'üìä –ú–æ–∏ –æ—Ç—á—ë—Ç—ã', callback_data: 'tech_reports' }
                    ],
                    [
                        { text: 'üö® –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ', callback_data: 'tech_report_problem' },
                        { text: 'üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }
                    ],
                    [
                        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                    ]
                ]
            };

            await this.bot.sendMessage(chatId, 
                'üîß *–ú–µ–Ω—é —Ç–µ—Ö–Ω–∏–∫–∞*\n\n' +
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n' +
                '‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n' +
                '‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏\n' +
                '‚Ä¢ –ó–∞–º–µ–Ω–∞ –¥–µ—Ç–∞–ª–µ–π\n' +
                '‚Ä¢ –û—Ç—á—ë—Ç—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã',
                { 
                    parse_mode: 'Markdown',
                    reply_markup: keyboard 
                }
            );

        } catch (error) {
            logger.error('Error showing technician menu:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ç–µ—Ö–Ω–∏–∫–∞');
        }
    }

    async startMaintenance(chatId, userId) {
        try {
            logger.info(`Starting maintenance for technician ${userId}`);

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –¥–ª—è –¢–û
            const machines = await this.prisma.machine.findMany({
                where: {
                    OR: [
                        { status: 'MAINTENANCE_REQUIRED' },
                        { status: 'OFFLINE' }
                    ]
                },
                include: {
                    location: true
                }
            });

            if (machines.length === 0) {
                await this.bot.sendMessage(chatId, 
                    '‚úÖ –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç—ã –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!\n' +
                    '–ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.'
                );
                return;
            }

            await this.fsmManager.setState(userId, STATES.TECHNICIAN_SELECT_MACHINE);

            const keyboard = {
                inline_keyboard: machines.map(machine => ([
                    { 
                        text: `üè™ ${machine.location.name} - ${machine.model}`, 
                        callback_data: `tech_select_machine_${machine.id}` 
                    }
                ])).concat([[
                    { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'technician_menu' }
                ]])
            };

            await this.bot.sendMessage(chatId,
                'üîß *–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç –¥–ª—è –¢–û*\n\n' +
                `–ù–∞–π–¥–µ–Ω–æ ${machines.length} –∞–≤—Ç–æ–º–∞—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                }
            );

        } catch (error) {
            logger.error('Error starting maintenance:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¢–û');
        }
    }

    async selectMachineForMaintenance(chatId, userId, machineId) {
        try {
            const machine = await this.prisma.machine.findUnique({
                where: { id: parseInt(machineId) },
                include: { 
                    location: true,
                    maintenanceTasks: {
                        where: { status: 'PENDING' },
                        orderBy: { priority: 'desc' }
                    }
                }
            });

            if (!machine) {
                await this.bot.sendMessage(chatId, '‚ùå –ê–≤—Ç–æ–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¢–û
            const maintenanceTask = await this.prisma.maintenanceTask.create({
                data: {
                    machineId: machine.id,
                    technicianId: parseInt(userId),
                    type: 'ROUTINE',
                    status: 'IN_PROGRESS',
                    priority: 'MEDIUM',
                    description: `–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û –∞–≤—Ç–æ–º–∞—Ç–∞ ${machine.model}`,
                    scheduledDate: new Date()
                }
            });

            await this.fsmManager.setState(userId, STATES.TECHNICIAN_MAINTENANCE, {
                machineId: machine.id,
                taskId: maintenanceTask.id
            });

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üìã –ù–∞—á–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç', callback_data: `tech_start_checklist_${maintenanceTask.id}` }
                    ],
                    [
                        { text: 'üî© –ó–∞–º–µ–Ω–∞ –¥–µ—Ç–∞–ª–µ–π', callback_data: `tech_parts_${maintenanceTask.id}` },
                        { text: 'üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `tech_photo_${maintenanceTask.id}` }
                    ],
                    [
                        { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¢–û', callback_data: `tech_complete_${maintenanceTask.id}` }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'tech_start_maintenance' }
                    ]
                ]
            };

            await this.bot.sendMessage(chatId,
                `üîß *–¢–û –∞–≤—Ç–æ–º–∞—Ç–∞*\n\n` +
                `üìç –õ–æ–∫–∞—Ü–∏—è: ${machine.location.name}\n` +
                `ü§ñ –ú–æ–¥–µ–ª—å: ${machine.model}\n` +
                `üìä –°—Ç–∞—Ç—É—Å: ${machine.status}\n` +
                `üÜî –ó–∞–¥–∞—á–∞: #${maintenanceTask.id}\n\n` +
                `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                }
            );

        } catch (error) {
            logger.error('Error selecting machine for maintenance:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∞');
        }
    }

    async startChecklist(chatId, userId, taskId) {
        try {
            const task = await this.prisma.maintenanceTask.findUnique({
                where: { id: parseInt(taskId) },
                include: { 
                    machine: { include: { location: true } },
                    checklistItems: true
                }
            });

            if (!task) {
                await this.bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –¢–û
            const standardChecklist = [
                '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
                '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–ø–ª–µ—è –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
                '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞',
                '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–µ—Ç–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞',
                '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–¥–∞—á–∏',
                '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞',
                '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —Ç–æ–≤–∞—Ä–æ–≤',
                '–û—á–∏—Å—Ç–∫–∞ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è',
                '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π',
                '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã'
            ];

            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if (task.checklistItems.length === 0) {
                for (let i = 0; i < standardChecklist.length; i++) {
                    await this.prisma.checklistItem.create({
                        data: {
                            taskId: task.id,
                            description: standardChecklist[i],
                            order: i + 1,
                            status: 'PENDING'
                        }
                    });
                }
            }

            await this.fsmManager.setState(userId, STATES.TECHNICIAN_CHECKLIST, {
                taskId: task.id,
                currentItem: 0
            });

            await this.showNextChecklistItem(chatId, userId, task.id, 0);

        } catch (error) {
            logger.error('Error starting checklist:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ–∫-–ª–∏—Å—Ç–∞');
        }
    }

    async showNextChecklistItem(chatId, userId, taskId, itemIndex) {
        try {
            const items = await this.prisma.checklistItem.findMany({
                where: { taskId: parseInt(taskId) },
                orderBy: { order: 'asc' }
            });

            if (itemIndex >= items.length) {
                await this.completeChecklist(chatId, userId, taskId);
                return;
            }

            const currentItem = items[itemIndex];
            const completedCount = items.filter(item => item.status === 'COMPLETED').length;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `tech_check_ok_${currentItem.id}_${itemIndex}` },
                        { text: '‚ùå –ü—Ä–æ–±–ª–µ–º–∞', callback_data: `tech_check_issue_${currentItem.id}_${itemIndex}` }
                    ],
                    [
                        { text: 'üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `tech_check_photo_${currentItem.id}` }
                    ],
                    [
                        { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `tech_check_skip_${currentItem.id}_${itemIndex}` }
                    ]
                ]
            };

            await this.bot.sendMessage(chatId,
                `üìã *–ß–µ–∫-–ª–∏—Å—Ç –¢–û*\n\n` +
                `–ü—É–Ω–∫—Ç ${itemIndex + 1} –∏–∑ ${items.length}\n` +
                `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedCount}/${items.length}\n\n` +
                `üîç **${currentItem.description}**\n\n` +
                `–û—Ç–º–µ—Ç—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                }
            );

        } catch (error) {
            logger.error('Error showing checklist item:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞');
        }
    }

    async handleChecklistItem(chatId, userId, itemId, itemIndex, status, comment = null) {
        try {
            await this.prisma.checklistItem.update({
                where: { id: parseInt(itemId) },
                data: {
                    status: status,
                    comment: comment,
                    completedAt: status === 'COMPLETED' ? new Date() : null
                }
            });

            const nextIndex = parseInt(itemIndex) + 1;
            const item = await this.prisma.checklistItem.findUnique({
                where: { id: parseInt(itemId) }
            });

            await this.showNextChecklistItem(chatId, userId, item.taskId, nextIndex);

        } catch (error) {
            logger.error('Error handling checklist item:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞');
        }
    }

    async completeChecklist(chatId, userId, taskId) {
        try {
            const items = await this.prisma.checklistItem.findMany({
                where: { taskId: parseInt(taskId) }
            });

            const completedCount = items.filter(item => item.status === 'COMPLETED').length;
            const issuesCount = items.filter(item => item.status === 'ISSUE').length;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üî© –ó–∞–º–µ–Ω–∞ –¥–µ—Ç–∞–ª–µ–π', callback_data: `tech_parts_${taskId}` },
                        { text: 'üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `tech_photo_${taskId}` }
                    ],
                    [
                        { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¢–û', callback_data: `tech_complete_${taskId}` }
                    ],
                    [
                        { text: 'üîô –ö –∑–∞–¥–∞—á–µ', callback_data: `tech_task_${taskId}` }
                    ]
                ]
            };

            await this.bot.sendMessage(chatId,
                `‚úÖ *–ß–µ–∫-–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n` +
                `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
                `‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedCount}/${items.length}\n` +
                `‚Ä¢ –ü—Ä–æ–±–ª–µ–º: ${issuesCount}\n\n` +
                `–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                }
            );

        } catch (error) {
            logger.error('Error completing checklist:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞');
        }
    }

    async reportPartReplacement(chatId, userId, taskId) {
        try {
            await this.fsmManager.setState(userId, STATES.TECHNICIAN_PART_REPLACEMENT, {
                taskId: taskId
            });

            await this.bot.sendMessage(chatId,
                'üî© *–ó–∞–º–µ–Ω–∞ –¥–µ—Ç–∞–ª–µ–π*\n\n' +
                '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ–Ω–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏:\n\n' +
                '–§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ | –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä | –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–º–µ–Ω—ã\n\n' +
                '–ü—Ä–∏–º–µ—Ä: –ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫ | SN123456 | –ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫—É–ø—é—Ä—ã',
                { parse_mode: 'Markdown' }
            );

        } catch (error) {
            logger.error('Error reporting part replacement:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–º–µ–Ω—ã –¥–µ—Ç–∞–ª–∏');
        }
    }

    async handlePartReplacementInput(chatId, userId, text) {
        try {
            const state = await this.fsmManager.getState(userId);
            const taskId = state.data.taskId;

            const parts = text.split('|').map(part => part.trim());
            if (parts.length !== 3) {
                await this.bot.sendMessage(chatId,
                    '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n' +
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ | –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä | –ü—Ä–∏—á–∏–Ω–∞'
                );
                return;
            }

            const [partName, serialNumber, reason] = parts;

            await this.prisma.partReplacement.create({
                data: {
                    taskId: parseInt(taskId),
                    partName: partName,
                    serialNumber: serialNumber,
                    reason: reason,
                    replacedAt: new Date()
                }
            });

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `tech_part_photo_${taskId}` }
                    ],
                    [
                        { text: 'üî© –ï—â—ë –¥–µ—Ç–∞–ª—å', callback_data: `tech_parts_${taskId}` },
                        { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: `tech_task_${taskId}` }
                    ]
                ]
            };

            await this.bot.sendMessage(chatId,
                `‚úÖ *–ó–∞–º–µ–Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞*\n\n` +
                `üî© –î–µ—Ç–∞–ª—å: ${partName}\n` +
                `üè∑Ô∏è –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ${serialNumber}\n` +
                `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}\n\n` +
                `–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                }
            );

            await this.fsmManager.setState(userId, STATES.TECHNICIAN_MAINTENANCE, {
                taskId: taskId
            });

        } catch (error) {
            logger.error('Error handling part replacement input:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç–∞–ª–∏');
        }
    }

    async completeMaintenanceReport(chatId, userId, taskId) {
        try {
            const task = await this.prisma.maintenanceTask.findUnique({
                where: { id: parseInt(taskId) },
                include: {
                    machine: { include: { location: true } },
                    checklistItems: true,
                    partReplacements: true
                }
            });

            if (!task) {
                await this.bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            await this.prisma.maintenanceTask.update({
                where: { id: parseInt(taskId) },
                data: {
                    status: 'COMPLETED',
                    completedAt: new Date()
                }
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∞
            const issuesCount = task.checklistItems.filter(item => item.status === 'ISSUE').length;
            const newMachineStatus = issuesCount > 0 ? 'MAINTENANCE_REQUIRED' : 'ONLINE';

            await this.prisma.machine.update({
                where: { id: task.machineId },
                data: { status: newMachineStatus }
            });

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            const completedItems = task.checklistItems.filter(item => item.status === 'COMPLETED').length;
            const totalItems = task.checklistItems.length;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üìã –ù–æ–≤–æ–µ –¢–û', callback_data: 'tech_start_maintenance' }
                    ],
                    [
                        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                    ]
                ]
            };

            await this.bot.sendMessage(chatId,
                `‚úÖ *–¢–û –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n` +
                `üìç –õ–æ–∫–∞—Ü–∏—è: ${task.machine.location.name}\n` +
                `ü§ñ –ê–≤—Ç–æ–º–∞—Ç: ${task.machine.model}\n` +
                `üÜî –ó–∞–¥–∞—á–∞: #${task.id}\n\n` +
                `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
                `‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç: ${completedItems}/${totalItems}\n` +
                `‚Ä¢ –ü—Ä–æ–±–ª–µ–º: ${issuesCount}\n` +
                `‚Ä¢ –ó–∞–º–µ–Ω –¥–µ—Ç–∞–ª–µ–π: ${task.partReplacements.length}\n` +
                `‚Ä¢ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∞: ${newMachineStatus}\n\n` +
                `‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                }
            );

            await this.fsmManager.setState(userId, STATES.TECHNICIAN_MENU);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            await this.sendMaintenanceNotification(task, issuesCount);

        } catch (error) {
            logger.error('Error completing maintenance report:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –¢–û');
        }
    }

    async sendMaintenanceNotification(task, issuesCount) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const managers = await this.prisma.user.findMany({
                where: {
                    role: { name: 'MANAGER' },
                    telegramId: { not: null }
                }
            });

            const message = 
                `üîß *–ó–∞–≤–µ—Ä—à–µ–Ω–æ –¢–û*\n\n` +
                `üìç ${task.machine.location.name}\n` +
                `ü§ñ ${task.machine.model}\n` +
                `üë®‚Äçüîß –¢–µ—Ö–Ω–∏–∫: ${task.technicianId}\n` +
                `‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º: ${issuesCount}\n` +
                `‚è∞ ${new Date().toLocaleString('ru-RU')}`;

            for (const manager of managers) {
                try {
                    await this.bot.sendMessage(manager.telegramId, message, {
                        parse_mode: 'Markdown'
                    });
                } catch (error) {
                    logger.warn(`Failed to send notification to manager ${manager.id}:`, error);
                }
            }

        } catch (error) {
            logger.error('Error sending maintenance notification:', error);
        }
    }

    async showReports(chatId, userId) {
        try {
            const reports = await this.prisma.maintenanceTask.findMany({
                where: { 
                    technicianId: parseInt(userId),
                    status: 'COMPLETED'
                },
                include: {
                    machine: { include: { location: true } }
                },
                orderBy: { completedAt: 'desc' },
                take: 10
            });

            if (reports.length === 0) {
                await this.bot.sendMessage(chatId, 
                    'üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –¢–û'
                );
                return;
            }

            let message = 'üìä *–í–∞—à–∏ –æ—Ç—á—ë—Ç—ã –¢–û*\n\n';
            
            reports.forEach((report, index) => {
                message += `${index + 1}. üè™ ${report.machine.location.name}\n`;
                message += `   üìÖ ${report.completedAt.toLocaleDateString('ru-RU')}\n`;
                message += `   üÜî #${report.id}\n\n`;
            });

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'technician_menu' }
                    ]
                ]
            };

            await this.bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });

        } catch (error) {
            logger.error('Error showing reports:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á—ë—Ç–æ–≤');
        }
    }

    async reportProblem(chatId, userId) {
        try {
            await this.fsmManager.setState(userId, STATES.TECHNICIAN_REPORT_PROBLEM);

            await this.bot.sendMessage(chatId,
                'üö® *–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ*\n\n' +
                '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:\n' +
                '‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n' +
                '‚Ä¢ –ì–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n' +
                '‚Ä¢ –ö–æ–≥–¥–∞ –∑–∞–º–µ—Ç–∏–ª–∏?\n' +
                '‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã',
                { parse_mode: 'Markdown' }
            );

        } catch (error) {
            logger.error('Error reporting problem:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ');
        }
    }

    async handleProblemReport(chatId, userId, text) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            const problemTask = await this.prisma.maintenanceTask.create({
                data: {
                    technicianId: parseInt(userId),
                    type: 'EMERGENCY',
                    status: 'PENDING',
                    priority: 'HIGH',
                    description: `–ü–†–û–ë–õ–ï–ú–ê: ${text}`,
                    scheduledDate: new Date()
                }
            });

            await this.bot.sendMessage(chatId,
                `üö® *–ü—Ä–æ–±–ª–µ–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞*\n\n` +
                `üÜî –ù–æ–º–µ—Ä: #${problemTask.id}\n` +
                `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${text}\n` +
                `‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –í–´–°–û–ö–ò–ô\n\n` +
                `–ú–µ–Ω–µ–¥–∂–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã!`,
                { parse_mode: 'Markdown' }
            );

            await this.fsmManager.setState(userId, STATES.TECHNICIAN_MENU);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            await this.sendProblemNotification(problemTask, userId);

        } catch (error) {
            logger.error('Error handling problem report:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ');
        }
    }

    async sendProblemNotification(task, technicianId) {
        try {
            const managers = await this.prisma.user.findMany({
                where: {
                    role: { name: 'MANAGER' },
                    telegramId: { not: null }
                }
            });

            const message = 
                `üö® *–ü–†–û–ë–õ–ï–ú–ê!*\n\n` +
                `üë®‚Äçüîß –¢–µ—Ö–Ω–∏–∫: ${technicianId}\n` +
                `üÜî –ó–∞–¥–∞—á–∞: #${task.id}\n` +
                `üìù ${task.description}\n` +
                `‚è∞ ${new Date().toLocaleString('ru-RU')}\n\n` +
                `‚ö° –¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!`;

            for (const manager of managers) {
                try {
                    await this.bot.sendMessage(manager.telegramId, message, {
                        parse_mode: 'Markdown'
                    });
                } catch (error) {
                    logger.warn(`Failed to send problem notification to manager ${manager.id}:`, error);
                }
            }

        } catch (error) {
            logger.error('Error sending problem notification:', error);
        }
    }
}

module.exports = { TechnicianHandler };
