/**
 * VHM24 Driver Handler with FSM
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∞—Ä—à—Ä—É—Ç–æ–≤, GPS, –ø—Ä–æ–±–µ–≥–∞ –∏ —Ç–æ–ø–ª–∏–≤–∞
 */

const fsmManager = require('../fsm/manager');
const { DRIVER_STATES, COMMON_STATES } = require('../fsm/states');

/**
 * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è
 */
async function showDriverMenu(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–æ–ª—å –≤–æ–¥–∏—Ç–µ–ª—è
    const userInfo = await getUserInfo(userId);
    if (!userInfo || !userInfo.isDriver) {
      await bot.sendMessage(chatId,
        `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –≤–æ–¥–∏—Ç–µ–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.`
      );
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    const activeRoute = await getActiveRoute(userId);

    let message = `üöõ *–ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è*\n\n`;
    
    if (activeRoute) {
      message += `üìç *–ê–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:* ${activeRoute.name}\n`;
      message += `üéØ –°—Ç–∞—Ç—É—Å: ${getRouteStatusText(activeRoute.status)}\n`;
      message += `üìä –û—Å—Ç–∞–Ω–æ–≤–æ–∫: ${activeRoute.completedStops}/${activeRoute.totalStops}\n\n`;
    } else {
      message += `üìç –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ—Ç\n\n`;
    }

    const keyboards = [];

    if (activeRoute) {
      if (activeRoute.status === 'PLANNED') {
        keyboards.push([
          { text: 'üöÄ –ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç', callback_data: 'driver_start_route' }
        ]);
      } else if (activeRoute.status === 'IN_PROGRESS') {
        keyboards.push([
          { text: 'üìç –ü—Ä–∏–±—ã–ª –Ω–∞ —Ç–æ—á–∫—É', callback_data: 'driver_arrived' },
          { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É', callback_data: 'driver_complete_stop' }
        ]);
        keyboards.push([
          { text: 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç', callback_data: 'driver_finish_route' }
        ]);
      }
    }

    keyboards.push([
      { text: '‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞', callback_data: 'driver_fuel' },
      { text: 'üõ£Ô∏è –ü—Ä–æ–±–µ–≥', callback_data: 'driver_mileage' }
    ]);

    keyboards.push([
      { text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å GPS', callback_data: 'driver_gps' },
      { text: 'üìã –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã', callback_data: 'driver_routes' }
    ]);

    keyboards.push([
      { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
    ]);

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboards
      }
    });

  } catch (error) {
    global.logger.error('Driver menu error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
  }
}

/**
 * –ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
 */
async function startRoute(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    const activeRoute = await getActiveRoute(userId);
    
    if (!activeRoute || activeRoute.status !== 'PLANNED') {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞',
        show_alert: true
      });
      return;
    }

    await fsmManager.setUserState(userId, DRIVER_STATES.WAITING_MILEAGE);
    await fsmManager.setUserData(userId, {
      routeId: activeRoute.id,
      action: 'start_route'
    });

    await bot.editMessageText(
      `üöõ *–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞: ${activeRoute.name}*\n\n` +
      `üìä –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤ –∫–º):`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'driver_cancel' }]
          ]
        }
      }
    );

    await bot.answerCallbackQuery(callbackQuery.id);

  } catch (error) {
    global.logger.error('Start route error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞',
      show_alert: true
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–µ–≥–∞
 */
async function handleMileage(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== DRIVER_STATES.WAITING_MILEAGE) {
      return false;
    }

    const mileageText = msg.text;
    const mileage = parseFloat(mileageText);

    if (isNaN(mileage) || mileage < 0) {
      await bot.sendMessage(chatId,
        `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12345.5):`
      );
      return true;
    }

    const userData = await fsmManager.getUserData(userId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–µ–≥
    await global.apiClient.post('/driver-logs', {
      type: 'MILEAGE',
      description: `–ü—Ä–æ–±–µ–≥: ${mileage} –∫–º`,
      mileage: mileage,
      metadata: {
        routeId: userData.routeId,
        action: userData.action
      }
    });

    if (userData.action === 'start_route') {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–∞
      await global.apiClient.patch(`/routes/${userData.routeId}`, {
        status: 'IN_PROGRESS',
        startTime: new Date().toISOString(),
        startMileage: mileage
      });

      await bot.sendMessage(chatId,
        `‚úÖ *–ú–∞—Ä—à—Ä—É—Ç –Ω–∞—á–∞—Ç!*\n\n` +
        `üìä –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥: ${mileage} –∫–º\n` +
        `‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toLocaleTimeString('ru-RU')}\n\n` +
        `üéØ –°–ª–µ–¥—É–π—Ç–µ –∫ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞.`,
        { parse_mode: 'Markdown' }
      );
    } else {
      await bot.sendMessage(chatId,
        `‚úÖ –ü—Ä–æ–±–µ–≥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: ${mileage} –∫–º`,
        { parse_mode: 'Markdown' }
      );
    }

    await fsmManager.clearUserState(userId);
    await showDriverMenu(bot, msg);

    return true;
  } catch (error) {
    global.logger.error('Handle mileage error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–±–µ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
    );
    return true;
  }
}

/**
 * –ó–∞–ø—Ä–∞–≤–∫–∞
 */
async function handleFuel(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    await fsmManager.setUserState(userId, DRIVER_STATES.WAITING_FUEL_PHOTO);
    await fsmManager.setUserData(userId, {
      action: 'fuel_check'
    });

    await bot.editMessageText(
      `‚õΩ *–§–∏–∫—Å–∞—Ü–∏—è –∑–∞–ø—Ä–∞–≤–∫–∏*\n\n` +
      `üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —á–µ–∫ –∑–∞–ø—Ä–∞–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'driver_cancel' }]
          ]
        }
      }
    );

    await bot.answerCallbackQuery(callbackQuery.id);

  } catch (error) {
    global.logger.error('Handle fuel error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–∞–≤–∫–∏',
      show_alert: true
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∑–∞–ø—Ä–∞–≤–∫–∏
 */
async function handleFuelPhoto(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== DRIVER_STATES.WAITING_FUEL_PHOTO) {
      return false;
    }

    if (!msg.photo || msg.photo.length === 0) {
      await bot.sendMessage(chatId,
        `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∑–∞–ø—Ä–∞–≤–∫–∏.`
      );
      return true;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    const photo = msg.photo[msg.photo.length - 1];
    const fileInfo = await bot.getFile(photo.file_id);
    const photoUrl = `https://api.telegram.org/file/bot${bot.token}/${fileInfo.file_path}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∑–∞–ø—Ä–∞–≤–∫–∏
    await global.apiClient.post('/driver-logs', {
      type: 'FUEL_CHECK',
      description: '–ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
      photos: [photoUrl],
      metadata: {
        telegramFileId: photo.file_id,
        fileSize: photo.file_size
      }
    });

    await bot.sendMessage(chatId,
      `‚úÖ *–ó–∞–ø—Ä–∞–≤–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!*\n\n` +
      `üì∏ –§–æ—Ç–æ —á–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}`,
      { parse_mode: 'Markdown' }
    );

    await fsmManager.clearUserState(userId);
    await showDriverMenu(bot, { chat: { id: chatId }, from: { id: userId } });

    return true;
  } catch (error) {
    global.logger.error('Handle fuel photo error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
    );
    return true;
  }
}

/**
 * –ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ —Ç–æ—á–∫—É
 */
async function handleArrival(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    const activeRoute = await getActiveRoute(userId);
    
    if (!activeRoute || activeRoute.status !== 'IN_PROGRESS') {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞',
        show_alert: true
      });
      return;
    }

    const nextStop = await getNextStop(activeRoute.id);
    
    if (!nextStop) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏',
        show_alert: true
      });
      return;
    }

    await fsmManager.setUserState(userId, DRIVER_STATES.WAITING_GPS_LOCATION);
    await fsmManager.setUserData(userId, {
      routeId: activeRoute.id,
      stopId: nextStop.id,
      action: 'arrival'
    });

    await bot.editMessageText(
      `üìç *–ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ —Ç–æ—á–∫—É*\n\n` +
      `üéØ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ${nextStop.machine.name}\n` +
      `üìç –ê–¥—Ä–µ—Å: ${nextStop.machine.location?.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è:`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', callback_data: 'driver_send_location' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'driver_cancel' }]
          ]
        }
      }
    );

    await bot.answerCallbackQuery(callbackQuery.id);

  } catch (error) {
    global.logger.error('Handle arrival error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–±—ã—Ç–∏—è',
      show_alert: true
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ GPS –ª–æ–∫–∞—Ü–∏–∏
 */
async function handleGPSLocation(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== DRIVER_STATES.WAITING_GPS_LOCATION) {
      return false;
    }

    if (!msg.location) {
      await bot.sendMessage(chatId,
        `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.`,
        {
          reply_markup: {
            keyboard: [[{
              text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
              request_location: true
            }]],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        }
      );
      return true;
    }

    const { latitude, longitude } = msg.location;
    const userData = await fsmManager.getUserData(userId);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É
    await global.apiClient.patch(`/route-stops/${userData.stopId}`, {
      status: 'ARRIVED',
      arrivalTime: new Date().toISOString()
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º GPS –ª–æ–≥
    await global.apiClient.post('/driver-logs', {
      type: 'ARRIVAL',
      description: `–ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É`,
      latitude,
      longitude,
      metadata: {
        routeId: userData.routeId,
        stopId: userData.stopId
      }
    });

    await bot.sendMessage(chatId,
      `‚úÖ *–ü—Ä–∏–±—ã—Ç–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!*\n\n` +
      `üìç GPS: ${latitude.toFixed(6)}, ${longitude.toFixed(6)}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}\n\n` +
      `üîß –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∞–≤—Ç–æ–º–∞—Ç–∞.`,
      { 
        parse_mode: 'Markdown',
        reply_markup: { remove_keyboard: true }
      }
    );

    await fsmManager.clearUserState(userId);
    await showDriverMenu(bot, msg);

    return true;
  } catch (error) {
    global.logger.error('Handle GPS location error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
    );
    return true;
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
 */
async function completeStop(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    const activeRoute = await getActiveRoute(userId);
    
    if (!activeRoute || activeRoute.status !== 'IN_PROGRESS') {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞',
        show_alert: true
      });
      return;
    }

    const currentStop = await getCurrentStop(activeRoute.id);
    
    if (!currentStop || currentStop.status !== 'ARRIVED') {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏',
        show_alert: true
      });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É
    await global.apiClient.patch(`/route-stops/${currentStop.id}`, {
      status: 'COMPLETED',
      departureTime: new Date().toISOString()
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –æ—Ç—ä–µ–∑–¥–∞
    await global.apiClient.post('/driver-logs', {
      type: 'DEPARTURE',
      description: `–û—Ç—ä–µ–∑–¥ —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏`,
      metadata: {
        routeId: activeRoute.id,
        stopId: currentStop.id
      }
    });

    await bot.editMessageText(
      `‚úÖ *–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n` +
      `üéØ ${currentStop.machine.name}\n` +
      `‚è∞ –í—Ä–µ–º—è –æ—Ç—ä–µ–∑–¥–∞: ${new Date().toLocaleTimeString('ru-RU')}\n\n` +
      `üöõ –°–ª–µ–¥—É–π—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞.`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown'
      }
    );

    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    setTimeout(() => {
      showDriverMenu(bot, { chat: { id: chatId }, from: { id: userId } });
    }, 2000);

  } catch (error) {
    global.logger.error('Complete stop error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏',
      show_alert: true
    });
  }
}

/**
 * –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
 */
async function cancelAction(bot, callbackQuery) {
  const userId = callbackQuery.from.id;
  
  try {
    await fsmManager.clearUserState(userId);
    
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
    });

    await showDriverMenu(bot, {
      chat: { id: callbackQuery.message.chat.id },
      from: { id: userId }
    });
  } catch (error) {
    global.logger.error('Cancel action error:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async function getUserInfo(userId) {
  try {
    const response = await global.apiClient.get('/auth/me');
    return response.data.data;
  } catch (error) {
    return null;
  }
}

async function getActiveRoute(userId) {
  try {
    const response = await global.apiClient.get(`/routes?driverId=${userId}&status=PLANNED,IN_PROGRESS`);
    return response.data.data[0] || null;
  } catch (error) {
    return null;
  }
}

async function getNextStop(routeId) {
  try {
    const response = await global.apiClient.get(`/route-stops?routeId=${routeId}&status=PENDING&limit=1`);
    return response.data.data[0] || null;
  } catch (error) {
    return null;
  }
}

async function getCurrentStop(routeId) {
  try {
    const response = await global.apiClient.get(`/route-stops?routeId=${routeId}&status=ARRIVED&limit=1`);
    return response.data.data[0] || null;
  } catch (error) {
    return null;
  }
}

function getRouteStatusText(status) {
  const statusMap = {
    'PLANNED': 'üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
    'IN_PROGRESS': 'üöõ –í –ø—É—Ç–∏',
    'COMPLETED': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
    'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
  };
  return statusMap[status] || status;
}

module.exports = {
  showDriverMenu,
  startRoute,
  handleMileage,
  handleFuel,
  handleFuelPhoto,
  handleArrival,
  handleGPSLocation,
  completeStop,
  cancelAction,
  DRIVER_STATES
};
