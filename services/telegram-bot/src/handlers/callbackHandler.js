const registrationHandler = require('./registrationHandler.js');
const driverHandler = require('./driverHandler.js');
const warehouseHandler = require('./warehouseHandler.js');
const operatorHandler = require('./operatorHandler.js');
const { TechnicianHandler } = require('./technicianHandler.js');

// Initialize TechnicianHandler
let technicianHandler;
try {
  technicianHandler = new TechnicianHandler(null, null); // bot and prisma will be set when needed
} catch (error) {
  console.error('Failed to initialize TechnicianHandler:', error);
}

async function handleCallbackQuery(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  try {
    // FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (data.startsWith('approve_user:') || data.startsWith('reject_user:')) {
      if (data.startsWith('approve_user:')) {
        await registrationHandler.approveUser(bot, callbackQuery);
      } else {
        await registrationHandler.rejectUser(bot, callbackQuery);
      }
      return;
    }

    // Driver FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (data.startsWith('driver_')) {
      switch (data) {
        case 'driver_start_route':
          await driverHandler.startRoute(bot, callbackQuery);
          return;
        case 'driver_fuel':
          await driverHandler.handleFuel(bot, callbackQuery);
          return;
        case 'driver_arrived':
          await driverHandler.handleArrival(bot, callbackQuery);
          return;
        case 'driver_complete_stop':
          await driverHandler.completeStop(bot, callbackQuery);
          return;
        case 'driver_cancel':
          await driverHandler.cancelAction(bot, callbackQuery);
          return;
        default:
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–§—É–Ω–∫—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            show_alert: false
          });
          return;
      }
    }

    // Warehouse FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (data.startsWith('warehouse_')) {
      switch (data) {
        case 'warehouse_receive':
          await warehouseHandler.receiveItems(bot, callbackQuery);
          return;
        case 'warehouse_fill_bunker':
          await warehouseHandler.fillBunker(bot, callbackQuery);
          return;
        case 'warehouse_weigh':
          await warehouseHandler.weighItems(bot, callbackQuery);
          return;
        case 'warehouse_cancel':
          await warehouseHandler.cancelAction(bot, callbackQuery);
          return;
        default:
          if (data.startsWith('warehouse_select_bunker:')) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—É–Ω–∫–µ—Ä–∞
            await bot.answerCallbackQuery(callbackQuery.id, {
              text: '–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –±—É–Ω–∫–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
              show_alert: false
            });
            return;
          }
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–§—É–Ω–∫—Ü–∏—è —Å–∫–ª–∞–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            show_alert: false
          });
          return;
      }
    }

    // Operator FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (data.startsWith('operator_')) {
      switch (data) {
        case 'operator_select_machine':
          await operatorHandler.selectMachine(bot, callbackQuery);
          return;
        case 'operator_install_bunker':
          await operatorHandler.installBunker(bot, callbackQuery);
          return;
        case 'operator_set_remains':
          await operatorHandler.setRemains(bot, callbackQuery);
          return;
        case 'operator_report_problem':
          await operatorHandler.reportProblem(bot, callbackQuery);
          return;
        case 'operator_cancel':
          await operatorHandler.cancelAction(bot, callbackQuery);
          return;
        default:
          if (data.startsWith('operator_machine_selected:')) {
            await operatorHandler.handleMachineSelection(bot, callbackQuery);
            return;
          }
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–§—É–Ω–∫—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            show_alert: false
          });
          return;
      }
    }

    // Technician FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (data.startsWith('tech_') && technicianHandler) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bot –¥–ª—è technicianHandler –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      if (!technicianHandler.bot) {
        technicianHandler.bot = bot;
      }

      const userId = callbackQuery.from.id;
      
      switch (true) {
        case data === 'tech_start_maintenance':
          await technicianHandler.startMaintenance(chatId, userId);
          return;
        case data === 'tech_checklists':
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ù–∞—á–∞—Ç—å –¢–û" –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏',
            show_alert: false
          });
          return;
        case data === 'tech_parts_replacement':
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¢–û –¥–ª—è –∑–∞–º–µ–Ω—ã –¥–µ—Ç–∞–ª–µ–π',
            show_alert: false
          });
          return;
        case data === 'tech_reports':
          await technicianHandler.showReports(chatId, userId);
          return;
        case data === 'tech_report_problem':
          await technicianHandler.reportProblem(chatId, userId);
          return;
        case data.startsWith('tech_select_machine_'):
          const machineId = data.split('_')[3];
          await technicianHandler.selectMachineForMaintenance(chatId, userId, machineId);
          return;
        case data.startsWith('tech_start_checklist_'):
          const taskId = data.split('_')[3];
          await technicianHandler.startChecklist(chatId, userId, taskId);
          return;
        case data.startsWith('tech_parts_'):
          const partsTaskId = data.split('_')[2];
          await technicianHandler.reportPartReplacement(chatId, userId, partsTaskId);
          return;
        case data.startsWith('tech_complete_'):
          const completeTaskId = data.split('_')[2];
          await technicianHandler.completeMaintenanceReport(chatId, userId, completeTaskId);
          return;
        case data.startsWith('tech_check_ok_'):
          const [, , , itemId, itemIndex] = data.split('_');
          await technicianHandler.handleChecklistItem(chatId, userId, itemId, itemIndex, 'COMPLETED');
          return;
        case data.startsWith('tech_check_issue_'):
          const [, , , issueItemId, issueItemIndex] = data.split('_');
          await technicianHandler.handleChecklistItem(chatId, userId, issueItemId, issueItemIndex, 'ISSUE');
          return;
        case data.startsWith('tech_check_skip_'):
          const [, , , skipItemId, skipItemIndex] = data.split('_');
          await technicianHandler.handleChecklistItem(chatId, userId, skipItemId, skipItemIndex, 'SKIPPED');
          return;
        default:
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–§—É–Ω–∫—Ü–∏—è —Ç–µ—Ö–Ω–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            show_alert: false
          });
          return;
      }
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await bot.answerCallbackQuery(callbackQuery.id);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ
    switch (data) {
      // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      case 'menu_machines':
        await bot.sendMessage(chatId, 'üè≠ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–∞—Ç–∞—Ö...');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å handleMachines
        break;
        
      case 'menu_inventory':
        await bot.sendMessage(chatId, 'üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–µ...');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å handleInventory
        break;
        
      case 'menu_tasks':
        await bot.sendMessage(chatId, 'üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å handleTasks
        break;
        
      case 'menu_reports':
        await bot.sendMessage(chatId, 'üìä –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤...');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å handleReports
        break;

      // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–Ω—é —Ä–æ–ª–µ–π
      case 'menu_driver':
        await driverHandler.showDriverMenu(bot, { chat: { id: chatId }, from: { id: callbackQuery.from.id } });
        break;

      case 'menu_warehouse':
        await warehouseHandler.showWarehouseMenu(bot, { chat: { id: chatId }, from: { id: callbackQuery.from.id } });
        break;

      case 'menu_operator':
        await operatorHandler.showOperatorMenu(bot, { chat: { id: chatId }, from: { id: callbackQuery.from.id } });
        break;

      case 'menu_technician':
        if (technicianHandler) {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bot –¥–ª—è technicianHandler –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          if (!technicianHandler.bot) {
            technicianHandler.bot = bot;
          }
          await technicianHandler.showTechnicianMenu(chatId, callbackQuery.from.id);
        } else {
          await bot.sendMessage(chatId, 'üîß –ú–µ–Ω—é —Ç–µ—Ö–Ω–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ...');
        }
        break;

      case 'technician_menu':
        if (technicianHandler) {
          if (!technicianHandler.bot) {
            technicianHandler.bot = bot;
          }
          await technicianHandler.showTechnicianMenu(chatId, callbackQuery.from.id);
        } else {
          await bot.sendMessage(chatId, 'üîß –ú–µ–Ω—é —Ç–µ—Ö–Ω–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ...');
        }
        break;

      case 'main_menu':
        // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try {
          const userResponse = await global.apiClient.get('/auth/me');
          if (userResponse.data.success) {
            const { showMainMenu } = require('./startHandler');
            await showMainMenu(bot, chatId, userResponse.data.data.roles, userResponse.data.data);
          }
        } catch (error) {
          await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é');
        }
        break;
        
      case 'menu_settings':
        await bot.sendMessage(chatId, '‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        const { handleSettings } = require('./settingsHandler');
        await handleSettings(bot, callbackQuery.message);
        break;
        
      case 'settings_link_account':
        const { handleLinkAccount } = require('./settingsHandler');
        await handleLinkAccount(bot, callbackQuery.message);
        break;
        
      case 'menu_support':
        await bot.sendMessage(chatId, 
          'üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ VHM24 - 24/7*\n\n' +
          'üïê –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ!\n\n' +
          'üìß Email: support@vhm24.uz\n' +
          'üì± Telegram: @vhm24_support\n' +
          '‚òéÔ∏è –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è: +998 71 XXX-XX-XX\n\n' +
          'üö® –î–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ"',
          { parse_mode: 'Markdown' }
        );
        break;
        
      case 'menu_urgent':
        await bot.sendMessage(chatId, 
          'üö® *–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–í–Ø–ó–¨*\n\n' +
          '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö!\n\n' +
          'üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è: +998 71 XXX-XX-XX\n' +
          'üì± –î–µ–∂—É—Ä–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @vhm24_emergency\n\n' +
          '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.',
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üö® –ê–≤—Ç–æ–º–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', callback_data: 'urgent_machine_down' },
                  { text: 'üí∞ –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–Ω—å–≥–∞–º–∏', callback_data: 'urgent_money' }
                ],
                [
                  { text: 'üî• –ü–æ–∂–∞—Ä/–ß–°', callback_data: 'urgent_fire' },
                  { text: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞–≤–∞—Ä–∏—è', callback_data: 'urgent_tech' }
                ]
              ]
            }
          }
        );
        break;
        
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      case 'machines_refresh':
      case 'inventory_refresh':
      case 'tasks_refresh':
        await bot.sendMessage(chatId, 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
        break;
        
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      case 'machines_stats':
        await bot.sendMessage(chatId, 
          'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–æ–≤*\n\n' +
          'üü¢ –û–Ω–ª–∞–π–Ω: 12\n' +
          'üî¥ –û—Ñ–ª–∞–π–Ω: 3\n' +
          'üü° –ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏: 1\n' +
          'üö® –° –æ—à–∏–±–∫–∞–º–∏: 2\n\n' +
          'üìà –û–±—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: 85%\n' +
          'üí∞ –í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è: 1,250,000 —Å—É–º',
          { parse_mode: 'Markdown' }
        );
        break;
        
      default:
        await bot.sendMessage(chatId, '‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        break;
    }
  } catch (error) {
    global.logger.error('Callback handler error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞',
      show_alert: true
    });
  }
}

module.exports = { handleCallbackQuery };
