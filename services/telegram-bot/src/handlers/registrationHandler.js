/**
 * VHM24 Registration Handler with FSM
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
 */

const fsmManager = require('../fsm/manager');
const { REGISTRATION_STATES, COMMON_STATES } = require('../fsm/states');

/**
 * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
async function startRegistration(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const response = await global.apiClient.post('/auth/login', {
      telegramId: userId.toString()
    });

    if (response.data.success) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      global.userTokens.set(userId, response.data.token);
      global.currentUserId = userId;
      
      await bot.sendMessage(chatId, 
        `‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ VHM24!\n\n` +
        `üë§ ${response.data.user.name}\n` +
        `üîë –†–æ–ª–∏: ${response.data.user.roles.join(', ')}\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.`,
        { parse_mode: 'Markdown' }
      );
      
      await fsmManager.setUserState(userId, COMMON_STATES.IDLE);
      return;
    }
  } catch (error) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
  }

  // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  await fsmManager.setUserData(userId, {
    username,
    telegramId: userId.toString(),
    telegramUsername: msg.from.username || null,
    startTime: new Date().toISOString()
  });

  await fsmManager.setUserState(userId, REGISTRATION_STATES.WAITING_PHONE);

  await bot.sendMessage(chatId,
    `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VHM24!*\n\n` +
    `‚è∞ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ñ–µ–π–Ω—ã–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏ 24/7\n\n` +
    `üìã *–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:*\n` +
    `1Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n` +
    `2Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n` +
    `üì± *–®–∞–≥ 1:* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        keyboard: [[{
          text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
          request_contact: true
        }]],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    }
  );

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç
  await fsmManager.setStateTimeout(userId, 10 * 60 * 1000);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
 */
async function handlePhoneNumber(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== REGISTRATION_STATES.WAITING_PHONE) {
      return false; // –ù–µ –Ω–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }

    if (!msg.contact || msg.contact.user_id !== userId) {
      await bot.sendMessage(chatId,
        `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞".`,
        {
          reply_markup: {
            keyboard: [[{
              text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
              request_contact: true
            }]],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        }
      );
      return true;
    }

    const phoneNumber = msg.contact.phone_number;
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    let normalizedPhone = phoneNumber.replace(/\D/g, '');
    if (normalizedPhone.startsWith('998')) {
      normalizedPhone = '+' + normalizedPhone;
    } else if (normalizedPhone.startsWith('8')) {
      normalizedPhone = '+7' + normalizedPhone.substring(1);
    } else if (!normalizedPhone.startsWith('+')) {
      normalizedPhone = '+' + normalizedPhone;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
    try {
      const existingUser = await global.apiClient.post('/auth/login', {
        phoneNumber: normalizedPhone
      });
      
      if (existingUser.data.success) {
        await bot.sendMessage(chatId,
          `‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n` +
          `–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.`,
          { reply_markup: { remove_keyboard: true } }
        );
        await fsmManager.clearUserState(userId);
        return true;
      }
    } catch (error) {
      // –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await fsmManager.updateUserData(userId, {
      phoneNumber: normalizedPhone,
      firstName: msg.from.first_name || '',
      lastName: msg.from.last_name || ''
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = await fsmManager.getUserData(userId);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ API
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const apiData = {
        telegramId: userId.toString(),
        telegramUsername: userData.telegramUsername,
        name: `${userData.firstName} ${userData.lastName}`.trim() || userData.username,
        phoneNumber: userData.phoneNumber,
        email: `telegram_${userId}@vhm24.local`, // –í—Ä–µ–º–µ–Ω–Ω—ã–π email
        roles: ['OPERATOR'] // –†–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = await global.apiClient.post('/users', apiData);

      if (response.data.success) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const loginResponse = await global.apiClient.post('/auth/login', {
          telegramId: userId.toString()
        });

        if (loginResponse.data.success) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          global.userTokens.set(userId, loginResponse.data.token);
          global.currentUserId = userId;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
          await fsmManager.setUserState(userId, REGISTRATION_STATES.WAITING_ADMIN_APPROVAL);
          await fsmManager.updateUserData(userId, {
            userId: response.data.data.id,
            registrationCompleted: true
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await bot.sendMessage(chatId,
            `‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n` +
            `üë§ –ò–º—è: ${response.data.data.name}\n` +
            `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${userData.phoneNumber}\n` +
            `üÜî Telegram: @${userData.telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
            `üÜî ID: ${response.data.data.id}\n\n` +
            `‚è≥ *–û–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n` +
            `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è. ` +
            `–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n` +
            `üìû –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
            { 
              parse_mode: 'Markdown',
              reply_markup: { remove_keyboard: true }
            }
          );

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
          await notifyAdminsAboutNewUser(bot, response.data.data, userData);
        } else {
          throw new Error('Failed to login after registration');
        }
      } else {
        throw new Error(response.data.error || 'Registration failed');
      }
    } catch (error) {
      global.logger.error('Registration API error:', error);
      await bot.sendMessage(chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
        { reply_markup: { remove_keyboard: true } }
      );
      await fsmManager.clearUserState(userId);
    }

    return true;
  } catch (error) {
    global.logger.error('Registration phone error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
      { reply_markup: { remove_keyboard: true } }
    );
    return true;
  }
}

/**
 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
async function notifyAdminsAboutNewUser(bot, user, userData) {
  try {
    const adminIds = global.config.adminIds || [];
    
    const message = 
      `üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é*\n\n` +
      `üë§ –ò–º—è: ${user.name}\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${userData.phoneNumber}\n` +
      `üÜî Telegram: @${userData.telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî User ID: ${user.id}\n` +
      `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}\n\n` +
      `–û–¥–æ–±—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?`;

    for (const adminId of adminIds) {
      try {
        await bot.sendMessage(adminId, message, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_user:${user.id}` },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_user:${user.id}` }
              ],
              [
                { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: `user_profile:${user.id}` }
              ]
            ]
          }
        });
      } catch (error) {
        global.logger.error(`Failed to notify admin ${adminId}:`, error);
      }
    }
  } catch (error) {
    global.logger.error('Failed to notify admins:', error);
  }
}

/**
 * –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
async function approveUser(bot, callbackQuery) {
  const adminId = callbackQuery.from.id;
  const userId = callbackQuery.data.split(':')[1];

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!global.config.adminIds.includes(adminId.toString())) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        show_alert: true
      });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await global.apiClient.patch(`/users/${userId}`, {
      registrationStatus: 'APPROVED',
      isActive: true
    });

    if (response.data.success) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FSM
      const usersInWaiting = await fsmManager.getUsersInState(REGISTRATION_STATES.WAITING_ADMIN_APPROVAL);
      let targetTelegramId = null;

      for (const telegramId of usersInWaiting) {
        const userData = await fsmManager.getUserData(telegramId);
        if (userData.userId === userId) {
          targetTelegramId = telegramId;
          break;
        }
      }

      if (targetTelegramId) {
        await fsmManager.setUserState(targetTelegramId, REGISTRATION_STATES.COMPLETED);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.sendMessage(targetTelegramId,
          `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!*\n\n` +
          `‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ VHM24 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n` +
          `üîë –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`,
          { parse_mode: 'Markdown' }
        );

        await fsmManager.clearUserState(targetTelegramId);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await bot.editMessageText(
        callbackQuery.message.text + `\n\n‚úÖ *–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*`,
        {
          chat_id: callbackQuery.message.chat.id,
          message_id: callbackQuery.message.message_id,
          parse_mode: 'Markdown'
        }
      );

      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω'
      });

    } else {
      throw new Error('Failed to approve user');
    }
  } catch (error) {
    global.logger.error('Approve user error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      show_alert: true
    });
  }
}

/**
 * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
async function rejectUser(bot, callbackQuery) {
  const adminId = callbackQuery.from.id;
  const userId = callbackQuery.data.split(':')[1];

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!global.config.adminIds.includes(adminId.toString())) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        show_alert: true
      });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await global.apiClient.patch(`/users/${userId}`, {
      registrationStatus: 'REJECTED',
      isActive: false
    });

    if (response.data.success) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FSM
      const usersInWaiting = await fsmManager.getUsersInState(REGISTRATION_STATES.WAITING_ADMIN_APPROVAL);
      let targetTelegramId = null;

      for (const telegramId of usersInWaiting) {
        const userData = await fsmManager.getUserData(telegramId);
        if (userData.userId === userId) {
          targetTelegramId = telegramId;
          break;
        }
      }

      if (targetTelegramId) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.sendMessage(targetTelegramId,
          `‚ùå *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n\n` +
          `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n` +
          `üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
        );

        await fsmManager.clearUserState(targetTelegramId);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await bot.editMessageText(
        callbackQuery.message.text + `\n\n‚ùå *–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*`,
        {
          chat_id: callbackQuery.message.chat.id,
          message_id: callbackQuery.message.message_id,
          parse_mode: 'Markdown'
        }
      );

      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω'
      });

    } else {
      throw new Error('Failed to reject user');
    }
  } catch (error) {
    global.logger.error('Reject user error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      show_alert: true
    });
  }
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function handlePassword(bot, msg) {
  return false; // –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
}

module.exports = {
  startRegistration,
  handlePhoneNumber,
  handlePassword, // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  approveUser,
  rejectUser,
  REGISTRATION_STATES
};
