// Settings command handler
import { getUserData, setUserData } from '../utils/auth.js';

export async function handleSettings(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const userData = getUserData(userId);
  
  // Get current settings
  const settings = userData?.settings || {
    notifications: true,
    language: 'en',
    timezone: 'UTC',
    reportFormat: 'excel'
  };
  
  let message = '‚öôÔ∏è *Settings*\n\n';
  message += `üîî Notifications: ${settings.notifications ? 'Enabled' : 'Disabled'}\n`;
  message += `üåê Language: ${getLanguageName(settings.language)}\n`;
  message += `üïê Timezone: ${settings.timezone}\n`;
  message += `üìÑ Report Format: ${settings.reportFormat.toUpperCase()}\n`;
  
  const keyboard = [
    [
      { 
        text: settings.notifications ? 'üîï Disable Notifications' : 'üîî Enable Notifications', 
        callback_data: 'settings_toggle_notifications' 
      }
    ],
    [
      { text: 'üåê Change Language', callback_data: 'settings_language' },
      { text: 'üïê Change Timezone', callback_data: 'settings_timezone' }
    ],
    [
      { text: 'üìÑ Report Format', callback_data: 'settings_report_format' },
      { text: 'üîê Security', callback_data: 'settings_security' }
    ],
    [
      { text: 'üë§ Profile', callback_data: 'settings_profile' },
      { text: 'üì± Connected Devices', callback_data: 'settings_devices' }
    ],
    [
      { text: 'üîÑ Reset Settings', callback_data: 'settings_reset' }
    ],
    [
      { text: 'üè† Main Menu', callback_data: 'main_menu' }
    ]
  ];
  
  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
}

export async function toggleNotifications(bot, chatId) {
  const userId = chatId; // Using chatId as userId
  const userData = getUserData(userId) || {};
  const settings = userData.settings || {};
  
  // Toggle notifications
  settings.notifications = !settings.notifications;
  userData.settings = settings;
  setUserData(userId, userData);
  
  await bot.sendMessage(chatId, 
    settings.notifications 
      ? 'üîî Notifications have been enabled!' 
      : 'üîï Notifications have been disabled!',
    {
      reply_markup: {
        inline_keyboard: [[
          { text: '‚¨ÖÔ∏è Back to Settings', callback_data: 'menu_settings' }
        ]]
      }
    }
  );
}

export async function showLanguageSelection(bot, chatId) {
  const languages = [
    { code: 'en', name: 'English', flag: 'üá¨üáß' },
    { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'uz', name: "O'zbek", flag: 'üá∫üáø' },
    { code: 'kz', name: '“ö–∞–∑–∞“õ', flag: 'üá∞üáø' }
  ];
  
  const keyboard = languages.map(lang => [{
    text: `${lang.flag} ${lang.name}`,
    callback_data: `settings_set_language_${lang.code}`
  }]);
  
  keyboard.push([
    { text: '‚ùå Cancel', callback_data: 'menu_settings' }
  ]);
  
  await bot.sendMessage(chatId, 
    'üåê *Select Language*\n\n' +
    'Choose your preferred language:',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    }
  );
}

export async function showTimezoneSelection(bot, chatId) {
  const timezones = [
    { name: 'UTC', offset: '+00:00' },
    { name: 'Moscow', offset: '+03:00' },
    { name: 'Tashkent', offset: '+05:00' },
    { name: 'Almaty', offset: '+06:00' },
    { name: 'Bangkok', offset: '+07:00' },
    { name: 'Singapore', offset: '+08:00' }
  ];
  
  const keyboard = [];
  for (let i = 0; i < timezones.length; i += 2) {
    const row = [];
    row.push({
      text: `${timezones[i].name} (${timezones[i].offset})`,
      callback_data: `settings_set_timezone_${timezones[i].name}`
    });
    
    if (i + 1 < timezones.length) {
      row.push({
        text: `${timezones[i + 1].name} (${timezones[i + 1].offset})`,
        callback_data: `settings_set_timezone_${timezones[i + 1].name}`
      });
    }
    
    keyboard.push(row);
  }
  
  keyboard.push([
    { text: '‚ùå Cancel', callback_data: 'menu_settings' }
  ]);
  
  await bot.sendMessage(chatId, 
    'üïê *Select Timezone*\n\n' +
    'Choose your timezone:',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    }
  );
}

export async function showReportFormatSelection(bot, chatId) {
  await bot.sendMessage(chatId, 
    'üìÑ *Report Format*\n\n' +
    'Choose your preferred format for exported reports:',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìä Excel (.xlsx)', callback_data: 'settings_format_excel' },
            { text: 'üìÑ PDF', callback_data: 'settings_format_pdf' }
          ],
          [
            { text: 'üìã CSV', callback_data: 'settings_format_csv' },
            { text: 'üìù JSON', callback_data: 'settings_format_json' }
          ],
          [
            { text: '‚ùå Cancel', callback_data: 'menu_settings' }
          ]
        ]
      }
    }
  );
}

export async function showSecuritySettings(bot, chatId) {
  const userData = getUserData(chatId);
  
  let message = 'üîê *Security Settings*\n\n';
  message += `üîë Two-Factor Auth: ${userData?.twoFactorEnabled ? 'Enabled ‚úÖ' : 'Disabled ‚ùå'}\n`;
  message += `üì± Active Sessions: ${userData?.activeSessions || 1}\n`;
  message += `üïê Last Login: ${userData?.lastLogin || 'Now'}\n`;
  
  const keyboard = [
    [
      { 
        text: userData?.twoFactorEnabled ? 'üîì Disable 2FA' : 'üîê Enable 2FA', 
        callback_data: 'settings_toggle_2fa' 
      }
    ],
    [
      { text: 'üîë Change Password', callback_data: 'settings_change_password' },
      { text: 'üì± Manage Sessions', callback_data: 'settings_sessions' }
    ],
    [
      { text: 'üìã Login History', callback_data: 'settings_login_history' },
      { text: 'üö´ Blocked Users', callback_data: 'settings_blocked' }
    ],
    [
      { text: '‚¨ÖÔ∏è Back to Settings', callback_data: 'menu_settings' }
    ]
  ];
  
  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
}

export async function showProfile(bot, chatId) {
  const userData = getUserData(chatId);
  
  if (!userData) {
    await bot.sendMessage(chatId, '‚ùå Profile data not found.');
    return;
  }
  
  let message = 'üë§ *Your Profile*\n\n';
  message += `üë§ Name: ${userData.name || 'Not set'}\n`;
  message += `üìß Email: ${userData.email || 'Not set'}\n`;
  message += `üì± Phone: ${userData.phone || 'Not set'}\n`;
  message += `üë∑ Role: ${userData.role || 'User'}\n`;
  message += `üè¢ Company: ${userData.company || 'Not set'}\n`;
  message += `üìÖ Member Since: ${userData.createdAt ? new Date(userData.createdAt).toLocaleDateString() : 'Unknown'}\n`;
  
  const keyboard = [
    [
      { text: '‚úèÔ∏è Edit Profile', callback_data: 'settings_edit_profile' }
    ],
    [
      { text: 'üì∏ Change Avatar', callback_data: 'settings_avatar' },
      { text: 'üìß Verify Email', callback_data: 'settings_verify_email' }
    ],
    [
      { text: '‚¨ÖÔ∏è Back to Settings', callback_data: 'menu_settings' }
    ]
  ];
  
  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
}

function getLanguageName(code) {
  const languages = {
    'en': 'English',
    'ru': '–†—É—Å—Å–∫–∏–π',
    'uz': "O'zbek",
    'kz': '“ö–∞–∑–∞“õ'
  };
  
  return languages[code] || code;
}

export async function updateSetting(bot, chatId, setting, value) {
  const userId = chatId;
  const userData = getUserData(userId) || {};
  const settings = userData.settings || {};
  
  settings[setting] = value;
  userData.settings = settings;
  setUserData(userId, userData);
  
  let successMessage = '‚úÖ Setting updated successfully!';
  
  switch (setting) {
    case 'language':
      successMessage = `‚úÖ Language changed to ${getLanguageName(value)}`;
      break;
    case 'timezone':
      successMessage = `‚úÖ Timezone changed to ${value}`;
      break;
    case 'reportFormat':
      successMessage = `‚úÖ Report format changed to ${value.toUpperCase()}`;
      break;
  }
  
  await bot.sendMessage(chatId, successMessage, {
    reply_markup: {
      inline_keyboard: [[
        { text: '‚¨ÖÔ∏è Back to Settings', callback_data: 'menu_settings' }
      ]]
    }
  });
}
