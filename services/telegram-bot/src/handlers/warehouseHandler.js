/**
 * VHM24 Warehouse Handler with FSM
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–ª–∞–¥—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –∏ —Ñ–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏–∏
 */

const fsmManager = require('../fsm/manager');
const { WAREHOUSE_STATES, COMMON_STATES } = require('../fsm/states');

/**
 * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
 */
async function showWarehouseMenu(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userInfo = await getUserInfo(userId);
    if (!userInfo || !userInfo.roles.includes('WAREHOUSE')) {
      await bot.sendMessage(chatId,
        `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
      );
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–ª–∞–¥–∞
    const stats = await getWarehouseStats();

    let message = `üì¶ *–ú–µ–Ω—é —Å–∫–ª–∞–¥–∞*\n\n`;
    message += `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${stats.totalItems || 0}\n`;
    message += `‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏: ${stats.lowStock || 0}\n`;
    message += `üì• –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: ${stats.todayReceived || 0}\n`;
    message += `üì§ –û—Ç–≥—Ä—É–∂–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.todayShipped || 0}\n\n`;

    const keyboards = [
      [
        { text: 'üì• –ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–∞', callback_data: 'warehouse_receive' },
        { text: 'üì§ –û—Ç–≥—Ä—É–∑–∫–∞', callback_data: 'warehouse_ship' }
      ],
      [
        { text: 'üóÉÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –±—É–Ω–∫–µ—Ä', callback_data: 'warehouse_fill_bunker' },
        { text: '‚öñÔ∏è –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ', callback_data: 'warehouse_weigh' }
      ],
      [
        { text: 'üìã –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è', callback_data: 'warehouse_inventory' },
        { text: 'üìä –û—Å—Ç–∞—Ç–∫–∏', callback_data: 'warehouse_stock' }
      ],
      [
        { text: 'üì∏ –§–æ—Ç–æ –æ—Ç—á—ë—Ç', callback_data: 'warehouse_photo_report' },
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'warehouse_refresh' }
      ],
      [
        { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ];

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboards
      }
    });

  } catch (error) {
    global.logger.error('Warehouse menu error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
  }
}

/**
 * –ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–∞
 */
async function receiveItems(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    await fsmManager.setUserState(userId, WAREHOUSE_STATES.WAITING_ITEM_SCAN);
    await fsmManager.setUserData(userId, {
      action: 'receive_items',
      items: []
    });

    await bot.editMessageText(
      `üì• *–ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–∞*\n\n` +
      `üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:\n\n` +
      `üí° *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*\n` +
      `‚Ä¢ –®—Ç—Ä–∏—Ö-–∫–æ–¥ (—Ñ–æ—Ç–æ)\n` +
      `‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª (—Ç–µ–∫—Å—Ç)\n` +
      `‚Ä¢ QR-–∫–æ–¥ (—Ñ–æ—Ç–æ)`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì∏ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥', callback_data: 'warehouse_scan_barcode' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'warehouse_cancel' }]
          ]
        }
      }
    );

    await bot.answerCallbackQuery(callbackQuery.id);

  } catch (error) {
    global.logger.error('Receive items error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø—Ä–∏—ë–º–∞ —Ç–æ–≤–∞—Ä–∞',
      show_alert: true
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
 */
async function handleItemScan(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== WAREHOUSE_STATES.WAITING_ITEM_SCAN) {
      return false;
    }

    let itemCode = null;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—à—Ç—Ä–∏—Ö-–∫–æ–¥/QR-–∫–æ–¥)
    if (msg.photo) {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
      await bot.sendMessage(chatId,
        `üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞...\n\n` +
        `‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é:`
      );
      return true;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–∞—Ä—Ç–∏–∫—É–ª)
    if (msg.text) {
      itemCode = msg.text.trim();
    }

    if (!itemCode) {
      await bot.sendMessage(chatId,
        `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞.`
      );
      return true;
    }

    // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ
    const item = await findItemByCode(itemCode);
    
    if (!item) {
      await bot.sendMessage(chatId,
        `‚ùå –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º "${itemCode}" –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n` +
        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
      );
      return true;
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await fsmManager.setUserState(userId, WAREHOUSE_STATES.WAITING_QUANTITY_INPUT);
    await fsmManager.updateUserData(userId, {
      currentItem: item
    });

    await bot.sendMessage(chatId,
      `‚úÖ *–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω:*\n\n` +
      `üì¶ ${item.name}\n` +
      `üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª: ${item.sku}\n` +
      `üìä –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${item.quantity} ${item.unit}\n\n` +
      `üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏—ë–º–∞:`,
      { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'warehouse_cancel' }]
          ]
        }
      }
    );

    return true;
  } catch (error) {
    global.logger.error('Handle item scan error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
    );
    return true;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
 */
async function handleQuantityInput(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== WAREHOUSE_STATES.WAITING_QUANTITY_INPUT) {
      return false;
    }

    const quantityText = msg.text;
    const quantity = parseFloat(quantityText);

    if (isNaN(quantity) || quantity <= 0) {
      await bot.sendMessage(chatId,
        `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 5.5):`
      );
      return true;
    }

    const userData = await fsmManager.getUserData(userId);
    const item = userData.currentItem;

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await fsmManager.setUserState(userId, WAREHOUSE_STATES.WAITING_BUNKER_PHOTO);
    await fsmManager.updateUserData(userId, {
      quantity: quantity
    });

    await bot.sendMessage(chatId,
      `üìù *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞:*\n\n` +
      `üì¶ –¢–æ–≤–∞—Ä: ${item.name}\n` +
      `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} ${item.unit}\n\n` +
      `üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:`,
      { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ', callback_data: 'warehouse_accept_no_photo' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'warehouse_cancel' }]
          ]
        }
      }
    );

    return true;
  } catch (error) {
    global.logger.error('Handle quantity input error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
    );
    return true;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 */
async function handleConfirmationPhoto(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== WAREHOUSE_STATES.WAITING_BUNKER_PHOTO) {
      return false;
    }

    if (!msg.photo || msg.photo.length === 0) {
      await bot.sendMessage(chatId,
        `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`
      );
      return true;
    }

    const userData = await fsmManager.getUserData(userId);
    const item = userData.currentItem;
    const quantity = userData.quantity;

    // –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ
    const photo = msg.photo[msg.photo.length - 1];
    const fileInfo = await bot.getFile(photo.file_id);
    const photoUrl = `https://api.telegram.org/file/bot${bot.token}/${fileInfo.file_path}`;

    // –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    const stockMovement = await global.apiClient.post('/stock-movements', {
      itemId: item.id,
      type: 'IN',
      quantity: quantity,
      reason: '–ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥',
      reference: `Telegram-${Date.now()}`,
      metadata: {
        telegramUserId: userId,
        photoUrl: photoUrl,
        telegramFileId: photo.file_id
      }
    });

    if (stockMovement.data.success) {
      await bot.sendMessage(chatId,
        `‚úÖ *–¢–æ–≤–∞—Ä –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥!*\n\n` +
        `üì¶ ${item.name}\n` +
        `üìä –ü—Ä–∏–Ω—è—Ç–æ: ${quantity} ${item.unit}\n` +
        `üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}\n\n` +
        `üÜî –ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: ${stockMovement.data.data.id}`,
        { parse_mode: 'Markdown' }
      );
    } else {
      throw new Error('Failed to create stock movement');
    }

    await fsmManager.clearUserState(userId);
    await showWarehouseMenu(bot, msg);

    return true;
  } catch (error) {
    global.logger.error('Handle confirmation photo error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
    );
    return true;
  }
}

/**
 * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–Ω–∫–µ—Ä–∞
 */
async function fillBunker(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤
    const bunkers = await getAvailableBunkers();

    if (bunkers.length === 0) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤',
        show_alert: true
      });
      return;
    }

    let message = `üóÉÔ∏è *–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–Ω–∫–µ—Ä–∞*\n\n`;
    message += `–í—ã–±–µ—Ä–∏—Ç–µ –±—É–Ω–∫–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n`;

    const keyboards = [];
    bunkers.forEach((bunker, index) => {
      keyboards.push([{
        text: `üóÉÔ∏è ${bunker.machine.name} - ${bunker.item.name}`,
        callback_data: `warehouse_select_bunker:${bunker.id}`
      }]);
    });

    keyboards.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'warehouse_cancel' }]);

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: callbackQuery.message.message_id,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboards
      }
    });

    await bot.answerCallbackQuery(callbackQuery.id);

  } catch (error) {
    global.logger.error('Fill bunker error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—É–Ω–∫–µ—Ä–æ–≤',
      show_alert: true
    });
  }
}

/**
 * –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
 */
async function weighItems(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    await fsmManager.setUserState(userId, WAREHOUSE_STATES.WAITING_WEIGHT_INPUT);
    await fsmManager.setUserData(userId, {
      action: 'weigh_items'
    });

    await bot.editMessageText(
      `‚öñÔ∏è *–í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*\n\n` +
      `üìù –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:\n\n` +
      `üí° –ü—Ä–∏–º–µ—Ä—ã: 5.2, 10, 0.5`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'warehouse_cancel' }]
          ]
        }
      }
    );

    await bot.answerCallbackQuery(callbackQuery.id);

  } catch (error) {
    global.logger.error('Weigh items error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è',
      show_alert: true
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
 */
async function handleWeightInput(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== WAREHOUSE_STATES.WAITING_WEIGHT_INPUT) {
      return false;
    }

    const weightText = msg.text;
    const weight = parseFloat(weightText);

    if (isNaN(weight) || weight <= 0) {
      await bot.sendMessage(chatId,
        `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:`
      );
      return true;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
    const weighingResult = await global.apiClient.post('/warehouse-logs', {
      type: 'WEIGHING',
      description: `–í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${weight} –∫–≥`,
      weight: weight,
      metadata: {
        telegramUserId: userId,
        timestamp: new Date().toISOString()
      }
    });

    await bot.sendMessage(chatId,
      `‚úÖ *–í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n` +
      `‚öñÔ∏è –í–µ—Å: ${weight} –∫–≥\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}\n\n` +
      `üÜî –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: ${weighingResult.data.data?.id || 'N/A'}`,
      { parse_mode: 'Markdown' }
    );

    await fsmManager.clearUserState(userId);
    await showWarehouseMenu(bot, msg);

    return true;
  } catch (error) {
    global.logger.error('Handle weight input error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
    );
    return true;
  }
}

/**
 * –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
 */
async function cancelAction(bot, callbackQuery) {
  const userId = callbackQuery.from.id;
  
  try {
    await fsmManager.clearUserState(userId);
    
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
    });

    await showWarehouseMenu(bot, {
      chat: { id: callbackQuery.message.chat.id },
      from: { id: userId }
    });
  } catch (error) {
    global.logger.error('Cancel action error:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async function getUserInfo(userId) {
  try {
    const response = await global.apiClient.get('/auth/me');
    return response.data.data;
  } catch (error) {
    return null;
  }
}

async function getWarehouseStats() {
  try {
    const response = await global.apiClient.get('/warehouse/stats');
    return response.data.data || {};
  } catch (error) {
    return {};
  }
}

async function findItemByCode(code) {
  try {
    const response = await global.apiClient.get(`/inventory/items?sku=${code}`);
    return response.data.data[0] || null;
  } catch (error) {
    return null;
  }
}

async function getAvailableBunkers() {
  try {
    const response = await global.apiClient.get('/machine-inventory?needsRefill=true');
    return response.data.data || [];
  } catch (error) {
    return [];
  }
}

module.exports = {
  showWarehouseMenu,
  receiveItems,
  handleItemScan,
  handleQuantityInput,
  handleConfirmationPhoto,
  fillBunker,
  weighItems,
  handleWeightInput,
  cancelAction,
  WAREHOUSE_STATES
};
