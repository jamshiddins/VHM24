/**
 * VHM24 Operator Handler with FSM
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–Ω–∫–µ—Ä–æ–≤, —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º
 */

const fsmManager = require('../fsm/manager');
const { OPERATOR_STATES, COMMON_STATES } = require('../fsm/states');

/**
 * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
 */
async function showOperatorMenu(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userInfo = await getUserInfo(userId);
    if (!userInfo || !userInfo.roles.includes('OPERATOR')) {
      await bot.sendMessage(chatId,
        `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
      );
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    const stats = await getOperatorStats(userId);

    let message = `üéØ *–ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*\n\n`;
    message += `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚úÖ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.tasksCompleted || 0}\n`;
    message += `üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${stats.activeTasks || 0}\n`;
    message += `üóÉÔ∏è –ë—É–Ω–∫–µ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${stats.bunkersInstalled || 0}\n`;
    message += `‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: ${stats.problemsReported || 0}\n\n`;

    const keyboards = [
      [
        { text: 'üóÉÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–Ω–∫–µ—Ä', callback_data: 'operator_install_bunker' },
        { text: 'üìä –£–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏', callback_data: 'operator_set_remains' }
      ],
      [
        { text: 'üì∏ –§–æ—Ç–æ –î–û', callback_data: 'operator_photo_before' },
        { text: 'üì∏ –§–æ—Ç–æ –ü–û–°–õ–ï', callback_data: 'operator_photo_after' }
      ],
      [
        { text: '‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ', callback_data: 'operator_report_problem' },
        { text: 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'operator_my_tasks' }
      ],
      [
        { text: 'üè≠ –í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç', callback_data: 'operator_select_machine' },
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'operator_refresh' }
      ],
      [
        { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ];

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboards
      }
    });

  } catch (error) {
    global.logger.error('Operator menu error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
  }
}

/**
 * –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞
 */
async function selectMachine(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤
    const machines = await getAvailableMachines();

    if (machines.length === 0) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤',
        show_alert: true
      });
      return;
    }

    await fsmManager.setUserState(userId, OPERATOR_STATES.WAITING_MACHINE_SELECTION);

    let message = `üè≠ *–í—ã–±–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞*\n\n`;
    message += `–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã:\n\n`;

    const keyboards = [];
    machines.forEach((machine, index) => {
      const statusIcon = getStatusIcon(machine.status);
      keyboards.push([{
        text: `${statusIcon} ${machine.name} - ${machine.location?.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}`,
        callback_data: `operator_machine_selected:${machine.id}`
      }]);
    });

    keyboards.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'operator_cancel' }]);

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: callbackQuery.message.message_id,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboards
      }
    });

    await bot.answerCallbackQuery(callbackQuery.id);

  } catch (error) {
    global.logger.error('Select machine error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ–º–∞—Ç–æ–≤',
      show_alert: true
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞
 */
async function handleMachineSelection(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const machineId = callbackQuery.data.split(':')[1];

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== OPERATOR_STATES.WAITING_MACHINE_SELECTION) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
        show_alert: true
      });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ
    const machine = await getMachineInfo(machineId);
    
    if (!machine) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –ê–≤—Ç–æ–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        show_alert: true
      });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç
    await fsmManager.updateUserData(userId, {
      selectedMachine: machine
    });

    await fsmManager.setUserState(userId, COMMON_STATES.IDLE);

    await bot.editMessageText(
      `‚úÖ *–ê–≤—Ç–æ–º–∞—Ç –≤—ã–±—Ä–∞–Ω*\n\n` +
      `üè≠ ${machine.name}\n` +
      `üìç ${machine.location?.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üîß –°—Ç–∞—Ç—É—Å: ${getStatusText(machine.status)}\n\n` +
      `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —ç—Ç–∏–º –∞–≤—Ç–æ–º–∞—Ç–æ–º.`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown'
      }
    );

    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚úÖ –ê–≤—Ç–æ–º–∞—Ç –≤—ã–±—Ä–∞–Ω'
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    setTimeout(() => {
      showOperatorMenu(bot, { chat: { id: chatId }, from: { id: userId } });
    }, 2000);

  } catch (error) {
    global.logger.error('Handle machine selection error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∞',
      show_alert: true
    });
  }
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–Ω–∫–µ—Ä–∞
 */
async function installBunker(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    const userData = await fsmManager.getUserData(userId);
    
    if (!userData.selectedMachine) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç',
        show_alert: true
      });
      return;
    }

    await fsmManager.setUserState(userId, OPERATOR_STATES.WAITING_BUNKER_INSTALLATION);
    await fsmManager.updateUserData(userId, {
      action: 'install_bunker'
    });

    await bot.editMessageText(
      `üóÉÔ∏è *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–Ω–∫–µ—Ä–∞*\n\n` +
      `üè≠ –ê–≤—Ç–æ–º–∞—Ç: ${userData.selectedMachine.name}\n\n` +
      `üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –±—É–Ω–∫–µ—Ä–∞ –î–û —É—Å—Ç–∞–Ω–æ–≤–∫–∏:`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'operator_skip_photo_before' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'operator_cancel' }]
          ]
        }
      }
    );

    await bot.answerCallbackQuery(callbackQuery.id);

  } catch (error) {
    global.logger.error('Install bunker error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–Ω–∫–µ—Ä–∞',
      show_alert: true
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–Ω–∫–µ—Ä–∞
 */
async function handleBunkerPhoto(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== OPERATOR_STATES.WAITING_BUNKER_INSTALLATION) {
      return false;
    }

    if (!msg.photo || msg.photo.length === 0) {
      await bot.sendMessage(chatId,
        `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±—É–Ω–∫–µ—Ä–∞.`
      );
      return true;
    }

    const userData = await fsmManager.getUserData(userId);
    const machine = userData.selectedMachine;

    // –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ
    const photo = msg.photo[msg.photo.length - 1];
    const fileInfo = await bot.getFile(photo.file_id);
    const photoUrl = `https://api.telegram.org/file/bot${bot.token}/${fileInfo.file_path}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    const taskAction = await global.apiClient.post('/task-actions', {
      taskId: userData.currentTaskId || null,
      action: 'BUNKER_INSTALLED',
      comment: `–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–Ω–∫–µ—Ä–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–µ ${machine.name}`,
      location: machine.location?.address || '',
      photoUrls: [photoUrl],
      metadata: {
        machineId: machine.id,
        telegramUserId: userId,
        telegramFileId: photo.file_id
      }
    });

    await bot.sendMessage(chatId,
      `‚úÖ *–ë—É–Ω–∫–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*\n\n` +
      `üè≠ –ê–≤—Ç–æ–º–∞—Ç: ${machine.name}\n` +
      `üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}\n\n` +
      `üÜî –ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: ${taskAction.data.data?.id || 'N/A'}`,
      { parse_mode: 'Markdown' }
    );

    await fsmManager.clearUserState(userId);
    await showOperatorMenu(bot, msg);

    return true;
  } catch (error) {
    global.logger.error('Handle bunker photo error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
    );
    return true;
  }
}

/**
 * –£–∫–∞–∑–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
 */
async function setRemains(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    const userData = await fsmManager.getUserData(userId);
    
    if (!userData.selectedMachine) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç',
        show_alert: true
      });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –±—É–Ω–∫–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∞
    const bunkers = await getMachineBunkers(userData.selectedMachine.id);

    if (bunkers.length === 0) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –£ –∞–≤—Ç–æ–º–∞—Ç–∞ –Ω–µ—Ç –±—É–Ω–∫–µ—Ä–æ–≤',
        show_alert: true
      });
      return;
    }

    await fsmManager.setUserState(userId, OPERATOR_STATES.WAITING_REMAINS_INPUT);
    await fsmManager.updateUserData(userId, {
      action: 'set_remains',
      bunkers: bunkers,
      currentBunkerIndex: 0,
      remainsData: []
    });

    const currentBunker = bunkers[0];

    await bot.editMessageText(
      `üìä *–£–∫–∞–∑–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤*\n\n` +
      `üè≠ –ê–≤—Ç–æ–º–∞—Ç: ${userData.selectedMachine.name}\n` +
      `üóÉÔ∏è –ë—É–Ω–∫–µ—Ä: ${currentBunker.item.name}\n` +
      `üì¶ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${currentBunker.quantity} ${currentBunker.item.unit}\n\n` +
      `üìù –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (${1}/${bunkers.length}):`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'operator_cancel' }]
          ]
        }
      }
    );

    await bot.answerCallbackQuery(callbackQuery.id);

  } catch (error) {
    global.logger.error('Set remains error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–∫–∞–∑–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤',
      show_alert: true
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
 */
async function handleRemainsInput(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== OPERATOR_STATES.WAITING_REMAINS_INPUT) {
      return false;
    }

    const remainsText = msg.text;
    const remains = parseFloat(remainsText);

    if (isNaN(remains) || remains < 0) {
      await bot.sendMessage(chatId,
        `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ 0:`
      );
      return true;
    }

    const userData = await fsmManager.getUserData(userId);
    const bunkers = userData.bunkers;
    const currentBunkerIndex = userData.currentBunkerIndex;
    const currentBunker = bunkers[currentBunkerIndex];

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    userData.remainsData.push({
      bunkerId: currentBunker.id,
      itemName: currentBunker.item.name,
      oldQuantity: currentBunker.quantity,
      newQuantity: remains
    });

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±—É–Ω–∫–µ—Ä—É
    const nextIndex = currentBunkerIndex + 1;
    
    if (nextIndex < bunkers.length) {
      // –ï—Å—Ç—å –µ—â–µ –±—É–Ω–∫–µ—Ä—ã
      await fsmManager.updateUserData(userId, {
        currentBunkerIndex: nextIndex,
        remainsData: userData.remainsData
      });

      const nextBunker = bunkers[nextIndex];

      await bot.sendMessage(chatId,
        `‚úÖ –û—Å—Ç–∞—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${remains} ${currentBunker.item.unit}\n\n` +
        `üìä *–°–ª–µ–¥—É—é—â–∏–π –±—É–Ω–∫–µ—Ä:*\n\n` +
        `üóÉÔ∏è –ë—É–Ω–∫–µ—Ä: ${nextBunker.item.name}\n` +
        `üì¶ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${nextBunker.quantity} ${nextBunker.item.unit}\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (${nextIndex + 1}/${bunkers.length}):`,
        { parse_mode: 'Markdown' }
      );
    } else {
      // –í—Å–µ –±—É–Ω–∫–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
      await saveAllRemains(userId, userData);
      
      let summary = `‚úÖ *–í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n`;
      summary += `üè≠ –ê–≤—Ç–æ–º–∞—Ç: ${userData.selectedMachine.name}\n\n`;
      summary += `üìä *–°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:*\n`;
      
      userData.remainsData.forEach((item, index) => {
        const change = item.newQuantity - item.oldQuantity;
        const changeIcon = change > 0 ? 'üìà' : change < 0 ? 'üìâ' : '‚ûñ';
        summary += `${index + 1}. ${item.itemName}: ${item.oldQuantity} ‚Üí ${item.newQuantity} ${changeIcon}\n`;
      });

      await bot.sendMessage(chatId, summary, { parse_mode: 'Markdown' });

      await fsmManager.clearUserState(userId);
      await showOperatorMenu(bot, msg);
    }

    return true;
  } catch (error) {
    global.logger.error('Handle remains input error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Å—Ç–∞—Ç–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
    );
    return true;
  }
}

/**
 * –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
 */
async function reportProblem(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  try {
    const userData = await fsmManager.getUserData(userId);
    
    if (!userData.selectedMachine) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç',
        show_alert: true
      });
      return;
    }

    await fsmManager.setUserState(userId, OPERATOR_STATES.WAITING_PROBLEM_DESCRIPTION);
    await fsmManager.updateUserData(userId, {
      action: 'report_problem'
    });

    await bot.editMessageText(
      `‚ö†Ô∏è *–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ*\n\n` +
      `üè≠ –ê–≤—Ç–æ–º–∞—Ç: ${userData.selectedMachine.name}\n\n` +
      `üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'operator_cancel' }]
          ]
        }
      }
    );

    await bot.answerCallbackQuery(callbackQuery.id);

  } catch (error) {
    global.logger.error('Report problem error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ',
      show_alert: true
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
 */
async function handleProblemDescription(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const currentState = await fsmManager.getUserState(userId);
    
    if (currentState !== OPERATOR_STATES.WAITING_PROBLEM_DESCRIPTION) {
      return false;
    }

    const description = msg.text;

    if (!description || description.trim().length < 10) {
      await bot.sendMessage(chatId,
        `‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):`
      );
      return true;
    }

    const userData = await fsmManager.getUserData(userId);
    const machine = userData.selectedMachine;

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    const task = await global.apiClient.post('/tasks', {
      title: `–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–º ${machine.name}`,
      description: description.trim(),
      priority: 'HIGH',
      machineId: machine.id,
      status: 'CREATED'
    });

    if (task.data.success) {
      await bot.sendMessage(chatId,
        `‚úÖ *–ü—Ä–æ–±–ª–µ–º–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!*\n\n` +
        `üè≠ –ê–≤—Ç–æ–º–∞—Ç: ${machine.name}\n` +
        `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description.trim()}\n` +
        `üÜî –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: ${task.data.data.id}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}\n\n` +
        `–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.`,
        { parse_mode: 'Markdown' }
      );
    } else {
      throw new Error('Failed to create task');
    }

    await fsmManager.clearUserState(userId);
    await showOperatorMenu(bot, msg);

    return true;
  } catch (error) {
    global.logger.error('Handle problem description error:', error);
    await bot.sendMessage(chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
    );
    return true;
  }
}

/**
 * –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
 */
async function cancelAction(bot, callbackQuery) {
  const userId = callbackQuery.from.id;
  
  try {
    await fsmManager.clearUserState(userId);
    
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
    });

    await showOperatorMenu(bot, {
      chat: { id: callbackQuery.message.chat.id },
      from: { id: userId }
    });
  } catch (error) {
    global.logger.error('Cancel action error:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async function getUserInfo(userId) {
  try {
    const response = await global.apiClient.get('/auth/me');
    return response.data.data;
  } catch (error) {
    return null;
  }
}

async function getOperatorStats(userId) {
  try {
    const response = await global.apiClient.get(`/operators/${userId}/stats`);
    return response.data.data || {};
  } catch (error) {
    return {};
  }
}

async function getAvailableMachines() {
  try {
    const response = await global.apiClient.get('/machines?status=ONLINE,OFFLINE,MAINTENANCE');
    return response.data.data || [];
  } catch (error) {
    return [];
  }
}

async function getMachineInfo(machineId) {
  try {
    const response = await global.apiClient.get(`/machines/${machineId}`);
    return response.data.data;
  } catch (error) {
    return null;
  }
}

async function getMachineBunkers(machineId) {
  try {
    const response = await global.apiClient.get(`/machine-inventory?machineId=${machineId}`);
    return response.data.data || [];
  } catch (error) {
    return [];
  }
}

async function saveAllRemains(userId, userData) {
  try {
    for (const item of userData.remainsData) {
      await global.apiClient.patch(`/machine-inventory/${item.bunkerId}`, {
        quantity: item.newQuantity
      });

      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await global.apiClient.post('/stock-movements', {
        itemId: item.itemId,
        type: 'ADJUSTMENT',
        quantity: item.newQuantity - item.oldQuantity,
        quantityBefore: item.oldQuantity,
        quantityAfter: item.newQuantity,
        reason: '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º',
        reference: `Operator-${userId}-${Date.now()}`,
        machineId: userData.selectedMachine.id,
        metadata: {
          telegramUserId: userId,
          operatorAdjustment: true
        }
      });
    }
  } catch (error) {
    global.logger.error('Save all remains error:', error);
    throw error;
  }
}

function getStatusIcon(status) {
  const icons = {
    'ONLINE': 'üü¢',
    'OFFLINE': 'üî¥',
    'MAINTENANCE': 'üü°',
    'ERROR': 'üö®'
  };
  return icons[status] || '‚ö™';
}

function getStatusText(status) {
  const texts = {
    'ONLINE': '–û–Ω–ª–∞–π–Ω',
    'OFFLINE': '–û—Ñ–ª–∞–π–Ω',
    'MAINTENANCE': '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏',
    'ERROR': '–û—à–∏–±–∫–∞'
  };
  return texts[status] || status;
}

module.exports = {
  showOperatorMenu,
  selectMachine,
  handleMachineSelection,
  installBunker,
  handleBunkerPhoto,
  setRemains,
  handleRemainsInput,
  reportProblem,
  handleProblemDescription,
  cancelAction,
  OPERATOR_STATES
};
