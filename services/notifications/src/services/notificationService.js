/**
 * VHM24 Notification Service
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
 */

const { getPrismaClient } = require('@vhm24/database');
const TelegramBot = require('node-telegram-bot-api');
const nodemailer = require('nodemailer');
const winston = require('winston');

class NotificationService {
  constructor() {
    this.prisma = getPrismaClient();
    this.logger = winston.createLogger({
      level: 'info',
      format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
      ),
      transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'notifications.log' })
      ]
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (process.env.TELEGRAM_BOT_TOKEN) {
      this.telegramBot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    this.emailTransporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || 'smtp.gmail.com',
      port: process.env.SMTP_PORT || 587,
      secure: false,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
      }
    });

    // –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.notificationTypes = {
      TASK_OVERDUE: {
        priority: 'HIGH',
        channels: ['telegram', 'email'],
        template: 'task_overdue'
      },
      LOW_STOCK: {
        priority: 'MEDIUM',
        channels: ['telegram'],
        template: 'low_stock'
      },
      MACHINE_OFFLINE: {
        priority: 'HIGH',
        channels: ['telegram', 'email'],
        template: 'machine_offline'
      },
      ROUTE_COMPLETED: {
        priority: 'LOW',
        channels: ['telegram'],
        template: 'route_completed'
      },
      MAINTENANCE_DUE: {
        priority: 'MEDIUM',
        channels: ['telegram', 'email'],
        template: 'maintenance_due'
      },
      INCOMPLETE_DATA: {
        priority: 'MEDIUM',
        channels: ['telegram'],
        template: 'incomplete_data'
      },
      SYSTEM_ALERT: {
        priority: 'HIGH',
        channels: ['telegram', 'email'],
        template: 'system_alert'
      },
      FUEL_REPORT: {
        priority: 'LOW',
        channels: ['telegram'],
        template: 'fuel_report'
      },
      ARRIVAL_CONFIRMATION: {
        priority: 'LOW',
        channels: ['telegram'],
        template: 'arrival_confirmation'
      },
      WAREHOUSE_RECEIPT: {
        priority: 'MEDIUM',
        channels: ['telegram'],
        template: 'warehouse_receipt'
      }
    };

    // –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    this.templates = {
      task_overdue: {
        telegram: '‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞*\n\nüìã {taskTitle}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee}\n‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞: {overdueDays} –¥–Ω.\n\nüîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ: /task_{taskId}',
        email: {
          subject: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {taskTitle}',
          html: '<h2>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞</h2><p><strong>–ó–∞–¥–∞—á–∞:</strong> {taskTitle}</p><p><strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> {assignee}</p><p><strong>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞:</strong> {overdueDays} –¥–Ω–µ–π</p>'
        }
      },
      low_stock: {
        telegram: 'üì¶ *–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞*\n\nüè∑Ô∏è {itemName}\nüìä –û—Å—Ç–∞—Ç–æ–∫: {quantity} {unit}\n‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º: {minQuantity} {unit}\nüìç –°–∫–ª–∞–¥: {warehouse}',
        email: {
          subject: '–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {itemName}',
          html: '<h2>–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞</h2><p><strong>–¢–æ–≤–∞—Ä:</strong> {itemName}</p><p><strong>–û—Å—Ç–∞—Ç–æ–∫:</strong> {quantity} {unit}</p>'
        }
      },
      machine_offline: {
        telegram: 'üö® *–ê–≤—Ç–æ–º–∞—Ç –Ω–µ –≤ —Å–µ—Ç–∏*\n\nü§ñ {machineName}\nüìç {location}\n‚è∞ –ù–µ –≤ —Å–µ—Ç–∏: {offlineTime}\n\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
        email: {
          subject: '–ê–≤—Ç–æ–º–∞—Ç –Ω–µ –≤ —Å–µ—Ç–∏: {machineName}',
          html: '<h2>–ê–≤—Ç–æ–º–∞—Ç –Ω–µ –≤ —Å–µ—Ç–∏</h2><p><strong>–ê–≤—Ç–æ–º–∞—Ç:</strong> {machineName}</p><p><strong>–ê–¥—Ä–µ—Å:</strong> {location}</p>'
        }
      },
      route_completed: {
        telegram: '‚úÖ *–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω*\n\nüöõ {routeName}\nüë§ –í–æ–¥–∏—Ç–µ–ª—å: {driverName}\n‚è∞ –í—Ä–µ–º—è: {completionTime}\nüìä –û—Å—Ç–∞–Ω–æ–≤–æ–∫: {stopsCount}',
        email: {
          subject: '–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {routeName}',
          html: '<h2>–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</h2><p><strong>–ú–∞—Ä—à—Ä—É—Ç:</strong> {routeName}</p><p><strong>–í–æ–¥–∏—Ç–µ–ª—å:</strong> {driverName}</p>'
        }
      },
      maintenance_due: {
        telegram: 'üîß *–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ*\n\nü§ñ {machineName}\nüìç {location}\nüìÖ –ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞: {dueDate}\n‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–∫–∞: {overdueDays} –¥–Ω.',
        email: {
          subject: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¢–û: {machineName}',
          html: '<h2>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h2><p><strong>–ê–≤—Ç–æ–º–∞—Ç:</strong> {machineName}</p><p><strong>–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞:</strong> {dueDate}</p>'
        }
      },
      incomplete_data: {
        telegram: 'üìù *–ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ*\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {userName}\nüìã –ü–æ–ª—è: {missingFields}\n‚è∞ –í—Ä–µ–º—è: {timestamp}',
        email: {
          subject: '–ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç {userName}',
          html: '<h2>–ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2><p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {userName}</p><p><strong>–ü–æ–ª—è:</strong> {missingFields}</p>'
        }
      },
      system_alert: {
        telegram: 'üö® *–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n‚ö†Ô∏è {alertType}\nüìù {message}\n‚è∞ {timestamp}',
        email: {
          subject: '–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {alertType}',
          html: '<h2>–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h2><p><strong>–¢–∏–ø:</strong> {alertType}</p><p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> {message}</p>'
        }
      },
      fuel_report: {
        telegram: '‚õΩ *–û—Ç—á–µ—Ç –æ –∑–∞–ø—Ä–∞–≤–∫–µ*\n\nüöõ –í–æ–¥–∏—Ç–µ–ª—å: {driverName}\nüí∞ –°—É–º–º–∞: {amount} —Å—É–º\nüìç –õ–æ–∫–∞—Ü–∏—è: {location}\n‚è∞ {timestamp}',
        email: {
          subject: '–û—Ç—á–µ—Ç –æ –∑–∞–ø—Ä–∞–≤–∫–µ –æ—Ç {driverName}',
          html: '<h2>–û—Ç—á–µ—Ç –æ –∑–∞–ø—Ä–∞–≤–∫–µ</h2><p><strong>–í–æ–¥–∏—Ç–µ–ª—å:</strong> {driverName}</p><p><strong>–°—É–º–º–∞:</strong> {amount} —Å—É–º</p>'
        }
      },
      arrival_confirmation: {
        telegram: 'üìç *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–±—ã—Ç–∏—è*\n\nüë§ {driverName}\nüéØ {stopName}\nüìç {location}\n‚è∞ {arrivalTime}',
        email: {
          subject: '–ü—Ä–∏–±—ã—Ç–∏–µ: {driverName} - {stopName}',
          html: '<h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–±—ã—Ç–∏—è</h2><p><strong>–í–æ–¥–∏—Ç–µ–ª—å:</strong> {driverName}</p><p><strong>–û—Å—Ç–∞–Ω–æ–≤–∫–∞:</strong> {stopName}</p>'
        }
      },
      warehouse_receipt: {
        telegram: 'üì¶ *–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ —Å–∫–ª–∞–¥*\n\nüè∑Ô∏è {itemName}\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} {unit}\nüë§ –ü—Ä–∏–Ω—è–ª: {receiverName}\n‚è∞ {timestamp}',
        email: {
          subject: '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {itemName}',
          html: '<h2>–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ —Å–∫–ª–∞–¥</h2><p><strong>–¢–æ–≤–∞—Ä:</strong> {itemName}</p><p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> {quantity} {unit}</p>'
        }
      }
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendNotification(type, recipients, data, options = {}) {
    try {
      const notificationConfig = this.notificationTypes[type];
      if (!notificationConfig) {
        throw new Error(`Unknown notification type: ${type}`);
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      let notification = null;
      try {
        notification = await this.prisma.notification.create({
          data: {
            type,
            title: this.generateTitle(type, data),
            message: this.generateMessage(type, data, 'telegram'),
            recipients: Array.isArray(recipients) ? recipients : [recipients],
            priority: notificationConfig.priority,
            channels: notificationConfig.channels,
            data: data,
            status: 'PENDING'
          }
        });
      } catch (dbError) {
        this.logger.warn('Database notification table not available, continuing without DB logging');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º
      const results = [];
      for (const channel of notificationConfig.channels) {
        if (options.channels && !options.channels.includes(channel)) {
          continue;
        }

        try {
          const result = await this.sendByChannel(channel, type, recipients, data);
          results.push({ channel, success: true, result });
        } catch (error) {
          this.logger.error(`Failed to send ${type} via ${channel}:`, error);
          results.push({ channel, success: false, error: error.message });
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞)
      const allSuccess = results.every(r => r.success);
      if (notification) {
        try {
          await this.prisma.notification.update({
            where: { id: notification.id },
            data: {
              status: allSuccess ? 'SENT' : 'FAILED',
              sentAt: allSuccess ? new Date() : null,
              deliveryResults: results
            }
          });
        } catch (updateError) {
          this.logger.warn('Failed to update notification status in database');
        }
      }

      return {
        notificationId: notification?.id || 'no-db',
        success: allSuccess,
        results
      };

    } catch (error) {
      this.logger.error('Send notification error:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É
   */
  async sendByChannel(channel, type, recipients, data) {
    switch (channel) {
      case 'telegram':
        return await this.sendTelegram(type, recipients, data);
      case 'email':
        return await this.sendEmail(type, recipients, data);
      case 'sms':
        return await this.sendSMS(type, recipients, data);
      default:
        throw new Error(`Unsupported channel: ${channel}`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendTelegram(type, recipients, data) {
    if (!this.telegramBot) {
      throw new Error('Telegram bot not configured');
    }

    const message = this.generateMessage(type, data, 'telegram');
    const results = [];

    for (const recipient of Array.isArray(recipients) ? recipients : [recipients]) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await this.prisma.user.findFirst({
          where: {
            OR: [
              { id: recipient },
              { email: recipient },
              { telegramId: recipient }
            ]
          }
        });

        if (!user?.telegramId) {
          throw new Error(`No Telegram ID for recipient: ${recipient}`);
        }

        await this.telegramBot.sendMessage(user.telegramId, message, {
          parse_mode: 'Markdown',
          disable_web_page_preview: true
        });

        results.push({ recipient, success: true });
      } catch (error) {
        results.push({ recipient, success: false, error: error.message });
      }
    }

    return results;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendEmail(type, recipients, data) {
    if (!this.emailTransporter) {
      throw new Error('Email transporter not configured');
    }

    const template = this.templates[this.notificationTypes[type].template]?.email;
    if (!template) {
      throw new Error(`No email template for type: ${type}`);
    }

    const subject = this.interpolateTemplate(template.subject, data);
    const html = this.interpolateTemplate(template.html, data);

    const results = [];

    for (const recipient of Array.isArray(recipients) ? recipients : [recipients]) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let email = recipient;
        if (!recipient.includes('@')) {
          const user = await this.prisma.user.findFirst({
            where: { id: recipient }
          });
          email = user?.email;
        }

        if (!email) {
          throw new Error(`No email for recipient: ${recipient}`);
        }

        await this.emailTransporter.sendMail({
          from: process.env.SMTP_FROM || 'noreply@vhm24.com',
          to: email,
          subject,
          html
        });

        results.push({ recipient, success: true });
      } catch (error) {
        results.push({ recipient, success: false, error: error.message });
      }
    }

    return results;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
   */
  async sendSMS(type, recipients, data) {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
    this.logger.info('SMS sending not implemented yet');
    return [];
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  generateTitle(type, data) {
    const titles = {
      TASK_OVERDUE: `–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: ${data.taskTitle}`,
      LOW_STOCK: `–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${data.itemName}`,
      MACHINE_OFFLINE: `–ê–≤—Ç–æ–º–∞—Ç –Ω–µ –≤ —Å–µ—Ç–∏: ${data.machineName}`,
      ROUTE_COMPLETED: `–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${data.routeName}`,
      MAINTENANCE_DUE: `–¢—Ä–µ–±—É–µ—Ç—Å—è –¢–û: ${data.machineName}`,
      INCOMPLETE_DATA: `–ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${data.userName}`,
      SYSTEM_ALERT: `–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${data.alertType}`,
      FUEL_REPORT: `–ó–∞–ø—Ä–∞–≤–∫–∞: ${data.driverName}`,
      ARRIVAL_CONFIRMATION: `–ü—Ä–∏–±—ã—Ç–∏–µ: ${data.driverName}`,
      WAREHOUSE_RECEIPT: `–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: ${data.itemName}`
    };

    return titles[type] || `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${type}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É
   */
  generateMessage(type, data, channel) {
    const notificationConfig = this.notificationTypes[type];
    const template = this.templates[notificationConfig.template]?.[channel];
    
    if (!template) {
      return `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ ${type}: ${JSON.stringify(data)}`;
    }

    return this.interpolateTemplate(template, data);
  }

  /**
   * –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
   */
  interpolateTemplate(template, data) {
    return template.replace(/\{(\w+)\}/g, (match, key) => {
      return data[key] !== undefined ? data[key] : match;
    });
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
   */
  async sendScheduledNotifications() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
      await this.checkOverdueTasks();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
      await this.checkLowStock();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ–ª–∞–π–Ω –∞–≤—Ç–æ–º–∞—Ç—ã
      await this.checkOfflineMachines();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –¢–û
      await this.checkOverdueMaintenance();

      this.logger.info('Scheduled notifications check completed');
    } catch (error) {
      this.logger.error('Scheduled notifications error:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  async checkOverdueTasks() {
    const overdueTasks = await this.prisma.task.findMany({
      where: {
        status: { in: ['CREATED', 'ASSIGNED', 'IN_PROGRESS'] },
        dueDate: { lt: new Date() }
      },
      include: {
        assignee: true
      }
    });

    for (const task of overdueTasks) {
      const overdueDays = Math.floor((new Date() - task.dueDate) / (1000 * 60 * 60 * 24));
      
      await this.sendNotification('TASK_OVERDUE', [task.assigneeId], {
        taskId: task.id,
        taskTitle: task.title,
        assignee: task.assignee.name,
        overdueDays
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
   */
  async checkLowStock() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
      const lowStockItems = await this.prisma.inventoryItem.findMany({
        where: {
          AND: [
            { quantity: { not: null } },
            { minQuantity: { not: null } }
          ]
        }
      });

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
      const filteredItems = lowStockItems.filter(item => 
        item.quantity <= (item.minQuantity || 0)
      );

      for (const item of filteredItems) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Å–∫–ª–∞–¥–∞
        const warehouseManagers = await this.prisma.user.findMany({
          where: {
            roles: { has: 'WAREHOUSE_MANAGER' },
            isActive: true
          }
        });

        for (const manager of warehouseManagers) {
          await this.sendNotification('LOW_STOCK', [manager.id], {
            itemName: item.name,
            quantity: item.quantity,
            unit: item.unit || '—à—Ç',
            minQuantity: item.minQuantity || 0,
            warehouse: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥'
          });
        }
      }
    } catch (error) {
      this.logger.error('Check low stock error:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ–ª–∞–π–Ω –∞–≤—Ç–æ–º–∞—Ç–æ–≤
   */
  async checkOfflineMachines() {
    const offlineThreshold = new Date(Date.now() - 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
    
    const offlineMachines = await this.prisma.machine.findMany({
      where: {
        lastPing: { lt: offlineThreshold },
        status: { not: 'MAINTENANCE' }
      }
    });

    for (const machine of offlineMachines) {
      const offlineTime = Math.floor((new Date() - machine.lastPing) / (1000 * 60));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫–∞–º
      const technicians = await this.prisma.user.findMany({
        where: {
          role: 'TECHNICIAN',
          isActive: true
        }
      });

      for (const technician of technicians) {
        await this.sendNotification('MACHINE_OFFLINE', [technician.id], {
          machineName: machine.name,
          location: machine.location?.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
          offlineTime: `${offlineTime} –º–∏–Ω`
        });
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –¢–û
   */
  async checkOverdueMaintenance() {
    const overdueMaintenance = await this.prisma.maintenanceSchedule.findMany({
      where: {
        nextMaintenanceDate: { lt: new Date() },
        status: 'SCHEDULED'
      },
      include: {
        machine: true
      }
    });

    for (const maintenance of overdueMaintenance) {
      const overdueDays = Math.floor((new Date() - maintenance.nextMaintenanceDate) / (1000 * 60 * 60 * 24));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫–∞–º
      const technicians = await this.prisma.user.findMany({
        where: {
          role: 'TECHNICIAN',
          isActive: true
        }
      });

      for (const technician of technicians) {
        await this.sendNotification('MAINTENANCE_DUE', [technician.id], {
          machineName: maintenance.machine.name,
          location: maintenance.machine.location?.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
          dueDate: maintenance.nextMaintenanceDate.toLocaleDateString('ru-RU'),
          overdueDays
        });
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getNotificationHistory(filters = {}) {
    const where = {};
    
    if (filters.type) where.type = filters.type;
    if (filters.status) where.status = filters.status;
    if (filters.priority) where.priority = filters.priority;
    if (filters.dateFrom) where.createdAt = { gte: new Date(filters.dateFrom) };
    if (filters.dateTo) where.createdAt = { ...where.createdAt, lte: new Date(filters.dateTo) };

    return await this.prisma.notification.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      take: filters.limit || 100,
      skip: filters.offset || 0
    });
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getNotificationStats(period = '7d') {
    const dateFrom = new Date();
    if (period === '7d') dateFrom.setDate(dateFrom.getDate() - 7);
    else if (period === '30d') dateFrom.setDate(dateFrom.getDate() - 30);
    else if (period === '1y') dateFrom.setFullYear(dateFrom.getFullYear() - 1);

    const stats = await this.prisma.notification.groupBy({
      by: ['type', 'status'],
      where: {
        createdAt: { gte: dateFrom }
      },
      _count: true
    });

    return stats;
  }
}

module.exports = NotificationService;
