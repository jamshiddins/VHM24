/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π: node extract-railway-variables.js
 */

const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–æ–º
function log(message, color = 'reset') {
  console.log(colors[color] + message + colors.reset);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è Railway CLI
function checkRailwayCLI() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ Windows
    const isWindows = process.platform === 'win32';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π Windows
    const command = isWindows 
      ? 'where railway >nul 2>&1'
      : 'which railway >/dev/null 2>&1';
    
    execSync(command);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Railway CLI
    execSync('railway --version', { stdio: 'ignore' });
    return true;
  } catch (error) {
    log('‚ùå Railway CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: npm install -g @railway/cli', 'red');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Railway
function checkRailwayAuth() {
  try {
    execSync('railway whoami', { stdio: 'ignore' });
    return true;
  } catch (error) {
    log('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Railway. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: railway login', 'red');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway
function getRailwayVariables() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ railway variables, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
    const helpOutput = execSync('railway variables --help').toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –æ–ø—Ü–∏—è --service
    const supportsService = helpOutput.includes('--service');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –æ–ø—Ü–∏—è --json
    const supportsJson = helpOutput.includes('--json');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –æ–ø—Ü–∏–π
    let command = 'railway variables';
    
    if (supportsService) {
      command += ' --service web';
    }
    
    if (supportsJson) {
      command += ' --json';
    }
    
    log(`–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: ${command}`, 'blue');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    const output = execSync(command).toString();
    
    // –ï—Å–ª–∏ –≤—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –ø–∞—Ä—Å–∏–º –µ–≥–æ
    if (supportsJson) {
      const variables = JSON.parse(output);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ name –∏ value
      if (Array.isArray(variables) && variables.length > 0 && variables[0].name && variables[0].value) {
        const result = {};
        for (const variable of variables) {
          result[variable.name] = variable.value;
        }
        return result;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      return variables;
    }
    
    // –ï—Å–ª–∏ –≤—ã–≤–æ–¥ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –ø–∞—Ä—Å–∏–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—ã–≤–æ–¥ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "KEY=VALUE" –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    const result = {};
    const lines = output.split('\n');
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const [key, ...valueParts] = trimmedLine.split('=');
        const value = valueParts.join('=');
        if (key && value) {
          result[key.trim()] = value.trim();
        }
      }
    }
    
    return result;
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway:', 'red');
    log(error.message, 'red');
    
    // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å railway run –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã env
    try {
      log('–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å railway run...', 'yellow');
      const output = execSync('railway run env').toString();
      
      const result = {};
      const lines = output.split('\n');
      
      for (const line of lines) {
        const trimmedLine = line.trim();
        if (trimmedLine && !trimmedLine.startsWith('#')) {
          const [key, ...valueParts] = trimmedLine.split('=');
          const value = valueParts.join('=');
          if (key && value) {
            result[key.trim()] = value.trim();
          }
        }
      }
      
      return result;
    } catch (fallbackError) {
      log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ railway run:', 'red');
      log(fallbackError.message, 'red');
      
      // –ü—Ä–æ–±—É–µ–º –µ—â–µ –æ–¥–∏–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å railway link –∏ –∑–∞—Ç–µ–º railway variables
      try {
        log('–ü—Ä–æ–±—É–µ–º –µ—â–µ –æ–¥–∏–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å railway link...', 'yellow');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        const projectsOutput = execSync('railway project list').toString();
        const projectLines = projectsOutput.split('\n');
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º (–æ–±—ã—á–Ω–æ –ø–æ–º–µ—á–µ–Ω –∑–≤–µ–∑–¥–æ—á–∫–æ–π)
        const currentProjectLine = projectLines.find(line => line.includes('*'));
        
        if (currentProjectLine) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
          const projectId = currentProjectLine.split(' ')[0];
          
          // –õ–∏–Ω–∫—É–µ–º –ø—Ä–æ–µ–∫—Ç
          execSync(`railway link --project ${projectId}`);
          
          // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          const varsOutput = execSync('railway variables').toString();
          
          const result = {};
          const lines = varsOutput.split('\n');
          
          for (const line of lines) {
            const trimmedLine = line.trim();
            if (trimmedLine && !trimmedLine.startsWith('#')) {
              const [key, ...valueParts] = trimmedLine.split('=');
              const value = valueParts.join('=');
              if (key && value) {
                result[key.trim()] = value.trim();
              }
            }
          }
          
          return result;
        }
      } catch (linkError) {
        log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ railway link:', 'red');
        log(linkError.message, 'red');
      }
      
      return {};
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ .env —Ñ–∞–π–ª–∞
function formatEnvVariables(variables) {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categories = {
    'Database': ['DATABASE_URL'],
    'Authentication': ['JWT_SECRET'],
    'API Configuration': ['API_URL', 'PORT', 'NODE_ENV'],
    'Railway Integration': ['RAILWAY_PUBLIC_URL', 'RAILWAY_PUBLIC_DOMAIN'],
    'Telegram Bot': ['TELEGRAM_BOT_TOKEN', 'ADMIN_IDS', 'WEBHOOK_URL'],
    'Redis': ['REDIS_URL'],
    'File Storage': ['S3_ACCESS_KEY', 'S3_SECRET_KEY', 'S3_BUCKET', 'S3_ENDPOINT', 'S3_REGION', 'S3_BACKUP_BUCKET', 'UPLOADS_ENDPOINT', 'BACKUPS_ENDPOINT'],
    'CORS': ['CORS_ORIGIN'],
    'Logging': ['LOG_LEVEL'],
    'Payment Systems': ['MULTIKASSA_API_URL', 'MULTIKASSA_API_KEY', 'PAYME_API_URL', 'PAYME_API_KEY'],
    'Monitoring': ['METRICS_ENABLED'],
    'Other': []
  };
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ .env
  let content = '# VHM24 Environment Variables\n';
  content += `# –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ Railway: ${new Date().toISOString()}\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  for (const [category, keys] of Object.entries(categories)) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryVars = keys.filter(key => variables[key]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (category === 'Other') {
      const otherVars = Object.keys(variables).filter(key => {
        return !Object.values(categories).flat().includes(key);
      });
      
      if (otherVars.length > 0) {
        content += `# ${category}\n`;
        
        for (const key of otherVars) {
          content += `${key}=${variables[key]}\n`;
        }
        
        content += '\n';
      }
      
      continue;
    }
    
    if (categoryVars.length > 0) {
      content += `# ${category}\n`;
      
      for (const key of categoryVars) {
        content += `${key}=${variables[key]}\n`;
      }
      
      content += '\n';
    }
  }
  
  return content;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
function printEnvVariables(variables) {
  const content = formatEnvVariables(variables);
  console.log(content);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway...', 'blue');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Railway CLI –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!checkRailwayCLI() || !checkRailwayAuth()) {
    return;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway
  const variables = getRailwayVariables();
  
  if (Object.keys(variables).length === 0) {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway', 'red');
    return;
  }
  
  log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${Object.keys(variables).length} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway`, 'green');
  
  // –í—ã–≤–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
  printEnvVariables(variables);
  
  log('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'green');
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();
