require('dotenv').config();
const { redis, cacheManagers } = require('./packages/shared-types/src/redis');

async function testRedisConnection() {
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...');
  console.log(`üìç URL: ${process.env.REDIS_URL}`);
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    await redis.ping();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    
    // –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...');
    const testKey = 'test:connection';
    const testValue = { message: 'Hello Redis!', timestamp: new Date() };
    
    // SET
    await redis.set(testKey, JSON.stringify(testValue));
    console.log('‚úÖ SET –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    // GET
    const retrieved = await redis.get(testKey);
    const parsed = JSON.parse(retrieved);
    console.log('‚úÖ GET –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', parsed);
    
    // DELETE
    await redis.del(testKey);
    console.log('‚úÖ DELETE –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    // –¢–µ—Å—Ç 3: –†–∞–±–æ—Ç–∞ —Å CacheManager
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CacheManager...');
    const cache = cacheManagers.machines;
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    const testData = {
      id: '123',
      name: 'Test Machine',
      status: 'ONLINE',
      createdAt: new Date()
    };
    
    await cache.set('test:machine', testData, 60); // TTL 60 —Å–µ–∫—É–Ω–¥
    console.log('‚úÖ CacheManager SET —É—Å–ø–µ—à–µ–Ω');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    const cachedData = await cache.get('test:machine');
    console.log('‚úÖ CacheManager GET —É—Å–ø–µ—à–µ–Ω:', cachedData);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ TTL
    const ttl = await cache.ttl('test:machine');
    console.log(`‚úÖ TTL –ø—Ä–æ–≤–µ—Ä–µ–Ω: ${ttl} —Å–µ–∫—É–Ω–¥`);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ
    await cache.delete('test:machine');
    console.log('‚úÖ CacheManager DELETE —É—Å–ø–µ—à–µ–Ω');
    
    // –¢–µ—Å—Ç 4: –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π
    await cache.set('machines:list:page1', ['machine1', 'machine2'], 60);
    await cache.set('machines:list:page2', ['machine3', 'machine4'], 60);
    await cache.set('machines:stats', { total: 4, online: 3 }, 60);
    console.log('‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã');
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
    await cache.deletePattern('machines:list:*');
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ stats –æ—Å—Ç–∞–ª—Å—è
    const stats = await cache.get('machines:stats');
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', stats ? 'stats —Å–æ—Ö—Ä–∞–Ω–µ–Ω' : 'stats —É–¥–∞–ª–µ–Ω');
    
    // –û—á–∏—Å—Ç–∫–∞
    await cache.delete('machines:stats');
    
    // –¢–µ—Å—Ç 5: –§—É–Ω–∫—Ü–∏—è cache()
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ cache()...');
    
    let callCount = 0;
    const expensiveOperation = async () => {
      callCount++;
      console.log(`  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Ä–æ–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤—ã–∑–æ–≤ #${callCount})...`);
      await new Promise(resolve => setTimeout(resolve, 100));
      return { result: 'expensive data', count: callCount };
    };
    
    // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –≤—ã–ø–æ–ª–Ω–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é
    const result1 = await cache.cache('expensive:op', expensiveOperation, 30);
    console.log('  –†–µ–∑—É–ª—å—Ç–∞—Ç 1:', result1);
    
    // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –≤–µ—Ä–Ω–µ—Ç –∏–∑ –∫–µ—à–∞
    const result2 = await cache.cache('expensive:op', expensiveOperation, 30);
    console.log('  –†–µ–∑—É–ª—å—Ç–∞—Ç 2:', result2);
    console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è cache() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: ${callCount})`);
    
    // –û—á–∏—Å—Ç–∫–∞
    await cache.delete('expensive:op');
    
    // –¢–µ—Å—Ç 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    const testDataLarge = Array(100).fill(null).map((_, i) => ({
      id: `machine-${i}`,
      name: `Machine ${i}`,
      status: i % 3 === 0 ? 'OFFLINE' : 'ONLINE',
      data: { index: i, timestamp: new Date() }
    }));
    
    // –ó–∞–ø–∏—Å—å
    const writeStart = Date.now();
    await cache.set('perf:test', testDataLarge, 60);
    const writeTime = Date.now() - writeStart;
    console.log(`  –ó–∞–ø–∏—Å—å 100 –æ–±—ä–µ–∫—Ç–æ–≤: ${writeTime}ms`);
    
    // –ß—Ç–µ–Ω–∏–µ
    const readStart = Date.now();
    const readData = await cache.get('perf:test');
    const readTime = Date.now() - readStart;
    console.log(`  –ß—Ç–µ–Ω–∏–µ 100 –æ–±—ä–µ–∫—Ç–æ–≤: ${readTime}ms`);
    console.log(`‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –∑–∞–ø–∏—Å—å ${writeTime}ms, —á—Ç–µ–Ω–∏–µ ${readTime}ms`);
    
    // –û—á–∏—Å—Ç–∫–∞
    await cache.delete('perf:test');
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üéâ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Redis:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await redis.quit();
    console.log('\nüëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testRedisConnection();
