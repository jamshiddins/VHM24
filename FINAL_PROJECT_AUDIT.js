const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
};

class VHM24ProjectAudit {
    constructor() {
        this.auditResults = {
            timestamp: new Date().toISOString(),
            projectName: 'VHM24',
            gitRepo: 'https://github.com/jamshiddins/VHM24.git',
            checks: {},
            issues: [],
            recommendations: [],
            summary: {
                status: 'UNKNOWN',
                score: 0,
                totalChecks: 0,
                passedChecks: 0,
                failedChecks: 0,
                warningChecks: 0
            }
        };
    }

    log(message, color = 'white') {
        console.log(`${colors[color]}${message}${colors.reset}`);
    }

    logSection(title) {
        this.log(`\n${'='.repeat(80)}`, 'cyan');
        this.log(`${title}`, 'cyan');
        this.log(`${'='.repeat(80)}`, 'cyan');
    }

    logSubSection(title) {
        this.log(`\n${'‚îÄ'.repeat(50)}`, 'yellow');
        this.log(`${title}`, 'yellow');
        this.log(`${'‚îÄ'.repeat(50)}`, 'yellow');
    }

    checkGitSync() {
        this.logSubSection('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git
            const gitStatus = execSync('git status --porcelain', { 
                encoding: 'utf8',
                cwd: process.cwd()
            }).trim();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            const remoteUrl = execSync('git remote get-url origin', { 
                encoding: 'utf8',
                cwd: process.cwd()
            }).trim();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
            const lastCommit = execSync('git log -1 --oneline', { 
                encoding: 'utf8',
                cwd: process.cwd()
            }).trim();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–∏–π —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
            let behindAhead = '';
            try {
                behindAhead = execSync('git rev-list --left-right --count origin/main...HEAD', { 
                    encoding: 'utf8',
                    cwd: process.cwd()
                }).trim();
            } catch (error) {
                behindAhead = 'unknown';
            }
            
            const gitCheck = {
                status: 'PASS',
                localChanges: gitStatus === '',
                remoteUrl: remoteUrl,
                lastCommit: lastCommit,
                behindAhead: behindAhead,
                issues: []
            };
            
            if (gitStatus !== '') {
                gitCheck.status = 'WARNING';
                gitCheck.issues.push('–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–µ–º –¥–µ—Ä–µ–≤–µ');
                this.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', 'yellow');
                this.log(gitStatus, 'yellow');
            } else {
                this.log('‚úÖ –†–∞–±–æ—á–µ–µ –¥–µ—Ä–µ–≤–æ —á–∏—Å—Ç–æ–µ', 'green');
            }
            
            this.log(`üìç –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${remoteUrl}`, 'blue');
            this.log(`üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: ${lastCommit}`, 'blue');
            
            this.auditResults.checks.gitSync = gitCheck;
            return gitCheck;
            
        } catch (error) {
            const gitCheck = {
                status: 'FAIL',
                error: error.message,
                issues: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Git —Å—Ç–∞—Ç—É—Å–∞']
            };
            
            this.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Git:', 'red');
            this.log(error.message, 'red');
            
            this.auditResults.checks.gitSync = gitCheck;
            return gitCheck;
        }
    }

    checkProjectStructure() {
        this.logSubSection('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞');
        
        const requiredFiles = [
            'package.json',
            'README.md',
            'docker-compose.yml',
            '.env.example'
        ];
        
        const requiredDirs = [
            'backend',
            'services',
            'packages',
            'apps'
        ];
        
        const structureCheck = {
            status: 'PASS',
            files: {},
            directories: {},
            issues: []
        };
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        requiredFiles.forEach(file => {
            const exists = fs.existsSync(file);
            structureCheck.files[file] = exists;
            
            if (exists) {
                this.log(`‚úÖ ${file}`, 'green');
            } else {
                this.log(`‚ùå ${file}`, 'red');
                structureCheck.issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: ${file}`);
                structureCheck.status = 'WARNING';
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        requiredDirs.forEach(dir => {
            const exists = fs.existsSync(dir);
            structureCheck.directories[dir] = exists;
            
            if (exists) {
                this.log(`‚úÖ ${dir}/`, 'green');
            } else {
                this.log(`‚ùå ${dir}/`, 'red');
                structureCheck.issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
                structureCheck.status = 'WARNING';
            }
        });
        
        this.auditResults.checks.projectStructure = structureCheck;
        return structureCheck;
    }

    checkPackageJson() {
        this.logSubSection('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json');
        
        const packageCheck = {
            status: 'PASS',
            exists: false,
            valid: false,
            data: null,
            issues: []
        };
        
        try {
            if (fs.existsSync('package.json')) {
                packageCheck.exists = true;
                const packageData = JSON.parse(fs.readFileSync('package.json', 'utf8'));
                packageCheck.valid = true;
                packageCheck.data = packageData;
                
                this.log(`‚úÖ package.json –Ω–∞–π–¥–µ–Ω`, 'green');
                this.log(`üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: ${packageData.name}`, 'blue');
                this.log(`üè∑Ô∏è –í–µ—Ä—Å–∏—è: ${packageData.version}`, 'blue');
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                const requiredFields = ['name', 'version', 'scripts'];
                requiredFields.forEach(field => {
                    if (!packageData[field]) {
                        packageCheck.issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: ${field}`);
                        packageCheck.status = 'WARNING';
                    }
                });
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ scripts
                if (packageData.scripts) {
                    const importantScripts = ['start', 'dev', 'build', 'test'];
                    importantScripts.forEach(script => {
                        if (packageData.scripts[script]) {
                            this.log(`‚úÖ Script ${script}: ${packageData.scripts[script]}`, 'green');
                        } else {
                            this.log(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç script: ${script}`, 'yellow');
                        }
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                if (packageData.dependencies) {
                    this.log(`üìö –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Object.keys(packageData.dependencies).length}`, 'blue');
                }
                
                if (packageData.devDependencies) {
                    this.log(`üîß Dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Object.keys(packageData.devDependencies).length}`, 'blue');
                }
                
            } else {
                packageCheck.status = 'FAIL';
                packageCheck.issues.push('–§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
                this.log('‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
            }
            
        } catch (error) {
            packageCheck.status = 'FAIL';
            packageCheck.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ package.json: ${error.message}`);
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ package.json: ${error.message}`, 'red');
        }
        
        this.auditResults.checks.packageJson = packageCheck;
        return packageCheck;
    }

    checkNodeModules() {
        this.logSubSection('üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
        
        const nodeModulesCheck = {
            status: 'PASS',
            nodeModulesExists: false,
            packageLockExists: false,
            issues: []
        };
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ node_modules
        if (fs.existsSync('node_modules')) {
            nodeModulesCheck.nodeModulesExists = true;
            this.log('‚úÖ node_modules –Ω–∞–π–¥–µ–Ω', 'green');
            
            // –ü–æ–¥—Å—á–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            try {
                const nodeModulesContent = fs.readdirSync('node_modules');
                const packageCount = nodeModulesContent.filter(item => !item.startsWith('.')).length;
                this.log(`üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: ${packageCount}`, 'blue');
            } catch (error) {
                this.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ node_modules', 'yellow');
            }
        } else {
            nodeModulesCheck.status = 'WARNING';
            nodeModulesCheck.issues.push('node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω');
            this.log('‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ package-lock.json
        if (fs.existsSync('package-lock.json')) {
            nodeModulesCheck.packageLockExists = true;
            this.log('‚úÖ package-lock.json –Ω–∞–π–¥–µ–Ω', 'green');
        } else {
            nodeModulesCheck.issues.push('package-lock.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
            this.log('‚ö†Ô∏è package-lock.json –Ω–µ –Ω–∞–π–¥–µ–Ω', 'yellow');
        }
        
        this.auditResults.checks.nodeModules = nodeModulesCheck;
        return nodeModulesCheck;
    }

    checkDockerConfig() {
        this.logSubSection('üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        
        const dockerCheck = {
            status: 'PASS',
            dockerCompose: false,
            dockerfile: false,
            issues: []
        };
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml
        if (fs.existsSync('docker-compose.yml')) {
            dockerCheck.dockerCompose = true;
            this.log('‚úÖ docker-compose.yml –Ω–∞–π–¥–µ–Ω', 'green');
        } else {
            dockerCheck.issues.push('docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω');
            this.log('‚ö†Ô∏è docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω', 'yellow');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile
        if (fs.existsSync('Dockerfile')) {
            dockerCheck.dockerfile = true;
            this.log('‚úÖ Dockerfile –Ω–∞–π–¥–µ–Ω', 'green');
        } else {
            dockerCheck.issues.push('Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω');
            this.log('‚ö†Ô∏è Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω', 'yellow');
        }
        
        if (dockerCheck.issues.length > 0) {
            dockerCheck.status = 'WARNING';
        }
        
        this.auditResults.checks.dockerConfig = dockerCheck;
        return dockerCheck;
    }

    checkEnvironmentConfig() {
        this.logSubSection('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        
        const envCheck = {
            status: 'PASS',
            envFiles: {},
            issues: []
        };
        
        const envFiles = ['.env', '.env.example', '.env.production', '.env.development'];
        
        envFiles.forEach(file => {
            const exists = fs.existsSync(file);
            envCheck.envFiles[file] = exists;
            
            if (exists) {
                this.log(`‚úÖ ${file} –Ω–∞–π–¥–µ–Ω`, 'green');
            } else {
                this.log(`‚ö†Ô∏è ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                if (file === '.env.example') {
                    envCheck.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .env.example');
                    envCheck.status = 'WARNING';
                }
            }
        });
        
        this.auditResults.checks.environmentConfig = envCheck;
        return envCheck;
    }

    checkServices() {
        this.logSubSection('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤');
        
        const servicesCheck = {
            status: 'PASS',
            services: {},
            issues: []
        };
        
        const servicesDir = 'services';
        
        if (fs.existsSync(servicesDir)) {
            try {
                const servicesList = fs.readdirSync(servicesDir);
                
                servicesList.forEach(service => {
                    const servicePath = path.join(servicesDir, service);
                    const servicePackageJson = path.join(servicePath, 'package.json');
                    
                    if (fs.statSync(servicePath).isDirectory()) {
                        const serviceInfo = {
                            exists: true,
                            hasPackageJson: fs.existsSync(servicePackageJson),
                            issues: []
                        };
                        
                        if (serviceInfo.hasPackageJson) {
                            this.log(`‚úÖ –°–µ—Ä–≤–∏—Å ${service}: package.json –Ω–∞–π–¥–µ–Ω`, 'green');
                        } else {
                            this.log(`‚ö†Ô∏è –°–µ—Ä–≤–∏—Å ${service}: package.json –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                            serviceInfo.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç package.json');
                        }
                        
                        servicesCheck.services[service] = serviceInfo;
                    }
                });
                
                this.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${Object.keys(servicesCheck.services).length}`, 'blue');
                
            } catch (error) {
                servicesCheck.status = 'FAIL';
                servicesCheck.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ services: ${error.message}`);
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ services: ${error.message}`, 'red');
            }
        } else {
            servicesCheck.status = 'WARNING';
            servicesCheck.issues.push('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è services –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            this.log('‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è services –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'yellow');
        }
        
        this.auditResults.checks.services = servicesCheck;
        return servicesCheck;
    }

    checkBackend() {
        this.logSubSection('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ backend');
        
        const backendCheck = {
            status: 'PASS',
            exists: false,
            hasPackageJson: false,
            issues: []
        };
        
        if (fs.existsSync('backend')) {
            backendCheck.exists = true;
            this.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backend –Ω–∞–π–¥–µ–Ω–∞', 'green');
            
            if (fs.existsSync('backend/package.json')) {
                backendCheck.hasPackageJson = true;
                this.log('‚úÖ backend/package.json –Ω–∞–π–¥–µ–Ω', 'green');
            } else {
                backendCheck.issues.push('backend/package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
                this.log('‚ö†Ô∏è backend/package.json –Ω–µ –Ω–∞–π–¥–µ–Ω', 'yellow');
            }
        } else {
            backendCheck.status = 'WARNING';
            backendCheck.issues.push('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            this.log('‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'yellow');
        }
        
        this.auditResults.checks.backend = backendCheck;
        return backendCheck;
    }

    checkApps() {
        this.logSubSection('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π');
        
        const appsCheck = {
            status: 'PASS',
            exists: false,
            apps: {},
            issues: []
        };
        
        if (fs.existsSync('apps')) {
            appsCheck.exists = true;
            this.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è apps –Ω–∞–π–¥–µ–Ω–∞', 'green');
            
            try {
                const appsList = fs.readdirSync('apps');
                
                appsList.forEach(app => {
                    const appPath = path.join('apps', app);
                    const appPackageJson = path.join(appPath, 'package.json');
                    
                    if (fs.statSync(appPath).isDirectory()) {
                        const appInfo = {
                            exists: true,
                            hasPackageJson: fs.existsSync(appPackageJson),
                            issues: []
                        };
                        
                        if (appInfo.hasPackageJson) {
                            this.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${app}: package.json –Ω–∞–π–¥–µ–Ω`, 'green');
                        } else {
                            this.log(`‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${app}: package.json –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                            appInfo.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç package.json');
                        }
                        
                        appsCheck.apps[app] = appInfo;
                    }
                });
                
                this.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${Object.keys(appsCheck.apps).length}`, 'blue');
                
            } catch (error) {
                appsCheck.status = 'FAIL';
                appsCheck.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ apps: ${error.message}`);
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ apps: ${error.message}`, 'red');
            }
        } else {
            appsCheck.status = 'WARNING';
            appsCheck.issues.push('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è apps –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            this.log('‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è apps –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'yellow');
        }
        
        this.auditResults.checks.apps = appsCheck;
        return appsCheck;
    }

    calculateScore() {
        const checks = this.auditResults.checks;
        let totalScore = 0;
        let maxScore = 0;
        
        Object.keys(checks).forEach(checkName => {
            const check = checks[checkName];
            maxScore += 100;
            
            if (check.status === 'PASS') {
                totalScore += 100;
            } else if (check.status === 'WARNING') {
                totalScore += 70;
            } else if (check.status === 'FAIL') {
                totalScore += 0;
            }
        });
        
        return Math.round((totalScore / maxScore) * 100);
    }

    generateSummary() {
        const checks = this.auditResults.checks;
        let passedChecks = 0;
        let failedChecks = 0;
        let warningChecks = 0;
        
        Object.keys(checks).forEach(checkName => {
            const check = checks[checkName];
            if (check.status === 'PASS') {
                passedChecks++;
            } else if (check.status === 'WARNING') {
                warningChecks++;
            } else if (check.status === 'FAIL') {
                failedChecks++;
            }
        });
        
        const totalChecks = Object.keys(checks).length;
        const score = this.calculateScore();
        
        let status = 'EXCELLENT';
        if (score >= 90) {
            status = 'EXCELLENT';
        } else if (score >= 80) {
            status = 'GOOD';
        } else if (score >= 70) {
            status = 'FAIR';
        } else if (score >= 60) {
            status = 'POOR';
        } else {
            status = 'CRITICAL';
        }
        
        this.auditResults.summary = {
            status,
            score,
            totalChecks,
            passedChecks,
            failedChecks,
            warningChecks
        };
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
        Object.keys(checks).forEach(checkName => {
            const check = checks[checkName];
            if (check.issues && check.issues.length > 0) {
                check.issues.forEach(issue => {
                    this.auditResults.issues.push(`[${checkName}] ${issue}`);
                });
            }
        });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (failedChecks > 0) {
            this.auditResults.recommendations.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ');
        }
        
        if (warningChecks > 0) {
            this.auditResults.recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞');
        }
        
        if (!this.auditResults.checks.nodeModules?.nodeModulesExists) {
            this.auditResults.recommendations.push('–í—ã–ø–æ–ª–Ω–∏—Ç–µ npm install –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
        }
        
        if (!this.auditResults.checks.dockerConfig?.dockerCompose) {
            this.auditResults.recommendations.push('–î–æ–±–∞–≤—å—Ç–µ docker-compose.yml –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è');
        }
        
        if (!this.auditResults.checks.environmentConfig?.envFiles['.env.example']) {
            this.auditResults.recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ .env.example —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        }
    }

    printFinalReport() {
        this.logSection('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ê–£–î–ò–¢–ê VHM24');
        
        const summary = this.auditResults.summary;
        
        // –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        const statusColors = {
            'EXCELLENT': 'green',
            'GOOD': 'green',
            'FAIR': 'yellow',
            'POOR': 'red',
            'CRITICAL': 'red'
        };
        
        this.log(`\nüéØ –°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê: ${summary.status}`, statusColors[summary.status]);
        this.log(`üìà –û–ë–©–ò–ô –ë–ê–õ–õ: ${summary.score}/100`, summary.score >= 80 ? 'green' : summary.score >= 60 ? 'yellow' : 'red');
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
        this.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ï–†–û–ö:`, 'blue');
        this.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${summary.passedChecks}/${summary.totalChecks}`, 'green');
        this.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${summary.warningChecks}/${summary.totalChecks}`, 'yellow');
        this.log(`   ‚ùå –û—à–∏–±–∫–∏: ${summary.failedChecks}/${summary.totalChecks}`, 'red');
        
        // –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if (this.auditResults.issues.length > 0) {
            this.log(`\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:`, 'red');
            this.auditResults.issues.forEach(issue => {
                this.log(`   ‚Ä¢ ${issue}`, 'red');
            });
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (this.auditResults.recommendations.length > 0) {
            this.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`, 'yellow');
            this.auditResults.recommendations.forEach(rec => {
                this.log(`   ‚Ä¢ ${rec}`, 'yellow');
            });
        }
        
        // –í—ã–≤–æ–¥—ã
        this.log(`\nüìã –í–´–í–û–î–´:`, 'blue');
        
        if (summary.status === 'EXCELLENT' || summary.status === 'GOOD') {
            this.log('   ‚úÖ –ü—Ä–æ–µ–∫—Ç –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', 'green');
        } else if (summary.status === 'FAIR') {
            this.log('   ‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π', 'yellow');
        } else {
            this.log('   ‚ùå –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –¥–æ—Ä–∞–±–æ—Ç–æ–∫', 'red');
        }
        
        // –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        this.log(`\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:`, 'cyan');
        
        if (!this.auditResults.checks.nodeModules?.nodeModulesExists) {
            this.log('   1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm install', 'cyan');
        }
        
        if (summary.failedChecks > 0) {
            this.log('   2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏', 'cyan');
        }
        
        if (summary.warningChecks > 0) {
            this.log('   3. –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', 'cyan');
        }
        
        this.log('   4. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', 'cyan');
        this.log('   5. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é', 'cyan');
    }

    async runFullAudit() {
        this.logSection('üîç –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –ü–†–û–ï–ö–¢–ê VHM24');
        
        try {
            // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            await this.checkGitSync();
            await this.checkProjectStructure();
            await this.checkPackageJson();
            await this.checkNodeModules();
            await this.checkDockerConfig();
            await this.checkEnvironmentConfig();
            await this.checkServices();
            await this.checkBackend();
            await this.checkApps();
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            this.generateSummary();
            
            // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            this.printFinalReport();
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
            const reportPath = 'VHM24_AUDIT_REPORT.json';
            fs.writeFileSync(reportPath, JSON.stringify(this.auditResults, null, 2));
            this.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`, 'green');
            
            return this.auditResults;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–∞: ${error.message}`, 'red');
            throw error;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
if (require.main === module) {
    const audit = new VHM24ProjectAudit();
    audit.runFullAudit().catch(console.error);
}

module.exports = VHM24ProjectAudit;
