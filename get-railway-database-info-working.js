const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

async function getRailwayDatabaseInfo() {
    console.log('üöÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Railway...\n');

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Railway CLI
        try {
            execSync('railway --version', { stdio: 'pipe' });
            console.log('‚úÖ Railway CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } catch (error) {
            console.log('‚ùå Railway CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
            try {
                execSync('npm install -g @railway/cli', { stdio: 'inherit' });
                console.log('‚úÖ Railway CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            } catch (installError) {
                console.log('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Railway CLI:', installError.message);
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        try {
            const loginCheck = execSync('railway whoami', { stdio: 'pipe', encoding: 'utf8' });
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Railway:', loginCheck.trim());
        } catch (error) {
            console.log('‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Railway. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
            console.log('–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: railway login');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        try {
            const projects = execSync('railway projects', { stdio: 'pipe', encoding: 'utf8' });
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã Railway:');
            console.log(projects);
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É
        try {
            const status = execSync('railway status', { stdio: 'pipe', encoding: 'utf8' });
            console.log('üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:');
            console.log(status);
        } catch (error) {
            console.log('‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–æ–µ–∫—Ç—É Railway');
            console.log('–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: railway link');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        try {
            const variables = execSync('railway variables', { stdio: 'pipe', encoding: 'utf8' });
            console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway:');
            console.log(variables);

            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ DATABASE_URL
            const lines = variables.split('\n');
            let databaseUrl = null;
            
            for (const line of lines) {
                if (line.includes('DATABASE_URL')) {
                    const match = line.match(/DATABASE_URL\s*=\s*(.+)/);
                    if (match) {
                        databaseUrl = match[1].trim();
                        break;
                    }
                }
            }

            if (databaseUrl) {
                console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω DATABASE_URL:', databaseUrl.substring(0, 50) + '...');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
                const envPath = path.join(__dirname, '.env');
                let envContent = '';
                
                if (fs.existsSync(envPath)) {
                    envContent = fs.readFileSync(envPath, 'utf8');
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º DATABASE_URL
                const lines = envContent.split('\n');
                let updated = false;
                
                for (let i = 0; i < lines.length; i++) {
                    if (lines[i].startsWith('DATABASE_URL=')) {
                        lines[i] = `DATABASE_URL="${databaseUrl}"`;
                        updated = true;
                        break;
                    }
                }
                
                if (!updated) {
                    lines.push(`DATABASE_URL="${databaseUrl}"`);
                }

                fs.writeFileSync(envPath, lines.join('\n'));
                console.log('‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º DATABASE_URL');
            } else {
                console.log('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            }

        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:', error.message);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
        try {
            const services = execSync('railway services', { stdio: 'pipe', encoding: 'utf8' });
            console.log('\nüîß –°–µ—Ä–≤–∏—Å—ã Railway:');
            console.log(services);
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:', error.message);
        }

    } catch (error) {
        console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
getRailwayDatabaseInfo().catch(console.error);
