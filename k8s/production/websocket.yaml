apiVersion: apps/v1
kind: Deployment
metadata:
  name: websocket
  namespace: vhm24-production
  labels:
    app: websocket
    component: realtime
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: websocket
  template:
    metadata:
      labels:
        app: websocket
        component: realtime
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: websocket
        image: ghcr.io/vhm24/websocket-server:latest
        ports:
        - containerPort: 8080
          name: websocket
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8080"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: vhm24-secrets
              key: jwt-secret
        - name: CORS_ORIGIN
          value: "https://vhm24.com,https://app.vhm24.com"
        - name: RATE_LIMIT_WINDOW
          value: "15m"
        - name: RATE_LIMIT_MAX_REQUESTS
          value: "1000"
        - name: CLUSTER_MODE
          value: "true"
        - name: SOCKET_IO_ADAPTER
          value: "redis"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: websocket-config
          mountPath: /app/config
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: websocket-config
        configMap:
          name: websocket-config
      - name: logs
        persistentVolumeClaim:
          claimName: logs-pvc
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - websocket
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: websocket-service
  namespace: vhm24-production
  labels:
    app: websocket
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
spec:
  type: LoadBalancer
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: websocket
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: websocket
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: websocket-hpa
  namespace: vhm24-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: websocket
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: websocket_connections_total
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: websocket-config
  namespace: vhm24-production
data:
  config.json: |
    {
      "server": {
        "port": 8080,
        "host": "0.0.0.0",
        "cors": {
          "origin": ["https://vhm24.com", "https://app.vhm24.com"],
          "methods": ["GET", "POST"],
          "credentials": true
        }
      },
      "redis": {
        "host": "redis-service",
        "port": 6379,
        "retryDelayOnFailover": 100,
        "enableReadyCheck": true,
        "maxRetriesPerRequest": 3
      },
      "socketio": {
        "transports": ["websocket", "polling"],
        "pingTimeout": 60000,
        "pingInterval": 25000,
        "upgradeTimeout": 10000,
        "maxHttpBufferSize": 1048576,
        "allowEIO3": false
      },
      "rooms": {
        "maxRoomsPerNamespace": 1000,
        "maxClientsPerRoom": 100,
        "cleanupInterval": 300000
      },
      "rateLimit": {
        "windowMs": 900000,
        "max": 1000,
        "message": "Too many requests from this IP"
      },
      "monitoring": {
        "enabled": true,
        "metricsPath": "/metrics",
        "healthPath": "/health",
        "readyPath": "/ready"
      },
      "logging": {
        "level": "info",
        "format": "json",
        "filename": "/app/logs/websocket.log",
        "maxFiles": 7,
        "maxSize": "100m"
      }
    }
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: websocket-pdb
  namespace: vhm24-production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: websocket
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: websocket-monitor
  namespace: vhm24-production
  labels:
    app: websocket
spec:
  selector:
    matchLabels:
      app: websocket
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
