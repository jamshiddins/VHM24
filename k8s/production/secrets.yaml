apiVersion: v1
kind: Secret
metadata:
  name: vhm24-secrets
  namespace: vhm24-production
  labels:
    app: vhm24
    component: secrets
type: Opaque
data:
  # Database credentials (base64 encoded)
  database-url: cG9zdGdyZXNxbDovL3ZobTI0X2FkbWluOnNlY3VyZV9wYXNzd29yZEBwb3N0Z3Jlcy1zZXJ2aWNlOjU0MzIvdmhtMjRfcHJvZHVjdGlvbg==
  
  # JWT secrets
  jwt-secret: eW91cl9qd3Rfc2VjcmV0X2tleV9oZXJlXzUxMmJpdF9taW5pbXVt
  refresh-secret: eW91cl9yZWZyZXNoX3NlY3JldF9rZXlfaGVyZV81MTJiaXRfbWluaW11bQ==
  
  # External service tokens
  telegram-bot-token: eW91cl90ZWxlZ3JhbV9ib3RfdG9rZW5faGVyZQ==
  webhook-secret: eW91cl93ZWJob29rX3NlY3JldF9rZXlfaGVyZQ==
  
  # AI/ML service keys
  openai-api-key: eW91cl9vcGVuYWlfYXBpX2tleV9oZXJl
  
  # Monitoring and analytics
  sentry-dsn: aHR0cHM6Ly95b3VyX3NlbnRyeV9kc25faGVyZQ==
  ga-tracking-id: eW91cl9nb29nbGVfYW5hbHl0aWNzX2lkX2hlcmU=
  
  # SMTP credentials
  smtp-username: eW91cl9zbXRwX3VzZXJuYW1l
  smtp-password: eW91cl9zbXRwX3Bhc3N3b3Jk
  
  # Slack webhook for alerts
  slack-webhook: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMveW91ci9zbGFjay93ZWJob29r
  
  # Additional security keys
  encryption-key: eW91cl9lbmNyeXB0aW9uX2tleV9oZXJlXzI1NmJpdF9taW5pbXVt
  api-key: eW91cl9hcGlfa2V5X2hlcmU=
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: vhm24-production
  labels:
    app: postgres
    component: database
type: Opaque
data:
  # PostgreSQL credentials
  username: dmhtMjRfYWRtaW4=  # vhm24_admin
  password: c2VjdXJlX3Bvc3RncmVzX3Bhc3N3b3Jk  # secure_postgres_password
  replication-password: c2VjdXJlX3JlcGxpY2F0aW9uX3Bhc3N3b3Jk  # secure_replication_password
  monitoring-password: c2VjdXJlX21vbml0b3JpbmdfcGFzc3dvcmQ=  # secure_monitoring_password
---
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: vhm24-production
  labels:
    app: vhm24
    component: cloud
type: Opaque
data:
  # AWS credentials for S3, CloudWatch, etc.
  access-key-id: eW91cl9hd3NfYWNjZXNzX2tleV9pZA==
  secret-access-key: eW91cl9hd3Nfc2VjcmV0X2FjY2Vzc19rZXk=
  region: dXMtd2VzdC0y  # us-west-2
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: vhm24-production
  labels:
    app: vhm24
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ewogICJhdXRocyI6IHsKICAgICJnaGNyLmlvIjogewogICAgICAidXNlcm5hbWUiOiAidmhtMjQtcm9ib3QiLAogICAgICAicGFzc3dvcmQiOiAieW91cl9naGNyX3Rva2VuX2hlcmUiLAogICAgICAiYXV0aCI6ICJiblYzWlc1MElHZGhkR05vSWpvPSIKICAgIH0KICB9Cn0=
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: vhm24-production
  labels:
    app: vhm24
    component: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key for HTTPS
  # These will be automatically managed by cert-manager
  tls.crt: ""  # Will be populated by cert-manager
  tls.key: ""  # Will be populated by cert-manager
---
apiVersion: v1
kind: Secret
metadata:
  name: backup-credentials
  namespace: vhm24-production
  labels:
    app: vhm24
    component: backup
type: Opaque
data:
  # Backup service credentials
  s3-access-key: eW91cl9iYWNrdXBfczNfYWNjZXNzX2tleQ==
  s3-secret-key: eW91cl9iYWNrdXBfczNfc2VjcmV0X2tleQ==
  encryption-passphrase: eW91cl9iYWNrdXBfZW5jcnlwdGlvbl9wYXNzcGhyYXNl
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vhm24-secret-store
  namespace: vhm24-production
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        secretRef:
          accessKeyID:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: vhm24-external-secrets
  namespace: vhm24-production
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vhm24-secret-store
    kind: SecretStore
  target:
    name: vhm24-production-secrets
    creationPolicy: Owner
  data:
  - secretKey: database-password
    remoteRef:
      key: vhm24/production/database
      property: password
  - secretKey: jwt-secret
    remoteRef:
      key: vhm24/production/jwt
      property: secret
  - secretKey: telegram-bot-token
    remoteRef:
      key: vhm24/production/telegram
      property: bot-token
  - secretKey: openai-api-key
    remoteRef:
      key: vhm24/production/ai
      property: openai-key
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-management-policy
  namespace: vhm24-production
data:
  policy.yaml: |
    # Secret Management Policy for VHM24 Production
    
    rotation:
      enabled: true
      schedule: "0 2 1 * *"  # Monthly on 1st at 2 AM
      types:
        - jwt-secrets
        - api-keys
        - database-passwords
    
    encryption:
      enabled: true
      algorithm: "AES-256-GCM"
      keyRotation: "quarterly"
    
    access:
      requireApproval: true
      auditLogging: true
      maxAccessTime: "4h"
      emergencyAccess: true
    
    backup:
      enabled: true
      encrypted: true
      retention: "90d"
      offSiteStorage: true
    
    compliance:
      standards:
        - "SOC2"
        - "ISO27001"
        - "GDPR"
        - "HIPAA"
      auditFrequency: "monthly"
      vulnerabilityScanning: true
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation
  namespace: vhm24-production
spec:
  schedule: "0 2 1 * *"  # Monthly on 1st at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secret-rotator
          containers:
          - name: secret-rotator
            image: vhm24/secret-rotator:latest
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting secret rotation..."
              
              # Rotate JWT secrets
              NEW_JWT_SECRET=$(openssl rand -base64 64)
              kubectl patch secret vhm24-secrets -p '{"data":{"jwt-secret":"'$(echo -n $NEW_JWT_SECRET | base64)'"}}' -n vhm24-production
              
              # Rotate API keys
              NEW_API_KEY=$(openssl rand -hex 32)
              kubectl patch secret vhm24-secrets -p '{"data":{"api-key":"'$(echo -n $NEW_API_KEY | base64)'"}}' -n vhm24-production
              
              # Restart deployments to pick up new secrets
              kubectl rollout restart deployment/backend -n vhm24-production
              kubectl rollout restart deployment/websocket -n vhm24-production
              kubectl rollout restart deployment/telegram-bot -n vhm24-production
              
              echo "Secret rotation completed"
            env:
            - name: KUBECONFIG
              value: /etc/kubeconfig/config
            volumeMounts:
            - name: kubeconfig
              mountPath: /etc/kubeconfig
              readOnly: true
          volumes:
          - name: kubeconfig
            secret:
              secretName: secret-rotator-kubeconfig
          restartPolicy: OnFailure
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-rotator
  namespace: vhm24-production
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: vhm24-production
  name: secret-rotator
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments/status"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-rotator
  namespace: vhm24-production
subjects:
- kind: ServiceAccount
  name: secret-rotator
  namespace: vhm24-production
roleRef:
  kind: Role
  name: secret-rotator
  apiGroup: rbac.authorization.k8s.io
