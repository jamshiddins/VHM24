apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vhm24-main-ingress
  namespace: vhm24-production
  labels:
    app: vhm24
    component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://vhm24.com,https://app.vhm24.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: https:; font-src 'self'; object-src 'none'; media-src 'self'; frame-ancestors 'none';";
spec:
  tls:
  - hosts:
    - vhm24.com
    - www.vhm24.com
    - api.vhm24.com
    - ws.vhm24.com
    - app.vhm24.com
    - grafana.vhm24.com
    - prometheus.vhm24.com
    secretName: vhm24-tls-certificate
  rules:
  # Main dashboard
  - host: vhm24.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dashboard-service
            port:
              number: 80
  
  # WWW redirect
  - host: www.vhm24.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dashboard-service
            port:
              number: 80
  
  # Application dashboard
  - host: app.vhm24.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dashboard-service
            port:
              number: 80
  
  # Backend API
  - host: api.vhm24.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 80
  
  # WebSocket server
  - host: ws.vhm24.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: websocket-service
            port:
              number: 8080
  
  # Grafana monitoring
  - host: grafana.vhm24.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 80
  
  # Prometheus monitoring  
  - host: prometheus.vhm24.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vhm24-api-ingress
  namespace: vhm24-production
  labels:
    app: vhm24
    component: ingress
    type: api
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/rate-limit: "2000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/auth-method: "GET"
    nginx.ingress.kubernetes.io/auth-url: "http://backend-service.vhm24-production.svc.cluster.local/api/auth/verify"
    nginx.ingress.kubernetes.io/auth-response-headers: "X-User-ID,X-User-Role,X-User-Permissions"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # Add API versioning
      location /api/v1/ {
        rewrite ^/api/v1/(.*)$ /api/$1 break;
      }
      
      # Health checks without auth
      location /api/health {
        auth_request off;
      }
      
      location /api/ready {
        auth_request off;
      }
      
      location /api/metrics {
        auth_request off;
      }
spec:
  tls:
  - hosts:
    - api.vhm24.com
    secretName: api-vhm24-tls
  rules:
  - host: api.vhm24.com
    http:
      paths:
      # Public endpoints (no auth required)
      - path: /api/health
        pathType: Exact
        backend:
          service:
            name: backend-service
            port:
              number: 80
      - path: /api/ready
        pathType: Exact
        backend:
          service:
            name: backend-service
            port:
              number: 80
      - path: /api/metrics
        pathType: Exact
        backend:
          service:
            name: backend-service
            port:
              number: 80
      - path: /api/auth/login
        pathType: Exact
        backend:
          service:
            name: backend-service
            port:
              number: 80
      - path: /api/auth/register
        pathType: Exact
        backend:
          service:
            name: backend-service
            port:
              number: 80
      
      # Protected API endpoints
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vhm24-websocket-ingress
  namespace: vhm24-production
  labels:
    app: vhm24
    component: ingress
    type: websocket
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "websocket-service"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$http_x_forwarded_for"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_cache_bypass $http_upgrade;
      
      # WebSocket specific settings
      proxy_http_version 1.1;
      proxy_buffering off;
      proxy_request_buffering off;
spec:
  tls:
  - hosts:
    - ws.vhm24.com
    secretName: ws-vhm24-tls
  rules:
  - host: ws.vhm24.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: websocket-service
            port:
              number: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vhm24-monitoring-ingress
  namespace: vhm24-production
  labels:
    app: vhm24
    component: ingress
    type: monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "VHM24 Monitoring - Authentication Required"
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
spec:
  tls:
  - hosts:
    - grafana.vhm24.com
    - prometheus.vhm24.com
    - alertmanager.vhm24.com
    secretName: monitoring-vhm24-tls
  rules:
  - host: grafana.vhm24.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 80
  
  - host: prometheus.vhm24.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090
  
  - host: alertmanager.vhm24.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: alertmanager-service
            port:
              number: 9093
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-network-policy
  namespace: vhm24-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 9093
  egress:
  - {}
---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-basic-auth
  namespace: vhm24-production
  labels:
    app: vhm24
    component: monitoring
type: Opaque
data:
  auth: YWRtaW46JGFwcjEkSDZ1bEg2MS4kNzI5c1lCSlJnTEpPQXVKZW5wU2ZtMA==  # admin:admin (change in production)
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: vhm24-wildcard-cert
  namespace: vhm24-production
spec:
  secretName: vhm24-wildcard-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - "*.vhm24.com"
  - "vhm24.com"
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@vhm24.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
    - dns01:
        route53:
          region: us-west-2
          accessKeyID: AKIA...
          secretAccessKeySecretRef:
            name: route53-credentials
            key: secret-access-key
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
data:
  # Global NGINX settings
  proxy-connect-timeout: "600"
  proxy-send-timeout: "600"
  proxy-read-timeout: "600"
  proxy-buffers-number: "4"
  proxy-buffer-size: "16k"
  proxy-busy-buffers-size: "64k"
  
  # Security settings
  ssl-protocols: "TLSv1.2 TLSv1.3"
  ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384"
  ssl-prefer-server-ciphers: "true"
  ssl-session-cache: "shared:SSL:10m"
  ssl-session-timeout: "10m"
  
  # Performance settings
  worker-processes: "auto"
  worker-connections: "65536"
  max-worker-open-files: "65536"
  
  # Rate limiting
  limit-rate-after: "1m"
  limit-rate: "1000k"
  
  # Compression
  enable-brotli: "true"
  brotli-level: "6"
  brotli-types: "text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap"
  
  # Monitoring
  enable-vts-status: "true"
  vts-status-zone-size: "10m"
  vts-default-filter-max-node: "50"
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nginx-ingress-monitor
  namespace: vhm24-production
  labels:
    app: nginx-ingress
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  namespaceSelector:
    matchNames:
    - ingress-nginx
  endpoints:
  - port: prometheus
    interval: 30s
    path: /metrics
