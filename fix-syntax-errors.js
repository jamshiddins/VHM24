#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö VHM24...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
async function fixFile(filePath) {
  try {
    let content = await fs.readFile(filePath, 'utf8');

    // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å } catch (error) {
    content = content.replace(
      /\)\s*\n\s*\} catch \(error\) \{[\s\S]*?\}/g,
      ')'
    );

    // 2. –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –ø–µ—Ä–µ–¥ } catch
    content = content.replace(/\)\s*\} catch \(error\) \{[\s\S]*?\}/g, '');

    // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    content = content.replace(
      /const \{ ([^}]+) \)\s*\} catch[\s\S]*?\}\} = require/g,
      'const { $1 } = require'
    );

    // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
    content = content.replace(
      /([a-zA-Z0-9_]+)\s*\)\s*\} catch \(error\) \{[\s\S]*?\}\}/g,
      '$1)'
    );

    // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏
    content = content.replace(
      /\{\s*([^}]+)\s*\)\s*\} catch \(error\) \{[\s\S]*?\}\}/g,
      '{ $1 }'
    );

    // 6. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ try –±–ª–æ–∫–∏
    content = content.replace(/try \{\s*try \{/g, 'try {');

    // 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ gateway
    if (filePath.includes('gateway')) {
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º require dotenv
      content = content.replace(
        /require\('dotenv'\)\.config\(\{ path: require\('path'\)\.join\(__dirname, '\.\.\/\.\.\/\.\.\/\.env'\)\s*\} catch[\s\S]*?\}\);/,
        "require('dotenv').config({ path: require('path').join(__dirname, '../../../.env') });"
      );
    }

    // 8. –£–±–∏—Ä–∞–µ–º logger = console –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
    if (content.includes('const logger = require')) {
      content = content.replace(/^const logger = console;\n/, '');
    }

    // 9. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–π
    content = content.replace(/;\)\s*\} catch \(error\) \{[\s\S]*?\}/g, ';');

    return content;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return null;
  }
}

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const filesToFix = [
  'services/gateway/src/index.js',
  'services/machines/src/index.js',
  'services/inventory/src/index.js',
  'services/tasks/src/index.js',
  'services/routes/src/index.js',
  'services/warehouse/src/index.js',
  'services/data-import/src/index.js'
];

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  for (const file of filesToFix) {
    const filePath = path.join(__dirname, file);
    console.log(`üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${file}...`);

    const fixedContent = await fixFile(filePath);
    if (fixedContent) {
      try {
        await fs.writeFile(filePath, fixedContent, 'utf8');
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ${file}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ ${file}:`, error.message);
      }
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è routes
  console.log('\nüìù –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è routes service...');
  try {
    const routesPath = path.join(__dirname, 'services/routes/src/index.js');
    let routesContent = await fs.readFile(routesPath, 'utf8');

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–º–µ–Ω–µ–º —Å—Ö–µ–º—ã
    routesContent = routesContent.replace(
      /patchroutes:idSchema/g,
      'patchRoutesIdSchema'
    );

    await fs.writeFile(routesPath, routesContent, 'utf8');
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω routes service');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ routes:', error.message);
  }

  console.log('\n‚úÖ –í—Å–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
