/**
 * Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
 */
require('dotenv').config({ path: '.env.worker' });
const { createClient } = require('redis');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis-–∫–ª–∏–µ–Ω—Ç–∞
let redisClient;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
 */
async function initWorkerQueue() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è REDIS_URL
    if (!process.env.REDIS_URL) {
      console.error('‚ùå REDIS_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    redisClient = createClient({
      url: process.env.REDIS_URL,
      socket: {
        reconnectStrategy: (retries) => {
          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - 20
          if (retries > 20) {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis');
            return new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis');
          }
          // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –º–∞–∫—Å–∏–º—É–º–æ–º –≤ 5 —Å–µ–∫—É–Ω–¥
          const delay = Math.min(Math.pow(2, retries) * 100, 5000);
          console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
          return delay;
        },
        connectTimeout: 10000, // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - 10 —Å–µ–∫—É–Ω–¥
        keepAlive: 5000 // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Redis
    redisClient.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ Redis:', err.message);
    });
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    await redisClient.connect();
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ');
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∑–∞–¥–∞—á
    await redisClient.subscribe('tasks', handleTask);
    
    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–∞');
    
    // –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–¥–∞—á
    startTaskProcessor();
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á:', error.message);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
 */
async function handleTask(message) {
  try {
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: ${message}`);
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á–∏
    const task = JSON.parse(message);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (task.type) {
      case 'SEND_NOTIFICATION':
        await processSendNotification(task);
        break;
      case 'GENERATE_REPORT':
        await processGenerateReport(task);
        break;
      case 'SYNC_DATA':
        await processSyncData(task);
        break;
      default:
        console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: ${task.type}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏:', error.message);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {object} task - –ó–∞–¥–∞—á–∞
 */
async function processSendNotification(task) {
  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${task.data.message} –¥–ª—è ${task.data.userId}`);
  // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
 * @param {object} task - –ó–∞–¥–∞—á–∞
 */
async function processGenerateReport(task) {
  console.log(`üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: ${task.data.reportType} –∑–∞ ${task.data.period}`);
  // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 * @param {object} task - –ó–∞–¥–∞—á–∞
 */
async function processSyncData(task) {
  console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: ${task.data.source} -> ${task.data.destination}`);
  // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
}

/**
 * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–¥–∞—á
 */
function startTaskProcessor() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–¥–∞—á...');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  process.on('SIGINT', async () => {
    console.log('üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–¥–∞—á...');
    
    if (redisClient) {
      await redisClient.quit();
    }
    
    process.exit(0);
  });
}

// –ó–∞–ø—É—Å–∫ worker'–∞
async function main() {
  console.log('üéØ Worker –∑–∞–ø—É—â–µ–Ω...');
  await initWorkerQueue();
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
});
