#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const { spawn } = require('child_process');
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);

console.log('üöÄ VHM24 - –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Node.js
async function stopAllProcesses() {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js...');
  try {
    await exec('taskkill /F /IM node.exe', { shell: 'cmd' });
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ—Ç
  }
  await sleep(2000);
}

// 2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
async function fixSyntaxErrors() {
  console.log('\nüìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...\n');
  
  // Gateway
  const gatewayPath = path.join(__dirname, 'services/gateway/src/index.js');
  const gatewayContent = `const logger = console;

require('dotenv').config({ path: require('path').join(__dirname, '../../../.env') });

process.env.SERVICE_NAME = 'gateway';

const Fastify = require('fastify');
const httpProxy = require('@fastify/http-proxy');
const multipart = require('@fastify/multipart');
const websocket = require('@fastify/websocket');
const { getPrismaClient } = require('@vhm24/database');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');

const fastify = Fastify({
  logger: true,
  bodyLimit: 10485760
});

const prisma = getPrismaClient();

// WebSocket –∫–ª–∏–µ–Ω—Ç—ã
const wsClients = new Set();

// CORS
fastify.register(require('@fastify/cors'), {
  origin: true,
  credentials: true
});

// Multipart –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
fastify.register(multipart);

// WebSocket
fastify.register(websocket);

// Health check
fastify.get('/health', async () => {
  return { 
    status: 'ok', 
    service: 'gateway',
    timestamp: new Date().toISOString()
  };
});

// WebSocket endpoint
fastify.register(async function (fastify) {
  fastify.get('/ws', { websocket: true }, (connection, req) => {
    logger.log('WebSocket client connected');
    wsClients.add(connection.socket);
    
    connection.socket.send(JSON.stringify({
      type: 'connected',
      message: 'Connected to VHM24 WebSocket',
      timestamp: new Date()
    }));
    
    connection.socket.on('message', async (message) => {
      try {
        const data = JSON.parse(message.toString());
        logger.log('WebSocket message:', data);
        
        connection.socket.send(JSON.stringify({
          type: 'echo',
          data: data,
          timestamp: new Date()
        }));
      } catch (error) {
        logger.error('WebSocket message error:', error);
      }
    });
    
    connection.socket.on('close', () => {
      logger.log('WebSocket client disconnected');
      wsClients.delete(connection.socket);
    });
  });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const config = require('./config');

// Proxy –∫ —Å–µ—Ä–≤–∏—Å–∞–º
Object.entries(config.services).forEach(([name, service]) => {
  fastify.register(httpProxy, {
    upstream: service.url,
    prefix: service.prefix,
    rewritePrefix: service.prefix
  });
});

// Start server
const start = async () => {
  try {
    const port = process.env.GATEWAY_PORT || 8000;
    await fastify.listen({ 
      port: port,
      host: '0.0.0.0'
    });
    logger.log('Gateway is running on port', port);
    logger.log('WebSocket available at ws://localhost:' + port + '/ws');
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};

start();

process.on('SIGTERM', async () => {
  wsClients.forEach(client => client.close());
  await fastify.close();
  await prisma.$disconnect();
  process.exit(0);
});
`;

  await fs.writeFile(gatewayPath, gatewayContent, 'utf8');
  console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω Gateway');

  // –ü—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  const serviceTemplate = (serviceName, port) => `const logger = console;

require('dotenv').config({ path: require('path').join(__dirname, '../../../.env') });

const Fastify = require('fastify');
const { getPrismaClient } = require('@vhm24/database');

const fastify = Fastify({ logger: true });
const prisma = getPrismaClient();

// CORS
fastify.register(require('@fastify/cors'), {
  origin: true,
  credentials: true
});

// Health check
fastify.get('/health', async () => {
  return { 
    status: 'ok', 
    service: '${serviceName}',
    timestamp: new Date().toISOString()
  };
});

// TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–æ—É—Ç—ã –¥–ª—è ${serviceName}

// Start server
const start = async () => {
  try {
    const port = process.env.PORT || ${port};
    await fastify.listen({ 
      port: port,
      host: '0.0.0.0'
    });
    logger.log('${serviceName} service is running on port', port);
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};

start();
`;

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
  const services = [
    { name: 'machines', port: 3002 },
    { name: 'inventory', port: 3003 },
    { name: 'tasks', port: 3004 },
    { name: 'warehouse', port: 3006 },
    { name: 'data-import', port: 3012 }
  ];

  for (const service of services) {
    const servicePath = path.join(__dirname, `services/${service.name}/src/index.js`);
    await fs.writeFile(servicePath, serviceTemplate(service.name, service.port), 'utf8');
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ${service.name}`);
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è routes
  const routesPath = path.join(__dirname, 'services/routes/src/index.js');
  let routesContent = await fs.readFile(routesPath, 'utf8');
  routesContent = routesContent.replace(/patchroutes:idSchema/g, 'patchRoutesIdSchema');
  await fs.writeFile(routesPath, routesContent, 'utf8');
  console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω routes');
}

// 3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å Web Dashboard
async function fixWebDashboard() {
  console.log('\nüåê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Web Dashboard...\n');
  
  const dashboardPath = path.join(__dirname, 'apps/web-dashboard');
  
  // –£–¥–∞–ª–∏—Ç—å node_modules –≤ dashboard
  try {
    await exec(`Remove-Item -Recurse -Force "${path.join(dashboardPath, 'node_modules')}" -ErrorAction SilentlyContinue`, { shell: 'powershell' });
    await exec(`Remove-Item -Force "${path.join(dashboardPath, 'package-lock.json')}" -ErrorAction SilentlyContinue`, { shell: 'powershell' });
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
  console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Web Dashboard...');
  await exec('npm install', { cwd: dashboardPath });
  
  console.log('‚úÖ Web Dashboard –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
}

// 4. –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
async function createStartScript() {
  console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞...\n');
  
  const startScript = `#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ VHM24...\\n');

// –°–µ—Ä–≤–∏—Å—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
const services = [
  { name: 'Gateway', path: 'services/gateway', port: 8000 },
  { name: 'Auth', path: 'services/auth', port: 3001 },
  { name: 'Machines', path: 'services/machines', port: 3002 },
  { name: 'Inventory', path: 'services/inventory', port: 3003 },
  { name: 'Tasks', path: 'services/tasks', port: 3004 },
  { name: 'Routes', path: 'services/routes', port: 3005 },
  { name: 'Warehouse', path: 'services/warehouse', port: 3006 },
  { name: 'Recipes', path: 'services/recipes', port: 3007 },
  { name: 'Notifications', path: 'services/notifications', port: 3008 },
  { name: 'Audit', path: 'services/audit', port: 3009 },
  { name: 'Monitoring', path: 'services/monitoring', port: 3010 },
  { name: 'Backup', path: 'services/backup', port: 3011 },
  { name: 'Data Import', path: 'services/data-import', port: 3012 }
];

const processes = [];

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
services.forEach((service, index) => {
  setTimeout(() => {
    console.log(\`üöÄ –ó–∞–ø—É—Å–∫ \${service.name} –Ω–∞ –ø–æ—Ä—Ç—É \${service.port}...\`);
    
    const proc = spawn('npm', ['start'], {
      cwd: path.join(__dirname, service.path),
      shell: true,
      env: { ...process.env, PORT: service.port }
    });
    
    proc.stdout.on('data', (data) => {
      console.log(\`[\${service.name}] \${data.toString().trim()}\`);
    });
    
    proc.stderr.on('data', (data) => {
      const msg = data.toString().trim();
      if (msg && !msg.includes('ExperimentalWarning')) {
        console.error(\`[\${service.name}] ‚ö†Ô∏è  \${msg}\`);
      }
    });
    
    processes.push(proc);
  }, index * 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
});

// –ó–∞–ø—É—Å–∫ Web Dashboard —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  console.log('\\nüåê –ó–∞–ø—É—Å–∫ Web Dashboard...');
  
  const dashboard = spawn('npm', ['run', 'dev'], {
    cwd: path.join(__dirname, 'apps/web-dashboard'),
    shell: true
  });
  
  dashboard.stdout.on('data', (data) => {
    console.log(\`[Dashboard] \${data.toString().trim()}\`);
  });
  
  dashboard.stderr.on('data', (data) => {
    const msg = data.toString().trim();
    if (msg && !msg.includes('ExperimentalWarning')) {
      console.error(\`[Dashboard] ‚ö†Ô∏è  \${msg}\`);
    }
  });
  
  processes.push(dashboard);
}, 15000);

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
setTimeout(() => {
  console.log('\\n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!');
  console.log('\\nüìç –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:');
  console.log('   Gateway API: http://localhost:8000');
  console.log('   Web Dashboard: http://localhost:3000');
  console.log('   Auth Service: http://localhost:3001');
  console.log('   Recipes Service: http://localhost:3007');
  console.log('\\nüìù –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
}, 20000);

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
  processes.forEach(proc => {
    if (proc && !proc.killed) {
      proc.kill('SIGINT');
    }
  });
  setTimeout(() => {
    process.exit(0);
  }, 2000);
});
`;

  await fs.writeFile(path.join(__dirname, 'start-vhm24.js'), startScript, 'utf8');
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç start-vhm24.js');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ VHM24...\n');
    
    // 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    await stopAllProcesses();
    
    // 2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    await fixSyntaxErrors();
    
    // 3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å Web Dashboard
    await fixWebDashboard();
    
    // 4. –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
    await createStartScript();
    
    console.log('\n‚úÖ –í–°–ï –ì–û–¢–û–í–û!');
    console.log('\nüìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
    console.log('   node start-vhm24.js');
    console.log('\nüéâ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
