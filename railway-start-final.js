const logger = require('@vhm24/shared/logger');

#!/usr/bin/env node

/**
 * VHM24 Railway Final Start Script
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try {
  require('dotenv').config();
} catch (error) {
  logger.info('‚ö†Ô∏è  dotenv not available, using environment variables');
}

logger.info('üöÇ VHM24 Railway Final Start...');
logger.info(`üìç Environment: ${process.env.NODE_ENV || 'production'}`);
logger.info(`üîå Port: ${process.env.PORT || 8000}`);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.NODE_ENV = process.env.NODE_ENV || 'production';
process.env.PORT = process.env.PORT || '8000';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if (!process.env.DATABASE_URL) {
  logger.error('‚ùå DATABASE_URL is required for Railway deployment');
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã
function runCommand(command, args = [], options = {}) {
  return new Promise((resolve, reject) => {
    logger.info(`üîß Running: ${command} ${args.join(' ')}`);
    
    const child = spawn(command, args, {
      stdio: 'inherit',
      shell: true,
      ...options
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Command failed with code ${code}`));
      }
    });

    child.on('error', reject);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
async function startService(serviceName, servicePath, port) {
  try {
    logger.info(`üöÄ Starting ${serviceName} service on port ${port}...`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
    process.env[`${serviceName.toUpperCase()}_PORT`] = port;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    require(servicePath);
    
    logger.info(`‚úÖ ${serviceName} service started successfully`);
    return true;
  } catch (error) {
    logger.error(`‚ùå Failed to start ${serviceName} service:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function startRailwayApp() {
  try {
    logger.info('üóÑÔ∏è  === DATABASE MIGRATION PHASE ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ schema.prisma
    const schemaPath = path.join(__dirname, 'packages/database/prisma/schema.prisma');
    if (!fs.existsSync(schemaPath)) {
      throw new Error('Prisma schema not found at packages/database/prisma/schema.prisma');
    }
    
    logger.info('‚úÖ Prisma schema found');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
    logger.info('üîß Generating Prisma client...');
    await runCommand('npx', ['prisma', 'generate'], {
      cwd: path.join(__dirname, 'packages/database')
    });
    logger.info('‚úÖ Prisma client generated');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    logger.info('üîß Running database migrations...');
    await runCommand('npx', ['prisma', 'migrate', 'deploy'], {
      cwd: path.join(__dirname, 'packages/database')
    });
    logger.info('‚úÖ Database migrations completed');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logger.info('üîß Testing database connection...');
    const { getAuthClient } = require('./packages/database');
    const prisma = getAuthClient();
    
    await prisma.$connect();
    logger.info('‚úÖ Database connection successful');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userCount = await prisma.user.count();
    logger.info(`üìä Users in database: ${userCount}`);
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (userCount === 0) {
      logger.info('üîß Creating default admin user...');
      const bcrypt = require('bcrypt');
      
      const adminUser = await prisma.user.create({
        data: {
          email: 'admin@vhm24.ru',
          name: 'System Administrator',
          passwordHash: await bcrypt.hash('admin123', 10),
          telegramId: process.env.ADMIN_IDS || '42283329',
          roles: ['ADMIN'],
          isActive: true
        }
      });
      
      logger.info('‚úÖ Default admin user created');
      logger.info(`üìß Email: admin@vhm24.ru`);
      logger.info(`üîë Password: admin123`);
      logger.info(`üì± Telegram ID: ${adminUser.telegramId}`);
    }
    
    await prisma.$disconnect();
    logger.info('üéâ Database migration completed successfully!');
    
    logger.info('\nüöÇ === APPLICATION DEPLOYMENT PHASE ===');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    const services = [
      { name: 'Auth', path: './services/auth/src/index.js', port: 3001 },
      { name: 'Machines', path: './services/machines/src/index.js', port: 3002 },
      { name: 'Inventory', path: './services/inventory/src/index.js', port: 3003 },
      { name: 'Tasks', path: './services/tasks/src/index.js', port: 3004 },
      { name: 'Bunkers', path: './services/bunkers/src/index.js', port: 3005 },
      { name: 'Notifications', path: './services/notifications/src/index.js', port: 3006 }
    ];

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ —Ñ–æ–Ω–µ
    for (const service of services) {
      if (fs.existsSync(service.path)) {
        setTimeout(() => {
          startService(service.name, service.path, service.port);
        }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
      } else {
        logger.info(`‚ö†Ô∏è  Service ${service.name} not found at ${service.path}`);
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º Telegram Bot –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å
    if (process.env.TELEGRAM_BOT_TOKEN && fs.existsSync('./services/telegram-bot/src/index.js')) {
      setTimeout(() => {
        logger.info('ü§ñ Starting Telegram Bot...');
        require('./services/telegram-bot/src/index.js');
      }, 2000);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º Gateway –ø–æ—Å–ª–µ–¥–Ω–∏–º (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å)
    setTimeout(() => {
      logger.info('üì° Starting Gateway service (main)...');
      require('./services/gateway/src/index.js');
    }, 3000);

    logger.info('üéâ All services initialization started!');
    logger.info(`üåê Application will be available on port ${process.env.PORT}`);
    
  } catch (error) {
    logger.error('‚ùå Railway deployment failed:', error.message);
    logger.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGTERM', () => {
  logger.info('üõë Received SIGTERM, shutting down...');
  process.exit(0);
});

process.on('SIGINT', () => {
  logger.info('üõë Received SIGINT, shutting down...');
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  logger.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Unhandled Rejection:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
startRailwayApp();
