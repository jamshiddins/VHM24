#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const { spawn } = require('child_process');
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);

console.log('üöÄ VHM24 - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫\n');

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const services = [
  'gateway', 'auth', 'machines', 'inventory', 'tasks', 
  'routes', 'warehouse', 'recipes', 'notifications', 
  'audit', 'monitoring', 'backup', 'data-import'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
async function fixSyntaxErrors() {
  console.log('üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö...\n');
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  const fixes = {
    'gateway': async (filePath) => {
      let content = await fs.readFile(filePath, 'utf8');
      // –£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
      content = content.replace(/\n\s*\)\s*\n\s*\} catch \(error\) \{/g, '\n} catch (error) {');
      // –ò—Å–ø—Ä–∞–≤–∏—Ç—å logger
      if (!content.includes('const logger = ')) {
        content = 'const logger = console;\n' + content;
      }
      return content;
    },
    'machines': async (filePath) => {
      let content = await fs.readFile(filePath, 'utf8');
      content = content.replace(/\n\s*\)\s*\n\s*\} catch \(error\) \{/g, '\n} catch (error) {');
      if (!content.includes('const logger = ')) {
        content = 'const logger = console;\n' + content;
      }
      return content;
    },
    'inventory': async (filePath) => {
      let content = await fs.readFile(filePath, 'utf8');
      content = content.replace(/\n\s*\)\s*\n\s*\} catch \(error\) \{/g, '\n} catch (error) {');
      if (!content.includes('const logger = ')) {
        content = 'const logger = console;\n' + content;
      }
      return content;
    },
    'tasks': async (filePath) => {
      let content = await fs.readFile(filePath, 'utf8');
      content = content.replace(/\n\s*\)\s*\n\s*\} catch \(error\) \{/g, '\n} catch (error) {');
      if (!content.includes('const logger = ')) {
        content = 'const logger = console;\n' + content;
      }
      return content;
    },
    'routes': async (filePath) => {
      let content = await fs.readFile(filePath, 'utf8');
      // –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –∏–º–µ–Ω–µ–º —Å—Ö–µ–º—ã
      content = content.replace(/patchroutes:idSchema/g, 'patchRoutesIdSchema');
      content = content.replace(/const patchRoutesIdSchema = \{/g, 'const patchRoutesIdSchema = {');
      // –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–æ—É—Ç–µ
      content = content.replace(/schema: patchRoutesIdSchema/g, 'schema: patchRoutesIdSchema');
      if (!content.includes('const logger = ')) {
        content = 'const logger = console;\n' + content;
      }
      return content;
    },
    'warehouse': async (filePath) => {
      let content = await fs.readFile(filePath, 'utf8');
      content = content.replace(/\n\s*\)\s*\n\s*\} catch \(error\) \{/g, '\n} catch (error) {');
      if (!content.includes('const logger = ')) {
        content = 'const logger = console;\n' + content;
      }
      return content;
    },
    'data-import': async (filePath) => {
      let content = await fs.readFile(filePath, 'utf8');
      content = content.replace(/\n\s*\)\s*\n\s*\} catch \(error\) \{/g, '\n} catch (error) {');
      if (!content.includes('const logger = ')) {
        content = 'const logger = console;\n' + content;
      }
      return content;
    },
    'backup': async (filePath) => {
      let content = await fs.readFile(filePath, 'utf8');
      // –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç backup —Å–µ—Ä–≤–∏—Å–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
      content = content.replace(/PORT: process\.env\.PORT \|\| 3007/g, 'PORT: process.env.PORT || 3011');
      content = content.replace(/port: 3007/g, 'port: 3011');
      if (!content.includes('const logger = ')) {
        content = 'const logger = console;\n' + content;
      }
      return content;
    }
  };

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  for (const service of services) {
    const filePath = path.join(__dirname, 'services', service, 'src', 'index.js');
    
    try {
      if (fixes[service]) {
        const content = await fixes[service](filePath);
        await fs.writeFile(filePath, content, 'utf8');
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ${service}`);
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ ${service}: ${error.message}`);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function setupLocalDatabase() {
  console.log('\nüóÑÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
  
  // –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  const envContent = `
# Database
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/vhm24?schema=public"

# JWT
JWT_SECRET="${require('crypto').randomBytes(32).toString('hex')}"

# Redis
REDIS_URL="redis://localhost:6379"

# Telegram Bot
TELEGRAM_BOT_TOKEN="your-telegram-bot-token"
ADMIN_IDS="your-telegram-id"

# Services Ports
GATEWAY_PORT=8000
AUTH_PORT=3001
MACHINES_PORT=3002
INVENTORY_PORT=3003
TASKS_PORT=3004
ROUTES_PORT=3005
WAREHOUSE_PORT=3006
RECIPES_PORT=3007
NOTIFICATIONS_PORT=3008
AUDIT_SERVICE_PORT=3009
MONITORING_PORT=3010
BACKUP_PORT=3011
DATA_IMPORT_PORT=3012

# Email (optional)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASS=your-app-password

# S3 Storage (optional)
S3_ENDPOINT=https://nyc3.digitaloceanspaces.com
S3_ACCESS_KEY=your-access-key
S3_SECRET_KEY=your-secret-key
S3_BUCKET=vhm24-uploads
S3_REGION=nyc3

# Environment
NODE_ENV=development
`;

  await fs.writeFile(path.join(__dirname, '.env'), envContent.trim(), 'utf8');
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Web Dashboard
async function fixWebDashboard() {
  console.log('\nüåê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Web Dashboard...\n');
  
  const dashboardPath = path.join(__dirname, 'apps', 'web-dashboard');
  
  // 1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å next.config.js
  const nextConfigPath = path.join(dashboardPath, 'next.config.js');
  let nextConfig = await fs.readFile(nextConfigPath, 'utf8');
  nextConfig = nextConfig.replace(/experimental: \{[\s\S]*?\},/g, '');
  await fs.writeFile(nextConfigPath, nextConfig, 'utf8');
  console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω next.config.js');
  
  // 2. –°–æ–∑–¥–∞—Ç—å postcss.config.js
  const postcssConfig = `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}`;
  await fs.writeFile(path.join(dashboardPath, 'postcss.config.js'), postcssConfig, 'utf8');
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω postcss.config.js');
  
  // 3. –°–æ–∑–¥–∞—Ç—å tailwind.config.js –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const tailwindConfig = `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}`;
  
  try {
    await fs.access(path.join(dashboardPath, 'tailwind.config.js'));
  } catch {
    await fs.writeFile(path.join(dashboardPath, 'tailwind.config.js'), tailwindConfig, 'utf8');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω tailwind.config.js');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
async function reinstallDependencies() {
  console.log('\nüì¶ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...\n');
  
  try {
    // –£–¥–∞–ª–∏—Ç—å node_modules –∏ package-lock.json
    console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    await exec('Remove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue', { shell: 'powershell' });
    await exec('Remove-Item -Force package-lock.json -ErrorAction SilentlyContinue', { shell: 'powershell' });
    
    // –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à npm
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ npm...');
    await exec('npm cache clean --force');
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    console.log('üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    await exec('npm install --legacy-peer-deps');
    
    console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma –∫–ª–∏–µ–Ω—Ç–∞
async function generatePrismaClient() {
  console.log('\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞...\n');
  
  try {
    await exec('npx prisma generate --schema=packages/database/prisma/schema.prisma');
    console.log('‚úÖ Prisma –∫–ª–∏–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma:', error.message);
  }
}

// –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
async function createStartScript() {
  console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞...\n');
  
  const startScript = `#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ VHM24 –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...\\n');

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
const services = [
  { name: 'Auth', path: 'services/auth', port: 3001 },
  { name: 'Machines', path: 'services/machines', port: 3002 },
  { name: 'Inventory', path: 'services/inventory', port: 3003 },
  { name: 'Tasks', path: 'services/tasks', port: 3004 },
  { name: 'Routes', path: 'services/routes', port: 3005 },
  { name: 'Warehouse', path: 'services/warehouse', port: 3006 },
  { name: 'Recipes', path: 'services/recipes', port: 3007 },
  { name: 'Notifications', path: 'services/notifications', port: 3008 },
  { name: 'Audit', path: 'services/audit', port: 3009 },
  { name: 'Monitoring', path: 'services/monitoring', port: 3010 },
  { name: 'Backup', path: 'services/backup', port: 3011 },
  { name: 'Data Import', path: 'services/data-import', port: 3012 },
  { name: 'Gateway', path: 'services/gateway', port: 8000 }
];

// –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
services.forEach(service => {
  const proc = spawn('npm', ['start'], {
    cwd: path.join(__dirname, service.path),
    shell: true,
    env: { ...process.env, PORT: service.port }
  });
  
  proc.stdout.on('data', (data) => {
    console.log(\`[\${service.name}] \${data}\`);
  });
  
  proc.stderr.on('data', (data) => {
    console.error(\`[\${service.name}] ‚ö†Ô∏è  \${data}\`);
  });
});

// –ó–∞–ø—É—Å—Ç–∏—Ç—å Web Dashboard
setTimeout(() => {
  console.log('\\nüåê –ó–∞–ø—É—Å–∫ Web Dashboard...');
  const dashboard = spawn('npm', ['run', 'dev'], {
    cwd: path.join(__dirname, 'apps/web-dashboard'),
    shell: true
  });
  
  dashboard.stdout.on('data', (data) => {
    console.log(\`[Dashboard] \${data}\`);
  });
}, 5000);

console.log('\\n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!');
console.log('\\nüìç –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:');
console.log('   Gateway API: http://localhost:8000');
console.log('   Web Dashboard: http://localhost:3000');
console.log('\\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
`;

  await fs.writeFile(path.join(__dirname, 'start-dev.js'), startScript, 'utf8');
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç start-dev.js');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ VHM24...\n');
    
    // 1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    await fixSyntaxErrors();
    
    // 2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await setupLocalDatabase();
    
    // 3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å Web Dashboard
    await fixWebDashboard();
    
    // 4. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    await reinstallDependencies();
    
    // 5. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Prisma –∫–ª–∏–µ–Ω—Ç
    await generatePrismaClient();
    
    // 6. –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
    await createStartScript();
    
    console.log('\n‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!');
    console.log('\nüìã –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
    console.log('2. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: createdb vhm24');
    console.log('3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npx prisma migrate deploy --schema=packages/database/prisma/schema.prisma');
    console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: node start-dev.js');
    console.log('\nüéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
