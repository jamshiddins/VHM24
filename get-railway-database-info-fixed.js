const readline = require('readline-sync');
const fs = require('fs');
const { execSync } = require('child_process');

console.log('üöÄ Railway Database Info Getter (Fixed)');
console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Railway');
console.log('============================================================\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Railway CLI;
function checkRailwayCLI() {
    try {
        execSync('railway --version', { "stdio": 'pipe' });
        console.log('‚úÖ Railway CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        return true;
    } catch (error) {
        console.log('‚ùå Railway CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        return false;
    }
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Railway;
function loginToRailway() {
    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Railway...');
    
    try {
        const whoami = execSync('railway whoami', { "encoding": 'utf8', "stdio": 'pipe' });
        console.log('‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫:', whoami.trim());
        return true;
    } catch (error) {
        console.log('‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Railway');
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞);
function getProjects() {
    console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    
    try {
        // –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ Railway CLI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞;
        const projects = execSync('railway status', { "encoding": 'utf8' });
        console.log('–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:');
        console.log(projects);
        return true;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.message);
        return false;
    }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É;
function connectToProject() {
    console.log('\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É...');
    
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞;
        const status = execSync('railway status', { "encoding": 'utf8', "stdio": 'pipe' });
        
        if (status.includes('VHM24') || status.includes('vendhub')) {
            console.log('‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–æ–µ–∫—Ç—É VHM24/VendHub');
            return true;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è;
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç—É...');
        execSync('railway link', { "stdio": 'inherit' });
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É —É—Å–ø–µ—à–Ω–æ');
        return true;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç—É:', error.message);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç;
        const createNew = readline.question('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç? (y/n): ');
        if (createNew.toLowerCase() === 'y') {
            try {
                const projectName = readline.question('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: VHM24): ') || 'VHM24';
                execSync(`railway login`, { "stdio": 'inherit' });
                console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                return true;
            } catch (createError) {
                await console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', createError.message);
                return false;
            }
        }
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è;
function getDatabaseVariables() {
    console.log('\nüóÑÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        const variables = execSync('railway variables', { "encoding": 'utf8' });
        console.log('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
        console.log(variables);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º DATABASE_URL;
        const lines = variables.split('\n');
        let databaseUrl = '';
        
        for (const line of lines) {
            if (line.includes('DATABASE_URL')) {
                const parts = line.split('=');
                if (parts.length > 1) {
                    databaseUrl = parts.slice(1).join('=').trim();
                    break;
                }
            }
        }
        
        if (databaseUrl) {
            console.log('\n‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω');
            console.log('"DATABASE_URL":', databaseUrl.substring(0, 50) + '...');
            return databaseUrl;
        } else {
            console.log('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å PostgreSQL —Å–µ—Ä–≤–∏—Å;
            const addDB = readline.question('–î–æ–±–∞–≤–∏—Ç—å PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (y/n): ');
            if (addDB.toLowerCase() === 'y') {
                try {
                    console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ PostgreSQL...');
                    execSync('railway add postgresql', { "stdio": 'inherit' });
                    
                    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞;
                    console.log('–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
                    setTimeout(() => {
                        return getDatabaseVariables();
                    }, 5000);
                } catch (addError) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "PostgreSQL":', addError.message);
                }
            }
            return null;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:', error.message);
        return null;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞;
function updateEnvFile(databaseUrl) {
    console.log('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞...');
    
    try {
        let envContent = '';
        
        // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env –µ—Å–ª–∏ –µ—Å—Ç—å;
        if (fs.existsSync('.env')) {
            envContent = fs.readFileSync('.env', 'utf8');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º DATABASE_URL;
        const lines = envContent.split('\n');
        let updated = false;
        
        for (let i = 0; i < lines.length; i++) {
            if (lines[i].startsWith('DATABASE_URL=')) {
                lines[i] = `DATABASE_URL="${databaseUrl}"`;
                updated = true;
                break;
            }
        }
        
        if (!updated) {
            lines.push(`DATABASE_URL="${databaseUrl}"`);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç;
        const requiredVars = [;
            'NODE_ENV=development',;
            'PORT=3000',;
            'JWT_SECRET=your-super-secret-jwt-key-change-in-production-' + Date.now(),;
            'TELEGRAM_BOT_TOKEN=your-telegram-bot-token',;
            'AWS_ACCESS_KEY_ID=your-aws-access-key',;
            'AWS_SECRET_ACCESS_KEY=your-aws-secret-key',;
            'AWS_REGION=us-east-1',;
            'S3_BUCKET_NAME=your-s3-bucket';
        ];
        
        for (const varLine of requiredVars) {
            const varName = varLine.split('=')[0];
            const exists = lines.some(line => line.startsWith(`${varName}=`));
            if (!exists) {
                lines.push(varLine);
            }
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env;
        fs.writeFileSync('.env', lines.filter(line => line.trim()).join('\n'));
        console.log('‚úÖ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω');
        
        // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º .env –¥–ª—è backend;
        const backendEnvPath = './backend/.env';
        fs.writeFileSync(backendEnvPath, lines.filter(line => line.trim()).join('\n'));
        console.log('‚úÖ backend/.env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω');
        
        return true;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ."env":', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö;
function testDatabaseConnection() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backend;
        const originalDir = process.cwd();
        process.chdir('./backend');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ;
        if (!fs.existsSync('node_modules')) {
            console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend...');
            execSync('npm install', { "stdio": 'inherit' });
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç;
        console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞...');
        execSync('npx prisma generate', { "stdio": 'inherit' });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏;
        console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
        execSync('npx prisma db push', { "stdio": 'inherit' });
        
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é;
        process.chdir(originalDir);
        return true;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏;
        try {
            process.chdir('./');
        } catch (e) {}
        
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL;
function getPublicUrl() {
    console.log('\nüåê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL...');
    
    try {
        const domain = execSync('railway domain', { "encoding": 'utf8' });
        console.log('–ü—É–±–ª–∏—á–Ω—ã–π –¥–æ–º–µ–Ω:');
        console.log(domain);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ .env;
        const url = domain.trim();
        if (url && url.includes('.railway.app')) {
            const envContent = fs.readFileSync('.env', 'utf8');
            const lines = envContent.split('\n');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º RAILWAY_URL;
            let updated = false;
            for (let i = 0; i < lines.length; i++) {
                if (lines[i].startsWith('RAILWAY_URL=')) {
                    lines[i] = `RAILWAY_URL="https"://${url}`;
                    updated = true;
                    break;
                }
            }
            
            if (!updated) {
                lines.push(`RAILWAY_URL="https"://${url}`);
            }
            
            fs.writeFileSync('.env', lines.join('\n'));
            console.log('‚úÖ RAILWAY_URL –¥–æ–±–∞–≤–ª–µ–Ω –≤ .env');
        }
        
        return true;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞:', error.message);
        return false;
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è;
async function main() {
    try {
        console.log('üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Railway –¥–ª—è VHM24\n');
        
        // –®–∞–≥ "1": –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway CLI;
        if (!checkRailwayCLI()) {
            console.log('\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Railway "CLI":');
            console.log('npm install -g @railway/cli');
            console.log('–∏–ª–∏');
            console.log('curl -fsSL "https"://railway.app/install.sh | sh');
            return;
        }
        
        // –®–∞–≥ "2": –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è;
        if (!loginToRailway()) {
            console.log('\n‚ùå –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ "Railway":');
            console.log('railway login');
            return;
        }
        
        // –®–∞–≥ "3": –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞;
        getProjects();
        
        // –®–∞–≥ "4": –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É;
        if (!connectToProject()) {
            console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É');
            return;
        }
        
        // –®–∞–≥ "5": –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö;
        const databaseUrl = getDatabaseVariables();
        if (!databaseUrl) {
            console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å DATABASE_URL');
            console.log('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å PostgreSQL –≤—Ä—É—á–Ω—É—é:');
            console.log('railway add postgresql');
            return;
        }
        
        // –®–∞–≥ "6": –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞;
        if (!updateEnvFile(databaseUrl)) {
            console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª');
            return;
        }
        
        // –®–∞–≥ "7": –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è;
        if (!testDatabaseConnection()) {
            console.log('\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            console.log('–ù–æ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        
        // –®–∞–≥ "8": –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL;
        getPublicUrl();
        
        console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('\nüìã –ß—Ç–æ –¥–∞–ª—å—à–µ:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª');
        console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: npm run dev');
        console.log('3. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ "backend": cd backend && npm run dev');
        console.log('4. –î–µ–ø–ª–æ–π –Ω–∞ "Railway": railway up');
        
        console.log('\nüìÅ –§–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:');
        console.log('- .env');
        console.log('- backend/.env');
        
    } catch (error) {
        console.log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫;
main();
