#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);

console.log('üîß –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Prisma –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...\n');

async function copyDir(src, dest) {
  await fs.mkdir(dest, { recursive: true });
  const entries = await fs.readdir(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      await copyDir(srcPath, destPath);
    } else {
      await fs.copyFile(srcPath, destPath);
    }
  }
}

async function main() {
  console.log('üì¶ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Prisma –∫–ª–∏–µ–Ω—Ç–∞...');
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await exec('npx prisma generate --schema=packages/database/prisma/schema.prisma');
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π Prisma –∫–ª–∏–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω\n');
    
    // –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    const sourcePrismaClient = path.join(__dirname, 'packages/database/node_modules/.prisma/client');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    try {
      await fs.access(sourcePrismaClient);
    } catch (error) {
      console.log('‚ùå Prisma –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ packages/database');
      console.log('–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å...');
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
      const altSourcePath = path.join(__dirname, 'node_modules/.prisma/client');
      await fs.access(altSourcePath);
      sourcePrismaClient = altSourcePath;
    }
    
    console.log('üìÇ –ù–∞–π–¥–µ–Ω Prisma –∫–ª–∏–µ–Ω—Ç, –∫–æ–ø–∏—Ä—É–µ–º –≤–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã...\n');
    
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Å—Ç –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
    const destinations = [
      'packages/shared/node_modules/.prisma/client',
      'services/gateway/node_modules/.prisma/client',
      'services/auth/node_modules/.prisma/client',
      'services/machines/node_modules/.prisma/client',
      'services/inventory/node_modules/.prisma/client',
      'services/tasks/node_modules/.prisma/client',
      'services/routes/node_modules/.prisma/client',
      'services/warehouse/node_modules/.prisma/client',
      'services/recipes/node_modules/.prisma/client',
      'services/notifications/node_modules/.prisma/client',
      'services/audit/node_modules/.prisma/client',
      'services/monitoring/node_modules/.prisma/client',
      'services/backup/node_modules/.prisma/client',
      'services/data-import/node_modules/.prisma/client'
    ];
    
    for (const dest of destinations) {
      const destPath = path.join(__dirname, dest);
      const serviceName = dest.split('/')[1];
      
      try {
        console.log(`üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ ${serviceName}...`);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        try {
          await fs.rm(destPath, { recursive: true, force: true });
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        await copyDir(sourcePrismaClient, destPath);
        
        // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –≤ @prisma/client
        const prismaClientLink = path.join(path.dirname(destPath), '../@prisma/client');
        try {
          await fs.rm(prismaClientLink, { recursive: true, force: true });
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        }
        
        await fs.mkdir(path.dirname(prismaClientLink), { recursive: true });
        
        // –°–æ–∑–¥–∞–µ–º package.json –¥–ª—è @prisma/client
        const packageJson = {
          name: "@prisma/client",
          main: "index.js",
          types: "index.d.ts"
        };
        
        await fs.writeFile(
          path.join(prismaClientLink, 'package.json'),
          JSON.stringify(packageJson, null, 2)
        );
        
        // –°–æ–∑–¥–∞–µ–º index.js –∫–æ—Ç–æ—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑ .prisma/client
        const indexJs = `module.exports = require('../.prisma/client');`;
        await fs.writeFile(path.join(prismaClientLink, 'index.js'), indexJs);
        
        // –°–æ–∑–¥–∞–µ–º index.d.ts
        const indexDts = `export * from '../.prisma/client';`;
        await fs.writeFile(path.join(prismaClientLink, 'index.d.ts'), indexDts);
        
        console.log(`‚úÖ ${serviceName} - –≥–æ—Ç–æ–≤–æ`);
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${serviceName}:`, error.message);
      }
    }
    
    console.log('\n‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!');
    console.log('\nüìã –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:');
    console.log('   node test-all-components.js');
    console.log('\nüöÄ –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:');
    console.log('   node start-with-railway.js');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
