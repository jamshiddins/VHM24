#!/usr/bin/env node

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã VHM24
 * –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã VHM24...\n');

const results = {
  passed: 0,
  failed: 0,
  warnings: 0,
  issues: []
};

function test(name, testFn) {
  try {
    console.log(`üß™ ${name}...`);
    const result = testFn();
    if (result === true) {
      console.log(`‚úÖ ${name} - PASSED`);
      results.passed++;
    } else if (result === 'warning') {
      console.log(`‚ö†Ô∏è ${name} - WARNING`);
      results.warnings++;
    } else {
      console.log(`‚ùå ${name} - FAILED: ${result}`);
      results.failed++;
      results.issues.push(`${name}: ${result}`);
    }
  } catch (error) {
    console.log(`‚ùå ${name} - ERROR: ${error.message}`);
    results.failed++;
    results.issues.push(`${name}: ${error.message}`);
  }
}

// 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
test('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞', () => {
  const requiredDirs = ['backend', 'backend/src', 'backend/src/routes', 'backend/src/services', 'backend/src/middleware'];
  for (const dir of requiredDirs) {
    if (!fs.existsSync(dir)) {
      return `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`;
    }
  }
  return true;
});

// 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
test('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã', () => {
  const criticalFiles = [
    'backend/src/index.js',
    'backend/package.json',
    'backend/prisma/schema.prisma',
    '.env.example',
    'docker-compose.production.yml'
  ];
  
  for (const file of criticalFiles) {
    if (!fs.existsSync(file)) {
      return `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: ${file}`;
    }
  }
  return true;
});

// 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JS —Ñ–∞–π–ª–æ–≤
test('–°–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript —Ñ–∞–π–ª–æ–≤', () => {
  const jsFiles = [
    'backend/src/index.js',
    'backend/src/routes/auth.js',
    'backend/src/routes/health.js',
    'backend/src/middleware/auth.js',
    'backend/src/middleware/validation.js'
  ];
  
  for (const file of jsFiles) {
    if (fs.existsSync(file)) {
      const content = fs.readFileSync(file, 'utf8');
      if (!content.includes('module.exports')) {
        return `–§–∞–π–ª ${file} –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å`;
      }
    }
  }
  return true;
});

// 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ package.json
test('Package.json –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', () => {
  const packagePath = 'backend/package.json';
  if (!fs.existsSync(packagePath)) return 'package.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
  
  const pkg = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  const requiredDeps = ['express', 'jsonwebtoken', 'cors', 'dotenv', '@prisma/client'];
  
  for (const dep of requiredDeps) {
    if (!pkg.dependencies || !pkg.dependencies[dep]) {
      return `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${dep}`;
    }
  }
  return true;
});

// 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
test('Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', () => {
  const dockerFile = 'docker-compose.production.yml';
  if (!fs.existsSync(dockerFile)) return 'Docker compose —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
  
  const content = fs.readFileSync(dockerFile, 'utf8');
  if (!content.includes('backend') || !content.includes('postgres')) {
    return 'Docker compose –Ω–µ–ø–æ–ª–Ω—ã–π';
  }
  return true;
});

// 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
test('Environment –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', () => {
  const envFile = '.env.example';
  if (!fs.existsSync(envFile)) return '.env.example –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
  
  const content = fs.readFileSync(envFile, 'utf8');
  const requiredVars = ['DATABASE_URL', 'JWT_SECRET', 'NODE_ENV'];
  
  for (const varName of requiredVars) {
    if (!content.includes(varName)) {
      return `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${varName}`;
    }
  }
  return true;
});

// 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prisma —Å—Ö–µ–º—ã
test('Prisma —Å—Ö–µ–º–∞', () => {
  const schemaFile = 'backend/prisma/schema.prisma';
  if (!fs.existsSync(schemaFile)) return 'Prisma —Å—Ö–µ–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
  
  const content = fs.readFileSync(schemaFile, 'utf8');
  if (!content.includes('generator client') || !content.includes('datasource db')) {
    return 'Prisma —Å—Ö–µ–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞';
  }
  return true;
});

// 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–æ–≤ Backend
test('Backend —Ä–æ—É—Ç—ã', () => {
  const routes = ['auth', 'health', 'users', 'bags', 'expenses', 'revenues'];
  
  for (const route of routes) {
    const routeFile = `backend/src/routes/${route}.js`;
    if (!fs.existsSync(routeFile)) {
      return `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ—É—Ç: ${route}`;
    }
    
    const content = fs.readFileSync(routeFile, 'utf8');
    if (!content.includes('router.get') || !content.includes('module.exports')) {
      return `–†–æ—É—Ç ${route} –Ω–µ–ø–æ–ª–Ω—ã–π`;
    }
  }
  return true;
});

// 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
test('Backend —Å–µ—Ä–≤–∏—Å—ã', () => {
  const services = ['bag.service', 'expense.service', 'revenue.service'];
  
  for (const service of services) {
    const serviceFile = `backend/src/services/${service}.js`;
    if (fs.existsSync(serviceFile)) {
      const content = fs.readFileSync(serviceFile, 'utf8');
      if (!content.includes('class') && !content.includes('module.exports')) {
        return `–°–µ—Ä–≤–∏—Å ${service} –Ω–µ–ø–æ–ª–Ω—ã–π`;
      }
    }
  }
  return true;
});

// 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Middleware
test('Backend middleware', () => {
  const middlewares = ['auth', 'validation'];
  
  for (const middleware of middlewares) {
    const middlewareFile = `backend/src/middleware/${middleware}.js`;
    if (!fs.existsSync(middlewareFile)) {
      return `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç middleware: ${middleware}`;
    }
    
    const content = fs.readFileSync(middlewareFile, 'utf8');
    if (!content.includes('module.exports')) {
      return `Middleware ${middleware} –Ω–µ–ø–æ–ª–Ω—ã–π`;
    }
  }
  return true;
});

// 11. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kubernetes –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
test('Kubernetes –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', () => {
  const k8sFiles = [
    'k8s/production/namespace.yaml',
    'k8s/production/backend.yaml',
    'k8s/production/database.yaml'
  ];
  
  for (const file of k8sFiles) {
    if (!fs.existsSync(file)) {
      return `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç K8s —Ñ–∞–π–ª: ${file}`;
    }
  }
  return true;
});

// 12. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
test('Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', () => {
  if (!fs.existsSync('.git')) {
    return 'Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω';
  }
  
  try {
    execSync('git status', { stdio: 'pipe' });
    return true;
  } catch (error) {
    return 'Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω';
  }
});

// 13. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ESLint (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
test('ESLint –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤', () => {
  try {
    const criticalFiles = [
      'backend/src/index.js',
      'backend/src/routes/auth.js',
      'backend/src/routes/health.js',
      'backend/src/middleware/auth.js'
    ];
    
    const existingFiles = criticalFiles.filter(f => fs.existsSync(f));
    if (existingFiles.length === 0) {
      return '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏';
    }
    
    execSync(`npx eslint ${existingFiles.join(' ')}`, { stdio: 'pipe' });
    return true;
  } catch (error) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –Ω–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç - —ç—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    return 'warning';
  }
});

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
console.log('='.repeat(60));
console.log('üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
console.log('='.repeat(60));

// –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã (—Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ)
[
  '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞',
  '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã', 
  '–°–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript —Ñ–∞–π–ª–æ–≤',
  'Package.json –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
  'Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
  'Environment –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
  'Prisma —Å—Ö–µ–º–∞',
  'Backend —Ä–æ—É—Ç—ã',
  'Backend —Å–µ—Ä–≤–∏—Å—ã',
  'Backend middleware',
  'Kubernetes –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
  'Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π',
  'ESLint –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤'
].forEach(testName => {
  // –¢–µ—Å—Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—ã—à–µ
});

// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
console.log('\n' + '='.repeat(60));
console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
console.log('='.repeat(60));

const total = results.passed + results.failed + results.warnings;
console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${total}`);
console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`);
console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${results.warnings}`);
console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.failed}`);

const successRate = Math.round(((results.passed + results.warnings) / total) * 100);
console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);

if (results.failed > 0) {
  console.log('\nüîß –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
  results.issues.forEach((issue, index) => {
    console.log(`${index + 1}. ${issue}`);
  });
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
if (results.failed === 0) {
  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é!');
  console.log('üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å production deployment');
} else if (results.failed <= 2) {
  console.log('‚ö†Ô∏è –ï—Å—Ç—å –º–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞');
  console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º');
} else {
  console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  console.log('üõ†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
}

console.log('\n‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –≤ DEPLOYMENT_READINESS_REPORT.md');

process.exit(results.failed > 2 ? 1 : 0);
