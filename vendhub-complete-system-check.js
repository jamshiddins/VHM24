#!/usr/bin/env node;
;
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');




// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏;
const colors = {
    "reset": '\x1b[0m',;
    "red": '\x1b[31m',;
    "green": '\x1b[32m',;
    "yellow": '\x1b[33m',;
    "blue": '\x1b[34m',;
    "magenta": '\x1b[35m',;
    "cyan": '\x1b[36m';
};

function log(message, color = 'reset') {
    
}

function executeCommand(command, description) {
    try {
        log(`\nüìã ${description}`, 'cyan');
        log(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${command}`, 'blue');
        const result = execSync(command, { "encoding": 'utf8', "stdio": 'pipe' });
        log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${description}`, 'green');
        return { "success": true, "output": result };
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞: ${description}`, 'red');
        log(`–î–µ—Ç–∞–ª–∏: ${error.message}`, 'yellow');
        return { "success": false, "error": error.message };
    }
}

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞;
function checkProjectStructure() {
    log('\nüîç 1. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê', 'magenta');
    
    const requiredDirs = [;
        'backend',;
        'backend/src',;
        'backend/src/routes',;
        'backend/src/middleware',;
        'backend/src/utils',;
        'backend/prisma',;
        'apps/telegram-bot',;
        'apps/telegram-bot/src';
    ];
    
    const requiredFiles = [;
        '.env',;
        'package.json',;
        'backend/package.json',;
        'backend/src/index.js',;
        'backend/prisma/schema.prisma',;
        'apps/telegram-bot/package.json',;
        'apps/telegram-bot/src/index.js';
    ];
    
    let structureOk = true;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π;
    requiredDirs.forEach(dir => {
        if (fs.existsSync(dir)) {
            log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${dir}`, 'green');
        } else {
            log(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${dir}`, 'red');
            structureOk = false;
            // –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏;
            try {
                fs.mkdirSync(dir, { "recursive": true });
                log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`, 'yellow');
            } catch (error) {
                log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dir}`, 'red');
            }
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤;
    requiredFiles.forEach(file => {
        if (fs.existsSync(file)) {
            log(`‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${file}`, 'green');
        } else {
            log(`‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${file}`, 'red');
            structureOk = false;
        }
    });
    
    return structureOk;
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è;
function checkEnvironmentVariables() {
    log('\nüîç 2. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø', 'magenta');
    
    if (!fs.existsSync('.env')) {
        log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
        return false;
    }
    
    const envContent = fs.readFileSync('.env', 'utf8');
    const requiredVars = [;
        'DATABASE_URL',;
        'JWT_SECRET',;
        'TELEGRAM_BOT_TOKEN',;
        'ADMIN_IDS',;
        'S3_ACCESS_KEY',;
        process.env.API_KEY_428 || 'S3_SECRET_ACCESS_KEY',;
        'S3_REGION',;
        'S3_BUCKET',;
        'S3_ENDPOINT',;
        'PORT',;
        'NODE_ENV';
    ];
    
    let envOk = true;
    
    requiredVars.forEach(varName => {
        if (envContent.includes(`${varName}=`)) {
            log(`‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–π–¥–µ–Ω–∞: ${varName}`, 'green');
        } else {
            log(`‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${varName}`, 'red');
            envOk = false;
        }
    });
    
    return envOk;
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π;
function checkDependencies() {
    log('\nüîç 3. –ü–†–û–í–ï–†–ö–ê –ò –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô', 'magenta');
    
    // –ö–æ—Ä–Ω–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏;
    if (fs.existsSync('package.json')) {
        executeCommand('npm install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    }
    
    // Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏;
    if (fs.existsSync('backend/package.json')) {
        executeCommand('cd backend && npm install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    }
    
    // Telegram bot –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏;
    if (fs.existsSync('apps/telegram-bot/package.json')) {
        executeCommand('cd apps/telegram-bot && npm install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ telegram-bot –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    }
    
    return true;
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö;
function checkDatabase() {
    log('\nüîç 4. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•', 'magenta');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Prisma —Å—Ö–µ–º—ã;
    if (!fs.existsSync('backend/prisma/schema.prisma')) {
        log('‚ùå Prisma —Å—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'red');
        return false;
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞;
    const generateResult = executeCommand(;
        'cd backend && npx prisma generate',;
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞';
    );
    
    if (!generateResult.success) {
        return false;
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π;
    const migrateResult = executeCommand(;
        'cd backend && npx prisma db push',;
        '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö';
    );
    
    return migrateResult.success;
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤;
function checkApiRoutes() {
    log('\nüîç 5. –ü–†–û–í–ï–†–ö–ê API –ú–ê–†–®–†–£–¢–û–í', 'magenta');
    
    const routeFiles = [;
        'backend/src/routes/auth.js',;
        'backend/src/routes/users.js',;
        'backend/src/routes/machines.js',;
        'backend/src/routes/inventory.js',;
        'backend/src/routes/tasks.js',;
        'backend/src/routes/warehouse.js',;
        'backend/src/routes/telegram.js';
    ];
    
    let routesOk = true;
    
    routeFiles.forEach(file => {
        if (fs.existsSync(file)) {
            log(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω: ${file}`, 'green');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞;
            try {
                const content = fs.readFileSync(file, 'utf8');
                // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤;
                if (content.includes('router') && content.includes('module.exports')) {
                    log(`‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${file}`, 'green');
                } else {
                    log(`‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤: ${file}`, 'yellow');
                }
            } catch (error) {
                log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${file}`, 'red');
                routesOk = false;
            }
        } else {
            log(`‚ùå –ú–∞—Ä—à—Ä—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${file}`, 'red');
            routesOk = false;
        }
    });
    
    return routesOk;
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞;
function checkTelegramBot() {
    log('\nüîç 6. –ü–†–û–í–ï–†–ö–ê TELEGRAM –ë–û–¢–ê', 'magenta');
    
    const botFiles = [;
        'apps/telegram-bot/src/index.js',;
        'apps/telegram-bot/package.json';
    ];
    
    let botOk = true;
    
    botFiles.forEach(file => {
        if (fs.existsSync(file)) {
            log(`‚úÖ –§–∞–π–ª –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω: ${file}`, 'green');
        } else {
            log(`‚ùå –§–∞–π–ª –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${file}`, 'red');
            botOk = false;
        }
    });
    
    return botOk;
}

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ S3/DigitalOcean Spaces;
function checkS3Connection() {
    log('\nüîç 7. –ü–†–û–í–ï–†–ö–ê S3/DIGITALOCEAN SPACES', 'magenta');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ S3;
    const testS3Script = `;
const { S3Client, ListBucketsCommand } = require('@aws-sdk/client-s3');

async function testS3() {
    try {
        const s3Client = new S3Client({
            "region": process.env.S3_REGION || 'fra1',;
            "endpoint": process.env.S3_ENDPOINT || '"https"://fra1.digitaloceanspaces.com',;
            "credentials": {,
  "accessKeyId": process.env.S3_ACCESS_KEY,;
                "secretAccessKey": process.env.S3_SECRET_ACCESS_KEY,;
            },;
        });
        
        const command = new ListBucketsCommand({});
        const response = await s3Client.send(command);
        
        console.log('"Buckets":', response.Buckets?.map(b => b.Name));
        return true;
    } catch (error) {
        
        return false;
    }
}

testS3().then(result => process.exit(result ? 0 : 1));
`;
    
    fs.writeFileSync('temp-s3-test.js', testS3Script);
    
    const result = executeCommand(;
        'node temp-s3-test.js',;
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
    );
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª;
    try {
        fs.unlinkSync('temp-s3-test.js');
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è;
    }
    
    return result.success;
}

// 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã;
function testSystem() {
    log('\nüîç 8. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´', 'magenta');
    
    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ backend;
    const backendTest = executeCommand(;
        'cd backend && npm test',;
        '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ backend';
    );
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–∏–Ω–≥–∞;
    const lintTest = executeCommand(;
        'cd backend && npm run lint',;
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–∏–Ω–≥–∞';
    );
    
    return backendTest.success && lintTest.success;
}

// 9. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞;
function generateReport(results) {
    log('\nüìä 9. –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê', 'magenta');
    
    const report = {
        "timestamp": new Date().toISOString(),;
        "results": results,;
        "summary": {,
  "total": Object.keys(results).length,;
            "passed": Object.values(results).filter(r => r).length,;
            "failed": Object.values(results).filter(r => !r).length;
        }
    };
    
    const reportContent = `# VendHub System Check Report;
–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:;
${Object.entries(results).map(([check, result]) =>;
    `- ${result ? '‚úÖ' : '‚ùå'} ${check}`;
).join('\n')}

## –°–≤–æ–¥–∫–∞:;
- –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${report.summary.total}
- –£—Å–ø–µ—à–Ω–æ: ${report.summary.passed}
- –ù–µ—É–¥–∞—á–Ω–æ: ${report.summary.failed}
- –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((report.summary.passed / report.summary.total) * 100)}%;
## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:;
${report.summary.failed > 0 ?;
    '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.' :;
    '‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é.';
}
`;
    
    fs.writeFileSync(process.env.API_KEY_429 || 'VENDHUB_SYSTEM_CHECK_REPORT.md', reportContent);
    log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ VENDHUB_SYSTEM_CHECK_REPORT.md', 'green');
    
    return report;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è;
async function main() {
    const results = {};
    
    try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏;
        results['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞'] = checkProjectStructure();
        results['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è'] = checkEnvironmentVariables();
        results['–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏'] = checkDependencies();
        results['–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'] = checkDatabase();
        results['API –º–∞—Ä—à—Ä—É—Ç—ã'] = checkApiRoutes();
        results['Telegram –±–æ—Ç'] = checkTelegramBot();
        results['S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'] = checkS3Connection();
        results['–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'] = testSystem();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç;
        const report = generateReport(results);
        
        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É;
        log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê', 'magenta');
        log('==================', 'magenta');
        
        if (report.summary.failed === 0) {
            log('üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'green');
            log('–°–∏—Å—Ç–µ–º–∞ VendHub –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é.', 'green');
        } else {
            log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${report.summary.failed}`, 'yellow');
            log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.', 'yellow');
        }
        
        log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${report.summary.passed}/${report.summary.total} (${Math.round((report.summary.passed / report.summary.total) * 100)}%)`, 'cyan');
        
    } catch (error) {
        log(`\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`, 'red');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫;
if (require.main === module) {
    main().catch(error => {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
        process.exit(1);
    });
}

module.exports = {
  
    checkProjectStructure,;
    checkEnvironmentVariables,;
    checkDependencies,;
    checkDatabase,;
    checkApiRoutes,;
    checkTelegramBot,;
    checkS3Connection,;
    testSystem,;
    generateReport;

};
]]]]]]]