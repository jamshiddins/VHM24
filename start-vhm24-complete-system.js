#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã VHM24 (VendHub Manager)...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
function checkEnvFile() {
    const envPath = path.join(__dirname, '.env');
    if (!fs.existsSync(envPath)) {
        
        
        const defaultEnv = `# VHM24 Environment Variables
NODE_ENV=development
PORT=3000

# Database
DATABASE_URL="postgresql://username:password@localhost:5432/vhm24"

# JWT
JWT_SECRET=your-super-secret-jwt-key-here

# Telegram Bot
TELEGRAM_BOT_TOKEN=your-telegram-bot-token-here

# API
API_BASE_URL=process.env.API_URL/api

# AWS S3 (optional)
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_REGION=us-east-1
AWS_S3_BUCKET=vhm24-uploads

# Redis (optional)
REDIS_URL=redis://localhost:6379
`;
        
        fs.writeFileSync(envPath, defaultEnv);
        
        
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
function startProcess(name, command, args, cwd) {
    return new Promise((resolve, reject) => {
        
        
        const process = spawn(command, args, {
            cwd: cwd || __dirname,
            stdio: 'pipe',
            shell: true
        });

        let output = '';
        let errorOutput = '';

        process.stdout.on('data', (data) => {
            const text = data.toString();
            output += text;
            console.log(`[${name}] ${text.trim()}`);
        });

        process.stderr.on('data', (data) => {
            const text = data.toString();
            errorOutput += text;
            console.log(`[${name}] ‚ùå ${text.trim()}`);
        });

        process.on('close', (code) => {
            if (code === 0) {
                
                resolve({ code, output, errorOutput });
            } else {
                
                reject(new Error(`${name} failed with code ${code}`));
            }
        });

        process.on('error', (error) => {
            
            reject(error);
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        return process;
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
async function installDependencies() {
    
    
    try {
        // Backend dependencies
        
        await startProcess('npm install (backend)', 'npm', ['install'], path.join(__dirname, 'backend'));
        
        // Telegram bot dependencies
        
        await startProcess('npm install (telegram-bot)', 'npm', ['install'], path.join(__dirname, 'apps', 'telegram-bot'));
        
        
    } catch (error) {
        
        
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabase() {
    
    
    try {
        await startProcess('Prisma Generate', 'npx', ['prisma', 'generate'], path.join(__dirname, 'backend'));
        
        
        try {
            await startProcess('Prisma Push', 'npx', ['prisma', 'db', 'push'], path.join(__dirname, 'backend'));
            
        } catch (error) {
            
            
        }
    } catch (error) {
        
    }
    
    
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function startSystem() {
    try {
        console.log('üéØ VHM24 (VendHub Manager) - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏');
        console.log('=' .repeat(70));
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
        checkEnvFile();
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        await installDependencies();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await checkDatabase();
        
        
        
        // –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞
        const backendProcess = spawn('npm', ['start'], {
            cwd: path.join(__dirname, 'backend'),
            stdio: 'pipe',
            shell: true
        });
        
        backendProcess.stdout.on('data', (data) => {
            console.log(`[Backend] ${data.toString().trim()}`);
        });
        
        backendProcess.stderr.on('data', (data) => {
            console.log(`[Backend] ‚ùå ${data.toString().trim()}`);
        });
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        const telegramProcess = spawn('npm', ['start'], {
            cwd: path.join(__dirname, 'apps', 'telegram-bot'),
            stdio: 'pipe',
            shell: true
        });
        
        telegramProcess.stdout.on('data', (data) => {
            console.log(`[Telegram Bot] ${data.toString().trim()}`);
        });
        
        telegramProcess.stderr.on('data', (data) => {
            console.log(`[Telegram Bot] ‚ùå ${data.toString().trim()}`);
        });
        
        
        console.log('=' .repeat(50));
        
        
        
        console.log('=' .repeat(50));
        
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        process.on('SIGINT', () => {
            
            backendProcess.kill('SIGTERM');
            telegramProcess.kill('SIGTERM');
            process.exit(0);
        });
        
        process.on('SIGTERM', () => {
            
            backendProcess.kill('SIGTERM');
            telegramProcess.kill('SIGTERM');
            process.exit(0);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
if (require.main === module) {
    startSystem();
}

module.exports = { startSystem };
