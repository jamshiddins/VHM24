#!/usr/bin/env node

/**
 * VHM24 Complete System Test with Notifications & Audit
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª—é—á–∞—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞—É–¥–∏—Ç
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const config = {
  baseURL: 'http://localhost:8000/api/v1',
  timeout: 10000,
  testUser: {
    email: 'test@vhm24.com',
    password: 'Test123!',
    name: 'Test User',
    role: 'ADMIN'
  }
};

// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
const api = axios.create({
  baseURL: config.baseURL,
  timeout: config.timeout,
  headers: {
    'Content-Type': 'application/json'
  }
});

let authToken = null;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function makeRequest(method, url, data = null, headers = {}) {
  try {
    const requestConfig = {
      method,
      url,
      headers: {
        ...headers,
        ...(authToken && { Authorization: `Bearer ${authToken}` })
      }
    };

    if (data) {
      requestConfig.data = data;
    }

    const response = await api(requestConfig);
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return {
      success: false,
      error: error.response?.data || error.message,
      status: error.response?.status || 500
    };
  }
}

// –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testAuthentication() {
  log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...', 'cyan');

  // –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
  const loginResult = await makeRequest('POST', '/auth/login', {
    email: config.testUser.email,
    password: config.testUser.password
  });

  if (loginResult.success && loginResult.data.data?.token) {
    authToken = loginResult.data.data.token;
    logSuccess('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    return true;
  } else {
    logWarning('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
    
    // –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const registerResult = await makeRequest('POST', '/auth/register', config.testUser);
    
    if (registerResult.success) {
      logSuccess('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      
      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
      const secondLoginResult = await makeRequest('POST', '/auth/login', {
        email: config.testUser.email,
        password: config.testUser.password
      });
      
      if (secondLoginResult.success && secondLoginResult.data.data?.token) {
        authToken = secondLoginResult.data.data.token;
        logSuccess('–í—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–µ–Ω');
        return true;
      }
    }
    
    logError('–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è');
    return false;
  }
}

// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞
async function testAuditSystem() {
  log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞...', 'cyan');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏—Ç–∞
    const healthResult = await makeRequest('GET', '/audit/health');
    if (!healthResult.success) {
      logWarning('–°–µ—Ä–≤–∏—Å –∞—É–¥–∏—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    logSuccess('–°–µ—Ä–≤–∏—Å –∞—É–¥–∏—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω');

    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∞—É–¥–∏—Ç–∞
    const logsResult = await makeRequest('GET', '/audit/logs?limit=10');
    if (logsResult.success) {
      logSuccess(`–ü–æ–ª—É—á–µ–Ω–æ ${logsResult.data.data?.items?.length || 0} –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const incompleteResult = await makeRequest('GET', '/audit/incomplete-data?limit=5');
    if (incompleteResult.success) {
      logSuccess(`–ù–∞–π–¥–µ–Ω–æ ${incompleteResult.data.data?.items?.length || 0} –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã
    const reportsResult = await makeRequest('GET', '/audit/reports/summary');
    if (reportsResult.success) {
      logSuccess('–û—Ç—á–µ—Ç—ã –∞—É–¥–∏—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã');
    }

    return true;
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–∞: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function testNotificationSystem() {
  log('\nüîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...', 'cyan');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const healthResult = await makeRequest('GET', '/notifications/health');
    if (!healthResult.success) {
      logWarning('–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    logSuccess('–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notificationResult = await makeRequest('POST', '/notifications/send', {
      type: 'SYSTEM_ALERT',
      recipients: [config.testUser.email],
      data: {
        alertType: 'TEST_ALERT',
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        timestamp: new Date().toISOString()
      }
    });

    if (notificationResult.success) {
      logSuccess('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } else {
      logWarning('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const statsResult = await makeRequest('GET', '/notifications/stats?period=7d');
    if (statsResult.success) {
      logSuccess('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–∞');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const historyResult = await makeRequest('GET', '/notifications/history?take=5');
    if (historyResult.success) {
      logSuccess(`–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${historyResult.data.data?.items?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    }

    return true;
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
async function testCoreServices() {
  log('\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...', 'cyan');

  const services = [
    { name: 'Machines', endpoint: '/machines' },
    { name: 'Inventory', endpoint: '/inventory' },
    { name: 'Tasks', endpoint: '/tasks' },
    { name: 'Routes', endpoint: '/routes' },
    { name: 'Warehouse', endpoint: '/warehouse' },
    { name: 'Recipes', endpoint: '/recipes' }
  ];

  let successCount = 0;

  for (const service of services) {
    const result = await makeRequest('GET', service.endpoint);
    if (result.success) {
      logSuccess(`${service.name} —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      successCount++;
    } else {
      logError(`${service.name} —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${result.status})`);
    }
  }

  logInfo(`–†–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: ${successCount}/${services.length}`);
  return successCount === services.length;
}

// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
async function testDataOperations() {
  log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏...', 'cyan');

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–∞—à–∏–Ω—É
    const machineResult = await makeRequest('POST', '/machines', {
      name: 'Test Machine',
      location: {
        address: 'Test Address',
        latitude: 41.2995,
        longitude: 69.2401
      },
      status: 'ONLINE'
    });

    let machineId = null;
    if (machineResult.success) {
      machineId = machineResult.data.data?.id;
      logSuccess('–¢–µ—Å—Ç–æ–≤–∞—è –º–∞—à–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    const taskResult = await makeRequest('POST', '/tasks', {
      title: 'Test Task',
      description: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
      priority: 'MEDIUM',
      dueDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
      machineId: machineId
    });

    let taskId = null;
    if (taskResult.success) {
      taskId = taskResult.data.data?.id;
      logSuccess('–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    const inventoryResult = await makeRequest('POST', '/inventory', {
      name: 'Test Item',
      sku: 'TEST-001',
      quantity: 100,
      unit: '—à—Ç',
      minQuantity: 10,
      price: 1000
    });

    if (inventoryResult.success) {
      logSuccess('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    if (taskId) {
      const updateResult = await makeRequest('PATCH', `/tasks/${taskId}`, {
        status: 'IN_PROGRESS'
      });
      
      if (updateResult.success) {
        logSuccess('–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      }
    }

    return true;
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
async function testServiceIntegration() {
  log('\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...', 'cyan');

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏
    const routeResult = await makeRequest('POST', '/routes', {
      name: 'Test Route',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç',
      status: 'PLANNED'
    });

    if (routeResult.success) {
      logSuccess('–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
      const machinesResult = await makeRequest('GET', '/machines?limit=3');
      if (machinesResult.success && machinesResult.data.data?.length > 0) {
        logSuccess('–ú–∞—à–∏–Ω—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã');
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
    const recipeResult = await makeRequest('POST', '/recipes', {
      name: 'Test Recipe',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç',
      ingredients: [
        { name: 'Ingredient 1', quantity: 100, unit: '–≥' },
        { name: 'Ingredient 2', quantity: 50, unit: '–º–ª' }
      ],
      instructions: '–¢–µ—Å—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'
    });

    if (recipeResult.success) {
      logSuccess('–†–µ—Ü–µ–ø—Ç —Å–æ–∑–¥–∞–Ω');
    }

    return true;
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function testPerformance() {
  log('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...', 'cyan');

  const tests = [
    { name: 'Health Check', endpoint: '/health' },
    { name: 'Machines List', endpoint: '/machines?limit=10' },
    { name: 'Tasks List', endpoint: '/tasks?limit=10' },
    { name: 'Audit Logs', endpoint: '/audit/logs?limit=10' }
  ];

  for (const test of tests) {
    const startTime = Date.now();
    const result = await makeRequest('GET', test.endpoint);
    const endTime = Date.now();
    const duration = endTime - startTime;

    if (result.success) {
      if (duration < 1000) {
        logSuccess(`${test.name}: ${duration}ms ‚ú®`);
      } else if (duration < 3000) {
        logWarning(`${test.name}: ${duration}ms ‚ö†Ô∏è`);
      } else {
        logError(`${test.name}: ${duration}ms üêå`);
      }
    } else {
      logError(`${test.name}: FAILED`);
    }
  }

  return true;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
async function generateReport(results) {
  log('\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...', 'cyan');

  const report = {
    timestamp: new Date().toISOString(),
    summary: {
      total: Object.keys(results).length,
      passed: Object.values(results).filter(r => r).length,
      failed: Object.values(results).filter(r => !r).length
    },
    details: results,
    recommendations: []
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (!results.authentication) {
    report.recommendations.push('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
  if (!results.auditSystem) {
    report.recommendations.push('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –∞—É–¥–∏—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞');
  }
  if (!results.notificationSystem) {
    report.recommendations.push('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤');
  }
  if (!results.coreServices) {
    report.recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const reportPath = path.join(__dirname, 'test-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

  log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', 'bright');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${report.summary.passed}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${report.summary.failed}`, 'red');
  log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((report.summary.passed / report.summary.total) * 100)}%`, 'blue');
  
  if (report.recommendations.length > 0) {
    log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', 'yellow');
    report.recommendations.forEach(rec => log(`   ‚Ä¢ ${rec}`, 'yellow'));
  }

  log(`\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`, 'cyan');

  return report;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VHM24...', 'bright');
  log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${config.baseURL}`, 'blue');

  const results = {};

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    results.authentication = await testAuthentication();
    results.auditSystem = await testAuditSystem();
    results.notificationSystem = await testNotificationSystem();
    results.coreServices = await testCoreServices();
    results.dataOperations = await testDataOperations();
    results.serviceIntegration = await testServiceIntegration();
    results.performance = await testPerformance();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const report = await generateReport(results);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const overallSuccess = Object.values(results).every(result => result === true);
    
    if (overallSuccess) {
      log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'green');
      process.exit(0);
    } else {
      log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´', 'yellow');
      process.exit(1);
    }

  } catch (error) {
    logError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  log('\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'yellow');
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logError(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${reason}`);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests();
}

module.exports = {
  runTests,
  testAuthentication,
  testAuditSystem,
  testNotificationSystem,
  testCoreServices,
  testDataOperations,
  testServiceIntegration,
  testPerformance
};
