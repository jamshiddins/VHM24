const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç VHM24 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞...');
if (fs.existsSync('.env')) {
  const envContent = fs.readFileSync('.env', 'utf8');
  if (envContent.includes('DATABASE_URL')) {
    console.log('‚úÖ .env —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç DATABASE_URL');
  } else {
    console.log('‚ùå .env —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç DATABASE_URL');
  }
} else {
  console.log('‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö
console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö...');
const services = ['auth', 'machines', 'inventory', 'tasks', 'gateway', 'telegram-bot'];
const requiredDeps = {
  'auth': ['@fastify/cors', '@fastify/jwt', '@prisma/client', 'bcrypt'],
  'machines': ['fastify', '@fastify/cors', '@fastify/jwt', '@prisma/client', 'dotenv'],
  'inventory': ['fastify', '@fastify/cors', '@fastify/jwt', '@prisma/client', 'dotenv'],
  'tasks': ['fastify', '@fastify/cors', '@fastify/jwt', '@prisma/client', 'dotenv'],
  'gateway': ['@fastify/http-proxy', '@fastify/jwt', '@prisma/client', 'dotenv'],
  'telegram-bot': ['node-telegram-bot-api', 'axios', 'dotenv']
};

services.forEach(service => {
  const packagePath = path.join('services', service, 'package.json');
  if (fs.existsSync(packagePath)) {
    const pkg = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    const deps = Object.keys(pkg.dependencies || {});
    const missing = requiredDeps[service].filter(dep => !deps.includes(dep));
    
    if (missing.length === 0) {
      console.log(`‚úÖ ${service}: –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ –º–µ—Å—Ç–µ`);
    } else {
      console.log(`‚ùå ${service}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing.join(', ')}`);
    }
  } else {
    console.log(`‚ùå ${service}: package.json –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ dotenv –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö
console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dotenv –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö...');
services.forEach(service => {
  const indexPath = path.join('services', service, 'src', 'index.js');
  if (fs.existsSync(indexPath)) {
    const content = fs.readFileSync(indexPath, 'utf8');
    if (content.includes("require('dotenv').config") || content.includes('dotenv.config')) {
      console.log(`‚úÖ ${service}: dotenv –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è`);
    } else {
      console.log(`‚ùå ${service}: dotenv –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è`);
    }
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Prisma —Å—Ö–µ–º—ã
console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Prisma —Å—Ö–µ–º—ã...');
const schemaPath = path.join('packages', 'database', 'prisma', 'schema.prisma');
if (fs.existsSync(schemaPath)) {
  const schema = fs.readFileSync(schemaPath, 'utf8');
  const checks = [
    { field: 'telegramId', model: 'User' },
    { field: 'phoneNumber', model: 'User' },
    { field: 'DATABASE_URL', model: 'datasource' }
  ];
  
  checks.forEach(check => {
    if (schema.includes(check.field)) {
      console.log(`‚úÖ –ü–æ–ª–µ ${check.field} –Ω–∞–π–¥–µ–Ω–æ –≤ ${check.model}`);
    } else {
      console.log(`‚ùå –ü–æ–ª–µ ${check.field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ ${check.model}`);
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker...');
try {
  execSync('docker --version', { stdio: 'ignore' });
  console.log('‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  const containers = execSync('docker ps --format "{{.Names}}"', { encoding: 'utf8' });
  const requiredContainers = ['vhm24-postgres', 'vhm24-redis', 'vhm24-minio'];
  
  requiredContainers.forEach(container => {
    if (containers.includes(container)) {
      console.log(`‚úÖ ${container} –∑–∞–ø—É—â–µ–Ω`);
    } else {
      console.log(`‚ö†Ô∏è ${container} –Ω–µ –∑–∞–ø—É—â–µ–Ω`);
    }
  });
} catch (e) {
  console.log('‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
}

// –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker Desktop –∑–∞–ø—É—â–µ–Ω');
console.log('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm install –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm install --workspaces');
console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d');
console.log('5. –í packages/database –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
console.log('   - npx prisma generate');
console.log('   - npx prisma migrate dev');
console.log('6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: start-development.bat');

console.log('\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
