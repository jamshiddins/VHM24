const logger = require('@vhm24/shared/logger');

#!/usr/bin/env node

/**
 * VHM24 Railway Database Migration Script
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Railway
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try {
  require('dotenv').config();
} catch (error) {
  logger.info('‚ö†Ô∏è  dotenv not available, using environment variables');
}

logger.info('üóÑÔ∏è  VHM24 Railway Database Migration Starting...');
logger.info(`üìç Environment: ${process.env.NODE_ENV || 'production'}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if (!process.env.DATABASE_URL) {
  logger.error('‚ùå DATABASE_URL is required for migration');
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã
function runCommand(command, args = [], options = {}) {
  return new Promise((resolve, reject) => {
    logger.info(`üîß Running: ${command} ${args.join(' ')}`);
    
    const child = spawn(command, args, {
      stdio: 'inherit',
      shell: true,
      cwd: path.join(__dirname, 'packages/database'),
      ...options
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Command failed with code ${code}`));
      }
    });

    child.on('error', reject);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
async function migrateDatabase() {
  try {
    logger.info('üîß Starting database migration...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ schema.prisma
    const schemaPath = path.join(__dirname, 'packages/database/prisma/schema.prisma');
    if (!fs.existsSync(schemaPath)) {
      throw new Error('Prisma schema not found at packages/database/prisma/schema.prisma');
    }
    
    logger.info('‚úÖ Prisma schema found');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
    logger.info('üîß Generating Prisma client...');
    await runCommand('npx', ['prisma', 'generate']);
    logger.info('‚úÖ Prisma client generated');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    logger.info('üîß Running database migrations...');
    await runCommand('npx', ['prisma', 'migrate', 'deploy']);
    logger.info('‚úÖ Database migrations completed');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logger.info('üîß Testing database connection...');
    const { getAuthClient } = require('./packages/database');
    const prisma = getAuthClient();
    
    await prisma.$connect();
    logger.info('‚úÖ Database connection successful');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
    const userCount = await prisma.user.count();
    logger.info(`üìä Users in database: ${userCount}`);
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (userCount === 0) {
      logger.info('üîß Creating default admin user...');
      const bcrypt = require('bcrypt');
      
      const adminUser = await prisma.user.create({
        data: {
          email: 'admin@vhm24.ru',
          name: 'System Administrator',
          passwordHash: await bcrypt.hash('admin123', 10),
          telegramId: process.env.ADMIN_IDS || '42283329',
          roles: ['ADMIN'],
          isActive: true
        }
      });
      
      logger.info('‚úÖ Default admin user created');
      logger.info(`üìß Email: admin@vhm24.ru`);
      logger.info(`üîë Password: admin123`);
      logger.info(`üì± Telegram ID: ${adminUser.telegramId}`);
    }
    
    await prisma.$disconnect();
    logger.info('üéâ Database migration completed successfully!');
    
  } catch (error) {
    logger.error('‚ùå Database migration failed:', error.message);
    logger.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateDatabase();
