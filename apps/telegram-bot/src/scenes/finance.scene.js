/**
 * FSM: finance_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –£—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤, —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏.
 * –†–æ–ª–∏: –ú–µ–Ω–µ–¥–∂–µ—Ä, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - finance_menu: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤
 *   - finance_add_income: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
 *   - finance_add_expense: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
 *   - finance_view_balance: –ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞
 *   - finance_view_history: –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('finance_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[finance_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
scene.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å ADMIN –∏–ª–∏ MANAGER
  if (!ctx.session.user || !['ADMIN', 'MANAGER'].includes(ctx.session.user.role)) {
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —É—á–µ—Ç—É.');
    return await ctx.scene.leave();
  }
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    ctx.session.financeData = {
      type: null,
      amount: null,
      category: null,
      description: null,
      date: null
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'finance_menu';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    await handleFinanceMenu(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É finance_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è finance_menu
async function handleFinanceMenu(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const balance = await getBalance();
    
    const message = `
üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç

–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.toFixed(2)} —Ä—É–±.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const buttons = [
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥', 'add_income')],
      [Markup.button.callback('‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', 'add_expense')],
      [Markup.button.callback('üíº –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å', 'view_balance')],
      [Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π', 'view_history')],
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scene.action('back_to_menu', async (ctx) => {
  await ctx.editMessageText('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
  await ctx.scene.enter('main_menu_fsm');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.');
  await ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
scene.action('add_income', async (ctx) => {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    ctx.session.financeData.type = 'INCOME';
    
    await ctx.editMessageText(`
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):
`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –¥–æ—Ö–æ–¥–∞
    ctx.session.state = 'finance_add_income';
    ctx.session.financeData.step = 'amount';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
scene.action('add_expense', async (ctx) => {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    ctx.session.financeData.type = 'EXPENSE';
    
    await ctx.editMessageText(`
‚ûñ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):
`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ä–∞—Å—Ö–æ–¥–∞
    ctx.session.state = 'finance_add_expense';
    ctx.session.financeData.step = 'amount';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
scene.action('view_balance', async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const balance = await getBalance();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—ã –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    const totalIncome = await getTotalByType('INCOME');
    const totalExpense = await getTotalByType('EXPENSE');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const incomeByCategory = await getAmountByCategory('INCOME');
    const expenseByCategory = await getAmountByCategory('EXPENSE');
    
    let message = `
üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–∞–ª–∞–Ω—Å

<b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${balance.toFixed(2)} —Ä—É–±.
<b>–í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤:</b> ${totalIncome.toFixed(2)} —Ä—É–±.
<b>–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b> ${totalExpense.toFixed(2)} —Ä—É–±.

<b>–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>
`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for (const category in incomeByCategory) {
      message += `${getCategoryName(category)}: ${incomeByCategory[category].toFixed(2)} —Ä—É–±.\n`;
    }
    
    message += `
<b>–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>
`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for (const category in expenseByCategory) {
      message += `${getCategoryName(category)}: ${expenseByCategory[category].toFixed(2)} —Ä—É–±.\n`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const buttons = [
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_finance_menu')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –±–∞–ª–∞–Ω—Å–∞
    ctx.session.state = 'finance_view_balance';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–ª–∞–Ω—Å–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
scene.action('view_history', async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
    const transactions = await getTransactions(10);
    
    let message = `
üìã –ò—Å—Ç–æ—Ä–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

`;
    
    if (transactions.length === 0) {
      message += '–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞.';
    } else {
      for (const transaction of transactions) {
        const date = new Date(transaction.createdAt).toLocaleDateString('ru-RU');
        const type = transaction.type === 'INCOME' ? '‚ûï –î–æ—Ö–æ–¥' : '‚ûñ –†–∞—Å—Ö–æ–¥';
        const category = getCategoryName(transaction.category);
        const amount = transaction.amount.toFixed(2);
        const description = transaction.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
        
        message += `<b>${date} - ${type}</b>\n`;
        message += `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n`;
        message += `–°—É–º–º–∞: ${amount} —Ä—É–±.\n`;
        message += `–û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n\n`;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const buttons = [
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_finance_menu')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    ctx.session.state = 'finance_view_history';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤
scene.action('back_to_finance_menu', async (ctx) => {
  try {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    ctx.session.financeData = {
      type: null,
      amount: null,
      category: null,
      description: null,
      date: null
    };
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    ctx.session.state = 'finance_menu';
    await ctx.deleteMessage();
    await handleFinanceMenu(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
scene.on('text', async (ctx) => {
  try {
    const text = ctx.message.text.trim();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    if ((ctx.session.state === 'finance_add_income' || ctx.session.state === 'finance_add_expense') && 
        ctx.session.financeData.step === 'amount') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
      const amount = parseFloat(text.replace(',', '.'));
      
      if (isNaN(amount) || amount <= 0) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).');
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
      ctx.session.financeData.amount = amount;
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      ctx.session.financeData.step = 'category';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const categories = ctx.session.financeData.type === 'INCOME' ? getIncomeCategories() : getExpenseCategories();
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      const buttons = categories.map(category => {
        return [Markup.button.callback(category.name, `category_${category.code}`)];
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"
      buttons.push([Markup.button.callback('üîÑ –î—Ä—É–≥–æ–µ', 'category_OTHER')]);
      
      const keyboard = Markup.inlineKeyboard(buttons);
      
      await ctx.reply(`
–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
`, keyboard);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    else if ((ctx.session.state === 'finance_add_income' || ctx.session.state === 'finance_add_expense') && 
             ctx.session.financeData.step === 'description') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      ctx.session.financeData.description = text;
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
      ctx.session.financeData.step = 'confirm';
      
      const type = ctx.session.financeData.type === 'INCOME' ? '–¥–æ—Ö–æ–¥–∞' : '—Ä–∞—Å—Ö–æ–¥–∞';
      const amount = ctx.session.financeData.amount.toFixed(2);
      const category = getCategoryName(ctx.session.financeData.category);
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const buttons = [
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_transaction')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_transaction')]
      ];
      
      const keyboard = Markup.inlineKeyboard(buttons);
      
      await ctx.reply(`
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ${type}:

–°—É–º–º–∞: ${amount} —Ä—É–±.
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}
–û–ø–∏—Å–∞–Ω–∏–µ: ${text}
`, keyboard);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    else if ((ctx.session.state === 'finance_add_income' || ctx.session.state === 'finance_add_expense') && 
             ctx.session.financeData.step === 'custom_category') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      ctx.session.financeData.category = 'OTHER';
      ctx.session.financeData.customCategory = text;
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
      ctx.session.financeData.step = 'description';
      
      await ctx.reply(`
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:
`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
scene.action(/^category_(.+)$/, async (ctx) => {
  try {
    const category = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    ctx.session.financeData.category = category;
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–î—Ä—É–≥–æ–µ", –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (category === 'OTHER') {
      ctx.session.financeData.step = 'custom_category';
      
      await ctx.editMessageText(`
–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
`);
      return;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
    ctx.session.financeData.step = 'description';
    
    await ctx.editMessageText(`
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:
`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
scene.action('confirm_transaction', async (ctx) => {
  try {
    const type = ctx.session.financeData.type;
    const amount = ctx.session.financeData.amount;
    const category = ctx.session.financeData.category;
    const description = ctx.session.financeData.description;
    const customCategory = ctx.session.financeData.customCategory;
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = await prisma.financialTransaction.create({
      data: {
        type,
        amount,
        category,
        description,
        customCategory,
        createdBy: { connect: { id: ctx.session.user.id } }
      }
    });
    
    const typeText = type === 'INCOME' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥';
    
    await ctx.editMessageText(`
‚úÖ ${typeText} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.

–°—É–º–º–∞: ${amount.toFixed(2)} —Ä—É–±.
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${getCategoryName(category)}
–û–ø–∏—Å–∞–Ω–∏–µ: ${description}
`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    setTimeout(async () => {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
      ctx.session.financeData = {
        type: null,
        amount: null,
        category: null,
        description: null,
        date: null
      };
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤
      ctx.session.state = 'finance_menu';
      await handleFinanceMenu(ctx);
    }, 2000);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
scene.action('cancel_transaction', async (ctx) => {
  try {
    await ctx.editMessageText('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    ctx.session.financeData = {
      type: null,
      amount: null,
      category: null,
      description: null,
      date: null
    };
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    ctx.session.state = 'finance_menu';
    await handleFinanceMenu(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
async function getBalance() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –¥–æ—Ö–æ–¥–æ–≤
    const totalIncome = await getTotalByType('INCOME');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    const totalExpense = await getTotalByType('EXPENSE');
    
    // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    const balance = totalIncome - totalExpense;
    
    return balance;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function getTotalByType(type) {
  try {
    const result = await prisma.financialTransaction.aggregate({
      where: { type },
      _sum: { amount: true }
    });
    
    return result._sum.amount || 0;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–º–º—ã –ø–æ —Ç–∏–ø—É ${type}:`, error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
async function getAmountByCategory(type) {
  try {
    const transactions = await prisma.financialTransaction.findMany({
      where: { type }
    });
    
    const amountByCategory = {};
    
    for (const transaction of transactions) {
      const category = transaction.category;
      
      if (!amountByCategory[category]) {
        amountByCategory[category] = 0;
      }
      
      amountByCategory[category] += transaction.amount;
    }
    
    return amountByCategory;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Ç–∏–ø–∞ ${type}:`, error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function getTransactions(limit = 10) {
  try {
    const transactions = await prisma.financialTransaction.findMany({
      orderBy: { createdAt: 'desc' },
      take: limit,
      include: { createdBy: true }
    });
    
    return transactions;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤
function getIncomeCategories() {
  return [
    { code: 'SALES', name: 'üí∞ –ü—Ä–æ–¥–∞–∂–∏' },
    { code: 'INVESTMENTS', name: 'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏' },
    { code: 'REFUNDS', name: 'üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã' },
    { code: 'SERVICES', name: 'üõ†Ô∏è –£—Å–ª—É–≥–∏' }
  ];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
function getExpenseCategories() {
  return [
    { code: 'INGREDIENTS', name: 'üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã' },
    { code: 'EQUIPMENT', name: 'üîß –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' },
    { code: 'RENT', name: 'üè¢ –ê—Ä–µ–Ω–¥–∞' },
    { code: 'SALARY', name: 'üë®‚Äçüíº –ó–∞—Ä–ø–ª–∞—Ç–∞' },
    { code: 'TRANSPORT', name: 'üöö –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç' },
    { code: 'UTILITIES', name: 'üí° –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏' },
    { code: 'MARKETING', name: 'üì£ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥' },
    { code: 'TAXES', name: 'üìù –ù–∞–ª–æ–≥–∏' }
  ];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryName(category) {
  const incomeCategories = getIncomeCategories();
  const expenseCategories = getExpenseCategories();
  
  const allCategories = [...incomeCategories, ...expenseCategories];
  
  const foundCategory = allCategories.find(c => c.code === category);
  
  return foundCategory ? foundCategory.name : 'üîÑ –î—Ä—É–≥–æ–µ';
}

module.exports = scene;
