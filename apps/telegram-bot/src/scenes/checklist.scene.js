/**
 * FSM: checklist_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–¥–∞—á–∏.
 * –†–æ–ª–∏: –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∑–∞–¥–∞—á (–û–ø–µ—Ä–∞—Ç–æ—Ä, –ö–ª–∞–¥–æ–≤—â–∏–∫, –¢–µ—Ö–Ω–∏–∫).
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - checklist_load_template: –∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
 *   - checklist_item_check: —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞
 *   - checklist_confirm: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞
 *   - checklist_reject: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('checklist_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[checklist_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID –∑–∞–¥–∞—á–∏
    if (!ctx.scene.state.taskId) {
      await ctx.reply('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–¥–∞—á–∏ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞.');
      return await ctx.scene.leave();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç–∞
    ctx.session.checklistData = {
      taskId: ctx.scene.state.taskId,
      currentItemIndex: 0,
      completedItems: [],
      skippedItems: [],
      photos: []
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'checklist_load_template';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω —á–µ–∫-–ª–∏—Å—Ç–∞
    await handleChecklistLoadTemplate(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É checklist_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è checklist_load_template
async function handleChecklistLoadTemplate(ctx) {
  try {
    const taskId = ctx.session.checklistData.taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏ —á–µ–∫-–ª–∏—Å—Ç–µ
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        checklist: {
          include: {
            items: {
              orderBy: { order: 'asc' }
            }
          }
        },
        machine: {
          include: { location: true }
        }
      }
    });
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return await ctx.scene.leave();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–µ–∫-–ª–∏—Å—Ç —É –∑–∞–¥–∞—á–∏
    if (!task.checklist) {
      // –ï—Å–ª–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω, —Å–æ–∑–¥–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç
      if (task.checklistTemplateId) {
        const template = await prisma.checklistTemplate.findUnique({
          where: { id: task.checklistTemplateId },
          include: { items: { orderBy: { order: 'asc' } } }
        });
        
        if (!template) {
          await ctx.reply('‚ùå –®–∞–±–ª–æ–Ω —á–µ–∫-–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
          return await ctx.scene.leave();
        }
        
        // –°–æ–∑–¥–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç
        const checklist = await prisma.checklist.create({
          data: {
            taskId: task.id,
            templateId: template.id,
            status: 'PENDING'
          }
        });
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞
        for (const templateItem of template.items) {
          await prisma.checklistItem.create({
            data: {
              checklistId: checklist.id,
              text: templateItem.text,
              order: templateItem.order,
              status: 'PENDING'
            }
          });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º
        const updatedTask = await prisma.task.findUnique({
          where: { id: taskId },
          include: {
            checklist: {
              include: {
                items: {
                  orderBy: { order: 'asc' }
                }
              }
            },
            machine: {
              include: { location: true }
            }
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é task
        task = updatedTask;
      } else {
        await ctx.reply('‚ùå –£ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–∞.');
        return await ctx.scene.leave();
      }
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏ —á–µ–∫-–ª–∏—Å—Ç–µ
    const message = `
üìã –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:

üîπ –¢–∏–ø: ${getTaskTypeName(task.type)}
üîπ –ê–≤—Ç–æ–º–∞—Ç: ${task.machine.internalCode} - ${task.machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}
üîπ –í—Å–µ–≥–æ –ø—É–Ω–∫—Ç–æ–≤: ${task.checklist.items.length}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å.
`;
    
    await ctx.reply(message);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –ø–µ—Ä–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
    ctx.session.state = 'checklist_item_check';
    await handleChecklistItemCheck(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–∞ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è checklist_item_check
async function handleChecklistItemCheck(ctx) {
  try {
    const taskId = ctx.session.checklistData.taskId;
    const currentItemIndex = ctx.session.checklistData.currentItemIndex;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫-–ª–∏—Å—Ç–µ
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        checklist: {
          include: {
            items: {
              orderBy: { order: 'asc' }
            }
          }
        }
      }
    });
    
    if (!task || !task.checklist || !task.checklist.items || task.checklist.items.length === 0) {
      await ctx.reply('‚ùå –ß–µ–∫-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.');
      return await ctx.scene.leave();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—É–Ω–∫—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    if (currentItemIndex >= task.checklist.items.length) {
      // –í—Å–µ –ø—É–Ω–∫—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
      ctx.session.state = 'checklist_confirm';
      return await handleChecklistConfirm(ctx);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞
    const currentItem = task.checklist.items[currentItemIndex];
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É–Ω–∫—Ç
    const message = `
üìù –ü—É–Ω–∫—Ç ${currentItemIndex + 1} –∏–∑ ${task.checklist.items.length}:

${currentItem.text}

–í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', `checklist_done_${currentItem.id}`)],
      [Markup.button.callback('‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', `checklist_skip_${currentItem.id}`)],
      [Markup.button.callback('üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', `checklist_photo_${currentItem.id}`)],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞
scene.action(/^checklist_done_(.+)$/, async (ctx) => {
  try {
    const itemId = ctx.match[1];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
    await prisma.checklistItem.update({
      where: { id: itemId },
      data: { status: 'COMPLETED' }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º ID –ø—É–Ω–∫—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
    ctx.session.checklistData.completedItems.push(itemId);
    
    await ctx.editMessageText(`‚úÖ –ü—É–Ω–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
    ctx.session.checklistData.currentItemIndex++;
    await handleChecklistItemCheck(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

scene.action(/^checklist_skip_(.+)$/, async (ctx) => {
  try {
    const itemId = ctx.match[1];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
    await prisma.checklistItem.update({
      where: { id: itemId },
      data: { status: 'SKIPPED' }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º ID –ø—É–Ω–∫—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
    ctx.session.checklistData.skippedItems.push(itemId);
    
    await ctx.editMessageText(`‚è© –ü—É–Ω–∫—Ç –ø—Ä–æ–ø—É—â–µ–Ω.`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
    ctx.session.checklistData.currentItemIndex++;
    await handleChecklistItemCheck(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

scene.action(/^checklist_photo_(.+)$/, async (ctx) => {
  try {
    const itemId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–æ—Ç–æ
    ctx.session.checklistData.currentPhotoItemId = itemId;
    
    await ctx.editMessageText(`
üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ.
`);
    
    // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'checklist_wait_photo';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
scene.on('photo', async (ctx) => {
  if (ctx.session.state === 'checklist_wait_photo') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
      const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      const itemId = ctx.session.checklistData.currentPhotoItemId;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
      ctx.session.checklistData.photos.push({
        itemId,
        photoId
      });
      
      await ctx.reply('‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –ø—É–Ω–∫—Ç—É —á–µ–∫-–ª–∏—Å—Ç–∞.');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –ø—É–Ω–∫—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞
      ctx.session.state = 'checklist_item_check';
      await handleChecklistItemCheck(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
scene.command('skip', async (ctx) => {
  if (ctx.session.state === 'checklist_wait_photo') {
    await ctx.reply('‚è© –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –ø—É–Ω–∫—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞
    ctx.session.state = 'checklist_item_check';
    await handleChecklistItemCheck(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è checklist_confirm
async function handleChecklistConfirm(ctx) {
  try {
    const taskId = ctx.session.checklistData.taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫-–ª–∏—Å—Ç–µ
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        checklist: true,
        machine: {
          include: { location: true }
        }
      }
    });
    
    if (!task || !task.checklist) {
      await ctx.reply('‚ùå –ß–µ–∫-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return await ctx.scene.leave();
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —á–µ–∫-–ª–∏—Å—Ç–∞
    const completedCount = ctx.session.checklistData.completedItems.length;
    const skippedCount = ctx.session.checklistData.skippedItems.length;
    const totalCount = completedCount + skippedCount;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ–∫-–ª–∏—Å—Ç–∞
    await prisma.checklist.update({
      where: { id: task.checklist.id },
      data: { status: 'COMPLETED' }
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞
    const message = `
‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!

üîπ –¢–∏–ø –∑–∞–¥–∞—á–∏: ${getTaskTypeName(task.type)}
üîπ –ê–≤—Ç–æ–º–∞—Ç: ${task.machine.internalCode} - ${task.machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}
üîπ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—É–Ω–∫—Ç–æ–≤: ${completedCount} –∏–∑ ${totalCount}
üîπ –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É–Ω–∫—Ç–æ–≤: ${skippedCount}
üîπ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: ${ctx.session.checklistData.photos.length}

–ß–µ–∫-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.
`;
    
    await ctx.reply(message);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —á–µ–∫-–ª–∏—Å—Ç –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏
    if (ctx.scene.state.returnScene) {
      await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏...');
      return await ctx.scene.enter(ctx.scene.state.returnScene, { taskId });
    }
    
    // –ò–Ω–∞—á–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É
    await ctx.scene.leave();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  
  // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —á–µ–∫-–ª–∏—Å—Ç –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏
  if (ctx.scene.state.returnScene) {
    await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏...');
    return await ctx.scene.enter(ctx.scene.state.returnScene, { taskId: ctx.session.checklistData.taskId });
  }
  
  await ctx.scene.leave();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
function getTaskTypeName(type) {
  const taskTypes = {
    'INGREDIENTS': 'üîÑ –ó–∞–º–µ–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤',
    'WATER': 'üíß –ó–∞–º–µ–Ω–∞ –≤–æ–¥—ã',
    'CLEANING': 'üßπ –ß–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞',
    'REPAIR': 'üîß –†–µ–º–æ–Ω—Ç',
    'CASH': 'üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è'
  };
  
  return taskTypes[type] || type;
}

module.exports = scene;
