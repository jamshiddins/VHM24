/**
 * FSM: error_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –§–∏–∫—Å–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–±–ª–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ, –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π).
 * –†–æ–ª–∏: –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏.
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - error_select_reason: –≤—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏
 *   - error_comment: –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 *   - error_photo_optional: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 *   - error_submit: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('error_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[error_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
scene.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
  if (!ctx.session.user) {
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫.');
    return await ctx.scene.leave();
  }
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    ctx.session.errorData = {
      reason: null,
      comment: null,
      photo: null,
      relatedTaskId: null,
      relatedMachineId: null
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'error_select_reason';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏
    await handleErrorSelectReason(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É error_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è error_select_reason
async function handleErrorSelectReason(ctx) {
  try {
    const message = `
‚ö†Ô∏è –§–∏–∫—Å–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –æ—à–∏–±–æ–∫
    const buttons = [
      [Markup.button.callback('üì∏ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–æ—Ç–æ', 'reason_missed_photo')],
      [Markup.button.callback('‚öñÔ∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Å–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞', 'reason_quantity_mismatch')],
      [Markup.button.callback('üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å', 'reason_technical_issue')],
      [Markup.button.callback('üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'reason_task_impossible')],
      [Markup.button.callback('‚è±Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤', 'reason_deadline_missed')],
      [Markup.button.callback('üìã –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö', 'reason_data_error')],
      [Markup.button.callback('üîÑ –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞', 'reason_other')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏
scene.action(/^reason_(.+)$/, async (ctx) => {
  try {
    const reason = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
    ctx.session.errorData.reason = reason;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
    let reasonName = '';
    switch (reason) {
      case 'missed_photo':
        reasonName = 'üì∏ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–æ—Ç–æ';
        break;
      case 'quantity_mismatch':
        reasonName = '‚öñÔ∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Å–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞';
        break;
      case 'technical_issue':
        reasonName = 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å';
        break;
      case 'task_impossible':
        reasonName = 'üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏';
        break;
      case 'deadline_missed':
        reasonName = '‚è±Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤';
        break;
      case 'data_error':
        reasonName = 'üìã –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö';
        break;
      case 'other':
        reasonName = 'üîÑ –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞';
        break;
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞: ${reasonName}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –∑–∞–¥–∞—á–µ–π
    if (['task_impossible', 'deadline_missed'].includes(reason)) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const tasks = await prisma.task.findMany({
        where: {
          assignedUserId: ctx.session.user.id,
          status: { in: ['ASSIGNED', 'IN_PROGRESS'] }
        },
        include: {
          machine: {
            include: { location: true }
          }
        },
        orderBy: { createdAt: 'desc' }
      });
      
      if (tasks.length > 0) {
        const taskMessage = `
üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—à–∏–±–∫–∞:
`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
        const taskButtons = tasks.map(task => {
          const locationName = task.machine.location ? task.machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
          return [Markup.button.callback(
            `${getTaskTypeName(task.type)} - ${task.machine.internalCode} (${locationName})`,
            `task_${task.id}`
          )];
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞–¥–∞—á–µ–π"
        taskButtons.push([Markup.button.callback('üîÑ –ù–µ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞–¥–∞—á–µ–π', 'no_task')]);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        taskButtons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
        
        const taskKeyboard = Markup.inlineKeyboard(taskButtons);
        
        await ctx.reply(taskMessage, taskKeyboard);
        return;
      }
    } else if (['technical_issue'].includes(reason)) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
      const machines = await prisma.machine.findMany({
        where: { status: 'ACTIVE' },
        include: { location: true },
        orderBy: { internalCode: 'asc' }
      });
      
      if (machines.length > 0) {
        const machineMessage = `
üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—à–∏–±–∫–∞:
`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏
        const machineButtons = machines.map(machine => {
          const locationName = machine.location ? machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
          return [Markup.button.callback(
            `${machine.internalCode} - ${locationName}`,
            `machine_${machine.id}`
          )];
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ —Å–≤—è–∑–∞–Ω–æ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–º"
        machineButtons.push([Markup.button.callback('üîÑ –ù–µ —Å–≤—è–∑–∞–Ω–æ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–º', 'no_machine')]);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        machineButtons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
        
        const machineKeyboard = Markup.inlineKeyboard(machineButtons);
        
        await ctx.reply(machineMessage, machineKeyboard);
        return;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    ctx.session.state = 'error_comment';
    await handleErrorComment(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
scene.action(/^task_(.+)$/, async (ctx) => {
  try {
    const taskId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏
    ctx.session.errorData.relatedTaskId = taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        machine: {
          include: { location: true }
        }
      }
    });
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleErrorSelectReason(ctx);
    }
    
    const locationName = task.machine.location ? task.machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${getTaskTypeName(task.type)} - ${task.machine.internalCode} (${locationName})`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    ctx.session.state = 'error_comment';
    await handleErrorComment(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–µ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞–¥–∞—á–µ–π"
scene.action('no_task', async (ctx) => {
  try {
    await ctx.editMessageText('‚úÖ –û—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ–π.');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    ctx.session.state = 'error_comment';
    await handleErrorComment(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "–ù–µ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞–¥–∞—á–µ–π":', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞
scene.action(/^machine_(.+)$/, async (ctx) => {
  try {
    const machineId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–≤—Ç–æ–º–∞—Ç–∞
    ctx.session.errorData.relatedMachineId = machineId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ
    const machine = await prisma.machine.findUnique({
      where: { id: machineId },
      include: { location: true }
    });
    
    if (!machine) {
      await ctx.reply('‚ùå –ê–≤—Ç–æ–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleErrorSelectReason(ctx);
    }
    
    const locationName = machine.location ? machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç: ${machine.internalCode} - ${locationName}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    ctx.session.state = 'error_comment';
    await handleErrorComment(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–µ —Å–≤—è–∑–∞–Ω–æ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–º"
scene.action('no_machine', async (ctx) => {
  try {
    await ctx.editMessageText('‚úÖ –û—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–æ–º.');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    ctx.session.state = 'error_comment';
    await handleErrorComment(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "–ù–µ —Å–≤—è–∑–∞–Ω–æ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–º":', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è error_comment
async function handleErrorComment(ctx) {
  try {
    await ctx.reply(`
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—à–∏–±–∫–µ

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
scene.on('text', async (ctx) => {
  if (ctx.session.state === 'error_comment') {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      ctx.session.errorData.comment = ctx.message.text.trim();
      
      await ctx.reply('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
      ctx.session.state = 'error_photo_optional';
      await handleErrorPhotoOptional(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è error_photo_optional
async function handleErrorPhotoOptional(ctx) {
  try {
    await ctx.reply(`
üì∏ –§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É—é—â–µ–µ –ø—Ä–æ–±–ª–µ–º—É.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.
`);
    
    // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'error_wait_photo';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
scene.on('photo', async (ctx) => {
  if (ctx.session.state === 'error_wait_photo') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
      const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
      ctx.session.errorData.photo = photoId;
      
      await ctx.reply('‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
      ctx.session.state = 'error_submit';
      await handleErrorSubmit(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
scene.command('skip', async (ctx) => {
  if (ctx.session.state === 'error_wait_photo') {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    ctx.session.state = 'error_submit';
    await handleErrorSubmit(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è error_submit
async function handleErrorSubmit(ctx) {
  try {
    const errorData = ctx.session.errorData;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    let confirmText = `
‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏

üîπ –ü—Ä–∏—á–∏–Ω–∞: ${getReasonName(errorData.reason)}
`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞
    if (errorData.relatedTaskId) {
      const task = await prisma.task.findUnique({
        where: { id: errorData.relatedTaskId },
        include: {
          machine: {
            include: { location: true }
          }
        }
      });
      
      if (task) {
        const locationName = task.machine.location ? task.machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
        confirmText += `üîπ –ó–∞–¥–∞—á–∞: ${getTaskTypeName(task.type)} - ${task.machine.internalCode} (${locationName})\n`;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
    if (errorData.relatedMachineId) {
      const machine = await prisma.machine.findUnique({
        where: { id: errorData.relatedMachineId },
        include: { location: true }
      });
      
      if (machine) {
        const locationName = machine.location ? machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
        confirmText += `üîπ –ê–≤—Ç–æ–º–∞—Ç: ${machine.internalCode} - ${locationName}\n`;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    confirmText += `\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${errorData.comment}\n`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_error')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(confirmText, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏
scene.action('confirm_error', async (ctx) => {
  try {
    const errorData = ctx.session.errorData;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const error = await prisma.errorReport.create({
      data: {
        reason: errorData.reason.toUpperCase(),
        comment: errorData.comment,
        photo: errorData.photo,
        taskId: errorData.relatedTaskId,
        machineId: errorData.relatedMachineId,
        userId: ctx.session.user.id,
        status: 'OPEN',
        createdAt: new Date()
      }
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      const managers = await prisma.user.findMany({
        where: { 
          role: { in: ['ADMIN', 'MANAGER'] },
          status: 'ACTIVE'
        },
        select: { telegramId: true }
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const notificationText = `
‚ö†Ô∏è –ù–æ–≤–∞—è –æ—à–∏–±–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!

üîπ ID: ${error.id}
üîπ –ü—Ä–∏—á–∏–Ω–∞: ${getReasonName(errorData.reason)}
üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.session.user.firstName} ${ctx.session.user.lastName || ''}
üîπ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${errorData.comment}

–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.
`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
      for (const manager of managers) {
        if (manager.telegramId) {
          await ctx.telegram.sendMessage(manager.telegramId, notificationText);
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
          if (errorData.photo) {
            await ctx.telegram.sendPhoto(manager.telegramId, errorData.photo);
          }
        }
      }
    } catch (notificationError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º:', notificationError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏
    await ctx.editMessageText(`
‚úÖ –û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!

üîπ ID: ${error.id}
üîπ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –ø—Ä–æ–±–ª–µ–º—É.
`);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ—à–∏–±–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ö†Ô∏è –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ—à–∏–±–∫—É', 'error_another')],
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
    ]);
    
    await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –§–∏–∫—Å–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  await ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –µ—â–µ –æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏
scene.action('error_another', async (ctx) => {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
  ctx.session.errorData = {
    reason: null,
    comment: null,
    photo: null,
    relatedTaskId: null,
    relatedMachineId: null
  };
  
  ctx.session.state = 'error_select_reason';
  await ctx.editMessageText('‚ö†Ô∏è –§–∏–∫—Å–∞—Ü–∏—è –Ω–æ–≤–æ–π –æ—à–∏–±–∫–∏...');
  await handleErrorSelectReason(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scene.action('back_to_menu', async (ctx) => {
  await ctx.editMessageText('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
  await ctx.scene.enter('main_menu_fsm');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏
function getReasonName(reason) {
  const reasons = {
    'missed_photo': 'üì∏ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–æ—Ç–æ',
    'quantity_mismatch': '‚öñÔ∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Å–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞',
    'technical_issue': 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å',
    'task_impossible': 'üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
    'deadline_missed': '‚è±Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤',
    'data_error': 'üìã –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö',
    'other': 'üîÑ –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞'
  };
  
  return reasons[reason] || reason;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
function getTaskTypeName(type) {
  const taskTypes = {
    'INGREDIENTS': 'üîÑ –ó–∞–º–µ–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤',
    'WATER': 'üíß –ó–∞–º–µ–Ω–∞ –≤–æ–¥—ã',
    'CLEANING': 'üßπ –ß–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞',
    'REPAIR': 'üîß –†–µ–º–æ–Ω—Ç',
    'CASH': 'üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è'
  };
  
  return taskTypes[type] || type;
}

module.exports = scene;
