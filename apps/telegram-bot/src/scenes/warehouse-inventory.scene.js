/**
 * FSM: warehouse_check_inventory_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –∑–∞–ø–∞—Å–æ–≤.
 * –†–æ–ª–∏: –°–∫–ª–∞–¥—Å–∫–æ–π —Ä–∞–±–æ—Ç–Ω–∏–∫ (Warehouse).
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - inventory_select_type: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
 *   - inventory_select_item: –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
 *   - inventory_input_data: –≤–≤–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/–≤–µ—Å–∞
 *   - inventory_photo: —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
 *   - inventory_finish: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('warehouse_check_inventory_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[warehouse_check_inventory_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
scene.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å ADMIN –∏–ª–∏ WAREHOUSE
  if (!ctx.session.user || !['ADMIN', 'WAREHOUSE'].includes(ctx.session.user.role)) {
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏.');
    return await ctx.scene.leave();
  }
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
    ctx.session.inventoryData = {
      type: null,
      itemId: null,
      systemQuantity: 0,
      systemWeight: 0,
      actualQuantity: 0,
      actualWeight: 0,
      photo: null,
      notes: null
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'inventory_select_type';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
    await handleInventorySelectType(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É warehouse_check_inventory_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è inventory_select_type
async function handleInventorySelectType(ctx) {
  try {
    const message = `
üìä –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥—Å–∫–∏—Ö –∑–∞–ø–∞—Å–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:
`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', 'type_ingredient')],
      [Markup.button.callback('üíß –í–æ–¥–∞', 'type_water')],
      [Markup.button.callback('üß¥ –°–∏—Ä–æ–ø—ã', 'type_syrup')],
      [Markup.button.callback('üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã', 'type_extra')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
scene.action(/^type_(.+)$/, async (ctx) => {
  try {
    const type = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
    ctx.session.inventoryData.type = type;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø
    let typeName = '';
    switch (type) {
      case 'ingredient':
        typeName = 'üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã';
        break;
      case 'water':
        typeName = 'üíß –í–æ–¥–∞';
        break;
      case 'syrup':
        typeName = 'üß¥ –°–∏—Ä–æ–ø—ã';
        break;
      case 'extra':
        typeName = 'üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã';
        break;
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: ${typeName}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    ctx.session.state = 'inventory_select_item';
    await handleInventorySelectItem(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è inventory_select_item
async function handleInventorySelectItem(ctx) {
  try {
    const type = ctx.session.inventoryData.type;
    let items = [];
    let message = '';
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (type) {
      case 'ingredient':
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        const ingredientInventories = await prisma.ingredientInventory.findMany({
          include: { ingredient: true }
        });
        
        if (ingredientInventories.length === 0) {
          await ctx.reply('‚ùå –ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ.');
          ctx.session.state = 'inventory_select_type';
          return await handleInventorySelectType(ctx);
        }
        
        items = ingredientInventories.map(inv => ({
          id: inv.ingredient.id,
          name: inv.ingredient.name,
          code: inv.ingredient.code,
          quantity: 0,
          weight: inv.weight
        }));
        
        message = 'üßÇ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:';
        break;
      case 'water':
        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –≤–æ–¥—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        const waterInventories = await prisma.waterInventory.findMany({
          include: { waterType: true }
        });
        
        if (waterInventories.length === 0) {
          await ctx.reply('‚ùå –ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤–æ–¥—ã –Ω–∞ —Å–∫–ª–∞–¥–µ.');
          ctx.session.state = 'inventory_select_type';
          return await handleInventorySelectType(ctx);
        }
        
        items = waterInventories.map(inv => ({
          id: inv.waterType.id,
          name: inv.waterType.name,
          volume: inv.waterType.volume,
          quantity: inv.units,
          weight: 0
        }));
        
        message = 'üíß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–¥—ã –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:';
        break;
      case 'syrup':
        // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Ä–æ–ø—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        const syrupInventories = await prisma.syrupInventory.findMany({
          include: { syrup: true }
        });
        
        if (syrupInventories.length === 0) {
          await ctx.reply('‚ùå –ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–∏—Ä–æ–ø–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ.');
          ctx.session.state = 'inventory_select_type';
          return await handleInventorySelectType(ctx);
        }
        
        items = syrupInventories.map(inv => ({
          id: inv.syrup.id,
          name: inv.syrup.name,
          volume: inv.syrup.volume,
          quantity: inv.units,
          weight: 0
        }));
        
        message = 'üß¥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Ä–æ–ø –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:';
        break;
      case 'extra':
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        const extraInventories = await prisma.extraItemInventory.findMany({
          include: { extraItem: true }
        });
        
        if (extraInventories.length === 0) {
          await ctx.reply('‚ùå –ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ.');
          ctx.session.state = 'inventory_select_type';
          return await handleInventorySelectType(ctx);
        }
        
        items = extraInventories.map(inv => ({
          id: inv.extraItem.id,
          name: inv.extraItem.name,
          quantity: inv.units,
          weight: 0
        }));
        
        message = 'üß∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:';
        break;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.inventoryData.items = items;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const buttons = items.map(item => {
      let buttonText = '';
      
      switch (type) {
        case 'ingredient':
          buttonText = `${item.name} (${item.code}) - ${item.weight} –≥`;
          break;
        case 'water':
          buttonText = `${item.name} (${item.volume} –ª) - ${item.quantity} —à—Ç.`;
          break;
        case 'syrup':
          buttonText = `${item.name} (${item.volume} –º–ª) - ${item.quantity} —à—Ç.`;
          break;
        case 'extra':
          buttonText = `${item.name} - ${item.quantity} —à—Ç.`;
          break;
      }
      
      return [Markup.button.callback(buttonText, `item_${item.id}`)];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
scene.action(/^item_(.+)$/, async (ctx) => {
  try {
    const itemId = ctx.match[1];
    const type = ctx.session.inventoryData.type;
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ
    const selectedItem = ctx.session.inventoryData.items.find(item => item.id === itemId);
    
    if (!selectedItem) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleInventorySelectItem(ctx);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ctx.session.inventoryData.itemId = itemId;
    ctx.session.inventoryData.systemQuantity = selectedItem.quantity;
    ctx.session.inventoryData.systemWeight = selectedItem.weight;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    let itemText = '';
    switch (type) {
      case 'ingredient':
        itemText = `${selectedItem.name} (${selectedItem.code})`;
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ${itemText}\n–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${selectedItem.weight} –≥`);
        break;
      case 'water':
        itemText = `${selectedItem.name} (${selectedItem.volume} –ª)`;
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Ç–∏–ø –≤–æ–¥—ã: ${itemText}\n–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${selectedItem.quantity} —à—Ç.`);
        break;
      case 'syrup':
        itemText = `${selectedItem.name} (${selectedItem.volume} –º–ª)`;
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Å–∏—Ä–æ–ø: ${itemText}\n–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${selectedItem.quantity} —à—Ç.`);
        break;
      case 'extra':
        itemText = selectedItem.name;
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: ${itemText}\n–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${selectedItem.quantity} —à—Ç.`);
        break;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/–≤–µ—Å–∞
    ctx.session.state = 'inventory_input_data';
    await handleInventoryInputData(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è inventory_input_data
async function handleInventoryInputData(ctx) {
  try {
    const type = ctx.session.inventoryData.type;
    const itemId = ctx.session.inventoryData.itemId;
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ
    const selectedItem = ctx.session.inventoryData.items.find(item => item.id === itemId);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
    switch (type) {
      case 'ingredient':
        await ctx.reply(`
‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ "${selectedItem.name}" (–≤ –≥—Ä–∞–º–º–∞—Ö):

–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${selectedItem.weight} –≥
`);
        break;
      case 'water':
      case 'syrup':
      case 'extra':
        await ctx.reply(`
üî¢ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ "${selectedItem.name}" (–≤ —à—Ç—É–∫–∞—Ö):

–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${selectedItem.quantity} —à—Ç.
`);
        break;
    }
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/–≤–µ—Å–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/–≤–µ—Å–∞
scene.on('text', async (ctx) => {
  if (ctx.session.state === 'inventory_input_data') {
    try {
      const type = ctx.session.inventoryData.type;
      const value = parseInt(ctx.message.text.trim());
      
      if (isNaN(value) || value < 0) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é).');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤–µ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
      switch (type) {
        case 'ingredient':
          ctx.session.inventoryData.actualWeight = value;
          break;
        case 'water':
        case 'syrup':
        case 'extra':
          ctx.session.inventoryData.actualQuantity = value;
          break;
      }
      
      await ctx.reply('‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ñ–æ—Ç–æ
      ctx.session.state = 'inventory_photo';
      await handleInventoryPhoto(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/–≤–µ—Å–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  } else if (ctx.session.state === 'inventory_input_notes') {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
      ctx.session.inventoryData.notes = ctx.message.text.trim();
      
      await ctx.reply('‚úÖ –ü—Ä–∏–º–µ—á–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
      ctx.session.state = 'inventory_finish';
      await handleInventoryFinish(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è inventory_photo
async function handleInventoryPhoto(ctx) {
  try {
    await ctx.reply(`
üì∏ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.
`);
    
    // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'inventory_wait_photo';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
scene.on('photo', async (ctx) => {
  if (ctx.session.state === 'inventory_wait_photo') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
      const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
      ctx.session.inventoryData.photo = photoId;
      
      await ctx.reply('‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω–æ.');
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
      await ctx.reply(`
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:
`);
      
      // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      ctx.session.state = 'inventory_input_notes';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
scene.command('skip', async (ctx) => {
  if (ctx.session.state === 'inventory_wait_photo') {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    await ctx.reply(`
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'inventory_input_notes';
  } else if (ctx.session.state === 'inventory_input_notes') {
    ctx.session.inventoryData.notes = null;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
    ctx.session.state = 'inventory_finish';
    await handleInventoryFinish(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è inventory_finish
async function handleInventoryFinish(ctx) {
  try {
    const inventoryData = ctx.session.inventoryData;
    const type = inventoryData.type;
    const itemId = inventoryData.itemId;
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ
    const selectedItem = inventoryData.items.find(item => item.id === itemId);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    let confirmText = `
üìä –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏

`;
    
    switch (type) {
      case 'ingredient':
        confirmText += `üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ${selectedItem.name} (${selectedItem.code})\n`;
        confirmText += `‚öñÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${inventoryData.systemWeight} –≥\n`;
        confirmText += `‚öñÔ∏è –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${inventoryData.actualWeight} –≥\n`;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        const weightDiff = inventoryData.actualWeight - inventoryData.systemWeight;
        if (weightDiff > 0) {
          confirmText += `üìà –ò–∑–ª–∏—à–µ–∫: ${weightDiff} –≥\n`;
        } else if (weightDiff < 0) {
          confirmText += `üìâ –ù–µ–¥–æ—Å—Ç–∞—á–∞: ${Math.abs(weightDiff)} –≥\n`;
        } else {
          confirmText += `‚úÖ –û—Å—Ç–∞—Ç–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç\n`;
        }
        break;
      case 'water':
      case 'syrup':
      case 'extra':
        let itemName = '';
        switch (type) {
          case 'water':
            itemName = `üíß –í–æ–¥–∞: ${selectedItem.name} (${selectedItem.volume} –ª)`;
            break;
          case 'syrup':
            itemName = `üß¥ –°–∏—Ä–æ–ø: ${selectedItem.name} (${selectedItem.volume} –º–ª)`;
            break;
          case 'extra':
            itemName = `üß∞ –ü—Ä–µ–¥–º–µ—Ç: ${selectedItem.name}`;
            break;
        }
        
        confirmText += `${itemName}\n`;
        confirmText += `üî¢ –°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${inventoryData.systemQuantity} —à—Ç.\n`;
        confirmText += `üî¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${inventoryData.actualQuantity} —à—Ç.\n`;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        const quantityDiff = inventoryData.actualQuantity - inventoryData.systemQuantity;
        if (quantityDiff > 0) {
          confirmText += `üìà –ò–∑–ª–∏—à–µ–∫: ${quantityDiff} —à—Ç.\n`;
        } else if (quantityDiff < 0) {
          confirmText += `üìâ –ù–µ–¥–æ—Å—Ç–∞—á–∞: ${Math.abs(quantityDiff)} —à—Ç.\n`;
        } else {
          confirmText += `‚úÖ –û—Å—Ç–∞—Ç–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç\n`;
        }
        break;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (inventoryData.notes) {
      confirmText += `\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${inventoryData.notes}\n`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_inventory')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(confirmText, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
scene.action('confirm_inventory', async (ctx) => {
  try {
    const inventoryData = ctx.session.inventoryData;
    const type = inventoryData.type;
    const itemId = inventoryData.itemId;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const inventory = await prisma.inventory.create({
      data: {
        type: type.toUpperCase(),
        itemId: itemId,
        systemQuantity: inventoryData.systemQuantity,
        systemWeight: inventoryData.systemWeight,
        actualQuantity: inventoryData.actualQuantity,
        actualWeight: inventoryData.actualWeight,
        photo: inventoryData.photo,
        notes: inventoryData.notes,
        userId: ctx.session.user.id,
        timestamp: new Date()
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    switch (type) {
      case 'ingredient':
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
        const ingredientInventory = await prisma.ingredientInventory.findFirst({
          where: { ingredientId: itemId }
        });
        
        if (ingredientInventory) {
          await prisma.ingredientInventory.update({
            where: { id: ingredientInventory.id },
            data: { 
              weight: inventoryData.actualWeight,
              lastUpdated: new Date()
            }
          });
        }
        break;
      case 'water':
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤–æ–¥—ã
        const waterInventory = await prisma.waterInventory.findFirst({
          where: { waterTypeId: itemId }
        });
        
        if (waterInventory) {
          await prisma.waterInventory.update({
            where: { id: waterInventory.id },
            data: { 
              units: inventoryData.actualQuantity,
              lastUpdated: new Date()
            }
          });
        }
        break;
      case 'syrup':
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å–∏—Ä–æ–ø–∞
        const syrupInventory = await prisma.syrupInventory.findFirst({
          where: { syrupId: itemId }
        });
        
        if (syrupInventory) {
          await prisma.syrupInventory.update({
            where: { id: syrupInventory.id },
            data: { 
              units: inventoryData.actualQuantity,
              lastUpdated: new Date()
            }
          });
        }
        break;
      case 'extra':
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        const extraInventory = await prisma.extraItemInventory.findFirst({
          where: { extraItemId: itemId }
        });
        
        if (extraInventory) {
          await prisma.extraItemInventory.update({
            where: { id: extraInventory.id },
            data: { 
              units: inventoryData.actualQuantity,
              lastUpdated: new Date()
            }
          });
        }
        break;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
    await ctx.editMessageText(`
‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üîπ ID: ${inventory.id}
üîπ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
`);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –µ—â–µ –æ–¥–Ω—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìä –ü—Ä–æ–≤–µ—Å—Ç–∏ –µ—â–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é', 'inventory_another')],
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
    ]);
    
    await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  await ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
scene.action('inventory_another', async (ctx) => {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
  ctx.session.inventoryData = {
    type: null,
    itemId: null,
    systemQuantity: 0,
    systemWeight: 0,
    actualQuantity: 0,
    actualWeight: 0,
    photo: null,
    notes: null
  };
  
  ctx.session.state = 'inventory_select_type';
  await ctx.editMessageText('üìä –ù–æ–≤–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è...');
  await handleInventorySelectType(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scene.action('back_to_menu', async (ctx) => {
  await ctx.editMessageText('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
  await ctx.scene.enter('main_menu_fsm');
});

module.exports = scene;
