/**
 * FSM: bag_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–æ–∫-–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
 * –†–æ–ª–∏: –°–∫–ª–∞–¥—Å–∫–æ–π —Ä–∞–±–æ—Ç–Ω–∏–∫ (Warehouse).
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - bag_select_machine: –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞
 *   - bag_add_hoppers: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—É–Ω–∫–µ—Ä–æ–≤
 *   - bag_add_syrups: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Ä–æ–ø–æ–≤
 *   - bag_add_water: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã
 *   - bag_add_extras: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
 *   - bag_photo: —Ñ–æ—Ç–æ —Å—É–º–∫–∏
 *   - bag_confirm: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
 *   - bag_dispatch: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—É–º–∫–∏
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('bag_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[bag_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
scene.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å ADMIN –∏–ª–∏ WAREHOUSE
  if (!ctx.session.user || !['ADMIN', 'WAREHOUSE'].includes(ctx.session.user.role)) {
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é —Å—É–º–æ–∫.');
    return await ctx.scene.leave();
  }
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É–º–∫–∏
    ctx.session.bagData = {
      machineId: null,
      operatorId: null,
      hoppers: [],
      syrups: [],
      water: [],
      extras: [],
      photo: null,
      notes: null
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'bag_select_machine';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∞
    await handleBagSelectMachine(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É bag_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_select_machine
async function handleBagSelectMachine(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
    const machines = await prisma.machine.findMany({
      where: { status: 'ACTIVE' },
      include: { location: true },
      orderBy: { internalCode: 'asc' }
    });
    
    if (machines.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—É–º–∫—É.');
      return await ctx.scene.leave();
    }
    
    const message = `
üéí –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–∫–∏-–∫–æ–º–ø–ª–µ–∫—Ç–∞

–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å—É–º–∫–∞:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏
    const buttons = machines.map(machine => {
      const locationName = machine.location ? machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
      return [Markup.button.callback(
        `${machine.internalCode} - ${locationName}`,
        `machine_${machine.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞
scene.action(/^machine_(.+)$/, async (ctx) => {
  try {
    const machineId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–≤—Ç–æ–º–∞—Ç–∞
    ctx.session.bagData.machineId = machineId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ
    const machine = await prisma.machine.findUnique({
      where: { id: machineId },
      include: { location: true }
    });
    
    if (!machine) {
      await ctx.reply('‚ùå –ê–≤—Ç–æ–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleBagSelectMachine(ctx);
    }
    
    const locationName = machine.location ? machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç: ${machine.internalCode} - ${locationName}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    ctx.session.state = 'bag_select_operator';
    await handleBagSelectOperator(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_select_operator
async function handleBagSelectOperator(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    const operators = await prisma.user.findMany({
      where: { 
        role: 'OPERATOR',
        status: 'ACTIVE'
      },
      orderBy: { firstName: 'asc' }
    });
    
    if (operators.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—É–º–∫—É.');
      return await ctx.scene.leave();
    }
    
    const message = `
üë§ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å—É–º–∫–∞:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    const buttons = operators.map(operator => {
      return [Markup.button.callback(
        `${operator.firstName} ${operator.lastName || ''}`,
        `operator_${operator.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
scene.action(/^operator_(.+)$/, async (ctx) => {
  try {
    const operatorId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    ctx.session.bagData.operatorId = operatorId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
    const operator = await prisma.user.findUnique({
      where: { id: operatorId }
    });
    
    if (!operator) {
      await ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleBagSelectOperator(ctx);
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä: ${operator.firstName} ${operator.lastName || ''}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –±—É–Ω–∫–µ—Ä–æ–≤
    ctx.session.state = 'bag_add_hoppers';
    await handleBagAddHoppers(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_add_hoppers
async function handleBagAddHoppers(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    const ingredients = await prisma.ingredient.findMany({
      where: { status: 'ACTIVE' },
      orderBy: { name: 'asc' }
    });
    
    if (ingredients.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.');
      ctx.session.state = 'bag_add_syrups';
      return await handleBagAddSyrups(ctx);
    }
    
    const message = `
üßÇ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—É–Ω–∫–µ—Ä–æ–≤ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–∫—É:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
    const buttons = ingredients.map(ingredient => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
      const isSelected = ctx.session.bagData.hoppers.some(h => h.ingredientId === ingredient.id);
      const prefix = isSelected ? '‚úÖ ' : '';
      
      return [Markup.button.callback(
        `${prefix}${ingredient.name} (${ingredient.code})`,
        `ingredient_${ingredient.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.push([
      Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'hoppers_done'),
      Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
    ]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±—É–Ω–∫–µ—Ä–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
scene.action(/^ingredient_(.+)$/, async (ctx) => {
  try {
    const ingredientId = ctx.match[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
    const existingIndex = ctx.session.bagData.hoppers.findIndex(h => h.ingredientId === ingredientId);
    
    if (existingIndex !== -1) {
      // –ï—Å–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      ctx.session.bagData.hoppers.splice(existingIndex, 1);
      await ctx.answerCbQuery('–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞');
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
      ctx.session.bagData.hoppers.push({
        ingredientId,
        weight: 0 // –í–µ—Å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–∑–∂–µ
      });
      await ctx.answerCbQuery('–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    await handleBagAddHoppers(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
scene.action('hoppers_done', async (ctx) => {
  try {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    if (ctx.session.bagData.hoppers.length > 0) {
      await ctx.editMessageText('‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤–µ—Å–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
      ctx.session.bagData.currentHopperIndex = 0;
      ctx.session.state = 'bag_input_hopper_weight';
      await handleBagInputHopperWeight(ctx);
    } else {
      await ctx.editMessageText('‚è© –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–∏—Ä–æ–ø–æ–≤
      ctx.session.state = 'bag_add_syrups';
      await handleBagAddSyrups(ctx);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_input_hopper_weight
async function handleBagInputHopperWeight(ctx) {
  try {
    const currentIndex = ctx.session.bagData.currentHopperIndex;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    if (currentIndex >= ctx.session.bagData.hoppers.length) {
      // –í—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–∏—Ä–æ–ø–æ–≤
      ctx.session.state = 'bag_add_syrups';
      return await handleBagAddSyrups(ctx);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
    const currentHopper = ctx.session.bagData.hoppers[currentIndex];
    const ingredient = await prisma.ingredient.findUnique({
      where: { id: currentHopper.ingredientId }
    });
    
    if (!ingredient) {
      // –ï—Å–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
      ctx.session.bagData.currentHopperIndex++;
      return await handleBagInputHopperWeight(ctx);
    }
    
    await ctx.reply(`
‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –±—É–Ω–∫–µ—Ä–∞ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º "${ingredient.name}" (–≤ –≥—Ä–∞–º–º–∞—Ö):
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤–µ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤–µ—Å–∞ –±—É–Ω–∫–µ—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –±—É–Ω–∫–µ—Ä–∞
scene.on('text', async (ctx) => {
  if (ctx.session.state === 'bag_input_hopper_weight') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–µ—Å
      const weight = parseInt(ctx.message.text.trim());
      
      if (isNaN(weight) || weight <= 0) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö).');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
      const currentIndex = ctx.session.bagData.currentHopperIndex;
      ctx.session.bagData.hoppers[currentIndex].weight = weight;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–µ
      const ingredient = await prisma.ingredient.findUnique({
        where: { id: ctx.session.bagData.hoppers[currentIndex].ingredientId }
      });
      
      await ctx.reply(`‚úÖ –í–µ—Å –±—É–Ω–∫–µ—Ä–∞ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º "${ingredient.name}" (${weight} –≥) —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
      ctx.session.bagData.currentHopperIndex++;
      await handleBagInputHopperWeight(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –±—É–Ω–∫–µ—Ä–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  } else if (ctx.session.state === 'bag_input_syrup_units') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const units = parseInt(ctx.message.text.trim());
      
      if (isNaN(units) || units <= 0) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü).');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∏—Ä–æ–ø–∞
      const currentIndex = ctx.session.bagData.currentSyrupIndex;
      ctx.session.bagData.syrups[currentIndex].units = units;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Ä–æ–ø–µ
      const syrup = await prisma.syrup.findUnique({
        where: { id: ctx.session.bagData.syrups[currentIndex].syrupId }
      });
      
      await ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Ä–æ–ø–∞ "${syrup.name}" (${units} —à—Ç.) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏—Ä–æ–ø—É
      ctx.session.bagData.currentSyrupIndex++;
      await handleBagInputSyrupUnits(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏—Ä–æ–ø–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  } else if (ctx.session.state === 'bag_input_water_units') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const units = parseInt(ctx.message.text.trim());
      
      if (isNaN(units) || units <= 0) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫).');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ –≤–æ–¥—ã
      const currentIndex = ctx.session.bagData.currentWaterIndex;
      ctx.session.bagData.water[currentIndex].units = units;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –≤–æ–¥—ã
      const waterType = await prisma.waterType.findUnique({
        where: { id: ctx.session.bagData.water[currentIndex].waterTypeId }
      });
      
      await ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã "${waterType.name}" (${units} —à—Ç.) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–∏–ø—É –≤–æ–¥—ã
      ctx.session.bagData.currentWaterIndex++;
      await handleBagInputWaterUnits(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  } else if (ctx.session.state === 'bag_input_notes') {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
      ctx.session.bagData.notes = ctx.message.text.trim();
      
      await ctx.reply('‚úÖ –ü—Ä–∏–º–µ—á–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ —Å—É–º–∫–∏
      ctx.session.state = 'bag_photo';
      await handleBagPhoto(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_add_syrups
async function handleBagAddSyrups(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏—Ä–æ–ø–æ–≤
    const syrups = await prisma.syrup.findMany({
      where: { status: 'ACTIVE' },
      orderBy: { name: 'asc' }
    });
    
    if (syrups.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏—Ä–æ–ø–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.');
      ctx.session.state = 'bag_add_water';
      return await handleBagAddWater(ctx);
    }
    
    const message = `
üß¥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Ä–æ–ø–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Ä–æ–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–∫—É:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∏—Ä–æ–ø–∞–º–∏
    const buttons = syrups.map(syrup => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–∏—Ä–æ–ø
      const isSelected = ctx.session.bagData.syrups.some(s => s.syrupId === syrup.id);
      const prefix = isSelected ? '‚úÖ ' : '';
      
      return [Markup.button.callback(
        `${prefix}${syrup.name} (${syrup.volume} –º–ª)`,
        `syrup_${syrup.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.push([
      Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'syrups_done'),
      Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
    ]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∏—Ä–æ–ø–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–∏—Ä–æ–ø–æ–≤
scene.action(/^syrup_(.+)$/, async (ctx) => {
  try {
    const syrupId = ctx.match[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–∏—Ä–æ–ø
    const existingIndex = ctx.session.bagData.syrups.findIndex(s => s.syrupId === syrupId);
    
    if (existingIndex !== -1) {
      // –ï—Å–ª–∏ —Å–∏—Ä–æ–ø —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      ctx.session.bagData.syrups.splice(existingIndex, 1);
      await ctx.answerCbQuery('–°–∏—Ä–æ–ø —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞');
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Ä–æ–ø –≤ —Å–ø–∏—Å–æ–∫
      ctx.session.bagData.syrups.push({
        syrupId,
        units: 0 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–∑–∂–µ
      });
      await ctx.answerCbQuery('–°–∏—Ä–æ–ø –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏—Ä–æ–ø–æ–≤
    await handleBagAddSyrups(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–∏—Ä–æ–ø–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–∏—Ä–æ–ø–æ–≤
scene.action('syrups_done', async (ctx) => {
  try {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Å–∏—Ä–æ–ø—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    if (ctx.session.bagData.syrups.length > 0) {
      await ctx.editMessageText('‚úÖ –°–∏—Ä–æ–ø—ã –≤—ã–±—Ä–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏—Ä–æ–ø–∞.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–∏—Ä–æ–ø–∞
      ctx.session.bagData.currentSyrupIndex = 0;
      ctx.session.state = 'bag_input_syrup_units';
      await handleBagInputSyrupUnits(ctx);
    } else {
      await ctx.editMessageText('‚è© –°–∏—Ä–æ–ø—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–æ–¥—ã
      ctx.session.state = 'bag_add_water';
      await handleBagAddWater(ctx);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å–∏—Ä–æ–ø–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_input_syrup_units
async function handleBagInputSyrupUnits(ctx) {
  try {
    const currentIndex = ctx.session.bagData.currentSyrupIndex;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Å–∏—Ä–æ–ø—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    if (currentIndex >= ctx.session.bagData.syrups.length) {
      // –í—Å–µ —Å–∏—Ä–æ–ø—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–æ–¥—ã
      ctx.session.state = 'bag_add_water';
      return await handleBagAddWater(ctx);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏—Ä–æ–ø
    const currentSyrup = ctx.session.bagData.syrups[currentIndex];
    const syrup = await prisma.syrup.findUnique({
      where: { id: currentSyrup.syrupId }
    });
    
    if (!syrup) {
      // –ï—Å–ª–∏ —Å–∏—Ä–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
      ctx.session.bagData.currentSyrupIndex++;
      return await handleBagInputSyrupUnits(ctx);
    }
    
    await ctx.reply(`
üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Ä–æ–ø–∞ "${syrup.name}" (–≤ —à—Ç—É–∫–∞—Ö):
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏—Ä–æ–ø–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_add_water
async function handleBagAddWater(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –≤–æ–¥—ã
    const waterTypes = await prisma.waterType.findMany({
      where: { status: 'ACTIVE' },
      orderBy: { name: 'asc' }
    });
    
    if (waterTypes.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–¥—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.');
      ctx.session.state = 'bag_add_extras';
      return await handleBagAddExtras(ctx);
    }
    
    const message = `
üíß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –≤–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–∫—É:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –≤–æ–¥—ã
    const buttons = waterTypes.map(waterType => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–∏–ø –≤–æ–¥—ã
      const isSelected = ctx.session.bagData.water.some(w => w.waterTypeId === waterType.id);
      const prefix = isSelected ? '‚úÖ ' : '';
      
      return [Markup.button.callback(
        `${prefix}${waterType.name} (${waterType.volume} –ª)`,
        `water_${waterType.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.push([
      Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'water_done'),
      Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
    ]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –≤–æ–¥—ã
scene.action(/^water_(.+)$/, async (ctx) => {
  try {
    const waterTypeId = ctx.match[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–∏–ø –≤–æ–¥—ã
    const existingIndex = ctx.session.bagData.water.findIndex(w => w.waterTypeId === waterTypeId);
    
    if (existingIndex !== -1) {
      // –ï—Å–ª–∏ —Ç–∏–ø –≤–æ–¥—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      ctx.session.bagData.water.splice(existingIndex, 1);
      await ctx.answerCbQuery('–¢–∏–ø –≤–æ–¥—ã —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞');
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –≤–æ–¥—ã –≤ —Å–ø–∏—Å–æ–∫
      ctx.session.bagData.water.push({
        waterTypeId,
        units: 0 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–∑–∂–µ
      });
      await ctx.answerCbQuery('–¢–∏–ø –≤–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –≤–æ–¥—ã
    await handleBagAddWater(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–æ–¥—ã:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –≤–æ–¥—ã
scene.action('water_done', async (ctx) => {
  try {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–∏–ø—ã –≤–æ–¥—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    if (ctx.session.bagData.water.length > 0) {
      await ctx.editMessageText('‚úÖ –¢–∏–ø—ã –≤–æ–¥—ã –≤—ã–±—Ä–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≤–æ–¥—ã.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞ –≤–æ–¥—ã
      ctx.session.bagData.currentWaterIndex = 0;
      ctx.session.state = 'bag_input_water_units';
      await handleBagInputWaterUnits(ctx);
    } else {
      await ctx.editMessageText('‚è© –¢–∏–ø—ã –≤–æ–¥—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      ctx.session.state = 'bag_add_extras';
      await handleBagAddExtras(ctx);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –≤–æ–¥—ã:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_input_water_units
async function handleBagInputWaterUnits(ctx) {
  try {
    const currentIndex = ctx.session.bagData.currentWaterIndex;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–∏–ø—ã –≤–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    if (currentIndex >= ctx.session.bagData.water.length) {
      // –í—Å–µ —Ç–∏–ø—ã –≤–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      ctx.session.state = 'bag_add_extras';
      return await handleBagAddExtras(ctx);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –≤–æ–¥—ã
    const currentWater = ctx.session.bagData.water[currentIndex];
    const waterType = await prisma.waterType.findUnique({
      where: { id: currentWater.waterTypeId }
    });
    
    if (!waterType) {
      // –ï—Å–ª–∏ —Ç–∏–ø –≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
      ctx.session.bagData.currentWaterIndex++;
      return await handleBagInputWaterUnits(ctx);
    }
    
    await ctx.reply(`
üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã "${waterType.name}" (–≤ –±—É—Ç—ã–ª–∫–∞—Ö):
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_add_extras
async function handleBagAddExtras(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const extras = await prisma.extraItem.findMany({
      where: { status: 'ACTIVE' },
      orderBy: { name: 'asc' }
    });
    
    if (extras.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.');
      ctx.session.state = 'bag_input_notes';
      return await handleBagInputNotes(ctx);
    }
    
    const message = `
üß∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–∫—É:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
    const buttons = extras.map(extra => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç
      const isSelected = ctx.session.bagData.extras.some(e => e.extraItemId === extra.id);
      const prefix = isSelected ? '‚úÖ ' : '';
      
      return [Markup.button.callback(
        `${prefix}${extra.name}`,
        `extra_${extra.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.push([
      Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'extras_done'),
      Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
    ]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
scene.action(/^extra_(.+)$/, async (ctx) => {
  try {
    const extraItemId = ctx.match[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç
    const existingIndex = ctx.session.bagData.extras.findIndex(e => e.extraItemId === extraItemId);
    
    if (existingIndex !== -1) {
      // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      ctx.session.bagData.extras.splice(existingIndex, 1);
      await ctx.answerCbQuery('–ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞');
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ø–∏—Å–æ–∫
      ctx.session.bagData.extras.push({
        extraItemId,
        units: 1 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —à—Ç—É–∫–∞
      });
      await ctx.answerCbQuery('–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    await handleBagAddExtras(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
scene.action('extras_done', async (ctx) => {
  try {
    await ctx.editMessageText('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã.');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
    ctx.session.state = 'bag_input_notes';
    await handleBagInputNotes(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_input_notes
async function handleBagInputNotes(ctx) {
  try {
    await ctx.reply(`
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Å—É–º–∫–µ

–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Å—É–º–∫–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'bag_input_notes';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
scene.command('skip', async (ctx) => {
  if (ctx.session.state === 'bag_input_notes') {
    ctx.session.bagData.notes = null;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ —Å—É–º–∫–∏
    ctx.session.state = 'bag_photo';
    await handleBagPhoto(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_photo
async function handleBagPhoto(ctx) {
  try {
    await ctx.reply(`
üì∏ –§–æ—Ç–æ —Å—É–º–∫–∏

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–∫–∏.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.
`);
    
    // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'bag_wait_photo';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ —Å—É–º–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ —Å—É–º–∫–∏
scene.on('photo', async (ctx) => {
  if (ctx.session.state === 'bag_wait_photo') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
      const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
      ctx.session.bagData.photo = photoId;
      
      await ctx.reply('‚úÖ –§–æ—Ç–æ —Å—É–º–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
      ctx.session.state = 'bag_confirm';
      await handleBagConfirm(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Å—É–º–∫–∏:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ —Å—É–º–∫–∏
scene.command('skip', async (ctx) => {
  if (ctx.session.state === 'bag_wait_photo') {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    ctx.session.state = 'bag_confirm';
    await handleBagConfirm(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_confirm
async function handleBagConfirm(ctx) {
  try {
    const bagData = ctx.session.bagData;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
    const machine = await prisma.machine.findUnique({
      where: { id: bagData.machineId },
      include: { location: true }
    });
    
    const operator = await prisma.user.findUnique({
      where: { id: bagData.operatorId }
    });
    
    if (!machine || !operator) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ.');
      return await ctx.scene.leave();
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    let confirmText = `
üéí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–∫–∏

üîπ –ê–≤—Ç–æ–º–∞—Ç: ${machine.internalCode} - ${machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}
üîπ –û–ø–µ—Ä–∞—Ç–æ—Ä: ${operator.firstName} ${operator.lastName || ''}
`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–Ω–∫–µ—Ä–∞—Ö
    if (bagData.hoppers.length > 0) {
      confirmText += '\nüßÇ –ë—É–Ω–∫–µ—Ä—ã —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏:\n';
      
      for (const hopper of bagData.hoppers) {
        const ingredient = await prisma.ingredient.findUnique({
          where: { id: hopper.ingredientId }
        });
        
        if (ingredient) {
          confirmText += `- ${ingredient.name} (${hopper.weight} –≥)\n`;
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Ä–æ–ø–∞—Ö
    if (bagData.syrups.length > 0) {
      confirmText += '\nüß¥ –°–∏—Ä–æ–ø—ã:\n';
      
      for (const syrupItem of bagData.syrups) {
        const syrup = await prisma.syrup.findUnique({
          where: { id: syrupItem.syrupId }
        });
        
        if (syrup) {
          confirmText += `- ${syrup.name} (${syrupItem.units} —à—Ç.)\n`;
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–µ
    if (bagData.water.length > 0) {
      confirmText += '\nüíß –í–æ–¥–∞:\n';
      
      for (const waterItem of bagData.water) {
        const waterType = await prisma.waterType.findUnique({
          where: { id: waterItem.waterTypeId }
        });
        
        if (waterType) {
          confirmText += `- ${waterType.name} (${waterItem.units} —à—Ç.)\n`;
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
    if (bagData.extras.length > 0) {
      confirmText += '\nüß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n';
      
      for (const extraItem of bagData.extras) {
        const extra = await prisma.extraItem.findUnique({
          where: { id: extraItem.extraItemId }
        });
        
        if (extra) {
          confirmText += `- ${extra.name} (${extraItem.units} —à—Ç.)\n`;
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (bagData.notes) {
      confirmText += `\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${bagData.notes}\n`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_bag')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(confirmText, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–∫–∏
scene.action('confirm_bag', async (ctx) => {
  try {
    const bagData = ctx.session.bagData;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å—É–º–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const bag = await prisma.bag.create({
      data: {
        machineId: bagData.machineId,
        operatorId: bagData.operatorId,
        createdById: ctx.session.user.id,
        status: 'CREATED',
        photo: bagData.photo,
        notes: bagData.notes
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –±—É–Ω–∫–µ—Ä–∞—Ö
    for (const hopper of bagData.hoppers) {
      await prisma.bagHopper.create({
        data: {
          bagId: bag.id,
          ingredientId: hopper.ingredientId,
          weight: hopper.weight
        }
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å–∏—Ä–æ–ø–∞—Ö
    for (const syrupItem of bagData.syrups) {
      await prisma.bagSyrup.create({
        data: {
          bagId: bag.id,
          syrupId: syrupItem.syrupId,
          units: syrupItem.units
        }
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –≤–æ–¥–µ
    for (const waterItem of bagData.water) {
      await prisma.bagWater.create({
        data: {
          bagId: bag.id,
          waterTypeId: waterItem.waterTypeId,
          units: waterItem.units
        }
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
    for (const extraItem of bagData.extras) {
      await prisma.bagExtra.create({
        data: {
          bagId: bag.id,
          extraItemId: extraItem.extraItemId,
          units: extraItem.units
        }
      });
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    try {
      const operator = await prisma.user.findUnique({
        where: { id: bagData.operatorId },
        select: { telegramId: true }
      });
      
      if (operator && operator.telegramId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ
        const machine = await prisma.machine.findUnique({
          where: { id: bagData.machineId },
          include: { location: true }
        });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notificationText = `
üéí –î–ª—è –≤–∞—Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—É–º–∫–∞!

üîπ –ê–≤—Ç–æ–º–∞—Ç: ${machine.internalCode} - ${machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}
üîπ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: ${new Date().toLocaleDateString('ru-RU')}

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–∫—É –Ω–∞ —Å–∫–ª–∞–¥–µ.
`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await ctx.telegram.sendMessage(operator.telegramId, notificationText);
      }
    } catch (notificationError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É:', notificationError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É–º–∫–∏
    await ctx.editMessageText(`
‚úÖ –°—É–º–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!

üîπ ID: ${bag.id}
üîπ –°—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞–Ω–∞
üîπ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å—É–º–∫–µ.
`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—É–º–∫–∏
    ctx.session.state = 'bag_dispatch';
    await handleBagDispatch(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–º–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–º–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è bag_dispatch
async function handleBagDispatch(ctx) {
  try {
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—É–º–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üéí –°–æ–∑–¥–∞—Ç—å –µ—â–µ —Å—É–º–∫—É', 'create_another_bag')],
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
    ]);
    
    await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—É–º–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  await ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–π —Å—É–º–∫–∏
scene.action('create_another_bag', async (ctx) => {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
  ctx.session.bagData = {
    machineId: null,
    operatorId: null,
    hoppers: [],
    syrups: [],
    water: [],
    extras: [],
    photo: null,
    notes: null
  };
  
  ctx.session.state = 'bag_select_machine';
  await ctx.editMessageText('üéí –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—É–º–∫–∏...');
  await handleBagSelectMachine(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scene.action('back_to_menu', async (ctx) => {
  await ctx.editMessageText('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
  await ctx.scene.enter('main_menu_fsm');
});

module.exports = scene;
