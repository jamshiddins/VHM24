/**
 * FSM: task_create_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —Ç–µ—Ö–Ω–∏–∫–∞, —Å–∫–ª–∞–¥–∞).
 * –†–æ–ª–∏: –ú–µ–Ω–µ–¥–∂–µ—Ä.
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - task_select_type: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
 *   - task_select_machine: –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞
 *   - task_select_items: –≤—ã–±–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Å–∏—Ä–æ–ø–æ–≤, –≤–æ–¥—ã, –º–∏–∫—Å–µ—Ä–æ–≤
 *   - task_select_deadline: –≤—ã–±–æ—Ä —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 *   - task_select_checklist_template: –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
 *   - task_assign_executor: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
 *   - task_confirm_create: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
 *   - task_success: —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
 *   - task_error: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('task_create_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[task_create_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
scene.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å ADMIN –∏–ª–∏ MANAGER
  if (!ctx.session.user || !['ADMIN', 'MANAGER'].includes(ctx.session.user.role)) {
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞—á.');
    return await ctx.scene.leave();
  }
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    ctx.session.taskData = {
      type: null,
      machineId: null,
      items: [],
      deadline: null,
      checklistTemplateId: null,
      executorId: null,
      description: null
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'task_select_type';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    await handleTaskSelectType(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É task_create_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_select_type
async function handleTaskSelectType(ctx) {
  try {
    const message = `
üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:
`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –ó–∞–º–µ–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤', 'task_type_ingredients')],
      [Markup.button.callback('üíß –ó–∞–º–µ–Ω–∞ –≤–æ–¥—ã', 'task_type_water')],
      [Markup.button.callback('üßπ –ß–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞', 'task_type_cleaning')],
      [Markup.button.callback('üîß –†–µ–º–æ–Ω—Ç', 'task_type_repair')],
      [Markup.button.callback('üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è', 'task_type_cash')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
scene.action(/^task_type_(.+)$/, async (ctx) => {
  try {
    const taskType = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
    ctx.session.taskData.type = taskType.toUpperCase();
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø
    let taskTypeName = '';
    switch (taskType) {
      case 'ingredients':
        taskTypeName = 'üîÑ –ó–∞–º–µ–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤';
        break;
      case 'water':
        taskTypeName = 'üíß –ó–∞–º–µ–Ω–∞ –≤–æ–¥—ã';
        break;
      case 'cleaning':
        taskTypeName = 'üßπ –ß–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞';
        break;
      case 'repair':
        taskTypeName = 'üîß –†–µ–º–æ–Ω—Ç';
        break;
      case 'cash':
        taskTypeName = 'üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è';
        break;
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Ç–∏–ø –∑–∞–¥–∞—á–∏: ${taskTypeName}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∞
    ctx.session.state = 'task_select_machine';
    await handleTaskSelectMachine(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_select_machine
async function handleTaskSelectMachine(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
    const machines = await prisma.machine.findMany({
      include: {
        location: true
      },
      where: {
        status: 'ACTIVE'
      },
      orderBy: {
        internalCode: 'asc'
      }
    });
    
    if (machines.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.');
      return await ctx.scene.leave();
    }
    
    const message = `
üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏
    const buttons = machines.map(machine => {
      const locationName = machine.location ? machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
      return [Markup.button.callback(
        `${machine.internalCode} - ${locationName}`,
        `machine_${machine.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞
scene.action(/^machine_(.+)$/, async (ctx) => {
  try {
    const machineId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–≤—Ç–æ–º–∞—Ç–∞
    ctx.session.taskData.machineId = machineId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ
    const machine = await prisma.machine.findUnique({
      where: { id: machineId },
      include: { location: true }
    });
    
    if (!machine) {
      await ctx.reply('‚ùå –ê–≤—Ç–æ–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleTaskSelectMachine(ctx);
    }
    
    const locationName = machine.location ? machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç: ${machine.internalCode} - ${locationName}`);
    
    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if (['INGREDIENTS', 'WATER'].includes(ctx.session.taskData.type)) {
      ctx.session.state = 'task_select_items';
      await handleTaskSelectItems(ctx);
    } else {
      ctx.session.state = 'task_select_deadline';
      await handleTaskSelectDeadline(ctx);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_select_items
async function handleTaskSelectItems(ctx) {
  try {
    const taskType = ctx.session.taskData.type;
    
    if (taskType === 'INGREDIENTS') {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
      const ingredients = await prisma.ingredient.findMany({
        where: { status: 'ACTIVE' },
        orderBy: { name: 'asc' }
      });
      
      if (ingredients.length === 0) {
        await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.');
        return await ctx.scene.leave();
      }
      
      const message = `
üßÇ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –∑–∞–º–µ–Ω—ã:
`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
      const buttons = ingredients.map(ingredient => {
        return [Markup.button.callback(
          `${ingredient.name} (${ingredient.code})`,
          `ingredient_${ingredient.id}`
        )];
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      buttons.push([
        Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'items_done'),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
      ]);
      
      const keyboard = Markup.inlineKeyboard(buttons);
      
      await ctx.reply(message, keyboard);
    } else if (taskType === 'WATER') {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–¥—ã
      const waterTypes = await prisma.waterType.findMany({
        where: { status: 'ACTIVE' },
        orderBy: { name: 'asc' }
      });
      
      if (waterTypes.length === 0) {
        await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–¥—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.');
        return await ctx.scene.leave();
      }
      
      const message = `
üíß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –≤–æ–¥—ã –¥–ª—è –∑–∞–º–µ–Ω—ã:
`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –≤–æ–¥—ã
      const buttons = waterTypes.map(waterType => {
        return [Markup.button.callback(
          `${waterType.name} (${waterType.volume} –ª)`,
          `water_${waterType.id}`
        )];
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      buttons.push([
        Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'items_done'),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
      ]);
      
      const keyboard = Markup.inlineKeyboard(buttons);
      
      await ctx.reply(message, keyboard);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤/–≤–æ–¥—ã:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
scene.action(/^ingredient_(.+)$/, async (ctx) => {
  try {
    const ingredientId = ctx.match[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
    const existingIndex = ctx.session.taskData.items.findIndex(
      item => item.id === ingredientId && item.type === 'INGREDIENT'
    );
    
    if (existingIndex !== -1) {
      // –ï—Å–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      ctx.session.taskData.items.splice(existingIndex, 1);
      await ctx.answerCbQuery('–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞');
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
      ctx.session.taskData.items.push({
        id: ingredientId,
        type: 'INGREDIENT'
      });
      await ctx.answerCbQuery('–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º
    const selectedItems = ctx.session.taskData.items.filter(item => item.type === 'INGREDIENT');
    
    if (selectedItems.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö
      const ingredientIds = selectedItems.map(item => item.id);
      const ingredients = await prisma.ingredient.findMany({
        where: { id: { in: ingredientIds } }
      });
      
      let selectedText = 'üßÇ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n';
      ingredients.forEach(ingredient => {
        selectedText += `- ${ingredient.name} (${ingredient.code})\n`;
      });
      
      await ctx.reply(selectedText);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–æ–¥—ã
scene.action(/^water_(.+)$/, async (ctx) => {
  try {
    const waterTypeId = ctx.match[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–∏–ø –≤–æ–¥—ã
    const existingIndex = ctx.session.taskData.items.findIndex(
      item => item.id === waterTypeId && item.type === 'WATER'
    );
    
    if (existingIndex !== -1) {
      // –ï—Å–ª–∏ —Ç–∏–ø –≤–æ–¥—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      ctx.session.taskData.items.splice(existingIndex, 1);
      await ctx.answerCbQuery('–¢–∏–ø –≤–æ–¥—ã —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞');
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –≤–æ–¥—ã –≤ —Å–ø–∏—Å–æ–∫
      ctx.session.taskData.items.push({
        id: waterTypeId,
        type: 'WATER'
      });
      await ctx.answerCbQuery('–¢–∏–ø –≤–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º
    const selectedItems = ctx.session.taskData.items.filter(item => item.type === 'WATER');
    
    if (selectedItems.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö –≤–æ–¥—ã
      const waterTypeIds = selectedItems.map(item => item.id);
      const waterTypes = await prisma.waterType.findMany({
        where: { id: { in: waterTypeIds } }
      });
      
      let selectedText = 'üíß –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –≤–æ–¥—ã:\n';
      waterTypes.forEach(waterType => {
        selectedText += `- ${waterType.name} (${waterType.volume} –ª)\n`;
      });
      
      await ctx.reply(selectedText);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–æ–¥—ã:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤/–≤–æ–¥—ã
scene.action('items_done', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
    if (ctx.session.taskData.items.length === 0) {
      await ctx.answerCbQuery('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç');
      return;
    }
    
    await ctx.answerCbQuery('‚úÖ –í—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    ctx.session.state = 'task_select_deadline';
    await handleTaskSelectDeadline(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_select_deadline
async function handleTaskSelectDeadline(ctx) {
  try {
    const message = `
üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:
`;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    const now = new Date();
    
    // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ä–æ–∫–æ–≤
    const today = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);
    
    const dayAfterTomorrow = new Date(now);
    dayAfterTomorrow.setDate(now.getDate() + 2);
    
    const nextWeek = new Date(now);
    nextWeek.setDate(now.getDate() + 7);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    const formatDate = (date) => {
      return date.toLocaleDateString('ru-RU');
    };
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback(`–°–µ–≥–æ–¥–Ω—è (${formatDate(today)})`, `deadline_today`)],
      [Markup.button.callback(`–ó–∞–≤—Ç—Ä–∞ (${formatDate(tomorrow)})`, `deadline_tomorrow`)],
      [Markup.button.callback(`–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (${formatDate(dayAfterTomorrow)})`, `deadline_day_after_tomorrow`)],
      [Markup.button.callback(`–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é (${formatDate(nextWeek)})`, `deadline_next_week`)],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
scene.action(/^deadline_(.+)$/, async (ctx) => {
  try {
    const deadlineType = ctx.match[1];
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    const now = new Date();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    let deadline;
    let deadlineText;
    
    switch (deadlineType) {
      case 'today':
        deadline = new Date(now);
        deadline.setHours(23, 59, 59);
        deadlineText = '–°–µ–≥–æ–¥–Ω—è';
        break;
      case 'tomorrow':
        deadline = new Date(now);
        deadline.setDate(now.getDate() + 1);
        deadline.setHours(23, 59, 59);
        deadlineText = '–ó–∞–≤—Ç—Ä–∞';
        break;
      case 'day_after_tomorrow':
        deadline = new Date(now);
        deadline.setDate(now.getDate() + 2);
        deadline.setHours(23, 59, 59);
        deadlineText = '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞';
        break;
      case 'next_week':
        deadline = new Date(now);
        deadline.setDate(now.getDate() + 7);
        deadline.setHours(23, 59, 59);
        deadlineText = '–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é';
        break;
      default:
        deadline = new Date(now);
        deadline.setDate(now.getDate() + 1);
        deadline.setHours(23, 59, 59);
        deadlineText = '–ó–∞–≤—Ç—Ä–∞';
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    ctx.session.taskData.deadline = deadline;
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${deadlineText} (${deadline.toLocaleDateString('ru-RU')})`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
    ctx.session.state = 'task_select_checklist_template';
    await handleTaskSelectChecklistTemplate(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_select_checklist_template
async function handleTaskSelectChecklistTemplate(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    const taskType = ctx.session.taskData.type;
    
    const checklistTemplates = await prisma.checklistTemplate.findMany({
      where: {
        taskType: taskType,
        status: 'ACTIVE'
      },
      orderBy: {
        name: 'asc'
      }
    });
    
    if (checklistTemplates.length === 0) {
      // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
      ctx.session.taskData.checklistTemplateId = null;
      ctx.session.state = 'task_assign_executor';
      return await handleTaskAssignExecutor(ctx);
    }
    
    const message = `
üìù –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —á–µ–∫-–ª–∏—Å—Ç–∞:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    const buttons = checklistTemplates.map(template => {
      return [Markup.button.callback(
        `${template.name}`,
        `template_${template.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–µ–∑ —á–µ–∫-–ª–∏—Å—Ç–∞"
    buttons.push([Markup.button.callback('–ë–µ–∑ —á–µ–∫-–ª–∏—Å—Ç–∞', 'template_none')]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à–∞–±–ª–æ–Ω–∞ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
scene.action(/^template_(.+)$/, async (ctx) => {
  try {
    const templateId = ctx.match[1];
    
    if (templateId === 'none') {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ë–µ–∑ —á–µ–∫-–ª–∏—Å—Ç–∞"
      ctx.session.taskData.checklistTemplateId = null;
      await ctx.editMessageText('–í—ã–±—Ä–∞–Ω–æ: –ë–µ–∑ —á–µ–∫-–ª–∏—Å—Ç–∞');
    } else {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —à–∞–±–ª–æ–Ω–∞
      ctx.session.taskData.checklistTemplateId = templateId;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
      const template = await prisma.checklistTemplate.findUnique({
        where: { id: templateId }
      });
      
      if (!template) {
        await ctx.reply('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return await handleTaskSelectChecklistTemplate(ctx);
      }
      
      await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: ${template.name}`);
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    ctx.session.state = 'task_assign_executor';
    await handleTaskAssignExecutor(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_assign_executor
async function handleTaskAssignExecutor(ctx) {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    const taskType = ctx.session.taskData.type;
    let executorRole;
    
    switch (taskType) {
      case 'REPAIR':
        executorRole = 'TECHNICIAN';
        break;
      case 'INGREDIENTS':
      case 'WATER':
      case 'CLEANING':
      case 'CASH':
        executorRole = 'OPERATOR';
        break;
      default:
        executorRole = 'OPERATOR';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª—å—é
    const executors = await prisma.user.findMany({
      where: {
        role: executorRole,
        status: 'ACTIVE'
      },
      orderBy: {
        firstName: 'asc'
      }
    });
    
    if (executors.length === 0) {
      await ctx.reply(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é ${executorRole}. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.`);
      return await ctx.scene.leave();
    }
    
    const message = `
üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    const buttons = executors.map(user => {
      return [Markup.button.callback(
        `${user.firstName} ${user.lastName || ''}`,
        `executor_${user.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
scene.action(/^executor_(.+)$/, async (ctx) => {
  try {
    const executorId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    ctx.session.taskData.executorId = executorId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
    const executor = await prisma.user.findUnique({
      where: { id: executorId }
    });
    
    if (!executor) {
      await ctx.reply('‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleTaskAssignExecutor(ctx);
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor.firstName} ${executor.lastName || ''}`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    ctx.session.state = 'task_description';
    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
scene.command('skip', async (ctx) => {
  if (ctx.session.state === 'task_description') {
    ctx.session.taskData.description = null;
    ctx.session.state = 'task_confirm_create';
    await handleTaskConfirmCreate(ctx);
  }
});

scene.on('text', async (ctx) => {
  if (ctx.session.state === 'task_description') {
    ctx.session.taskData.description = ctx.message.text;
    ctx.session.state = 'task_confirm_create';
    await handleTaskConfirmCreate(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_confirm_create
async function handleTaskConfirmCreate(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const taskData = ctx.session.taskData;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ
    const machine = await prisma.machine.findUnique({
      where: { id: taskData.machineId },
      include: { location: true }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
    const executor = await prisma.user.findUnique({
      where: { id: taskData.executorId }
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    let confirmText = `
üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:

üîπ –¢–∏–ø: ${getTaskTypeName(taskData.type)}
üîπ –ê–≤—Ç–æ–º–∞—Ç: ${machine.internalCode} - ${machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}
üîπ –°—Ä–æ–∫: ${taskData.deadline.toLocaleDateString('ru-RU')}
üîπ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor.firstName} ${executor.lastName || ''}
`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (taskData.items.length > 0) {
      if (taskData.type === 'INGREDIENTS') {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö
        const ingredientIds = taskData.items
          .filter(item => item.type === 'INGREDIENT')
          .map(item => item.id);
        
        if (ingredientIds.length > 0) {
          const ingredients = await prisma.ingredient.findMany({
            where: { id: { in: ingredientIds } }
          });
          
          confirmText += '\nüßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n';
          ingredients.forEach(ingredient => {
            confirmText += `- ${ingredient.name} (${ingredient.code})\n`;
          });
        }
      } else if (taskData.type === 'WATER') {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö –≤–æ–¥—ã
        const waterTypeIds = taskData.items
          .filter(item => item.type === 'WATER')
          .map(item => item.id);
        
        if (waterTypeIds.length > 0) {
          const waterTypes = await prisma.waterType.findMany({
            where: { id: { in: waterTypeIds } }
          });
          
          confirmText += '\nüíß –¢–∏–ø—ã –≤–æ–¥—ã:\n';
          waterTypes.forEach(waterType => {
            confirmText += `- ${waterType.name} (${waterType.volume} –ª)\n`;
          });
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ —á–µ–∫-–ª–∏—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
    if (taskData.checklistTemplateId) {
      const template = await prisma.checklistTemplate.findUnique({
        where: { id: taskData.checklistTemplateId }
      });
      
      if (template) {
        confirmText += `\nüìù –ß–µ–∫-–ª–∏—Å—Ç: ${template.name}\n`;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (taskData.description) {
      confirmText += `\nüìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${taskData.description}\n`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', 'confirm_create')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(confirmText, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
scene.action('confirm_create', async (ctx) => {
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'task_success';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const taskData = ctx.session.taskData;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const task = await prisma.task.create({
      data: {
        type: taskData.type,
        status: 'ASSIGNED',
        machineId: taskData.machineId,
        assignedUserId: taskData.executorId,
        createdById: ctx.session.user.id,
        dueDate: taskData.deadline,
        description: taskData.description,
        checklistTemplateId: taskData.checklistTemplateId
      }
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
    if (taskData.items.length > 0) {
      for (const item of taskData.items) {
        if (item.type === 'INGREDIENT') {
          await prisma.taskIngredient.create({
            data: {
              taskId: task.id,
              ingredientId: item.id
            }
          });
        } else if (item.type === 'WATER') {
          await prisma.taskWater.create({
            data: {
              taskId: task.id,
              waterTypeId: item.id
            }
          });
        }
      }
    }
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω —á–µ–∫-–ª–∏—Å—Ç–∞, —Å–æ–∑–¥–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
    if (taskData.checklistTemplateId) {
      // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —á–µ–∫-–ª–∏—Å—Ç–∞
      const template = await prisma.checklistTemplate.findUnique({
        where: { id: taskData.checklistTemplateId },
        include: { items: true }
      });
      
      if (template && template.items.length > 0) {
        // –°–æ–∑–¥–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç
        const checklist = await prisma.checklist.create({
          data: {
            taskId: task.id,
            templateId: template.id,
            status: 'PENDING'
          }
        });
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞
        for (const templateItem of template.items) {
          await prisma.checklistItem.create({
            data: {
              checklistId: checklist.id,
              text: templateItem.text,
              order: templateItem.order,
              status: 'PENDING'
            }
          });
        }
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
      const executor = await prisma.user.findUnique({
        where: { id: taskData.executorId },
        select: { telegramId: true }
      });
      
      if (executor && executor.telegramId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ
        const machine = await prisma.machine.findUnique({
          where: { id: taskData.machineId },
          include: { location: true }
        });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notificationText = `
üìã –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!

üîπ –¢–∏–ø: ${getTaskTypeName(taskData.type)}
üîπ –ê–≤—Ç–æ–º–∞—Ç: ${machine.internalCode} - ${machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}
üîπ –°—Ä–æ–∫: ${taskData.deadline.toLocaleDateString('ru-RU')}

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–¥–∞—á–∏".
`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await ctx.telegram.sendMessage(executor.telegramId, notificationText);
      }
    } catch (notificationError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é:', notificationError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    await ctx.editMessageText(`
‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üîπ ID: ${task.id}
üîπ –¢–∏–ø: ${getTaskTypeName(task.type)}
üîπ –°—Ç–∞—Ç—É—Å: –ù–∞–∑–Ω–∞—á–µ–Ω–∞
üîπ –°—Ä–æ–∫: ${task.dueDate.toLocaleDateString('ru-RU')}

–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ.
`);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìã –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∑–∞–¥–∞—á—É', 'create_another')],
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
    ]);
    
    await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  await ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
scene.action('create_another', async (ctx) => {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
  ctx.session.taskData = {
    type: null,
    machineId: null,
    items: [],
    deadline: null,
    checklistTemplateId: null,
    executorId: null,
    description: null
  };
  
  ctx.session.state = 'task_select_type';
  await ctx.editMessageText('üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏...');
  await handleTaskSelectType(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scene.action('back_to_menu', async (ctx) => {
  await ctx.editMessageText('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
  await ctx.scene.enter('main_menu_fsm');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
function getTaskTypeName(type) {
  const taskTypes = {
    'INGREDIENTS': 'üîÑ –ó–∞–º–µ–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤',
    'WATER': 'üíß –ó–∞–º–µ–Ω–∞ –≤–æ–¥—ã',
    'CLEANING': 'üßπ –ß–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞',
    'REPAIR': 'üîß –†–µ–º–æ–Ω—Ç',
    'CASH': 'üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è'
  };
  
  return taskTypes[type] || type;
}

module.exports = scene;
