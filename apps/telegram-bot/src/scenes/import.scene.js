/**
 * FSM: import_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, Excel-—Ñ–∞–π–ª–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º) –¥–ª—è —Å–≤–µ—Ä–∫–∏.
 * –†–æ–ª–∏: –ú–µ–Ω–µ–¥–∂–µ—Ä.
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - import_select_type: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
 *   - import_upload_file: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
 *   - import_auto_reconciliation: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–µ—Ä–∫–∞
 *   - import_auto_generate_tasks: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
 *   - import_confirm_finish: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');
const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const excelImport = require('../../utils/excelImport');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('import_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[import_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
scene.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å ADMIN –∏–ª–∏ MANAGER
  if (!ctx.session.user || !['ADMIN', 'MANAGER'].includes(ctx.session.user.role)) {
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤.');
    return await ctx.scene.leave();
  }
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∞
    ctx.session.importData = {
      type: null,
      filePath: null,
      fileName: null,
      fileId: null,
      reconciliationResults: null,
      generatedTasks: []
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'import_select_type';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    await handleImportSelectType(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É import_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è import_select_type
async function handleImportSelectType(ctx) {
  try {
    const message = `
üìä –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
    const buttons = [
      [Markup.button.callback('üí∞ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö', 'type_sales')],
      [Markup.button.callback('üîÑ –û—Ç—á–µ—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö', 'type_transactions')],
      [Markup.button.callback('üì¶ –û—Ç—á–µ—Ç –æ –∑–∞–ø–∞—Å–∞—Ö', 'type_inventory')],
      [Markup.button.callback('üîß –û—Ç—á–µ—Ç –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏', 'type_technical')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
scene.action(/^type_(.+)$/, async (ctx) => {
  try {
    const type = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
    ctx.session.importData.type = type;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
    let typeName = '';
    switch (type) {
      case 'sales':
        typeName = 'üí∞ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö';
        break;
      case 'transactions':
        typeName = 'üîÑ –û—Ç—á–µ—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö';
        break;
      case 'inventory':
        typeName = 'üì¶ –û—Ç—á–µ—Ç –æ –∑–∞–ø–∞—Å–∞—Ö';
        break;
      case 'technical':
        typeName = 'üîß –û—Ç—á–µ—Ç –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏';
        break;
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: ${typeName}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
    ctx.session.state = 'import_upload_file';
    await handleImportUploadFile(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è import_upload_file
async function handleImportUploadFile(ctx) {
  try {
    const type = ctx.session.importData.type;
    let formatMessage = '';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    switch (type) {
      case 'sales':
        formatMessage = `
–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö:
- Excel-—Ñ–∞–π–ª (.xlsx)
- –°—Ç–æ–ª–±—Ü—ã: –î–∞—Ç–∞, –ê–≤—Ç–æ–º–∞—Ç, –ü—Ä–æ–¥—É–∫—Ç, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –°—É–º–º–∞
`;
        break;
      case 'transactions':
        formatMessage = `
–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö:
- Excel-—Ñ–∞–π–ª (.xlsx)
- –°—Ç–æ–ª–±—Ü—ã: –î–∞—Ç–∞, –í—Ä–µ–º—è, –ê–≤—Ç–æ–º–∞—Ç, –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –°—É–º–º–∞
`;
        break;
      case 'inventory':
        formatMessage = `
–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–ø–∞—Å–∞—Ö:
- Excel-—Ñ–∞–π–ª (.xlsx)
- –°—Ç–æ–ª–±—Ü—ã: –ê–≤—Ç–æ–º–∞—Ç, –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –û—Å—Ç–∞—Ç–æ–∫ (–≥), –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
`;
        break;
      case 'technical':
        formatMessage = `
–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏:
- Excel-—Ñ–∞–π–ª (.xlsx)
- –°—Ç–æ–ª–±—Ü—ã: –ê–≤—Ç–æ–º–∞—Ç, –°—Ç–∞—Ç—É—Å, –û—à–∏–±–∫–∏, –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
`;
        break;
    }
    
    await ctx.reply(`
üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞.
${formatMessage}
`);
    
    // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–∞–π–ª–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ñ–∞–π–ª–∞)
scene.on('document', async (ctx) => {
  if (ctx.session.state === 'import_upload_file') {
    try {
      const fileId = ctx.message.document.file_id;
      const fileName = ctx.message.document.file_name;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
      if (!fileName.endsWith('.xlsx') && !fileName.endsWith('.xls')) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      ctx.session.importData.fileId = fileId;
      ctx.session.importData.fileName = fileName;
      
      await ctx.reply('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
      const fileLink = await ctx.telegram.getFileLink(fileId);
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const tempDir = path.join(__dirname, '..', '..', '..', '..', 'temp');
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const uniqueFileName = `${uuidv4()}_${fileName}`;
      const filePath = path.join(tempDir, uniqueFileName);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
      ctx.session.importData.filePath = filePath;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      const response = await fetch(fileLink);
      const fileStream = fs.createWriteStream(filePath);
      
      await new Promise((resolve, reject) => {
        response.body.pipe(fileStream);
        response.body.on('error', reject);
        fileStream.on('finish', resolve);
      });
      
      await ctx.reply('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–µ—Ä–∫–µ
      ctx.session.state = 'import_auto_reconciliation';
      await handleImportAutoReconciliation(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è import_auto_reconciliation
async function handleImportAutoReconciliation(ctx) {
  try {
    const type = ctx.session.importData.type;
    const filePath = ctx.session.importData.filePath;
    
    await ctx.reply('‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    let reconciliationResults;
    
    switch (type) {
      case 'sales':
        reconciliationResults = await excelImport.processSalesReport(filePath);
        break;
      case 'transactions':
        reconciliationResults = await excelImport.processTransactionsReport(filePath);
        break;
      case 'inventory':
        reconciliationResults = await excelImport.processInventoryReport(filePath);
        break;
      case 'technical':
        reconciliationResults = await excelImport.processTechnicalReport(filePath);
        break;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–µ—Ä–∫–∏
    ctx.session.importData.reconciliationResults = reconciliationResults;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–≤–µ—Ä–∫–∏
    let resultsMessage = `
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–µ—Ä–∫–∏:

‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${reconciliationResults.success}
‚ö†Ô∏è –°—Ç—Ä–æ–∫ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: ${reconciliationResults.warnings}
‚ùå –°—Ç—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏: ${reconciliationResults.errors}
`;
    
    if (reconciliationResults.warnings > 0 || reconciliationResults.errors > 0) {
      resultsMessage += `\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ —Å–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ —Å–≤–µ—Ä–∫–∏ –≤ —Ñ–∞–π–ª
    const logDir = path.join(__dirname, '..', '..', '..', '..', 'logs');
    if (!fs.existsSync(logDir)) {
      fs.mkdirSync(logDir, { recursive: true });
    }
    
    const logFileName = `reconciliation_log_${new Date().toISOString().replace(/:/g, '-')}.txt`;
    const logFilePath = path.join(logDir, logFileName);
    
    fs.writeFileSync(logFilePath, reconciliationResults.log);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–µ—Ä–∫–∏
    await ctx.reply(resultsMessage);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ª–æ–≥–æ–º —Å–≤–µ—Ä–∫–∏
    await ctx.replyWithDocument({ source: logFilePath, filename: logFileName });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞—á
    ctx.session.state = 'import_auto_generate_tasks';
    await handleImportAutoGenerateTasks(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è import_auto_generate_tasks
async function handleImportAutoGenerateTasks(ctx) {
  try {
    const type = ctx.session.importData.type;
    const reconciliationResults = ctx.session.importData.reconciliationResults;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–≤–µ—Ä–∫–∏
    if (reconciliationResults.errors > 0) {
      await ctx.reply(`
‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫ –≤ –æ—Ç—á–µ—Ç–µ.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ.
`);
      
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–º–ø–æ—Ä—Ç –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç—á–µ—Ç', 'import_another')],
        [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
      ]);
      
      await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboard);
      return;
    }
    
    await ctx.reply('‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    let generatedTasks = [];
    
    switch (type) {
      case 'sales':
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ –≤—ã—Å–æ–∫–∏–µ
        generatedTasks = await generateTasksFromSalesReport(reconciliationResults.data);
        break;
      case 'transactions':
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–¥–∞—á–∏ –Ω–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é, –µ—Å–ª–∏ —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã—Å–æ–∫–∞—è
        generatedTasks = await generateTasksFromTransactionsReport(reconciliationResults.data);
        break;
      case 'inventory':
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–ø–∞—Å–∞—Ö
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –∑–∞–ø–∞—Å—ã –Ω–∏–∑–∫–∏–µ
        generatedTasks = await generateTasksFromInventoryReport(reconciliationResults.data);
        break;
      case 'technical':
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
        generatedTasks = await generateTasksFromTechnicalReport(reconciliationResults.data);
        break;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    ctx.session.importData.generatedTasks = generatedTasks;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
    let tasksMessage = `
üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á:

‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${generatedTasks.length}
`;
    
    if (generatedTasks.length > 0) {
      tasksMessage += `\n–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:\n`;
      
      for (const task of generatedTasks) {
        tasksMessage += `- ${getTaskTypeName(task.type)} –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∞ ${task.machine.internalCode}\n`;
      }
    } else {
      tasksMessage += `\n–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á.`;
    }
    
    await ctx.reply(tasksMessage);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
    ctx.session.state = 'import_confirm_finish';
    await handleImportConfirmFinish(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è import_confirm_finish
async function handleImportConfirmFinish(ctx) {
  try {
    const type = ctx.session.importData.type;
    const fileName = ctx.session.importData.fileName;
    const reconciliationResults = ctx.session.importData.reconciliationResults;
    const generatedTasks = ctx.session.importData.generatedTasks;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    let confirmText = `
üìä –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞

üîπ –¢–∏–ø –æ—Ç—á–µ—Ç–∞: ${getReportTypeName(type)}
üîπ –§–∞–π–ª: ${fileName}
üîπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${reconciliationResults.success + reconciliationResults.warnings + reconciliationResults.errors}
üîπ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${generatedTasks.length}
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å', 'confirm_import')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(confirmText, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
scene.action('confirm_import', async (ctx) => {
  try {
    const type = ctx.session.importData.type;
    const fileName = ctx.session.importData.fileName;
    const filePath = ctx.session.importData.filePath;
    const reconciliationResults = ctx.session.importData.reconciliationResults;
    const generatedTasks = ctx.session.importData.generatedTasks;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–º–ø–æ—Ä—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const importRecord = await prisma.importRecord.create({
      data: {
        type: type.toUpperCase(),
        fileName: fileName,
        processedRows: reconciliationResults.success + reconciliationResults.warnings + reconciliationResults.errors,
        successRows: reconciliationResults.success,
        warningRows: reconciliationResults.warnings,
        errorRows: reconciliationResults.errors,
        generatedTasks: generatedTasks.length,
        userId: ctx.session.user.id,
        createdAt: new Date()
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ
    await ctx.editMessageText(`
‚úÖ –ò–º–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!

üîπ ID: ${importRecord.id}
üîπ –¢–∏–ø –æ—Ç—á–µ—Ç–∞: ${getReportTypeName(type)}
üîπ –§–∞–π–ª: ${fileName}
üîπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${reconciliationResults.success + reconciliationResults.warnings + reconciliationResults.errors}
üîπ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${generatedTasks.length}
üîπ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
`);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –æ—Ç—á–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –æ—Ç—á–µ—Ç', 'import_another')],
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
    ]);
    
    await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  try {
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (ctx.session.importData && ctx.session.importData.filePath && fs.existsSync(ctx.session.importData.filePath)) {
      fs.unlinkSync(ctx.session.importData.filePath);
    }
    
    await ctx.editMessageText('‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.');
    await ctx.scene.leave();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–º–ø–æ—Ä—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—â–µ –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
scene.action('import_another', async (ctx) => {
  try {
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (ctx.session.importData && ctx.session.importData.filePath && fs.existsSync(ctx.session.importData.filePath)) {
      fs.unlinkSync(ctx.session.importData.filePath);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
    ctx.session.importData = {
      type: null,
      filePath: null,
      fileName: null,
      fileId: null,
      reconciliationResults: null,
      generatedTasks: []
    };
    
    ctx.session.state = 'import_select_type';
    await ctx.editMessageText('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
    await handleImportSelectType(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scene.action('back_to_menu', async (ctx) => {
  try {
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (ctx.session.importData && ctx.session.importData.filePath && fs.existsSync(ctx.session.importData.filePath)) {
      fs.unlinkSync(ctx.session.importData.filePath);
    }
    
    await ctx.editMessageText('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
    await ctx.scene.enter('main_menu_fsm');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
async function generateTasksFromSalesReport(data) {
  const tasks = [];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤—ã—Å–æ–∫–∏–µ, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
  
  for (const row of data) {
    // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç
    const machine = await prisma.machine.findFirst({
      where: { internalCode: row.machine },
      include: { location: true }
    });
    
    if (!machine) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    if (row.product && row.quantity > 10) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
      const ingredient = await prisma.ingredient.findFirst({
        where: { name: { contains: row.product } }
      });
      
      if (ingredient) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        const task = await prisma.task.create({
          data: {
            type: 'INGREDIENTS',
            status: 'PENDING',
            machineId: machine.id,
            createdById: 'SYSTEM',
            deadline: new Date(Date.now() + 24 * 60 * 60 * 1000), // –°—Ä–æ–∫ - 1 –¥–µ–Ω—å
            description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ "${ingredient.name}" –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö.`
          },
          include: {
            machine: true
          }
        });
        
        tasks.push(task);
      }
    }
  }
  
  return tasks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
async function generateTasksFromTransactionsReport(data) {
  const tasks = [];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã—Å–æ–∫–∞—è, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º –∏ —Å—É–º–º–∏—Ä—É–µ–º
  const machineTransactions = {};
  
  for (const row of data) {
    if (!machineTransactions[row.machine]) {
      machineTransactions[row.machine] = 0;
    }
    
    machineTransactions[row.machine] += parseFloat(row.amount);
  }
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Å—É–º–º–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  for (const [machineCode, amount] of Object.entries(machineTransactions)) {
    if (amount > 5000) { // –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
      // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç
      const machine = await prisma.machine.findFirst({
        where: { internalCode: machineCode }
      });
      
      if (machine) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é
        const task = await prisma.task.create({
          data: {
            type: 'CASH',
            status: 'PENDING',
            machineId: machine.id,
            createdById: 'SYSTEM',
            deadline: new Date(Date.now() + 24 * 60 * 60 * 1000), // –°—Ä–æ–∫ - 1 –¥–µ–Ω—å
            description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö. –°—É–º–º–∞: ${amount} —Ä—É–±.`
          },
          include: {
            machine: true
          }
        });
        
        tasks.push(task);
      }
    }
  }
  
  return tasks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–ø–∞—Å–∞—Ö
async function generateTasksFromInventoryReport(data) {
  const tasks = [];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∑–∞–ø–∞—Å—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –Ω–∏–∑–∫–∏–µ, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
  
  for (const row of data) {
    // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç
    const machine = await prisma.machine.findFirst({
      where: { internalCode: row.machine },
      include: { location: true }
    });
    
    if (!machine) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    if (row.ingredient && row.stock < 500) { // –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
      const ingredient = await prisma.ingredient.findFirst({
        where: { name: { contains: row.ingredient } }
      });
      
      if (ingredient) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        const task = await prisma.task.create({
          data: {
            type: 'INGREDIENTS',
            status: 'PENDING',
            machineId: machine.id,
            createdById: ctx.session.user.id,
            deadline: new Date(Date.now() + 24 * 60 * 60 * 1000), // –°—Ä–æ–∫ - 1 –¥–µ–Ω—å
            description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ "${ingredient.name}" –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–ø–∞—Å–∞—Ö.`
          },
          include: {
            machine: true
          }
        });
        
        tasks.push(task);
      }
    }
  }
  
  return tasks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
async function generateTasksFromTechnicalReport(data) {
  const tasks = [];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç
  
  for (const row of data) {
    // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç
    const machine = await prisma.machine.findFirst({
      where: { internalCode: row.machine },
      include: { location: true }
    });
    
    if (!machine) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç
    if (row.status === 'ERROR' || (row.errors && row.errors.length > 0)) {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç
      const task = await prisma.task.create({
        data: {
          type: 'REPAIR',
          status: 'PENDING',
          machineId: machine.id,
          createdById: ctx.session.user.id,
          deadline: new Date(Date.now() + 24 * 60 * 60 * 1000), // –°—Ä–æ–∫ - 1 –¥–µ–Ω—å
          description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –û—à–∏–±–∫–∏: ${row.errors || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`
        },
        include: {
          machine: true
        }
      });
      
      tasks.push(task);
    }
  }
  
  return tasks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
function getReportTypeName(type) {
  const reportTypes = {
    'sales': 'üí∞ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö',
    'transactions': 'üîÑ –û—Ç—á–µ—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö',
    'inventory': 'üì¶ –û—Ç—á–µ—Ç –æ –∑–∞–ø–∞—Å–∞—Ö',
    'technical': 'üîß –û—Ç—á–µ—Ç –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏'
  };
  
  return reportTypes[type] || type;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
function getTaskTypeName(type) {
  const taskTypes = {
    'INGREDIENTS': 'üîÑ –ó–∞–º–µ–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤',
    'WATER': 'üíß –ó–∞–º–µ–Ω–∞ –≤–æ–¥—ã',
    'CLEANING': 'üßπ –ß–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞',
    'REPAIR': 'üîß –†–µ–º–æ–Ω—Ç',
    'CASH': 'üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è'
  };
  
  return taskTypes[type] || type;
}

module.exports = scene;
