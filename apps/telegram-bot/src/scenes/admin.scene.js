/**
 * FSM: admin_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö).
 * –†–æ–ª–∏: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - admin_menu: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 *   - settings_system: —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 *   - settings_roles: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π
 *   - settings_users: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 *   - settings_logs: –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
 *   - settings_notifications: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 *   - settings_reset_data: —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('admin_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[admin_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
scene.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å ADMIN
  if (!ctx.session.user || ctx.session.user.role !== 'ADMIN') {
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.');
    return await ctx.scene.leave();
  }
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    ctx.session.adminData = {
      section: null,
      setting: null,
      value: null,
      step: null
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'admin_menu';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await handleAdminMenu(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É admin_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è admin_menu
async function handleAdminMenu(ctx) {
  try {
    const message = `
‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏
    const buttons = [
      [Markup.button.callback('üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'section_system')],
      [Markup.button.callback('üëë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π', 'section_roles')],
      [Markup.button.callback('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'section_users')],
      [Markup.button.callback('üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏', 'section_logs')],
      [Markup.button.callback('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'section_notifications')],
      [Markup.button.callback('üóëÔ∏è –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö', 'section_reset_data')],
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scene.action('back_to_menu', async (ctx) => {
  await ctx.editMessageText('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
  await ctx.scene.enter('main_menu_fsm');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.');
  await ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞
scene.action(/^section_(.+)$/, async (ctx) => {
  try {
    const section = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    ctx.session.adminData.section = section;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ä–∞–∑–¥–µ–ª—É
    switch (section) {
      case 'system':
        ctx.session.state = 'settings_system';
        await handleSystemSettings(ctx);
        break;
      case 'roles':
        ctx.session.state = 'settings_roles';
        await handleRolesSettings(ctx);
        break;
      case 'users':
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ü–µ–Ω–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        await ctx.editMessageText('üë• –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...');
        await ctx.scene.enter('user_fsm');
        break;
      case 'logs':
        ctx.session.state = 'settings_logs';
        await handleLogsSettings(ctx);
        break;
      case 'notifications':
        ctx.session.state = 'settings_notifications';
        await handleNotificationsSettings(ctx);
        break;
      case 'reset_data':
        ctx.session.state = 'settings_reset_data';
        await handleResetDataSettings(ctx);
        break;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–¥–µ–ª–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è settings_system
async function handleSystemSettings(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settings = await getSystemSettings();
    
    const message = `
üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:</b> ${settings.systemName}
<b>–í–µ—Ä—Å–∏—è:</b> ${settings.version}
<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> ${getWorkModeName(settings.workMode)}
<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å:</b> ${settings.maxTasksPerDay}
<b>–í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ö–æ–¥–∞ (–º–∏–Ω):</b> ${settings.autoLogoutTime}
<b>–í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> ${settings.enableLogging ? '‚úÖ' : '‚ùå'}
<b>–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ${settings.enableNotifications ? '‚úÖ' : '‚ùå'}
<b>–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> ${settings.enableBackup ? '‚úÖ' : '‚ùå'}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const buttons = [
      [Markup.button.callback('üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã', 'setting_systemName')],
      [Markup.button.callback('üî¢ –í–µ—Ä—Å–∏—è', 'setting_version')],
      [Markup.button.callback('‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', 'setting_workMode')],
      [Markup.button.callback('üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á', 'setting_maxTasksPerDay')],
      [Markup.button.callback('‚è±Ô∏è –í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ö–æ–¥–∞', 'setting_autoLogoutTime')],
      [Markup.button.callback(`${settings.enableLogging ? '‚úÖ' : '‚ùå'} –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ`, 'setting_enableLogging')],
      [Markup.button.callback(`${settings.enableNotifications ? '‚úÖ' : '‚ùå'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`, 'setting_enableNotifications')],
      [Markup.button.callback(`${settings.enableBackup ? '‚úÖ' : '‚ùå'} –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ`, 'setting_enableBackup')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_admin_menu')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è settings_roles
async function handleRolesSettings(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π
    const roles = await getRoles();
    
    let message = `
üëë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:</b>
`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª—è—Ö
    for (const role of roles) {
      message += `
<b>${getRoleName(role.code)}</b>
–û–ø–∏—Å–∞–Ω–∏–µ: ${role.description}
–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: ${role.permissions.join(', ')}
`;
    }
    
    message += `
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–æ–ª—è–º–∏
    const buttons = roles.map(role => {
      return [Markup.button.callback(getRoleName(role.code), `role_${role.code}`)];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_admin_menu')]);
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–ª–µ–π:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è settings_logs
async function handleLogsSettings(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
    const logs = await getSystemLogs(20);
    
    let message = `
üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π:</b>
`;
    
    if (logs.length === 0) {
      message += '\n–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.';
    } else {
      for (const log of logs) {
        const date = new Date(log.createdAt).toLocaleString('ru-RU');
        message += `\n<b>${date}</b> - ${log.level}: ${log.message}`;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const buttons = [
      [Markup.button.callback('üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏', 'export_logs')],
      [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏', 'clear_logs')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_admin_menu')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è settings_notifications
async function handleNotificationsSettings(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const settings = await getNotificationSettings();
    
    const message = `
üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö:</b> ${settings.newTaskNotifications ? '‚úÖ' : '‚ùå'}
<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö:</b> ${settings.completedTaskNotifications ? '‚úÖ' : '‚ùå'}
<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö:</b> ${settings.overdueTaskNotifications ? '‚úÖ' : '‚ùå'}
<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º —É—Ä–æ–≤–Ω–µ –∑–∞–ø–∞—Å–æ–≤:</b> ${settings.lowInventoryNotifications ? '‚úÖ' : '‚ùå'}
<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:</b> ${settings.financialNotifications ? '‚úÖ' : '‚ùå'}
<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö:</b> ${settings.systemNotifications ? '‚úÖ' : '‚ùå'}
<b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:</b> ${settings.dailyReportTime}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const buttons = [
      [Markup.button.callback(`${settings.newTaskNotifications ? '‚úÖ' : '‚ùå'} –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏`, 'notification_newTaskNotifications')],
      [Markup.button.callback(`${settings.completedTaskNotifications ? '‚úÖ' : '‚ùå'} –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏`, 'notification_completedTaskNotifications')],
      [Markup.button.callback(`${settings.overdueTaskNotifications ? '‚úÖ' : '‚ùå'} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏`, 'notification_overdueTaskNotifications')],
      [Markup.button.callback(`${settings.lowInventoryNotifications ? '‚úÖ' : '‚ùå'} –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–æ–≤`, 'notification_lowInventoryNotifications')],
      [Markup.button.callback(`${settings.financialNotifications ? '‚úÖ' : '‚ùå'} –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏`, 'notification_financialNotifications')],
      [Markup.button.callback(`${settings.systemNotifications ? '‚úÖ' : '‚ùå'} –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è`, 'notification_systemNotifications')],
      [Markup.button.callback('‚è∞ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞', 'notification_dailyReportTime')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_admin_menu')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è settings_reset_data
async function handleResetDataSettings(ctx) {
  try {
    const message = `
üóëÔ∏è –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã –∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.
–ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const buttons = [
      [Markup.button.callback('üì¶ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–∞—Ö', 'reset_tasks')],
      [Markup.button.callback('üßÇ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö', 'reset_inventory')],
      [Markup.button.callback('üí∞ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', 'reset_finance')],
      [Markup.button.callback('üìã –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏', 'reset_logs')],
      [Markup.button.callback('‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ', 'reset_all')],
      [Markup.button.callback('üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é', 'create_backup')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_admin_menu')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
scene.action('back_to_admin_menu', async (ctx) => {
  try {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    ctx.session.adminData = {
      section: null,
      setting: null,
      value: null,
      step: null
    };
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    ctx.session.state = 'admin_menu';
    await ctx.deleteMessage();
    await handleAdminMenu(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function getSystemSettings() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const settings = await prisma.systemSettings.findFirst();
    
    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏—Ö
    if (!settings) {
      return await prisma.systemSettings.create({
        data: {
          systemName: 'VendHubBot',
          version: '1.0.0',
          workMode: 'PRODUCTION',
          maxTasksPerDay: 10,
          autoLogoutTime: 30,
          enableLogging: true,
          enableNotifications: true,
          enableBackup: true
        }
      });
    }
    
    return settings;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
function getWorkModeName(workMode) {
  switch (workMode) {
    case 'PRODUCTION':
      return 'üü¢ –†–∞–±–æ—á–∏–π';
    case 'TESTING':
      return 'üü† –¢–µ—Å—Ç–æ–≤—ã–π';
    case 'DEBUG':
      return 'üî¥ –û—Ç–ª–∞–¥–∫–∞';
    default:
      return workMode;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π
async function getRoles() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const roles = await prisma.role.findMany();
    
    // –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏—Ö
    if (roles.length === 0) {
      return await createDefaultRoles();
    }
    
    return roles;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
async function createDefaultRoles() {
  try {
    const roles = [
      {
        code: 'ADMIN',
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ',
        permissions: ['ADMIN', 'MANAGE_USERS', 'MANAGE_ROLES', 'MANAGE_SETTINGS', 'MANAGE_TASKS', 'VIEW_REPORTS']
      },
      {
        code: 'MANAGER',
        name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –æ—Ç—á–µ—Ç–∞–º–∏',
        permissions: ['MANAGE_TASKS', 'VIEW_REPORTS']
      },
      {
        code: 'OPERATOR',
        name: '–û–ø–µ—Ä–∞—Ç–æ—Ä',
        description: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á',
        permissions: ['EXECUTE_TASKS']
      },
      {
        code: 'WAREHOUSE',
        name: '–ö–ª–∞–¥–æ–≤—â–∏–∫',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º',
        permissions: ['MANAGE_INVENTORY']
      },
      {
        code: 'TECHNICIAN',
        name: '–¢–µ—Ö–Ω–∏–∫',
        description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
        permissions: ['EXECUTE_TASKS', 'MANAGE_EQUIPMENT']
      }
    ];
    
    // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
    const createdRoles = [];
    
    for (const role of roles) {
      createdRoles.push(await prisma.role.create({ data: role }));
    }
    
    return createdRoles;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏
function getRoleName(code) {
  switch (code) {
    case 'ADMIN':
      return 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    case 'MANAGER':
      return 'üìä –ú–µ–Ω–µ–¥–∂–µ—Ä';
    case 'OPERATOR':
      return 'üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä';
    case 'WAREHOUSE':
      return 'üè≠ –ö–ª–∞–¥–æ–≤—â–∏–∫';
    case 'TECHNICIAN':
      return 'üîß –¢–µ—Ö–Ω–∏–∫';
    default:
      return code;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
async function getSystemLogs(limit = 20) {
  try {
    return await prisma.systemLog.findMany({
      orderBy: { createdAt: 'desc' },
      take: limit
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function getNotificationSettings() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const settings = await prisma.notificationSettings.findFirst();
    
    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏—Ö
    if (!settings) {
      return await prisma.notificationSettings.create({
        data: {
          newTaskNotifications: true,
          completedTaskNotifications: true,
          overdueTaskNotifications: true,
          lowInventoryNotifications: true,
          financialNotifications: true,
          systemNotifications: true,
          dailyReportTime: '09:00'
        }
      });
    }
    
    return settings;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    throw error;
  }
}

module.exports = scene;
