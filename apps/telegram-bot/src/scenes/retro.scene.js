/**
 * FSM: retro_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö (–¥–µ–π—Å—Ç–≤–∏–π, –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏—Ö –≤ –ø—Ä–æ—à–ª–æ–º).
 * –†–æ–ª–∏: –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ (–ö–ª–∞–¥–æ–≤—â–∏–∫, –û–ø–µ—Ä–∞—Ç–æ—Ä).
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - retro_select_action: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
 *   - retro_select_date: –≤—ã–±–æ—Ä –¥–∞—Ç—ã
 *   - retro_input_data: –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
 *   - retro_photo_optional: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 *   - retro_confirm: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('retro_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[retro_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
scene.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å ADMIN, MANAGER, OPERATOR –∏–ª–∏ WAREHOUSE
  if (!ctx.session.user || !['ADMIN', 'MANAGER', 'OPERATOR', 'WAREHOUSE'].includes(ctx.session.user.role)) {
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–º—É –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö.');
    return await ctx.scene.leave();
  }
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    ctx.session.retroData = {
      actionType: null,
      date: null,
      machineId: null,
      taskId: null,
      amount: 0,
      weight: 0,
      units: 0,
      itemId: null,
      photo: null,
      notes: null
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'retro_select_action';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    await handleRetroSelectAction(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É retro_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è retro_select_action
async function handleRetroSelectAction(ctx) {
  try {
    const message = `
‚è±Ô∏è –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–Ω–∏–º —á–∏—Å–ª–æ–º:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const buttons = [];
    
    // –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
    buttons.push([Markup.button.callback('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏', 'action_task_execution')]);
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if (['ADMIN', 'MANAGER', 'OPERATOR'].includes(ctx.session.user.role)) {
      buttons.push([Markup.button.callback('üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è', 'action_cash')]);
    }
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–ª–∞–¥–æ–≤—â–∏–∫–æ–≤
    if (['ADMIN', 'MANAGER', 'WAREHOUSE'].includes(ctx.session.user.role)) {
      buttons.push([Markup.button.callback('üì¶ –ü—Ä–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤', 'action_receive')]);
      buttons.push([Markup.button.callback('üîÑ –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤', 'action_return')]);
      buttons.push([Markup.button.callback('üéí –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–∫–∏', 'action_bag')]);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
scene.action(/^action_(.+)$/, async (ctx) => {
  try {
    const actionType = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    ctx.session.retroData.actionType = actionType;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    let actionName = '';
    switch (actionType) {
      case 'task_execution':
        actionName = 'üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏';
        break;
      case 'cash':
        actionName = 'üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è';
        break;
      case 'receive':
        actionName = 'üì¶ –ü—Ä–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤';
        break;
      case 'return':
        actionName = 'üîÑ –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤';
        break;
      case 'bag':
        actionName = 'üéí –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–∫–∏';
        break;
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ${actionName}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
    ctx.session.state = 'retro_select_date';
    await handleRetroSelectDate(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è retro_select_date
async function handleRetroSelectDate(ctx) {
  try {
    await ctx.reply(`
üìÖ –í—ã–±–æ—Ä –¥–∞—Ç—ã

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.07.2025):
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞—Ç—ã:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
scene.on('text', async (ctx) => {
  if (ctx.session.state === 'retro_select_date') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É
      const dateText = ctx.message.text.trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì)
      const dateRegex = /^(\d{2})\.(\d{2})\.(\d{4})$/;
      const match = dateText.match(dateRegex);
      
      if (!match) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.07.2025).');
      }
      
      const day = parseInt(match[1]);
      const month = parseInt(match[2]) - 1; // –ú–µ—Å—è—Ü—ã –≤ JavaScript –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
      const year = parseInt(match[3]);
      
      const date = new Date(year, month, day);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
      if (isNaN(date.getTime())) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
      const today = new Date();
      if (date > today) {
        return await ctx.reply('‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
      ctx.session.retroData.date = date;
      
      await ctx.reply(`‚úÖ –î–∞—Ç–∞ (${date.toLocaleDateString('ru-RU')}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
      ctx.session.state = 'retro_input_data';
      await handleRetroInputData(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  } else if (ctx.session.state === 'retro_input_data') {
    try {
      const actionType = ctx.session.retroData.actionType;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
      switch (actionType) {
        case 'cash':
          // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É
          const amount = parseFloat(ctx.message.text.trim().replace(',', '.'));
          
          if (isNaN(amount) || amount <= 0) {
            return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö).');
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
          ctx.session.retroData.amount = amount;
          
          await ctx.reply(`‚úÖ –°—É–º–º–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ (${amount} —Ä—É–±.) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`);
          break;
        case 'receive':
          // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤–µ—Å
          const value = parseInt(ctx.message.text.trim());
          
          if (isNaN(value) || value <= 0) {
            return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤–µ—Å).');
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤–µ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
          if (ctx.session.retroData.itemType === 'ingredient') {
            ctx.session.retroData.weight = value;
            await ctx.reply(`‚úÖ –í–µ—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ (${value} –≥) —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
          } else {
            ctx.session.retroData.units = value;
            await ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (${value} —à—Ç.) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.`);
          }
          break;
        default:
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
          ctx.session.retroData.notes = ctx.message.text.trim();
          
          await ctx.reply('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
          break;
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
      ctx.session.state = 'retro_photo_optional';
      await handleRetroPhotoOptional(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  } else if (ctx.session.state === 'retro_input_notes') {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
      ctx.session.retroData.notes = ctx.message.text.trim();
      
      await ctx.reply('‚úÖ –ü—Ä–∏–º–µ—á–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
      ctx.session.state = 'retro_confirm';
      await handleRetroConfirm(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è retro_input_data
async function handleRetroInputData(ctx) {
  try {
    const actionType = ctx.session.retroData.actionType;
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    switch (actionType) {
      case 'task_execution':
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        const tasks = await prisma.task.findMany({
          where: {
            status: { in: ['ASSIGNED', 'IN_PROGRESS'] },
            assignedUserId: ctx.session.user.id
          },
          include: {
            machine: {
              include: { location: true }
            }
          },
          orderBy: { createdAt: 'desc' }
        });
        
        if (tasks.length === 0) {
          await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.');
          return await ctx.scene.leave();
        }
        
        const taskMessage = `
üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ${ctx.session.retroData.date.toLocaleDateString('ru-RU')}:
`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
        const taskButtons = tasks.map(task => {
          const locationName = task.machine.location ? task.machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
          return [Markup.button.callback(
            `${getTaskTypeName(task.type)} - ${task.machine.internalCode} (${locationName})`,
            `task_${task.id}`
          )];
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        taskButtons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
        
        const taskKeyboard = Markup.inlineKeyboard(taskButtons);
        
        await ctx.reply(taskMessage, taskKeyboard);
        break;
      case 'cash':
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
        const machines = await prisma.machine.findMany({
          where: { status: 'ACTIVE' },
          include: { location: true },
          orderBy: { internalCode: 'asc' }
        });
        
        if (machines.length === 0) {
          await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏.');
          return await ctx.scene.leave();
        }
        
        const cashMessage = `
üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é ${ctx.session.retroData.date.toLocaleDateString('ru-RU')}:
`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏
        const cashButtons = machines.map(machine => {
          const locationName = machine.location ? machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
          return [Markup.button.callback(
            `${machine.internalCode} - ${locationName}`,
            `machine_${machine.id}`
          )];
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        cashButtons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
        
        const cashKeyboard = Markup.inlineKeyboard(cashButtons);
        
        await ctx.reply(cashMessage, cashKeyboard);
        break;
      case 'receive':
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
        const receiveMessage = `
üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏–Ω—è–ª–∏ ${ctx.session.retroData.date.toLocaleDateString('ru-RU')}:
`;
        
        const receiveButtons = [
          [Markup.button.callback('üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', 'item_type_ingredient')],
          [Markup.button.callback('üíß –í–æ–¥–∞', 'item_type_water')],
          [Markup.button.callback('üß¥ –°–∏—Ä–æ–ø—ã', 'item_type_syrup')],
          [Markup.button.callback('üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã', 'item_type_extra')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
        ];
        
        const receiveKeyboard = Markup.inlineKeyboard(receiveButtons);
        
        await ctx.reply(receiveMessage, receiveKeyboard);
        break;
      case 'return':
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        const returnTasks = await prisma.task.findMany({
          where: {
            status: 'COMPLETED',
            type: { in: ['INGREDIENTS', 'WATER'] }
          },
          include: {
            machine: {
              include: { location: true }
            },
            assignedUser: true
          },
          orderBy: { completedAt: 'desc' },
          take: 10 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –∑–∞–¥–∞—á–∞–º–∏
        });
        
        if (returnTasks.length === 0) {
          await ctx.reply('‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤.');
          return await ctx.scene.leave();
        }
        
        const returnMessage = `
üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç ${ctx.session.retroData.date.toLocaleDateString('ru-RU')}:
`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
        const returnButtons = returnTasks.map(task => {
          const locationName = task.machine.location ? task.machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
          const operatorName = `${task.assignedUser.firstName} ${task.assignedUser.lastName || ''}`;
          
          return [Markup.button.callback(
            `${getTaskTypeName(task.type)} - ${task.machine.internalCode} - ${operatorName}`,
            `return_task_${task.id}`
          )];
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        returnButtons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
        
        const returnKeyboard = Markup.inlineKeyboard(returnButtons);
        
        await ctx.reply(returnMessage, returnKeyboard);
        break;
      case 'bag':
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–∫–∏
        const bagMachines = await prisma.machine.findMany({
          where: { status: 'ACTIVE' },
          include: { location: true },
          orderBy: { internalCode: 'asc' }
        });
        
        if (bagMachines.length === 0) {
          await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–∫–∏.');
          return await ctx.scene.leave();
        }
        
        const bagMessage = `
üéí –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ —Å—É–º–∫—É ${ctx.session.retroData.date.toLocaleDateString('ru-RU')}:
`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏
        const bagButtons = bagMachines.map(machine => {
          const locationName = machine.location ? machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
          return [Markup.button.callback(
            `${machine.internalCode} - ${locationName}`,
            `bag_machine_${machine.id}`
          )];
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        bagButtons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
        
        const bagKeyboard = Markup.inlineKeyboard(bagButtons);
        
        await ctx.reply(bagMessage, bagKeyboard);
        break;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
scene.action(/^task_(.+)$/, async (ctx) => {
  try {
    const taskId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏
    ctx.session.retroData.taskId = taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        machine: {
          include: { location: true }
        }
      }
    });
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleRetroInputData(ctx);
    }
    
    const locationName = task.machine.location ? task.machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${getTaskTypeName(task.type)} - ${task.machine.internalCode} (${locationName})`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    await ctx.reply(`
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'retro_input_notes';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
scene.action(/^machine_(.+)$/, async (ctx) => {
  try {
    const machineId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–≤—Ç–æ–º–∞—Ç–∞
    ctx.session.retroData.machineId = machineId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ
    const machine = await prisma.machine.findUnique({
      where: { id: machineId },
      include: { location: true }
    });
    
    if (!machine) {
      await ctx.reply('‚ùå –ê–≤—Ç–æ–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleRetroInputData(ctx);
    }
    
    const locationName = machine.location ? machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç: ${machine.internalCode} - ${locationName}`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
    await ctx.reply(`
üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Å—É–º–º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞
scene.action(/^item_type_(.+)$/, async (ctx) => {
  try {
    const itemType = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
    ctx.session.retroData.itemType = itemType;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
    let typeName = '';
    switch (itemType) {
      case 'ingredient':
        typeName = 'üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã';
        break;
      case 'water':
        typeName = 'üíß –í–æ–¥–∞';
        break;
      case 'syrup':
        typeName = 'üß¥ –°–∏—Ä–æ–ø—ã';
        break;
      case 'extra':
        typeName = 'üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã';
        break;
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: ${typeName}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    let items = [];
    let message = '';
    
    switch (itemType) {
      case 'ingredient':
        items = await prisma.ingredient.findMany({
          where: { status: 'ACTIVE' },
          orderBy: { name: 'asc' }
        });
        message = 'üßÇ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:';
        break;
      case 'water':
        items = await prisma.waterType.findMany({
          where: { status: 'ACTIVE' },
          orderBy: { name: 'asc' }
        });
        message = 'üíß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–¥—ã:';
        break;
      case 'syrup':
        items = await prisma.syrup.findMany({
          where: { status: 'ACTIVE' },
          orderBy: { name: 'asc' }
        });
        message = 'üß¥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Ä–æ–ø:';
        break;
      case 'extra':
        items = await prisma.extraItem.findMany({
          where: { status: 'ACTIVE' },
          orderBy: { name: 'asc' }
        });
        message = 'üß∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç:';
        break;
    }
    
    if (items.length === 0) {
      await ctx.reply(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Ç–∏–ø–∞ "${typeName}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø.`);
      ctx.session.state = 'retro_input_data';
      return await handleRetroInputData(ctx);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const buttons = items.map(item => {
      let buttonText = '';
      
      switch (itemType) {
        case 'ingredient':
          buttonText = `${item.name} (${item.code})`;
          break;
        case 'water':
          buttonText = `${item.name} (${item.volume} –ª)`;
          break;
        case 'syrup':
          buttonText = `${item.name} (${item.volume} –º–ª)`;
          break;
        case 'extra':
          buttonText = item.name;
          break;
      }
      
      return [Markup.button.callback(buttonText, `receive_item_${item.id}`)];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞
scene.action(/^receive_item_(.+)$/, async (ctx) => {
  try {
    const itemId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞
    ctx.session.retroData.itemId = itemId;
    
    const itemType = ctx.session.retroData.itemType;
    let item;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    switch (itemType) {
      case 'ingredient':
        item = await prisma.ingredient.findUnique({
          where: { id: itemId }
        });
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ${item.name} (${item.code})`);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
        await ctx.reply(`
‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ "${item.name}" (–≤ –≥—Ä–∞–º–º–∞—Ö):
`);
        break;
      case 'water':
        item = await prisma.waterType.findUnique({
          where: { id: itemId }
        });
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Ç–∏–ø –≤–æ–¥—ã: ${item.name} (${item.volume} –ª)`);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫
        await ctx.reply(`
üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã "${item.name}" (–≤ —à—Ç—É–∫–∞—Ö):
`);
        break;
      case 'syrup':
        item = await prisma.syrup.findUnique({
          where: { id: itemId }
        });
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Å–∏—Ä–æ–ø: ${item.name} (${item.volume} –º–ª)`);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫
        await ctx.reply(`
üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ —Å–∏—Ä–æ–ø–∞ "${item.name}" (–≤ —à—Ç—É–∫–∞—Ö):
`);
        break;
      case 'extra':
        item = await prisma.extraItem.findUnique({
          where: { id: itemId }
        });
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: ${item.name}`);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        await ctx.reply(`
üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "${item.name}" (–≤ —à—Ç—É–∫–∞—Ö):
`);
        break;
    }
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
scene.action(/^return_task_(.+)$/, async (ctx) => {
  try {
    const taskId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏
    ctx.session.retroData.taskId = taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        machine: {
          include: { location: true }
        },
        assignedUser: true
      }
    });
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleRetroInputData(ctx);
    }
    
    const locationName = task.machine.location ? task.machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
    const operatorName = `${task.assignedUser.firstName} ${task.assignedUser.lastName || ''}`;
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${getTaskTypeName(task.type)} - ${task.machine.internalCode} - ${operatorName}`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    await ctx.reply(`
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'retro_input_notes';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–∫–∏
scene.action(/^bag_machine_(.+)$/, async (ctx) => {
  try {
    const machineId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–≤—Ç–æ–º–∞—Ç–∞
    ctx.session.retroData.machineId = machineId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ
    const machine = await prisma.machine.findUnique({
      where: { id: machineId },
      include: { location: true }
    });
    
    if (!machine) {
      await ctx.reply('‚ùå –ê–≤—Ç–æ–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleRetroInputData(ctx);
    }
    
    const locationName = machine.location ? machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç: ${machine.internalCode} - ${locationName}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    const operators = await prisma.user.findMany({
      where: { 
        role: 'OPERATOR',
        status: 'ACTIVE'
      },
      orderBy: { firstName: 'asc' }
    });
    
    if (operators.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–∫–∏.');
      return await ctx.scene.leave();
    }
    
    const message = `
üë§ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å—É–º–∫–∞:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    const buttons = operators.map(operator => {
      return [Markup.button.callback(
        `${operator.firstName} ${operator.lastName || ''}`,
        `operator_${operator.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–∫–∏
scene.action(/^operator_(.+)$/, async (ctx) => {
  try {
    const operatorId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    ctx.session.retroData.operatorId = operatorId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
    const operator = await prisma.user.findUnique({
      where: { id: operatorId }
    });
    
    if (!operator) {
      await ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä: ${operator.firstName} ${operator.lastName || ''}`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    await ctx.reply(`
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É–º–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'retro_input_notes';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è retro_photo_optional
async function handleRetroPhotoOptional(ctx) {
  try {
    await ctx.reply(`
üì∏ –§–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.
`);
    
    // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'retro_wait_photo';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
scene.on('photo', async (ctx) => {
  if (ctx.session.state === 'retro_wait_photo') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
      const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
      ctx.session.retroData.photo = photoId;
      
      await ctx.reply('‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
      ctx.session.state = 'retro_confirm';
      await handleRetroConfirm(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
scene.command('skip', async (ctx) => {
  if (ctx.session.state === 'retro_wait_photo') {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    ctx.session.state = 'retro_confirm';
    await handleRetroConfirm(ctx);
  } else if (ctx.session.state === 'retro_input_notes') {
    ctx.session.retroData.notes = null;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
    ctx.session.state = 'retro_photo_optional';
    await handleRetroPhotoOptional(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è retro_confirm
async function handleRetroConfirm(ctx) {
  try {
    const retroData = ctx.session.retroData;
    const actionType = retroData.actionType;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    let confirmText = `
‚è±Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö

üìÖ –î–∞—Ç–∞: ${retroData.date.toLocaleDateString('ru-RU')}
`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    switch (actionType) {
      case 'task_execution':
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        const task = await prisma.task.findUnique({
          where: { id: retroData.taskId },
          include: {
            machine: {
              include: { location: true }
            }
          }
        });
        
        confirmText += `üîÑ –î–µ–π—Å—Ç–≤–∏–µ: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏\n`;
        confirmText += `üîπ –ó–∞–¥–∞—á–∞: ${getTaskTypeName(task.type)} - ${task.machine.internalCode}\n`;
        confirmText += `üîπ –õ–æ–∫–∞—Ü–∏—è: ${task.machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}\n`;
        break;
      case 'cash':
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ
        const cashMachine = await prisma.machine.findUnique({
          where: { id: retroData.machineId },
          include: { location: true }
        });
        
        confirmText += `üí∞ –î–µ–π—Å—Ç–≤–∏–µ: –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è\n`;
        confirmText += `üîπ –ê–≤—Ç–æ–º–∞—Ç: ${cashMachine.internalCode}\n`;
        confirmText += `üîπ –õ–æ–∫–∞—Ü–∏—è: ${cashMachine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}\n`;
        confirmText += `üîπ –°—É–º–º–∞: ${retroData.amount} —Ä—É–±.\n`;
        break;
      case 'receive':
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        let receiveItemName = '';
        
        switch (retroData.itemType) {
          case 'ingredient':
            const ingredient = await prisma.ingredient.findUnique({
              where: { id: retroData.itemId }
            });
            receiveItemName = `${ingredient.name} (${ingredient.code})`;
            confirmText += `üì¶ –î–µ–π—Å—Ç–≤–∏–µ: –ü—Ä–∏–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞\n`;
            confirmText += `üîπ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ${receiveItemName}\n`;
            confirmText += `üîπ –í–µ—Å: ${retroData.weight} –≥\n`;
            break;
          case 'water':
            const waterType = await prisma.waterType.findUnique({
              where: { id: retroData.itemId }
            });
            receiveItemName = `${waterType.name} (${waterType.volume} –ª)`;
            confirmText += `üì¶ –î–µ–π—Å—Ç–≤–∏–µ: –ü—Ä–∏–µ–º –≤–æ–¥—ã\n`;
            confirmText += `üîπ –í–æ–¥–∞: ${receiveItemName}\n`;
            confirmText += `üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${retroData.units} —à—Ç.\n`;
            break;
          case 'syrup':
            const syrup = await prisma.syrup.findUnique({
              where: { id: retroData.itemId }
            });
            receiveItemName = `${syrup.name} (${syrup.volume} –º–ª)`;
            confirmText += `üì¶ –î–µ–π—Å—Ç–≤–∏–µ: –ü—Ä–∏–µ–º —Å–∏—Ä–æ–ø–∞\n`;
            confirmText += `üîπ –°–∏—Ä–æ–ø: ${receiveItemName}\n`;
            confirmText += `üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${retroData.units} —à—Ç.\n`;
            break;
          case 'extra':
            const extraItem = await prisma.extraItem.findUnique({
              where: { id: retroData.itemId }
            });
            receiveItemName = extraItem.name;
            confirmText += `üì¶ –î–µ–π—Å—Ç–≤–∏–µ: –ü—Ä–∏–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞\n`;
            confirmText += `üîπ –ü—Ä–µ–¥–º–µ—Ç: ${receiveItemName}\n`;
            confirmText += `üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${retroData.units} —à—Ç.\n`;
            break;
        }
        break;
      case 'return':
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        const returnTask = await prisma.task.findUnique({
          where: { id: retroData.taskId },
          include: {
            machine: {
              include: { location: true }
            },
            assignedUser: true
          }
        });
        
        confirmText += `üîÑ –î–µ–π—Å—Ç–≤–∏–µ: –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤\n`;
        confirmText += `üîπ –ó–∞–¥–∞—á–∞: ${getTaskTypeName(returnTask.type)} - ${returnTask.machine.internalCode}\n`;
        confirmText += `üîπ –õ–æ–∫–∞—Ü–∏—è: ${returnTask.machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}\n`;
        confirmText += `üîπ –û–ø–µ—Ä–∞—Ç–æ—Ä: ${returnTask.assignedUser.firstName} ${returnTask.assignedUser.lastName || ''}\n`;
        break;
      case 'bag':
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–µ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
        const bagMachine = await prisma.machine.findUnique({
          where: { id: retroData.machineId },
          include: { location: true }
        });
        
        const operator = await prisma.user.findUnique({
          where: { id: retroData.operatorId }
        });
        
        confirmText += `üéí –î–µ–π—Å—Ç–≤–∏–µ: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–∫–∏\n`;
        confirmText += `üîπ –ê–≤—Ç–æ–º–∞—Ç: ${bagMachine.internalCode}\n`;
        confirmText += `üîπ –õ–æ–∫–∞—Ü–∏—è: ${bagMachine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}\n`;
        confirmText += `üîπ –û–ø–µ—Ä–∞—Ç–æ—Ä: ${operator.firstName} ${operator.lastName || ''}\n`;
        break;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (retroData.notes) {
      confirmText += `\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${retroData.notes}\n`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_retro')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(confirmText, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
scene.action('confirm_retro', async (ctx) => {
  try {
    const retroData = ctx.session.retroData;
    const actionType = retroData.actionType;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–º –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const retro = await prisma.retroAction.create({
      data: {
        type: actionType.toUpperCase(),
        date: retroData.date,
        machineId: retroData.machineId,
        taskId: retroData.taskId,
        operatorId: retroData.operatorId,
        itemId: retroData.itemId,
        itemType: retroData.itemType?.toUpperCase(),
        amount: retroData.amount,
        weight: retroData.weight,
        units: retroData.units,
        photo: retroData.photo,
        notes: retroData.notes,
        userId: ctx.session.user.id,
        createdAt: new Date()
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    switch (actionType) {
      case 'task_execution':
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        await prisma.task.update({
          where: { id: retroData.taskId },
          data: {
            status: 'COMPLETED',
            completedAt: retroData.date
          }
        });
        break;
      case 'cash':
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
        await prisma.cash.create({
          data: {
            machineId: retroData.machineId,
            amount: retroData.amount,
            photo: retroData.photo,
            notes: retroData.notes,
            userId: ctx.session.user.id,
            createdAt: retroData.date,
            reconciled: false
          }
        });
        break;
      case 'receive':
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ —Ç–æ–≤–∞—Ä–∞
        await prisma.warehouseReceive.create({
          data: {
            type: retroData.itemType.toUpperCase(),
            itemId: retroData.itemId,
            quantity: retroData.units,
            weight: retroData.weight,
            photo: retroData.photo,
            notes: retroData.notes,
            userId: ctx.session.user.id,
            timestamp: retroData.date
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
        switch (retroData.itemType) {
          case 'ingredient':
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
            const ingredientInventory = await prisma.ingredientInventory.findFirst({
              where: { ingredientId: retroData.itemId }
            });
            
            if (ingredientInventory) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
              await prisma.ingredientInventory.update({
                where: { id: ingredientInventory.id },
                data: { weight: ingredientInventory.weight + retroData.weight }
              });
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–µ
              await prisma.ingredientInventory.create({
                data: {
                  ingredientId: retroData.itemId,
                  weight: retroData.weight
                }
              });
            }
            break;
          case 'water':
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –≤–æ–¥—ã
            const waterInventory = await prisma.waterInventory.findFirst({
              where: { waterTypeId: retroData.itemId }
            });
            
            if (waterInventory) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
              await prisma.waterInventory.update({
                where: { id: waterInventory.id },
                data: { units: waterInventory.units + retroData.units }
              });
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–µ
              await prisma.waterInventory.create({
                data: {
                  waterTypeId: retroData.itemId,
                  units: retroData.units
                }
              });
            }
            break;
          case 'syrup':
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Å–∏—Ä–æ–ø–∞
            const syrupInventory = await prisma.syrupInventory.findFirst({
              where: { syrupId: retroData.itemId }
            });
            
            if (syrupInventory) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
              await prisma.syrupInventory.update({
                where: { id: syrupInventory.id },
                data: { units: syrupInventory.units + retroData.units }
              });
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–µ
              await prisma.syrupInventory.create({
                data: {
                  syrupId: retroData.itemId,
                  units: retroData.units
                }
              });
            }
            break;
          case 'extra':
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            const extraInventory = await prisma.extraItemInventory.findFirst({
              where: { extraItemId: retroData.itemId }
            });
            
            if (extraInventory) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
              await prisma.extraItemInventory.update({
                where: { id: extraInventory.id },
                data: { units: extraInventory.units + retroData.units }
              });
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–µ
              await prisma.extraItemInventory.create({
                data: {
                  extraItemId: retroData.itemId,
                  units: retroData.units
                }
              });
            }
            break;
        }
        break;
      case 'bag':
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å—É–º–∫–µ
        await prisma.bag.create({
          data: {
            machineId: retroData.machineId,
            operatorId: retroData.operatorId,
            createdById: ctx.session.user.id,
            status: 'CREATED',
            photo: retroData.photo,
            notes: retroData.notes,
            createdAt: retroData.date
          }
        });
        break;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–º –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö
    await ctx.editMessageText(`
‚úÖ –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!

üîπ ID: ${retro.id}
üîπ –î–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${retroData.date.toLocaleDateString('ru-RU')}
üîπ –î–∞—Ç–∞ –≤–≤–æ–¥–∞: ${new Date().toLocaleDateString('ru-RU')}

–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.
`);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚è±Ô∏è –í–≤–µ—Å—Ç–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ', 'retro_another')],
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
    ]);
    
    await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–º –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–º –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.');
  await ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –µ—â–µ –¥–∞–Ω–Ω—ã—Ö
scene.action('retro_another', async (ctx) => {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
  ctx.session.retroData = {
    actionType: null,
    date: null,
    machineId: null,
    taskId: null,
    amount: 0,
    weight: 0,
    units: 0,
    itemId: null,
    photo: null,
    notes: null
  };
  
  ctx.session.state = 'retro_select_action';
  await ctx.editMessageText('‚è±Ô∏è –ù–æ–≤—ã–π —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö...');
  await handleRetroSelectAction(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scene.action('back_to_menu', async (ctx) => {
  await ctx.editMessageText('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
  await ctx.scene.enter('main_menu_fsm');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
function getTaskTypeName(type) {
  const taskTypes = {
    'INGREDIENTS': 'üîÑ –ó–∞–º–µ–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤',
    'WATER': 'üíß –ó–∞–º–µ–Ω–∞ –≤–æ–¥—ã',
    'CLEANING': 'üßπ –ß–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞',
    'REPAIR': 'üîß –†–µ–º–æ–Ω—Ç',
    'CASH': 'üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è'
  };
  
  return taskTypes[type] || type;
}

module.exports = scene;
