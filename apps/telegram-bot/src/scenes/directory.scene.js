/**
 * FSM: directory_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ (—Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤).
 * –†–æ–ª–∏: –ú–µ–Ω–µ–¥–∂–µ—Ä, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - dir_select_category: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
 *   - dir_list_entries: –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
 *   - dir_view_entry: –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏
 *   - dir_add_entry: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
 *   - dir_edit_entry: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
 *   - dir_delete_entry: —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('directory_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[directory_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
scene.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å ADMIN –∏–ª–∏ MANAGER
  if (!ctx.session.user || !['ADMIN', 'MANAGER'].includes(ctx.session.user.role)) {
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏.');
    return await ctx.scene.leave();
  }
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    ctx.session.directoryData = {
      category: null,
      entryId: null,
      entryData: {},
      page: 1,
      itemsPerPage: 10
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'dir_select_category';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    await handleDirSelectCategory(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É directory_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è dir_select_category
async function handleDirSelectCategory(ctx) {
  try {
    const message = `
üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
    const buttons = [
      [Markup.button.callback('üè¢ –õ–æ–∫–∞—Ü–∏–∏', 'category_locations')],
      [Markup.button.callback('ü§ñ –ê–≤—Ç–æ–º–∞—Ç—ã', 'category_machines')],
      [Markup.button.callback('üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', 'category_ingredients')],
      [Markup.button.callback('üíß –¢–∏–ø—ã –≤–æ–¥—ã', 'category_water_types')],
      [Markup.button.callback('üß¥ –°–∏—Ä–æ–ø—ã', 'category_syrups')],
      [Markup.button.callback('üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã', 'category_extra_items')],
      [Markup.button.callback('üìã –®–∞–±–ª–æ–Ω—ã —á–µ–∫-–ª–∏—Å—Ç–æ–≤', 'category_checklist_templates')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
scene.action(/^category_(.+)$/, async (ctx) => {
  try {
    const category = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    ctx.session.directoryData.category = category;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    let categoryName = '';
    switch (category) {
      case 'locations':
        categoryName = 'üè¢ –õ–æ–∫–∞—Ü–∏–∏';
        break;
      case 'machines':
        categoryName = 'ü§ñ –ê–≤—Ç–æ–º–∞—Ç—ã';
        break;
      case 'ingredients':
        categoryName = 'üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã';
        break;
      case 'water_types':
        categoryName = 'üíß –¢–∏–ø—ã –≤–æ–¥—ã';
        break;
      case 'syrups':
        categoryName = 'üß¥ –°–∏—Ä–æ–ø—ã';
        break;
      case 'extra_items':
        categoryName = 'üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã';
        break;
      case 'checklist_templates':
        categoryName = 'üìã –®–∞–±–ª–æ–Ω—ã —á–µ–∫-–ª–∏—Å—Ç–æ–≤';
        break;
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
    ctx.session.state = 'dir_list_entries';
    await handleDirListEntries(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è dir_list_entries
async function handleDirListEntries(ctx) {
  try {
    const category = ctx.session.directoryData.category;
    const page = ctx.session.directoryData.page;
    const itemsPerPage = ctx.session.directoryData.itemsPerPage;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let entries = [];
    let totalEntries = 0;
    let categoryName = '';
    
    switch (category) {
      case 'locations':
        entries = await prisma.location.findMany({
          skip: (page - 1) * itemsPerPage,
          take: itemsPerPage,
          orderBy: { name: 'asc' }
        });
        totalEntries = await prisma.location.count();
        categoryName = 'üè¢ –õ–æ–∫–∞—Ü–∏–∏';
        break;
      case 'machines':
        entries = await prisma.machine.findMany({
          skip: (page - 1) * itemsPerPage,
          take: itemsPerPage,
          include: { location: true },
          orderBy: { internalCode: 'asc' }
        });
        totalEntries = await prisma.machine.count();
        categoryName = 'ü§ñ –ê–≤—Ç–æ–º–∞—Ç—ã';
        break;
      case 'ingredients':
        entries = await prisma.ingredient.findMany({
          skip: (page - 1) * itemsPerPage,
          take: itemsPerPage,
          orderBy: { name: 'asc' }
        });
        totalEntries = await prisma.ingredient.count();
        categoryName = 'üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã';
        break;
      case 'water_types':
        entries = await prisma.waterType.findMany({
          skip: (page - 1) * itemsPerPage,
          take: itemsPerPage,
          orderBy: { name: 'asc' }
        });
        totalEntries = await prisma.waterType.count();
        categoryName = 'üíß –¢–∏–ø—ã –≤–æ–¥—ã';
        break;
      case 'syrups':
        entries = await prisma.syrup.findMany({
          skip: (page - 1) * itemsPerPage,
          take: itemsPerPage,
          orderBy: { name: 'asc' }
        });
        totalEntries = await prisma.syrup.count();
        categoryName = 'üß¥ –°–∏—Ä–æ–ø—ã';
        break;
      case 'extra_items':
        entries = await prisma.extraItem.findMany({
          skip: (page - 1) * itemsPerPage,
          take: itemsPerPage,
          orderBy: { name: 'asc' }
        });
        totalEntries = await prisma.extraItem.count();
        categoryName = 'üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã';
        break;
      case 'checklist_templates':
        entries = await prisma.checklistTemplate.findMany({
          skip: (page - 1) * itemsPerPage,
          take: itemsPerPage,
          orderBy: { name: 'asc' }
        });
        totalEntries = await prisma.checklistTemplate.count();
        categoryName = 'üìã –®–∞–±–ª–æ–Ω—ã —á–µ–∫-–ª–∏—Å—Ç–æ–≤';
        break;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
    let message = `
üìö ${categoryName} (${totalEntries} –∑–∞–ø–∏—Å–µ–π)

`;
    
    if (entries.length === 0) {
      message += '–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
    } else {
      for (let i = 0; i < entries.length; i++) {
        const entry = entries[i];
        const index = (page - 1) * itemsPerPage + i + 1;
        
        switch (category) {
          case 'locations':
            message += `${index}. ${entry.name}\n`;
            break;
          case 'machines':
            const locationName = entry.location ? entry.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
            message += `${index}. ${entry.internalCode} - ${locationName}\n`;
            break;
          case 'ingredients':
            message += `${index}. ${entry.name} (${entry.code})\n`;
            break;
          case 'water_types':
            message += `${index}. ${entry.name} (${entry.volume} –ª)\n`;
            break;
          case 'syrups':
            message += `${index}. ${entry.name} (${entry.volume} –º–ª)\n`;
            break;
          case 'extra_items':
            message += `${index}. ${entry.name}\n`;
            break;
          case 'checklist_templates':
            message += `${index}. ${entry.name}\n`;
            break;
        }
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–π
    const buttons = [];
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
    if (entries.length > 0) {
      const entryButtons = entries.map((entry, i) => {
        const index = (page - 1) * itemsPerPage + i + 1;
        let buttonText = '';
        
        switch (category) {
          case 'locations':
            buttonText = `${index}. ${entry.name}`;
            break;
          case 'machines':
            buttonText = `${index}. ${entry.internalCode}`;
            break;
          case 'ingredients':
            buttonText = `${index}. ${entry.name}`;
            break;
          case 'water_types':
            buttonText = `${index}. ${entry.name}`;
            break;
          case 'syrups':
            buttonText = `${index}. ${entry.name}`;
            break;
          case 'extra_items':
            buttonText = `${index}. ${entry.name}`;
            break;
          case 'checklist_templates':
            buttonText = `${index}. ${entry.name}`;
            break;
        }
        
        return [Markup.button.callback(buttonText, `view_${entry.id}`)];
      });
      
      buttons.push(...entryButtons);
    }
    
    // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const paginationButtons = [];
    
    if (page > 1) {
      paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'prev_page'));
    }
    
    if (page * itemsPerPage < totalEntries) {
      paginationButtons.push(Markup.button.callback('‚û°Ô∏è –í–ø–µ—Ä–µ–¥', 'next_page'));
    }
    
    if (paginationButtons.length > 0) {
      buttons.push(paginationButtons);
    }
    
    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons.push([Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', 'add_entry')]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'back_to_categories')]);
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
scene.action('prev_page', async (ctx) => {
  try {
    ctx.session.directoryData.page--;
    await ctx.deleteMessage();
    await handleDirListEntries(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

scene.action('next_page', async (ctx) => {
  try {
    ctx.session.directoryData.page++;
    await ctx.deleteMessage();
    await handleDirListEntries(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
scene.action('back_to_categories', async (ctx) => {
  try {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    ctx.session.directoryData = {
      category: null,
      entryId: null,
      entryData: {},
      page: 1,
      itemsPerPage: 10
    };
    
    ctx.session.state = 'dir_select_category';
    await ctx.deleteMessage();
    await handleDirSelectCategory(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–∏
scene.action(/^view_(.+)$/, async (ctx) => {
  try {
    const entryId = ctx.match[1];
    const category = ctx.session.directoryData.category;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø–∏—Å–∏
    ctx.session.directoryData.entryId = entryId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let entry = null;
    
    switch (category) {
      case 'locations':
        entry = await prisma.location.findUnique({
          where: { id: entryId }
        });
        break;
      case 'machines':
        entry = await prisma.machine.findUnique({
          where: { id: entryId },
          include: { location: true }
        });
        break;
      case 'ingredients':
        entry = await prisma.ingredient.findUnique({
          where: { id: entryId }
        });
        break;
      case 'water_types':
        entry = await prisma.waterType.findUnique({
          where: { id: entryId }
        });
        break;
      case 'syrups':
        entry = await prisma.syrup.findUnique({
          where: { id: entryId }
        });
        break;
      case 'extra_items':
        entry = await prisma.extraItem.findUnique({
          where: { id: entryId }
        });
        break;
      case 'checklist_templates':
        entry = await prisma.checklistTemplate.findUnique({
          where: { id: entryId },
          include: { items: true }
        });
        break;
    }
    
    if (!entry) {
      await ctx.reply('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleDirListEntries(ctx);
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏
    let message = '';
    
    switch (category) {
      case 'locations':
        message = `
üè¢ –õ–æ–∫–∞—Ü–∏—è: ${entry.name}

üìç –ê–¥—Ä–µ—Å: ${entry.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'machines':
        message = `
ü§ñ –ê–≤—Ç–æ–º–∞—Ç: ${entry.internalCode}

üè¢ –õ–æ–∫–∞—Ü–∏—è: ${entry.location ? entry.location.name : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –ú–æ–¥–µ–ª—å: ${entry.model || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üîπ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ${entry.serialNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'ingredients':
        message = `
üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ${entry.name}

üîπ –ö–æ–¥: ${entry.code || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'water_types':
        message = `
üíß –¢–∏–ø –≤–æ–¥—ã: ${entry.name}

üîπ –û–±—ä–µ–º: ${entry.volume} –ª
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'syrups':
        message = `
üß¥ –°–∏—Ä–æ–ø: ${entry.name}

üîπ –û–±—ä–µ–º: ${entry.volume} –º–ª
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'extra_items':
        message = `
üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: ${entry.name}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'checklist_templates':
        message = `
üìã –®–∞–±–ª–æ–Ω —á–µ–∫-–ª–∏—Å—Ç–∞: ${entry.name}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –¢–∏–ø: ${getChecklistTypeName(entry.type)}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}

üìã –ü—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞:
`;
        
        if (entry.items && entry.items.length > 0) {
          entry.items.forEach((item, index) => {
            message += `${index + 1}. ${item.text}\n`;
          });
        } else {
          message += '–ü—É–Ω–∫—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.';
        }
        break;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const buttons = [
      [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'edit_entry')],
      [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'delete_entry')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'back_to_list')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.deleteMessage();
    await ctx.reply(message, keyboard);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø–∏—Å–∏
    ctx.session.state = 'dir_view_entry';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–∏—Å–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
scene.action('back_to_list', async (ctx) => {
  try {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –∑–∞–ø–∏—Å–∏
    ctx.session.directoryData.entryId = null;
    
    ctx.session.state = 'dir_list_entries';
    await ctx.deleteMessage();
    await handleDirListEntries(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
scene.action('add_entry', async (ctx) => {
  try {
    const category = ctx.session.directoryData.category;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    ctx.session.directoryData.entryData = {};
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö
    let message = '';
    
    switch (category) {
      case 'locations':
        message = `
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:
`;
        break;
      case 'machines':
        message = `
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞

–í–≤–µ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∞:
`;
        break;
      case 'ingredients':
        message = `
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:
`;
        break;
      case 'water_types':
        message = `
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –≤–æ–¥—ã

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–¥—ã:
`;
        break;
      case 'syrups':
        message = `
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏—Ä–æ–ø–∞

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Ä–æ–ø–∞:
`;
        break;
      case 'extra_items':
        message = `
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:
`;
        break;
      case 'checklist_templates':
        message = `
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —á–µ–∫-–ª–∏—Å—Ç–∞

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:
`;
        break;
    }
    
    await ctx.deleteMessage();
    await ctx.reply(message);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∑–∞–ø–∏—Å–∏
    ctx.session.state = 'dir_add_entry';
    ctx.session.directoryData.addStep = 'name';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
scene.action('edit_entry', async (ctx) => {
  try {
    const category = ctx.session.directoryData.category;
    const entryId = ctx.session.directoryData.entryId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let entry = null;
    
    switch (category) {
      case 'locations':
        entry = await prisma.location.findUnique({
          where: { id: entryId }
        });
        break;
      case 'machines':
        entry = await prisma.machine.findUnique({
          where: { id: entryId },
          include: { location: true }
        });
        break;
      case 'ingredients':
        entry = await prisma.ingredient.findUnique({
          where: { id: entryId }
        });
        break;
      case 'water_types':
        entry = await prisma.waterType.findUnique({
          where: { id: entryId }
        });
        break;
      case 'syrups':
        entry = await prisma.syrup.findUnique({
          where: { id: entryId }
        });
        break;
      case 'extra_items':
        entry = await prisma.extraItem.findUnique({
          where: { id: entryId }
        });
        break;
      case 'checklist_templates':
        entry = await prisma.checklistTemplate.findUnique({
          where: { id: entryId },
          include: { items: true }
        });
        break;
    }
    
    if (!entry) {
      await ctx.reply('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleDirListEntries(ctx);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    ctx.session.directoryData.entryData = entry;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö
    let message = '';
    
    switch (category) {
      case 'locations':
        message = `
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${entry.name}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
        break;
      case 'machines':
        message = `
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞

–¢–µ–∫—É—â–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥: ${entry.internalCode}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:
`;
        break;
      case 'ingredients':
        message = `
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${entry.name}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
        break;
      case 'water_types':
        message = `
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–¥—ã

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${entry.name}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–¥—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
        break;
      case 'syrups':
        message = `
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Ä–æ–ø–∞

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${entry.name}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Ä–æ–ø–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
        break;
      case 'extra_items':
        message = `
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${entry.name}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
        break;
      case 'checklist_templates':
        message = `
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —á–µ–∫-–ª–∏—Å—Ç–∞

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${entry.name}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
        break;
    }
    
    await ctx.deleteMessage();
    await ctx.reply(message);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–ø–∏—Å–∏
    ctx.session.state = 'dir_edit_entry';
    ctx.session.directoryData.editStep = 'name';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
scene.action('delete_entry', async (ctx) => {
  try {
    const category = ctx.session.directoryData.category;
    const entryId = ctx.session.directoryData.entryId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let entry = null;
    let entryName = '';
    
    switch (category) {
      case 'locations':
        entry = await prisma.location.findUnique({
          where: { id: entryId }
        });
        entryName = entry ? entry.name : '';
        break;
      case 'machines':
        entry = await prisma.machine.findUnique({
          where: { id: entryId }
        });
        entryName = entry ? entry.internalCode : '';
        break;
      case 'ingredients':
        entry = await prisma.ingredient.findUnique({
          where: { id: entryId }
        });
        entryName = entry ? entry.name : '';
        break;
      case 'water_types':
        entry = await prisma.waterType.findUnique({
          where: { id: entryId }
        });
        entryName = entry ? entry.name : '';
        break;
      case 'syrups':
        entry = await prisma.syrup.findUnique({
          where: { id: entryId }
        });
        entryName = entry ? entry.name : '';
        break;
      case 'extra_items':
        entry = await prisma.extraItem.findUnique({
          where: { id: entryId }
        });
        entryName = entry ? entry.name : '';
        break;
      case 'checklist_templates':
        entry = await prisma.checklistTemplate.findUnique({
          where: { id: entryId }
        });
        entryName = entry ? entry.name : '';
        break;
    }
    
    if (!entry) {
      await ctx.reply('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleDirListEntries(ctx);
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
    const message = `
üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å "${entryName}"?

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'confirm_delete')],
      [Markup.button.callback('‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞', 'cancel_delete')]
    ]);
    
    await ctx.deleteMessage();
    await ctx.reply(message, keyboard);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–¥–∞–ª–µ–Ω–∏—é –∑–∞–ø–∏—Å–∏
    ctx.session.state = 'dir_delete_entry';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
scene.action('confirm_delete', async (ctx) => {
  try {
    const category = ctx.session.directoryData.category;
    const entryId = ctx.session.directoryData.entryId;
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    switch (category) {
      case 'locations':
        await prisma.location.delete({
          where: { id: entryId }
        });
        break;
      case 'machines':
        await prisma.machine.delete({
          where: { id: entryId }
        });
        break;
      case 'ingredients':
        await prisma.ingredient.delete({
          where: { id: entryId }
        });
        break;
      case 'water_types':
        await prisma.waterType.delete({
          where: { id: entryId }
        });
        break;
      case 'syrups':
        await prisma.syrup.delete({
          where: { id: entryId }
        });
        break;
      case 'extra_items':
        await prisma.extraItem.delete({
          where: { id: entryId }
        });
        break;
      case 'checklist_templates':
        await prisma.checklistTemplate.delete({
          where: { id: entryId }
        });
        break;
    }
    
    await ctx.editMessageText('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
    ctx.session.directoryData.entryId = null;
    ctx.session.state = 'dir_list_entries';
    await handleDirListEntries(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
scene.action('cancel_delete', async (ctx) => {
  try {
    await ctx.editMessageText('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø–∏—Å–∏
    ctx.session.state = 'dir_view_entry';
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–µ
    const category = ctx.session.directoryData.category;
    const entryId = ctx.session.directoryData.entryId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let entry = null;
    
    switch (category) {
      case 'locations':
        entry = await prisma.location.findUnique({
          where: { id: entryId }
        });
        break;
      case 'machines':
        entry = await prisma.machine.findUnique({
          where: { id: entryId },
          include: { location: true }
        });
        break;
      case 'ingredients':
        entry = await prisma.ingredient.findUnique({
          where: { id: entryId }
        });
        break;
      case 'water_types':
        entry = await prisma.waterType.findUnique({
          where: { id: entryId }
        });
        break;
      case 'syrups':
        entry = await prisma.syrup.findUnique({
          where: { id: entryId }
        });
        break;
      case 'extra_items':
        entry = await prisma.extraItem.findUnique({
          where: { id: entryId }
        });
        break;
      case 'checklist_templates':
        entry = await prisma.checklistTemplate.findUnique({
          where: { id: entryId },
          include: { items: true }
        });
        break;
    }
    
    if (!entry) {
      await ctx.reply('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleDirListEntries(ctx);
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏
    let message = '';
    
    switch (category) {
      case 'locations':
        message = `
üè¢ –õ–æ–∫–∞—Ü–∏—è: ${entry.name}

üìç –ê–¥—Ä–µ—Å: ${entry.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'machines':
        message = `
ü§ñ –ê–≤—Ç–æ–º–∞—Ç: ${entry.internalCode}

üè¢ –õ–æ–∫–∞—Ü–∏—è: ${entry.location ? entry.location.name : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –ú–æ–¥–µ–ª—å: ${entry.model || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üîπ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ${entry.serialNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'ingredients':
        message = `
üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ${entry.name}

üîπ –ö–æ–¥: ${entry.code || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'water_types':
        message = `
üíß –¢–∏–ø –≤–æ–¥—ã: ${entry.name}

üîπ –û–±—ä–µ–º: ${entry.volume} –ª
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'syrups':
        message = `
üß¥ –°–∏—Ä–æ–ø: ${entry.name}

üîπ –û–±—ä–µ–º: ${entry.volume} –º–ª
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'extra_items':
        message = `
üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: ${entry.name}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}
`;
        break;
      case 'checklist_templates':
        message = `
üìã –®–∞–±–ª–æ–Ω —á–µ–∫-–ª–∏—Å—Ç–∞: ${entry.name}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîπ –¢–∏–ø: ${getChecklistTypeName(entry.type)}
üîπ –°—Ç–∞—Ç—É—Å: ${getStatusName(entry.status)}

üìã –ü—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞:
`;
        
        if (entry.items && entry.items.length > 0) {
          entry.items.forEach((item, index) => {
            message += `${index + 1}. ${item.text}\n`;
          });
        } else {
          message += '–ü—É–Ω–∫—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.';
        }
        break;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const buttons = [
      [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'edit_entry')],
      [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'delete_entry')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'back_to_list')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ];
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  await ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
scene.on('text', async (ctx) => {
  try {
    const text = ctx.message.text.trim();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—Å–∫–∞
    if (text === '/skip') {
      if (ctx.session.state === 'dir_edit_entry') {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await handleEditNextStep(ctx);
      } else if (ctx.session.state === 'dir_add_entry') {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        await handleAddNextStep(ctx, null);
      }
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    if (ctx.session.state === 'dir_add_entry') {
      await handleAddNextStep(ctx, text);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    if (ctx.session.state === 'dir_edit_entry') {
      await handleEditNextStep(ctx, text);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
async function handleAddNextStep(ctx, text) {
  try {
    const category = ctx.session.directoryData.category;
    const step = ctx.session.directoryData.addStep;
    
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ null, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏
    if (text !== null) {
      switch (step) {
        case 'name':
          ctx.session.directoryData.entryData.name = text;
          break;
        case 'code':
          ctx.session.directoryData.entryData.code = text;
          break;
        case 'address':
          ctx.session.directoryData.entryData.address = text;
          break;
        case 'description':
          ctx.session.directoryData.entryData.description = text;
          break;
        case 'model':
          ctx.session.directoryData.entryData.model = text;
          break;
        case 'serialNumber':
          ctx.session.directoryData.entryData.serialNumber = text;
          break;
        case 'volume':
          const volume = parseFloat(text.replace(',', '.'));
          if (isNaN(volume) || volume <= 0) {
            await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
            return;
          }
          ctx.session.directoryData.entryData.volume = volume;
          break;
        case 'location':
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ª–æ–∫–∞—Ü–∏–∏
          const locationId = text;
          ctx.session.directoryData.entryData.locationId = locationId;
          break;
        case 'type':
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —á–µ–∫-–ª–∏—Å—Ç–∞
          ctx.session.directoryData.entryData.type = text;
          break;
        case 'items':
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞
          const items = text.split('\n').filter(item => item.trim() !== '').map(item => ({ text: item.trim() }));
          ctx.session.directoryData.entryData.items = items;
          break;
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    let nextStep = '';
    let message = '';
    
    switch (category) {
      case 'locations':
        switch (step) {
          case 'name':
            nextStep = 'address';
            message = `
–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
`;
            break;
          case 'address':
            nextStep = 'description';
            message = `
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
`;
            break;
          case 'description':
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const location = await prisma.location.create({
              data: {
                name: ctx.session.directoryData.entryData.name,
                address: ctx.session.directoryData.entryData.address || null,
                description: ctx.session.directoryData.entryData.description || null,
                status: 'ACTIVE'
              }
            });
            
            await ctx.reply(`‚úÖ –õ–æ–∫–∞—Ü–∏—è "${location.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
            ctx.session.state = 'dir_list_entries';
            return await handleDirListEntries(ctx);
        }
        break;
      case 'machines':
        switch (step) {
          case 'name':
            nextStep = 'model';
            message = `
–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
`;
            break;
          case 'model':
            nextStep = 'serialNumber';
            message = `
–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
`;
            break;
          case 'serialNumber':
            nextStep = 'location';
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π
            const locations = await prisma.location.findMany({
              where: { status: 'ACTIVE' },
              orderBy: { name: 'asc' }
            });
            
            if (locations.length === 0) {
              await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.');
              
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
              ctx.session.state = 'dir_list_entries';
              return await handleDirListEntries(ctx);
            }
            
            message = `
–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∞:
`;
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ª–æ–∫–∞—Ü–∏—è–º–∏
            const locationButtons = locations.map(location => {
              return [Markup.button.callback(location.name, `location_${location.id}`)];
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏"
            locationButtons.push([Markup.button.callback('–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏', 'location_none')]);
            
            const locationKeyboard = Markup.inlineKeyboard(locationButtons);
            
            await ctx.reply(message, locationKeyboard);
            return;
          case 'location':
            nextStep = 'description';
            message = `
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
`;
            break;
          case 'description':
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const machine = await prisma.machine.create({
              data: {
                internalCode: ctx.session.directoryData.entryData.name,
                model: ctx.session.directoryData.entryData.model || null,
                serialNumber: ctx.session.directoryData.entryData.serialNumber || null,
                locationId: ctx.session.directoryData.entryData.locationId || null,
                description: ctx.session.directoryData.entryData.description || null,
                status: 'ACTIVE'
              }
            });
            
            await ctx.reply(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç "${machine.internalCode}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
            ctx.session.state = 'dir_list_entries';
            return await handleDirListEntries(ctx);
        }
        break;
      case 'ingredients':
        switch (step) {
          case 'name':
            nextStep = 'code';
            message = `
–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
`;
            break;
          case 'code':
            nextStep = 'description';
            message = `
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
`;
            break;
          case 'description':
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const ingredient = await prisma.ingredient.create({
              data: {
                name: ctx.session.directoryData.entryData.name,
                code: ctx.session.directoryData.entryData.code || null,
                description: ctx.session.directoryData.entryData.description || null,
                status: 'ACTIVE'
              }
            });
            
            await ctx.reply(`‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç "${ingredient.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
            ctx.session.state = 'dir_list_entries';
            return await handleDirListEntries(ctx);
        }
        break;
      case 'water_types':
        switch (step) {
          case 'name':
            nextStep = 'volume';
            message = `
–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º (–≤ –ª–∏—Ç—Ä–∞—Ö):
`;
            break;
          case 'volume':
            nextStep = 'description';
            message = `
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–¥—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
`;
            break;
          case 'description':
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const waterType = await prisma.waterType.create({
              data: {
                name: ctx.session.directoryData.entryData.name,
                volume: ctx.session.directoryData.entryData.volume,
                description: ctx.session.directoryData.entryData.description || null,
                status: 'ACTIVE'
              }
            });
            
            await ctx.reply(`‚úÖ –¢–∏–ø –≤–æ–¥—ã "${waterType.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
            ctx.session.state = 'dir_list_entries';
            return await handleDirListEntries(ctx);
        }
        break;
      case 'syrups':
        switch (step) {
          case 'name':
            nextStep = 'volume';
            message = `
–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º (–≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö):
`;
            break;
          case 'volume':
            nextStep = 'description';
            message = `
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ä–æ–ø–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
`;
            break;
          case 'description':
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const syrup = await prisma.syrup.create({
              data: {
                name: ctx.session.directoryData.entryData.name,
                volume: ctx.session.directoryData.entryData.volume,
                description: ctx.session.directoryData.entryData.description || null,
                status: 'ACTIVE'
              }
            });
            
            await ctx.reply(`‚úÖ –°–∏—Ä–æ–ø "${syrup.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
            ctx.session.state = 'dir_list_entries';
            return await handleDirListEntries(ctx);
        }
        break;
      case 'extra_items':
        switch (step) {
          case 'name':
            nextStep = 'description';
            message = `
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
`;
            break;
          case 'description':
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const extraItem = await prisma.extraItem.create({
              data: {
                name: ctx.session.directoryData.entryData.name,
                description: ctx.session.directoryData.entryData.description || null,
                status: 'ACTIVE'
              }
            });
            
            await ctx.reply(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç "${extraItem.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
            ctx.session.state = 'dir_list_entries';
            return await handleDirListEntries(ctx);
        }
        break;
      case 'checklist_templates':
        switch (step) {
          case 'name':
            nextStep = 'type';
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
            const typeButtons = [
              [Markup.button.callback('üîÑ –û–ø–µ—Ä–∞—Ç–æ—Ä', 'type_OPERATOR')],
              [Markup.button.callback('üîß –¢–µ—Ö–Ω–∏–∫', 'type_TECHNICIAN')],
              [Markup.button.callback('üì¶ –°–∫–ª–∞–¥', 'type_WAREHOUSE')]
            ];
            
            const typeKeyboard = Markup.inlineKeyboard(typeButtons);
            
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫-–ª–∏—Å—Ç–∞:', typeKeyboard);
            return;
          case 'type':
            nextStep = 'description';
            message = `
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
`;
            break;
          case 'description':
            nextStep = 'items';
            message = `
–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:
`;
            break;
          case 'items':
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const checklistTemplate = await prisma.checklistTemplate.create({
              data: {
                name: ctx.session.directoryData.entryData.name,
                type: ctx.session.directoryData.entryData.type,
                description: ctx.session.directoryData.entryData.description || null,
                status: 'ACTIVE',
                items: {
                  create: ctx.session.directoryData.entryData.items
                }
              }
            });
            
            await ctx.reply(`‚úÖ –®–∞–±–ª–æ–Ω —á–µ–∫-–ª–∏—Å—Ç–∞ "${checklistTemplate.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
            ctx.session.state = 'dir_list_entries';
            return await handleDirListEntries(ctx);
        }
        break;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
    ctx.session.directoryData.addStep = nextStep;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await ctx.reply(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
async function handleEditNextStep(ctx, text) {
  try {
    const category = ctx.session.directoryData.category;
    const step = ctx.session.directoryData.editStep;
    const entryId = ctx.session.directoryData.entryId;
    
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ null, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏
    if (text !== null) {
      switch (step) {
        case 'name':
          ctx.session.directoryData.entryData.name = text;
          break;
        case 'code':
          ctx.session.directoryData.entryData.code = text;
          break;
        case 'address':
          ctx.session.directoryData.entryData.address = text;
          break;
        case 'description':
          ctx.session.directoryData.entryData.description = text;
          break;
        case 'model':
          ctx.session.directoryData.entryData.model = text;
          break;
        case 'serialNumber':
          ctx.session.directoryData.entryData.serialNumber = text;
          break;
        case 'volume':
          const volume = parseFloat(text.replace(',', '.'));
          if (isNaN(volume) || volume <= 0) {
            await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
            return;
          }
          ctx.session.directoryData.entryData.volume = volume;
          break;
        case 'location':
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ª–æ–∫–∞—Ü–∏–∏
          const locationId = text;
          ctx.session.directoryData.entryData.locationId = locationId;
          break;
        case 'type':
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —á–µ–∫-–ª–∏—Å—Ç–∞
          ctx.session.directoryData.entryData.type = text;
          break;
        case 'items':
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞
          const items = text.split('\n').filter(item => item.trim() !== '').map(item => ({ text: item.trim() }));
          ctx.session.directoryData.entryData.items = items;
          break;
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    let nextStep = '';
    let message = '';
    
    switch (category) {
      case 'locations':
        switch (step) {
          case 'name':
            nextStep = 'address';
            message = `
–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: ${ctx.session.directoryData.entryData.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:
`;
            break;
          case 'address':
            nextStep = 'description';
            message = `
–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.directoryData.entryData.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
            break;
          case 'description':
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const location = await prisma.location.update({
              where: { id: entryId },
              data: {
                name: ctx.session.directoryData.entryData.name,
                address: ctx.session.directoryData.entryData.address,
                description: ctx.session.directoryData.entryData.description
              }
            });
            
            await ctx.reply(`‚úÖ –õ–æ–∫–∞—Ü–∏—è "${location.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø–∏—Å–∏
            ctx.session.state = 'dir_view_entry';
            return await ctx.scene.reenter();
        }
        break;
      case 'machines':
        switch (step) {
          case 'name':
            nextStep = 'model';
            message = `
–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${ctx.session.directoryData.entryData.model || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é:
`;
            break;
          case 'model':
            nextStep = 'serialNumber';
            message = `
–¢–µ–∫—É—â–∏–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ${ctx.session.directoryData.entryData.serialNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:
`;
            break;
          case 'serialNumber':
            nextStep = 'location';
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π
            const locations = await prisma.location.findMany({
              where: { status: 'ACTIVE' },
              orderBy: { name: 'asc' }
            });
            
            message = `
–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: ${ctx.session.directoryData.entryData.location ? ctx.session.directoryData.entryData.location.name : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∞:
`;
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ª–æ–∫–∞—Ü–∏—è–º–∏
            const locationButtons = locations.map(location => {
              return [Markup.button.callback(location.name, `location_${location.id}`)];
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏"
            locationButtons.push([Markup.button.callback('–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏', 'location_none')]);
            
            const locationKeyboard = Markup.inlineKeyboard(locationButtons);
            
            await ctx.reply(message, locationKeyboard);
            return;
          case 'location':
            nextStep = 'description';
            message = `
–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.directoryData.entryData.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
            break;
          case 'description':
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const machine = await prisma.machine.update({
              where: { id: entryId },
              data: {
                internalCode: ctx.session.directoryData.entryData.name,
                model: ctx.session.directoryData.entryData.model,
                serialNumber: ctx.session.directoryData.entryData.serialNumber,
                locationId: ctx.session.directoryData.entryData.locationId,
                description: ctx.session.directoryData.entryData.description
              }
            });
            
            await ctx.reply(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç "${machine.internalCode}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø–∏—Å–∏
            ctx.session.state = 'dir_view_entry';
            return await ctx.scene.reenter();
        }
        break;
      case 'ingredients':
        switch (step) {
          case 'name':
            nextStep = 'code';
            message = `
–¢–µ–∫—É—â–∏–π –∫–æ–¥: ${ctx.session.directoryData.entryData.code || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:
`;
            break;
          case 'code':
            nextStep = 'description';
            message = `
–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.directoryData.entryData.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
            break;
          case 'description':
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const ingredient = await prisma.ingredient.update({
              where: { id: entryId },
              data: {
                name: ctx.session.directoryData.entryData.name,
                code: ctx.session.directoryData.entryData.code,
                description: ctx.session.directoryData.entryData.description
              }
            });
            
            await ctx.reply(`‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç "${ingredient.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø–∏—Å–∏
            ctx.session.state = 'dir_view_entry';
            return await ctx.scene.reenter();
        }
        break;
      case 'water_types':
        switch (step) {
          case 'name':
            nextStep = 'volume';
            message = `
–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${ctx.session.directoryData.entryData.volume} –ª

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä–µ–º (–≤ –ª–∏—Ç—Ä–∞—Ö):
`;
            break;
          case 'volume':
            nextStep = 'description';
            message = `
–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.directoryData.entryData.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–¥—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
            break;
          case 'description':
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const waterType = await prisma.waterType.update({
              where: { id: entryId },
              data: {
                name: ctx.session.directoryData.entryData.name,
                volume: ctx.session.directoryData.entryData.volume,
                description: ctx.session.directoryData.entryData.description
              }
            });
            
            await ctx.reply(`‚úÖ –¢–∏–ø –≤–æ–¥—ã "${waterType.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø–∏—Å–∏
            ctx.session.state = 'dir_view_entry';
            return await ctx.scene.reenter();
        }
        break;
      case 'syrups':
        switch (step) {
          case 'name':
            nextStep = 'volume';
            message = `
–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${ctx.session.directoryData.entryData.volume} –º–ª

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä–µ–º (–≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö):
`;
            break;
          case 'volume':
            nextStep = 'description';
            message = `
–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.directoryData.entryData.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ä–æ–ø–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
            break;
          case 'description':
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const syrup = await prisma.syrup.update({
              where: { id: entryId },
              data: {
                name: ctx.session.directoryData.entryData.name,
                volume: ctx.session.directoryData.entryData.volume,
                description: ctx.session.directoryData.entryData.description
              }
            });
            
            await ctx.reply(`‚úÖ –°–∏—Ä–æ–ø "${syrup.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø–∏—Å–∏
            ctx.session.state = 'dir_view_entry';
            return await ctx.scene.reenter();
        }
        break;
      case 'extra_items':
        switch (step) {
          case 'name':
            nextStep = 'description';
            message = `
–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.directoryData.entryData.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
            break;
          case 'description':
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const extraItem = await prisma.extraItem.update({
              where: { id: entryId },
              data: {
                name: ctx.session.directoryData.entryData.name,
                description: ctx.session.directoryData.entryData.description
              }
            });
            
            await ctx.reply(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç "${extraItem.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø–∏—Å–∏
            ctx.session.state = 'dir_view_entry';
            return await ctx.scene.reenter();
        }
        break;
      case 'checklist_templates':
        switch (step) {
          case 'name':
            nextStep = 'type';
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
            const typeButtons = [
              [Markup.button.callback('üîÑ –û–ø–µ—Ä–∞—Ç–æ—Ä', 'type_OPERATOR')],
              [Markup.button.callback('üîß –¢–µ—Ö–Ω–∏–∫', 'type_TECHNICIAN')],
              [Markup.button.callback('üì¶ –°–∫–ª–∞–¥', 'type_WAREHOUSE')]
            ];
            
            const typeKeyboard = Markup.inlineKeyboard(typeButtons);
            
            await ctx.reply(`
–¢–µ–∫—É—â–∏–π —Ç–∏–ø: ${getChecklistTypeName(ctx.session.directoryData.entryData.type)}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —á–µ–∫-–ª–∏—Å—Ç–∞:
`, typeKeyboard);
            return;
          case 'type':
            nextStep = 'description';
            message = `
–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.directoryData.entryData.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:
`;
            break;
          case 'description':
            nextStep = 'items';
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞
            const items = ctx.session.directoryData.entryData.items || [];
            let itemsText = '';
            
            if (items.length > 0) {
              itemsText = items.map(item => item.text).join('\n');
            }
            
            message = `
–¢–µ–∫—É—â–∏–µ –ø—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞:
${itemsText || '–ü—É–Ω–∫—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.'}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:
`;
            break;
          case 'items':
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã
            await prisma.checklistItem.deleteMany({
              where: { checklistTemplateId: entryId }
            });
            
            // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã
            const checklistTemplate = await prisma.checklistTemplate.update({
              where: { id: entryId },
              data: {
                name: ctx.session.directoryData.entryData.name,
                type: ctx.session.directoryData.entryData.type,
                description: ctx.session.directoryData.entryData.description,
                items: {
                  create: ctx.session.directoryData.entryData.items
                }
              }
            });
            
            await ctx.reply(`‚úÖ –®–∞–±–ª–æ–Ω —á–µ–∫-–ª–∏—Å—Ç–∞ "${checklistTemplate.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø–∏—Å–∏
            ctx.session.state = 'dir_view_entry';
            return await ctx.scene.reenter();
        }
        break;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
    ctx.session.directoryData.editStep = nextStep;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await ctx.reply(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
scene.action(/^location_(.+)$/, async (ctx) => {
  try {
    const locationId = ctx.match[1] === 'none' ? null : ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ª–æ–∫–∞—Ü–∏–∏
    if (ctx.session.state === 'dir_add_entry') {
      ctx.session.directoryData.entryData.locationId = locationId;
      await handleAddNextStep(ctx, locationId);
    } else if (ctx.session.state === 'dir_edit_entry') {
      ctx.session.directoryData.entryData.locationId = locationId;
      await handleEditNextStep(ctx, locationId);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
scene.action(/^type_(.+)$/, async (ctx) => {
  try {
    const type = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —á–µ–∫-–ª–∏—Å—Ç–∞
    if (ctx.session.state === 'dir_add_entry') {
      ctx.session.directoryData.entryData.type = type;
      await handleAddNextStep(ctx, type);
    } else if (ctx.session.state === 'dir_edit_entry') {
      ctx.session.directoryData.entryData.type = type;
      await handleEditNextStep(ctx, type);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function getStatusName(status) {
  const statuses = {
    'ACTIVE': '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
    'INACTIVE': '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
    'DELETED': 'üóëÔ∏è –£–¥–∞–ª–µ–Ω'
  };
  
  return statuses[status] || status;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
function getChecklistTypeName(type) {
  const types = {
    'OPERATOR': 'üîÑ –û–ø–µ—Ä–∞—Ç–æ—Ä',
    'TECHNICIAN': 'üîß –¢–µ—Ö–Ω–∏–∫',
    'WAREHOUSE': 'üì¶ –°–∫–ª–∞–¥'
  };
  
  return types[type] || type;
}

module.exports = scene;
