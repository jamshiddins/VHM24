/**
 * FSM: warehouse_receive_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü—Ä–∏—ë–º –Ω–æ–≤—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Ç–æ–≤–∞—Ä–æ–≤, –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã –Ω–∞ —Å–∫–ª–∞–¥.
 * –†–æ–ª–∏: –°–∫–ª–∞–¥—Å–∫–æ–π —Ä–∞–±–æ—Ç–Ω–∏–∫ (Warehouse).
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - receive_select_type: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
 *   - receive_input_quantity_or_weight: –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ—Å–∞
 *   - receive_photo: —Ñ–æ—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
 *   - receive_confirm: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('warehouse_receive_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[warehouse_receive_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
scene.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å ADMIN –∏–ª–∏ WAREHOUSE
  if (!ctx.session.user || !['ADMIN', 'WAREHOUSE'].includes(ctx.session.user.role)) {
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–µ–º—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥.');
    return await ctx.scene.leave();
  }
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–∞
    ctx.session.receiveData = {
      type: null,
      itemId: null,
      quantity: 0,
      weight: 0,
      photo: null,
      notes: null
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'receive_select_type';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
    await handleReceiveSelectType(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É warehouse_receive_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è receive_select_type
async function handleReceiveSelectType(ctx) {
  try {
    const message = `
üì¶ –ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:
`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', 'type_ingredient')],
      [Markup.button.callback('üíß –í–æ–¥–∞', 'type_water')],
      [Markup.button.callback('üß¥ –°–∏—Ä–æ–ø—ã', 'type_syrup')],
      [Markup.button.callback('üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã', 'type_extra')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
scene.action(/^type_(.+)$/, async (ctx) => {
  try {
    const type = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
    ctx.session.receiveData.type = type;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø
    let typeName = '';
    switch (type) {
      case 'ingredient':
        typeName = 'üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã';
        break;
      case 'water':
        typeName = 'üíß –í–æ–¥–∞';
        break;
      case 'syrup':
        typeName = 'üß¥ –°–∏—Ä–æ–ø—ã';
        break;
      case 'extra':
        typeName = 'üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã';
        break;
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: ${typeName}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    ctx.session.state = 'receive_select_item';
    await handleReceiveSelectItem(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è receive_select_item
async function handleReceiveSelectItem(ctx) {
  try {
    const type = ctx.session.receiveData.type;
    let items = [];
    let message = '';
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (type) {
      case 'ingredient':
        items = await prisma.ingredient.findMany({
          where: { status: 'ACTIVE' },
          orderBy: { name: 'asc' }
        });
        message = 'üßÇ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:';
        break;
      case 'water':
        items = await prisma.waterType.findMany({
          where: { status: 'ACTIVE' },
          orderBy: { name: 'asc' }
        });
        message = 'üíß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–¥—ã:';
        break;
      case 'syrup':
        items = await prisma.syrup.findMany({
          where: { status: 'ACTIVE' },
          orderBy: { name: 'asc' }
        });
        message = 'üß¥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Ä–æ–ø:';
        break;
      case 'extra':
        items = await prisma.extraItem.findMany({
          where: { status: 'ACTIVE' },
          orderBy: { name: 'asc' }
        });
        message = 'üß∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç:';
        break;
    }
    
    if (items.length === 0) {
      await ctx.reply(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Ç–∏–ø–∞ "${type}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø.`);
      ctx.session.state = 'receive_select_type';
      return await handleReceiveSelectType(ctx);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const buttons = items.map(item => {
      let buttonText = '';
      
      switch (type) {
        case 'ingredient':
          buttonText = `${item.name} (${item.code})`;
          break;
        case 'water':
          buttonText = `${item.name} (${item.volume} –ª)`;
          break;
        case 'syrup':
          buttonText = `${item.name} (${item.volume} –º–ª)`;
          break;
        case 'extra':
          buttonText = item.name;
          break;
      }
      
      return [Markup.button.callback(buttonText, `item_${item.id}`)];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
scene.action(/^item_(.+)$/, async (ctx) => {
  try {
    const itemId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞
    ctx.session.receiveData.itemId = itemId;
    
    const type = ctx.session.receiveData.type;
    let item;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    switch (type) {
      case 'ingredient':
        item = await prisma.ingredient.findUnique({
          where: { id: itemId }
        });
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ${item.name} (${item.code})`);
        break;
      case 'water':
        item = await prisma.waterType.findUnique({
          where: { id: itemId }
        });
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Ç–∏–ø –≤–æ–¥—ã: ${item.name} (${item.volume} –ª)`);
        break;
      case 'syrup':
        item = await prisma.syrup.findUnique({
          where: { id: itemId }
        });
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Å–∏—Ä–æ–ø: ${item.name} (${item.volume} –º–ª)`);
        break;
      case 'extra':
        item = await prisma.extraItem.findUnique({
          where: { id: itemId }
        });
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: ${item.name}`);
        break;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ—Å–∞
    ctx.session.state = 'receive_input_quantity_or_weight';
    await handleReceiveInputQuantityOrWeight(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è receive_input_quantity_or_weight
async function handleReceiveInputQuantityOrWeight(ctx) {
  try {
    const type = ctx.session.receiveData.type;
    const itemId = ctx.session.receiveData.itemId;
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
    switch (type) {
      case 'ingredient':
        const ingredient = await prisma.ingredient.findUnique({
          where: { id: itemId }
        });
        await ctx.reply(`
‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ "${ingredient.name}" (–≤ –≥—Ä–∞–º–º–∞—Ö):
`);
        break;
      case 'water':
        const waterType = await prisma.waterType.findUnique({
          where: { id: itemId }
        });
        await ctx.reply(`
üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã "${waterType.name}" (–≤ —à—Ç—É–∫–∞—Ö):
`);
        break;
      case 'syrup':
        const syrup = await prisma.syrup.findUnique({
          where: { id: itemId }
        });
        await ctx.reply(`
üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ —Å–∏—Ä–æ–ø–∞ "${syrup.name}" (–≤ —à—Ç—É–∫–∞—Ö):
`);
        break;
      case 'extra':
        const extraItem = await prisma.extraItem.findUnique({
          where: { id: itemId }
        });
        await ctx.reply(`
üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "${extraItem.name}" (–≤ —à—Ç—É–∫–∞—Ö):
`);
        break;
    }
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ—Å–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ—Å–∞
scene.on('text', async (ctx) => {
  if (ctx.session.state === 'receive_input_quantity_or_weight') {
    try {
      const type = ctx.session.receiveData.type;
      const value = parseInt(ctx.message.text.trim());
      
      if (isNaN(value) || value <= 0) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ –Ω—É–ª—è).');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤–µ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
      switch (type) {
        case 'ingredient':
          ctx.session.receiveData.weight = value;
          break;
        case 'water':
        case 'syrup':
        case 'extra':
          ctx.session.receiveData.quantity = value;
          break;
      }
      
      await ctx.reply('‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ñ–æ—Ç–æ
      ctx.session.state = 'receive_photo';
      await handleReceivePhoto(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ—Å–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  } else if (ctx.session.state === 'receive_input_notes') {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
      ctx.session.receiveData.notes = ctx.message.text.trim();
      
      await ctx.reply('‚úÖ –ü—Ä–∏–º–µ—á–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
      ctx.session.state = 'receive_confirm';
      await handleReceiveConfirm(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è receive_photo
async function handleReceivePhoto(ctx) {
  try {
    await ctx.reply(`
üì∏ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.
`);
    
    // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'receive_wait_photo';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
scene.on('photo', async (ctx) => {
  if (ctx.session.state === 'receive_wait_photo') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
      const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
      ctx.session.receiveData.photo = photoId;
      
      await ctx.reply('‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω–æ.');
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
      await ctx.reply(`
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:
`);
      
      // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      ctx.session.state = 'receive_input_notes';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
scene.command('skip', async (ctx) => {
  if (ctx.session.state === 'receive_wait_photo') {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    await ctx.reply(`
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'receive_input_notes';
  } else if (ctx.session.state === 'receive_input_notes') {
    ctx.session.receiveData.notes = null;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    ctx.session.state = 'receive_confirm';
    await handleReceiveConfirm(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è receive_confirm
async function handleReceiveConfirm(ctx) {
  try {
    const receiveData = ctx.session.receiveData;
    const type = receiveData.type;
    const itemId = receiveData.itemId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    let item;
    let confirmText = 'üì¶ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥\n\n';
    
    switch (type) {
      case 'ingredient':
        item = await prisma.ingredient.findUnique({
          where: { id: itemId }
        });
        confirmText += `üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ${item.name} (${item.code})\n`;
        confirmText += `‚öñÔ∏è –í–µ—Å: ${receiveData.weight} –≥\n`;
        break;
      case 'water':
        item = await prisma.waterType.findUnique({
          where: { id: itemId }
        });
        confirmText += `üíß –í–æ–¥–∞: ${item.name} (${item.volume} –ª)\n`;
        confirmText += `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${receiveData.quantity} —à—Ç.\n`;
        break;
      case 'syrup':
        item = await prisma.syrup.findUnique({
          where: { id: itemId }
        });
        confirmText += `üß¥ –°–∏—Ä–æ–ø: ${item.name} (${item.volume} –º–ª)\n`;
        confirmText += `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${receiveData.quantity} —à—Ç.\n`;
        break;
      case 'extra':
        item = await prisma.extraItem.findUnique({
          where: { id: itemId }
        });
        confirmText += `üß∞ –ü—Ä–µ–¥–º–µ—Ç: ${item.name}\n`;
        confirmText += `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${receiveData.quantity} —à—Ç.\n`;
        break;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (receiveData.notes) {
      confirmText += `\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${receiveData.notes}\n`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_receive')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(confirmText, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–∞
scene.action('confirm_receive', async (ctx) => {
  try {
    const receiveData = ctx.session.receiveData;
    const type = receiveData.type;
    const itemId = receiveData.itemId;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const warehouseReceive = await prisma.warehouseReceive.create({
      data: {
        type: type.toUpperCase(),
        itemId: itemId,
        quantity: receiveData.quantity,
        weight: receiveData.weight,
        photo: receiveData.photo,
        notes: receiveData.notes,
        userId: ctx.session.user.id,
        timestamp: new Date()
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
    switch (type) {
      case 'ingredient':
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
        const ingredientInventory = await prisma.ingredientInventory.findFirst({
          where: { ingredientId: itemId }
        });
        
        if (ingredientInventory) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
          await prisma.ingredientInventory.update({
            where: { id: ingredientInventory.id },
            data: { weight: ingredientInventory.weight + receiveData.weight }
          });
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–µ
          await prisma.ingredientInventory.create({
            data: {
              ingredientId: itemId,
              weight: receiveData.weight
            }
          });
        }
        break;
      case 'water':
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –≤–æ–¥—ã
        const waterInventory = await prisma.waterInventory.findFirst({
          where: { waterTypeId: itemId }
        });
        
        if (waterInventory) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
          await prisma.waterInventory.update({
            where: { id: waterInventory.id },
            data: { units: waterInventory.units + receiveData.quantity }
          });
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–µ
          await prisma.waterInventory.create({
            data: {
              waterTypeId: itemId,
              units: receiveData.quantity
            }
          });
        }
        break;
      case 'syrup':
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Å–∏—Ä–æ–ø–∞
        const syrupInventory = await prisma.syrupInventory.findFirst({
          where: { syrupId: itemId }
        });
        
        if (syrupInventory) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
          await prisma.syrupInventory.update({
            where: { id: syrupInventory.id },
            data: { units: syrupInventory.units + receiveData.quantity }
          });
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–µ
          await prisma.syrupInventory.create({
            data: {
              syrupId: itemId,
              units: receiveData.quantity
            }
          });
        }
        break;
      case 'extra':
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        const extraInventory = await prisma.extraItemInventory.findFirst({
          where: { extraItemId: itemId }
        });
        
        if (extraInventory) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
          await prisma.extraItemInventory.update({
            where: { id: extraInventory.id },
            data: { units: extraInventory.units + receiveData.quantity }
          });
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–µ
          await prisma.extraItemInventory.create({
            data: {
              extraItemId: itemId,
              units: receiveData.quantity
            }
          });
        }
        break;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–µ–º–µ —Ç–æ–≤–∞—Ä–∞
    await ctx.editMessageText(`
‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥!

üîπ ID: ${warehouseReceive.id}
üîπ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.
`);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—è—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üì¶ –ü—Ä–∏–Ω—è—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä', 'receive_another')],
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
    ]);
    
    await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –ü—Ä–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.');
  await ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–µ–º–∞ –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
scene.action('receive_another', async (ctx) => {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
  ctx.session.receiveData = {
    type: null,
    itemId: null,
    quantity: 0,
    weight: 0,
    photo: null,
    notes: null
  };
  
  ctx.session.state = 'receive_select_type';
  await ctx.editMessageText('üì¶ –ü—Ä–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞...');
  await handleReceiveSelectType(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scene.action('back_to_menu', async (ctx) => {
  await ctx.editMessageText('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
  await ctx.scene.enter('main_menu_fsm');
});

module.exports = scene;
