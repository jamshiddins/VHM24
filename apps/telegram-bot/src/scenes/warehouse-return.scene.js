/**
 * FSM: warehouse_return_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü—Ä–∏—ë–º –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—Å—É–º–æ–∫ —Å –±—É–Ω–∫–µ—Ä–∞–º–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã, —Å–∏—Ä–æ–ø–æ–≤).
 * –†–æ–ª–∏: –°–∫–ª–∞–¥—Å–∫–æ–π —Ä–∞–±–æ—Ç–Ω–∏–∫ (Warehouse).
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - return_select_task: –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ç–æ–≤–∞—Ä—ã
 *   - return_select_bag: –≤—ã–±–æ—Ä —Å—É–º–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
 *   - return_input_weights: –≤–≤–æ–¥ –≤–µ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤
 *   - return_photo: —Ñ–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
 *   - return_finish: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('warehouse_return_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[warehouse_return_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
scene.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å ADMIN –∏–ª–∏ WAREHOUSE
  if (!ctx.session.user || !['ADMIN', 'WAREHOUSE'].includes(ctx.session.user.role)) {
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–µ–º—É –≤–æ–∑–≤—Ä–∞—Ç–æ–≤.');
    return await ctx.scene.leave();
  }
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
    ctx.session.returnData = {
      taskId: null,
      bagId: null,
      hopperWeights: [],
      photo: null,
      notes: null
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'return_select_task';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∑–∞–¥–∞—á–∏
    await handleReturnSelectTask(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É warehouse_return_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è return_select_task
async function handleReturnSelectTask(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    const tasks = await prisma.task.findMany({
      where: {
        status: 'COMPLETED',
        type: { in: ['INGREDIENTS', 'WATER'] }
      },
      include: {
        machine: {
          include: { location: true }
        },
        assignedUser: true
      },
      orderBy: { completedAt: 'desc' },
      take: 10 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –∑–∞–¥–∞—á–∞–º–∏
    });
    
    if (tasks.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤.');
      return await ctx.scene.leave();
    }
    
    const message = `
üì¶ –ü—Ä–∏—ë–º –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ç–æ–≤–∞—Ä—ã:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
    const buttons = tasks.map(task => {
      const locationName = task.machine.location ? task.machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
      const operatorName = `${task.assignedUser.firstName} ${task.assignedUser.lastName || ''}`;
      const completedDate = task.completedAt ? task.completedAt.toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      return [Markup.button.callback(
        `${getTaskTypeName(task.type)} - ${task.machine.internalCode} - ${operatorName} (${completedDate})`,
        `task_${task.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
scene.action(/^task_(.+)$/, async (ctx) => {
  try {
    const taskId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏
    ctx.session.returnData.taskId = taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        machine: {
          include: { location: true }
        },
        assignedUser: true
      }
    });
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleReturnSelectTask(ctx);
    }
    
    const locationName = task.machine.location ? task.machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
    const operatorName = `${task.assignedUser.firstName} ${task.assignedUser.lastName || ''}`;
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${getTaskTypeName(task.type)} - ${task.machine.internalCode} - ${operatorName}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—É–º–∫–∏
    ctx.session.state = 'return_select_bag';
    await handleReturnSelectBag(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è return_select_bag
async function handleReturnSelectBag(ctx) {
  try {
    const taskId = ctx.session.returnData.taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        assignedUser: true
      }
    });
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleReturnSelectTask(ctx);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É–º–æ–∫, –≤—ã–¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    const bags = await prisma.bag.findMany({
      where: {
        operatorId: task.assignedUser.id,
        status: 'DISPATCHED'
      },
      include: {
        machine: {
          include: { location: true }
        }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    if (bags.length === 0) {
      // –ï—Å–ª–∏ —Å—É–º–æ–∫ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—É–º–∫–µ
      await ctx.reply(`
‚ö†Ô∏è –î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ${task.assignedUser.firstName} ${task.assignedUser.lastName || ''} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö —Å—É–º–æ–∫.

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—É–º–∫–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.
`, Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å—É–º–∫–∏', 'continue_without_bag')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
      ]));
      return;
    }
    
    const message = `
üéí –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—É–º–∫–∞–º–∏
    const buttons = bags.map(bag => {
      const locationName = bag.machine.location ? bag.machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
      const createdDate = bag.createdAt.toLocaleDateString('ru-RU');
      
      return [Markup.button.callback(
        `–°—É–º–∫–∞ #${bag.id} - ${bag.machine.internalCode} (${createdDate})`,
        `bag_${bag.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–µ–∑ —Å—É–º–∫–∏" –∏ –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å—É–º–∫–∏', 'continue_without_bag')]);
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—É–º–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—É–º–∫–∏
scene.action(/^bag_(.+)$/, async (ctx) => {
  try {
    const bagId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å—É–º–∫–∏
    ctx.session.returnData.bagId = bagId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–∫–µ
    const bag = await prisma.bag.findUnique({
      where: { id: bagId },
      include: {
        machine: {
          include: { location: true }
        },
        bagHoppers: {
          include: { ingredient: true }
        }
      }
    });
    
    if (!bag) {
      await ctx.reply('‚ùå –°—É–º–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return await handleReturnSelectBag(ctx);
    }
    
    await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω–∞ —Å—É–º–∫–∞ #${bag.id} –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∞ ${bag.machine.internalCode}`);
    
    // –ï—Å–ª–∏ –≤ —Å—É–º–∫–µ –µ—Å—Ç—å –±—É–Ω–∫–µ—Ä—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤–µ—Å–æ–≤
    if (bag.bagHoppers && bag.bagHoppers.length > 0) {
      ctx.session.state = 'return_input_weights';
      await handleReturnInputWeights(ctx);
    } else {
      // –ï—Å–ª–∏ –±—É–Ω–∫–µ—Ä–æ–≤ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ
      ctx.session.state = 'return_photo';
      await handleReturnPhoto(ctx);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å—É–º–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ–∑ —Å—É–º–∫–∏
scene.action('continue_without_bag', async (ctx) => {
  try {
    await ctx.editMessageText('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—É–º–∫–µ.');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ
    ctx.session.state = 'return_photo';
    await handleReturnPhoto(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –±–µ–∑ —Å—É–º–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è return_input_weights
async function handleReturnInputWeights(ctx) {
  try {
    const bagId = ctx.session.returnData.bagId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–∫–µ –∏ –±—É–Ω–∫–µ—Ä–∞—Ö
    const bag = await prisma.bag.findUnique({
      where: { id: bagId },
      include: {
        bagHoppers: {
          include: { ingredient: true }
        }
      }
    });
    
    if (!bag || !bag.bagHoppers || bag.bagHoppers.length === 0) {
      await ctx.reply('‚ùå –í —Å—É–º–∫–µ –Ω–µ—Ç –±—É–Ω–∫–µ—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.');
      ctx.session.state = 'return_photo';
      return await handleReturnPhoto(ctx);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –±—É–Ω–∫–µ—Ä, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if (ctx.session.returnData.hopperWeights.length === 0) {
      await ctx.reply(`
‚öñÔ∏è –í–≤–æ–¥ –≤–µ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ –±—É–Ω–∫–µ—Ä–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—É–Ω–∫–µ—Ä
    const currentIndex = ctx.session.returnData.hopperWeights.length;
    
    if (currentIndex >= bag.bagHoppers.length) {
      // –í—Å–µ –±—É–Ω–∫–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ
      ctx.session.state = 'return_photo';
      return await handleReturnPhoto(ctx);
    }
    
    const currentHopper = bag.bagHoppers[currentIndex];
    
    await ctx.reply(`
üßÇ –ë—É–Ω–∫–µ—Ä —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º: ${currentHopper.ingredient.name} (${currentHopper.ingredient.code})
‚öñÔ∏è –ò—Å—Ö–æ–¥–Ω—ã–π –≤–µ—Å: ${currentHopper.weight} –≥

–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –±—É–Ω–∫–µ—Ä–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–≤ –≥—Ä–∞–º–º–∞—Ö):
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤–µ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤–µ—Å–æ–≤ –±—É–Ω–∫–µ—Ä–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –±—É–Ω–∫–µ—Ä–∞
scene.on('text', async (ctx) => {
  if (ctx.session.state === 'return_input_weights') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–µ—Å
      const weight = parseInt(ctx.message.text.trim());
      
      if (isNaN(weight) || weight < 0) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö).');
      }
      
      const bagId = ctx.session.returnData.bagId;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–∫–µ –∏ –±—É–Ω–∫–µ—Ä–∞—Ö
      const bag = await prisma.bag.findUnique({
        where: { id: bagId },
        include: {
          bagHoppers: {
            include: { ingredient: true }
          }
        }
      });
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—É–Ω–∫–µ—Ä
      const currentIndex = ctx.session.returnData.hopperWeights.length;
      const currentHopper = bag.bagHoppers[currentIndex];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å
      ctx.session.returnData.hopperWeights.push({
        hopperIndex: currentIndex,
        ingredientId: currentHopper.ingredientId,
        originalWeight: currentHopper.weight,
        returnedWeight: weight
      });
      
      await ctx.reply(`‚úÖ –í–µ—Å –±—É–Ω–∫–µ—Ä–∞ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º "${currentHopper.ingredient.name}" (${weight} –≥) —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±—É–Ω–∫–µ—Ä—É
      await handleReturnInputWeights(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –±—É–Ω–∫–µ—Ä–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  } else if (ctx.session.state === 'return_input_notes') {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
      ctx.session.returnData.notes = ctx.message.text.trim();
      
      await ctx.reply('‚úÖ –ü—Ä–∏–º–µ—á–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞
      ctx.session.state = 'return_finish';
      await handleReturnFinish(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è return_photo
async function handleReturnPhoto(ctx) {
  try {
    await ctx.reply(`
üì∏ –§–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.
`);
    
    // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'return_wait_photo';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
scene.on('photo', async (ctx) => {
  if (ctx.session.state === 'return_wait_photo') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
      const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
      ctx.session.returnData.photo = photoId;
      
      await ctx.reply('‚úÖ –§–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ.');
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
      await ctx.reply(`
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:
`);
      
      // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      ctx.session.state = 'return_input_notes';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
scene.command('skip', async (ctx) => {
  if (ctx.session.state === 'return_wait_photo') {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    await ctx.reply(`
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'return_input_notes';
  } else if (ctx.session.state === 'return_input_notes') {
    ctx.session.returnData.notes = null;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞
    ctx.session.state = 'return_finish';
    await handleReturnFinish(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è return_finish
async function handleReturnFinish(ctx) {
  try {
    const returnData = ctx.session.returnData;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    const task = await prisma.task.findUnique({
      where: { id: returnData.taskId },
      include: {
        machine: {
          include: { location: true }
        },
        assignedUser: true
      }
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    let confirmText = `
üì¶ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞

üîπ –ó–∞–¥–∞—á–∞: ${getTaskTypeName(task.type)} - ${task.machine.internalCode}
üîπ –û–ø–µ—Ä–∞—Ç–æ—Ä: ${task.assignedUser.firstName} ${task.assignedUser.lastName || ''}
`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞
    if (returnData.bagId) {
      const bag = await prisma.bag.findUnique({
        where: { id: returnData.bagId }
      });
      
      confirmText += `üîπ –°—É–º–∫–∞: #${bag.id}\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–Ω–∫–µ—Ä–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (returnData.hopperWeights && returnData.hopperWeights.length > 0) {
      confirmText += '\nüßÇ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –±—É–Ω–∫–µ—Ä—ã:\n';
      
      for (const hopperWeight of returnData.hopperWeights) {
        const ingredient = await prisma.ingredient.findUnique({
          where: { id: hopperWeight.ingredientId }
        });
        
        confirmText += `- ${ingredient.name}: ${hopperWeight.returnedWeight} –≥ (–∏—Å—Ö–æ–¥–Ω—ã–π –≤–µ—Å: ${hopperWeight.originalWeight} –≥)\n`;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (returnData.notes) {
      confirmText += `\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${returnData.notes}\n`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_return')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.reply(confirmText, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
scene.action('confirm_return', async (ctx) => {
  try {
    const returnData = ctx.session.returnData;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const warehouseReturn = await prisma.warehouseReturn.create({
      data: {
        taskId: returnData.taskId,
        bagId: returnData.bagId,
        photo: returnData.photo,
        notes: returnData.notes,
        userId: ctx.session.user.id,
        timestamp: new Date()
      }
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –±—É–Ω–∫–µ—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
    if (returnData.hopperWeights && returnData.hopperWeights.length > 0) {
      for (const hopperWeight of returnData.hopperWeights) {
        await prisma.returnedHopper.create({
          data: {
            returnId: warehouseReturn.id,
            ingredientId: hopperWeight.ingredientId,
            originalWeight: hopperWeight.originalWeight,
            returnedWeight: hopperWeight.returnedWeight
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
        const usedWeight = hopperWeight.originalWeight - hopperWeight.returnedWeight;
        
        if (usedWeight > 0) {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
          const ingredientInventory = await prisma.ingredientInventory.findFirst({
            where: { ingredientId: hopperWeight.ingredientId }
          });
          
          if (ingredientInventory) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (–≤—ã—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å)
            await prisma.ingredientInventory.update({
              where: { id: ingredientInventory.id },
              data: { 
                weight: ingredientInventory.weight - usedWeight,
                lastUpdated: new Date()
              }
            });
          }
        }
      }
    }
    
    // –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Å—É–º–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ —Å—Ç–∞—Ç—É—Å
    if (returnData.bagId) {
      await prisma.bag.update({
        where: { id: returnData.bagId },
        data: { status: 'RETURNED' }
      });
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–µ–º–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
    await ctx.editMessageText(`
‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!

üîπ ID: ${warehouseReturn.id}
üîπ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.
`);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—è—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–∑–≤—Ä–∞—Ç –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üì¶ –ü—Ä–∏–Ω—è—Ç—å –µ—â–µ –≤–æ–∑–≤—Ä–∞—Ç', 'return_another')],
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
    ]);
    
    await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –≤–æ–∑–≤—Ä–∞—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –≤–æ–∑–≤—Ä–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –ü—Ä–∏–µ–º –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.');
  await ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–µ–º–∞ –µ—â–µ –æ–¥–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
scene.action('return_another', async (ctx) => {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
  ctx.session.returnData = {
    taskId: null,
    bagId: null,
    hopperWeights: [],
    photo: null,
    notes: null
  };
  
  ctx.session.state = 'return_select_task';
  await ctx.editMessageText('üì¶ –ü—Ä–∏–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞...');
  await handleReturnSelectTask(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scene.action('back_to_menu', async (ctx) => {
  await ctx.editMessageText('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
  await ctx.scene.enter('main_menu_fsm');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
function getTaskTypeName(type) {
  const taskTypes = {
    'INGREDIENTS': 'üîÑ –ó–∞–º–µ–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤',
    'WATER': 'üíß –ó–∞–º–µ–Ω–∞ –≤–æ–¥—ã',
    'CLEANING': 'üßπ –ß–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞',
    'REPAIR': 'üîß –†–µ–º–æ–Ω—Ç',
    'CASH': 'üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è'
  };
  
  return taskTypes[type] || type;
}

module.exports = scene;
