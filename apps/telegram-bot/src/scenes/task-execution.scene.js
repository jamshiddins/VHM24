/**
 * FSM: task_execution_fsm
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É.
 * –†–æ–ª–∏: –û–ø–µ—Ä–∞—Ç–æ—Ä, –¢–µ—Ö–Ω–∏–∫.
 * –°–æ—Å—Ç–æ—è–Ω–∏—è:
 *   - task_list_assigned: —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 *   - task_view_details: –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
 *   - task_start: –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 *   - task_photo_before: —Ñ–æ—Ç–æ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 *   - task_input_weights: –≤–≤–æ–¥ –≤–µ—Å–æ–≤ (–¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤)
 *   - task_input_units: –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–¥–ª—è –≤–æ–¥—ã)
 *   - task_photo_after: —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 *   - task_finish: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
 *   - task_error_report: –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
 */

const { Scenes, Markup } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const states = require('../states');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new Scenes.BaseScene('task_execution_fsm');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
scene.use(async (ctx, next) => {
  console.log(`[task_execution_fsm] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${ctx.session.state || '–Ω–∞—á–∞–ª–æ'}`);
  return next();
});

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scene.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    ctx.session.executionData = {
      taskId: null,
      photoBefore: null,
      photoAfter: null,
      weights: [],
      units: [],
      currentChecklistItemIndex: 0,
      checklistCompleted: false
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'task_list_assigned';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    await handleTaskListAssigned(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É task_execution_fsm:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_list_assigned
async function handleTaskListAssigned(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.session.user.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    const tasks = await prisma.task.findMany({
      where: {
        assignedUserId: userId,
        status: { in: ['ASSIGNED', 'IN_PROGRESS'] }
      },
      include: {
        machine: {
          include: { location: true }
        }
      },
      orderBy: [
        { status: 'asc' },
        { dueDate: 'asc' }
      ]
    });
    
    if (tasks.length === 0) {
      await ctx.reply('üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.');
      return await ctx.scene.leave();
    }
    
    const message = `
üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:

–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
    const buttons = tasks.map(task => {
      const statusIcon = task.status === 'ASSIGNED' ? '‚è≥' : 'üîÑ';
      const locationName = task.machine.location ? task.machine.location.name : '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏';
      
      return [Markup.button.callback(
        `${statusIcon} ${getTaskTypeName(task.type)} - ${task.machine.internalCode} (${locationName})`,
        `task_${task.id}`
      )];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
scene.action(/^task_(.+)$/, async (ctx) => {
  try {
    const taskId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏
    ctx.session.executionData.taskId = taskId;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
    ctx.session.state = 'task_view_details';
    await handleTaskViewDetails(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_view_details
async function handleTaskViewDetails(ctx) {
  try {
    const taskId = ctx.session.executionData.taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        machine: {
          include: { location: true }
        },
        assignedUser: true,
        createdBy: true,
        checklist: {
          include: {
            items: {
              orderBy: { order: 'asc' }
            }
          }
        },
        taskIngredients: {
          include: { ingredient: true }
        },
        taskWaters: {
          include: { waterType: true }
        }
      }
    });
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      ctx.session.state = 'task_list_assigned';
      return await handleTaskListAssigned(ctx);
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
    let detailsText = `
üìã –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:

üîπ –¢–∏–ø: ${getTaskTypeName(task.type)}
üîπ –ê–≤—Ç–æ–º–∞—Ç: ${task.machine.internalCode} - ${task.machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}
üîπ –°—Ç–∞—Ç—É—Å: ${getTaskStatusName(task.status)}
üîπ –°—Ä–æ–∫: ${task.dueDate.toLocaleDateString('ru-RU')}
üîπ –°–æ–∑–¥–∞–Ω–∞: ${task.createdAt.toLocaleDateString('ru-RU')} (${task.createdBy.firstName} ${task.createdBy.lastName || ''})
`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (task.taskIngredients && task.taskIngredients.length > 0) {
      detailsText += '\nüßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –∑–∞–º–µ–Ω—ã:\n';
      task.taskIngredients.forEach(ti => {
        detailsText += `- ${ti.ingredient.name} (${ti.ingredient.code})\n`;
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (task.taskWaters && task.taskWaters.length > 0) {
      detailsText += '\nüíß –í–æ–¥–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã:\n';
      task.taskWaters.forEach(tw => {
        detailsText += `- ${tw.waterType.name} (${tw.waterType.volume} –ª)\n`;
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (task.description) {
      detailsText += `\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫-–ª–∏—Å—Ç–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (task.checklist) {
      detailsText += `\nüìù –ß–µ–∫-–ª–∏—Å—Ç: ${task.checklist.items.length} –ø—É–Ω–∫—Ç–æ–≤\n`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', 'start_execution')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    
    await ctx.editMessageText(detailsText, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
scene.action('start_execution', async (ctx) => {
  try {
    const taskId = ctx.session.executionData.taskId;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    await prisma.task.update({
      where: { id: taskId },
      data: { status: 'IN_PROGRESS' }
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        checklist: {
          include: {
            items: {
              orderBy: { order: 'asc' }
            }
          }
        }
      }
    });
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      ctx.session.state = 'task_list_assigned';
      return await handleTaskListAssigned(ctx);
    }
    
    await ctx.editMessageText(`‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    ctx.session.state = 'task_photo_before';
    await handleTaskPhotoBefore(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_photo_before
async function handleTaskPhotoBefore(ctx) {
  try {
    await ctx.reply(`
üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –î–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞/–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤/–≤–æ–¥—ã.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
`, Markup.inlineKeyboard([
      [Markup.button.callback('‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_photo_before')]
    ]));
    
    // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
scene.action('skip_photo_before', async (ctx) => {
  try {
    await ctx.editMessageText('‚è© –§–æ—Ç–æ –î–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    const task = await prisma.task.findUnique({
      where: { id: ctx.session.executionData.taskId }
    });
    
    if (task.type === 'INGREDIENTS') {
      ctx.session.state = 'task_input_weights';
      await handleTaskInputWeights(ctx);
    } else if (task.type === 'WATER') {
      ctx.session.state = 'task_input_units';
      await handleTaskInputUnits(ctx);
    } else if (task.checklist) {
      ctx.session.state = 'task_checklist';
      await handleTaskChecklist(ctx);
    } else {
      ctx.session.state = 'task_photo_after';
      await handleTaskPhotoAfter(ctx);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Ñ–æ—Ç–æ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
scene.on('photo', async (ctx) => {
  if (ctx.session.state === 'task_photo_before') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
      const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
      ctx.session.executionData.photoBefore = photoId;
      
      await ctx.reply('‚úÖ –§–æ—Ç–æ –î–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
      const task = await prisma.task.findUnique({
        where: { id: ctx.session.executionData.taskId }
      });
      
      if (task.type === 'INGREDIENTS') {
        ctx.session.state = 'task_input_weights';
        await handleTaskInputWeights(ctx);
      } else if (task.type === 'WATER') {
        ctx.session.state = 'task_input_units';
        await handleTaskInputUnits(ctx);
      } else if (task.checklist) {
        ctx.session.state = 'task_checklist';
        await handleTaskChecklist(ctx);
      } else {
        ctx.session.state = 'task_photo_after';
        await handleTaskPhotoAfter(ctx);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_input_weights
async function handleTaskInputWeights(ctx) {
  try {
    const taskId = ctx.session.executionData.taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        taskIngredients: {
          include: { ingredient: true }
        }
      }
    });
    
    if (!task || !task.taskIngredients || task.taskIngredients.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.');
      
      if (task.checklist) {
        ctx.session.state = 'task_checklist';
        return await handleTaskChecklist(ctx);
      } else {
        ctx.session.state = 'task_photo_after';
        return await handleTaskPhotoAfter(ctx);
      }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if (ctx.session.executionData.weights.length === 0) {
      await ctx.reply(`
‚öñÔ∏è –í–≤–æ–¥ –≤–µ—Å–æ–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ (–≤ –≥—Ä–∞–º–º–∞—Ö) –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã.
`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
    const currentIndex = ctx.session.executionData.weights.length;
    
    if (currentIndex >= task.taskIngredients.length) {
      // –í—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      if (task.checklist) {
        ctx.session.state = 'task_checklist';
        return await handleTaskChecklist(ctx);
      } else {
        ctx.session.state = 'task_photo_after';
        return await handleTaskPhotoAfter(ctx);
      }
    }
    
    const currentIngredient = task.taskIngredients[currentIndex].ingredient;
    
    await ctx.reply(`
üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ${currentIngredient.name} (${currentIngredient.code})

–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤–µ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤–µ—Å–æ–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
scene.on('text', async (ctx) => {
  if (ctx.session.state === 'task_input_weights') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–µ—Å
      const weight = parseInt(ctx.message.text.trim());
      
      if (isNaN(weight) || weight < 0) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö).');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö
      const task = await prisma.task.findUnique({
        where: { id: ctx.session.executionData.taskId },
        include: {
          taskIngredients: {
            include: { ingredient: true }
          }
        }
      });
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
      const currentIndex = ctx.session.executionData.weights.length;
      const currentIngredient = task.taskIngredients[currentIndex].ingredient;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å
      ctx.session.executionData.weights.push({
        ingredientId: currentIngredient.id,
        weight
      });
      
      await ctx.reply(`‚úÖ –í–µ—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ ${currentIngredient.name} (${weight} –≥) —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É –∏–ª–∏ —à–∞–≥—É
      await handleTaskInputWeights(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  } else if (ctx.session.state === 'task_input_units') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const units = parseInt(ctx.message.text.trim());
      
      if (isNaN(units) || units < 0) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫).');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏ —Ç–∏–ø–∞—Ö –≤–æ–¥—ã
      const task = await prisma.task.findUnique({
        where: { id: ctx.session.executionData.taskId },
        include: {
          taskWaters: {
            include: { waterType: true }
          }
        }
      });
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –≤–æ–¥—ã
      const currentIndex = ctx.session.executionData.units.length;
      const currentWaterType = task.taskWaters[currentIndex].waterType;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      ctx.session.executionData.units.push({
        waterTypeId: currentWaterType.id,
        units
      });
      
      await ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ ${currentWaterType.name} (${units} —à—Ç.) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–∏–ø—É –≤–æ–¥—ã –∏–ª–∏ —à–∞–≥—É
      await handleTaskInputUnits(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ç—ã–ª–æ–∫:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_input_units
async function handleTaskInputUnits(ctx) {
  try {
    const taskId = ctx.session.executionData.taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏ —Ç–∏–ø–∞—Ö –≤–æ–¥—ã
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        taskWaters: {
          include: { waterType: true }
        }
      }
    });
    
    if (!task || !task.taskWaters || task.taskWaters.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–∏–ø—ã –≤–æ–¥—ã –¥–ª—è –∑–∞–¥–∞—á–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.');
      
      if (task.checklist) {
        ctx.session.state = 'task_checklist';
        return await handleTaskChecklist(ctx);
      } else {
        ctx.session.state = 'task_photo_after';
        return await handleTaskPhotoAfter(ctx);
      }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–∏–ø –≤–æ–¥—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if (ctx.session.executionData.units.length === 0) {
      await ctx.reply(`
üî¢ –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ç—ã–ª–æ–∫

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≤–æ–¥—ã –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã.
`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –≤–æ–¥—ã
    const currentIndex = ctx.session.executionData.units.length;
    
    if (currentIndex >= task.taskWaters.length) {
      // –í—Å–µ —Ç–∏–ø—ã –≤–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      if (task.checklist) {
        ctx.session.state = 'task_checklist';
        return await handleTaskChecklist(ctx);
      } else {
        ctx.session.state = 'task_photo_after';
        return await handleTaskPhotoAfter(ctx);
      }
    }
    
    const currentWaterType = task.taskWaters[currentIndex].waterType;
    
    await ctx.reply(`
üíß –¢–∏–ø –≤–æ–¥—ã: ${currentWaterType.name} (${currentWaterType.volume} –ª)

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫:
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ç—ã–ª–æ–∫:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_checklist
async function handleTaskChecklist(ctx) {
  try {
    const taskId = ctx.session.executionData.taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏ —á–µ–∫-–ª–∏—Å—Ç–µ
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        checklist: {
          include: {
            items: {
              orderBy: { order: 'asc' }
            }
          }
        }
      }
    });
    
    if (!task || !task.checklist || !task.checklist.items || task.checklist.items.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.');
      ctx.session.state = 'task_photo_after';
      return await handleTaskPhotoAfter(ctx);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if (ctx.session.executionData.currentChecklistItemIndex === 0) {
      await ctx.reply(`
üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.
`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞
    const currentIndex = ctx.session.executionData.currentChecklistItemIndex;
    
    if (currentIndex >= task.checklist.items.length) {
      // –í—Å–µ –ø—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      ctx.session.executionData.checklistCompleted = true;
      ctx.session.state = 'task_photo_after';
      return await handleTaskPhotoAfter(ctx);
    }
    
    const currentItem = task.checklist.items[currentIndex];
    
    await ctx.reply(`
üìã –ü—É–Ω–∫—Ç ${currentIndex + 1}/${task.checklist.items.length}:

${currentItem.text}
`, Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', `checklist_done_${currentItem.id}`)],
      [Markup.button.callback('‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', `checklist_skip_${currentItem.id}`)]
    ]));
    
    // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞
scene.action(/^checklist_done_(.+)$/, async (ctx) => {
  try {
    const itemId = ctx.match[1];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
    await prisma.checklistItem.update({
      where: { id: itemId },
      data: { status: 'COMPLETED' }
    });
    
    await ctx.editMessageText(`‚úÖ –ü—É–Ω–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
    ctx.session.executionData.currentChecklistItemIndex++;
    await handleTaskChecklist(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

scene.action(/^checklist_skip_(.+)$/, async (ctx) => {
  try {
    const itemId = ctx.match[1];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
    await prisma.checklistItem.update({
      where: { id: itemId },
      data: { status: 'SKIPPED' }
    });
    
    await ctx.editMessageText(`‚è© –ü—É–Ω–∫—Ç –ø—Ä–æ–ø—É—â–µ–Ω.`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
    ctx.session.executionData.currentChecklistItemIndex++;
    await handleTaskChecklist(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_photo_after
async function handleTaskPhotoAfter(ctx) {
  try {
    await ctx.reply(`
üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ü–û–°–õ–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
`, Markup.inlineKeyboard([
      [Markup.button.callback('‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_photo_after')]
    ]));
    
    // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
scene.action('skip_photo_after', async (ctx) => {
  try {
    await ctx.editMessageText('‚è© –§–æ—Ç–æ –ü–û–°–õ–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏
    ctx.session.state = 'task_finish';
    await handleTaskFinish(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
scene.on('photo', async (ctx) => {
  if (ctx.session.state === 'task_photo_after') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
      const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
      ctx.session.executionData.photoAfter = photoId;
      
      await ctx.reply('‚úÖ –§–æ—Ç–æ –ü–û–°–õ–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ.');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏
      ctx.session.state = 'task_finish';
      await handleTaskFinish(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_finish
async function handleTaskFinish(ctx) {
  try {
    const taskId = ctx.session.executionData.taskId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    const task = await prisma.task.findUnique({
      where: { id: taskId },
      include: {
        machine: {
          include: { location: true }
        },
        checklist: true
      }
    });
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      ctx.session.state = 'task_list_assigned';
      return await handleTaskListAssigned(ctx);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ —á–µ–∫-–ª–∏—Å—Ç (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    let checklistCompleted = true;
    
    if (task.checklist) {
      const checklistItems = await prisma.checklistItem.findMany({
        where: { checklistId: task.checklist.id }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã
      checklistCompleted = checklistItems.every(item => 
        item.status === 'COMPLETED' || item.status === 'SKIPPED'
      );
      
      if (!checklistCompleted) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤—Å–µ –ø—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —á–µ–∫-–ª–∏—Å—Ç.');
        ctx.session.state = 'task_checklist';
        return await handleTaskChecklist(ctx);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ–∫-–ª–∏—Å—Ç–∞
      await prisma.checklist.update({
        where: { id: task.checklist.id },
        data: { status: 'COMPLETED' }
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    const executionData = ctx.session.executionData;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    const taskExecution = await prisma.taskExecution.create({
      data: {
        taskId,
        executorId: ctx.session.user.id,
        photoBefore: executionData.photoBefore,
        photoAfter: executionData.photoAfter,
        completedAt: new Date()
      }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–∞—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (executionData.weights && executionData.weights.length > 0) {
      for (const weightData of executionData.weights) {
        await prisma.ingredientWeight.create({
          data: {
            taskExecutionId: taskExecution.id,
            ingredientId: weightData.ingredientId,
            weight: weightData.weight
          }
        });
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (executionData.units && executionData.units.length > 0) {
      for (const unitData of executionData.units) {
        await prisma.waterUnit.create({
          data: {
            taskExecutionId: taskExecution.id,
            waterTypeId: unitData.waterTypeId,
            units: unitData.units
          }
        });
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
    await prisma.task.update({
      where: { id: taskId },
      data: { status: 'COMPLETED' }
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∑–∞–¥–∞—á–∏
      const manager = await prisma.user.findUnique({
        where: { id: task.createdById },
        select: { telegramId: true }
      });
      
      if (manager && manager.telegramId) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notificationText = `
‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

üîπ –¢–∏–ø: ${getTaskTypeName(task.type)}
üîπ –ê–≤—Ç–æ–º–∞—Ç: ${task.machine.internalCode} - ${task.machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}
üîπ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${ctx.session.user.firstName} ${ctx.session.user.lastName || ''}
üîπ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}
`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await ctx.telegram.sendMessage(manager.telegramId, notificationText);
      }
    } catch (notificationError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É:', notificationError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    await ctx.reply(`
‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

üîπ –¢–∏–ø: ${getTaskTypeName(task.type)}
üîπ –ê–≤—Ç–æ–º–∞—Ç: ${task.machine.internalCode} - ${task.machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}
üîπ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}

–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.
`);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìã –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á', 'back_to_tasks')],
      [Markup.button.callback('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
    ]);
    
    await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
scene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  await ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
scene.action('back_to_tasks', async (ctx) => {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
  ctx.session.executionData = {
    taskId: null,
    photoBefore: null,
    photoAfter: null,
    weights: [],
    units: [],
    currentChecklistItemIndex: 0,
    checklistCompleted: false
  };
  
  ctx.session.state = 'task_list_assigned';
  await ctx.editMessageText('üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á...');
  await handleTaskListAssigned(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scene.action('back_to_menu', async (ctx) => {
  await ctx.editMessageText('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
  await ctx.scene.enter('main_menu_fsm');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è task_error_report
async function handleTaskErrorReport(ctx) {
  try {
    await ctx.reply(`
‚ö†Ô∏è –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.
–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏.
`);
    
    // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.state = 'task_error_text';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await ctx.scene.leave();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏
scene.on('text', async (ctx) => {
  if (ctx.session.state === 'task_error_text') {
    try {
      const errorText = ctx.message.text.trim();
      
      if (!errorText) {
        return await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.');
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
      await prisma.taskError.create({
        data: {
          taskId: ctx.session.executionData.taskId,
          userId: ctx.session.user.id,
          description: errorText,
          createdAt: new Date()
        }
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
      try {
        const task = await prisma.task.findUnique({
          where: { id: ctx.session.executionData.taskId },
          include: {
            machine: {
              include: { location: true }
            },
            createdBy: true
          }
        });
        
        if (task && task.createdBy && task.createdBy.telegramId) {
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          const notificationText = `
‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!

üîπ –¢–∏–ø: ${getTaskTypeName(task.type)}
üîπ –ê–≤—Ç–æ–º–∞—Ç: ${task.machine.internalCode} - ${task.machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}
üîπ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${ctx.session.user.firstName} ${ctx.session.user.lastName || ''}
üîπ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:
${errorText}
`;
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          await ctx.telegram.sendMessage(task.createdBy.telegramId, notificationText);
        }
      } catch (notificationError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ:', notificationError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      }
      
      await ctx.reply(`
‚úÖ –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.

–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.
`);
      
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á', 'back_to_tasks')],
        [Markup.button.callback('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
      ]);
      
      await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
function getTaskTypeName(type) {
  const taskTypes = {
    'INGREDIENTS': 'üîÑ –ó–∞–º–µ–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤',
    'WATER': 'üíß –ó–∞–º–µ–Ω–∞ –≤–æ–¥—ã',
    'CLEANING': 'üßπ –ß–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞',
    'REPAIR': 'üîß –†–µ–º–æ–Ω—Ç',
    'CASH': 'üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è'
  };
  
  return taskTypes[type] || type;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
function getTaskStatusName(status) {
  const taskStatuses = {
    'CREATED': 'üÜï –°–æ–∑–¥–∞–Ω–∞',
    'ASSIGNED': '‚è≥ –ù–∞–∑–Ω–∞—á–µ–Ω–∞',
    'IN_PROGRESS': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    'COMPLETED': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞',
    'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
  };
  
  return taskStatuses[status] || status;
}

module.exports = scene;
