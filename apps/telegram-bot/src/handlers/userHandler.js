const telegramService = require('../../../../backend/src/services/telegramService');

class UserHandler {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  async handleStart(ctx) {
    try {
      const user = await telegramService.upsertUser(ctx.from);
      
      const welcomeMessage = `
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VendHub!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} ${user.lastName || ''}
üé≠ –†–æ–ª—å: ${this.getRoleText(user.role)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
`;
      
      await ctx.reply(welcomeMessage, this.getMainKeyboard(user.role));
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      await telegramService.logAction(user.id, 'START_COMMAND');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleStart:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ä–æ–ª–∏
  getMainKeyboard(role) {
    const keyboards = {
      ADMIN: [
        ['üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üìä –û—Ç—á–µ—Ç—ã'],
        ['üìã –ó–∞–¥–∞—á–∏', 'üè≠ –ê–≤—Ç–æ–º–∞—Ç—ã'],
        ['üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
      ],
      MANAGER: [
        ['üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', 'üìä –û—Ç—á–µ—Ç—ã'],
        ['üè≠ –ê–≤—Ç–æ–º–∞—Ç—ã', 'üí∞ –§–∏–Ω–∞–Ω—Å—ã'],
        ['üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏']
      ],
      WAREHOUSE: [
        ['üì¶ –°–∫–ª–∞–¥', 'üéí –°—É–º–∫–∏'],
        ['üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', 'üìä –û—Å—Ç–∞—Ç–∫–∏']
      ],
      OPERATOR: [
        ['üó∫Ô∏è –ú–æ–π –º–∞—Ä—à—Ä—É—Ç', 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏'],
        ['üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è', 'üßπ –ß–∏—Å—Ç–∫–∞']
      ],
      TECHNICIAN: [
        ['üîß –†–µ–º–æ–Ω—Ç', 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏'],
        ['üìä –û—Ç—á–µ—Ç—ã']
      ],
      DRIVER: [
        ['üöö –ú–∞—Ä—à—Ä—É—Ç—ã', '‚õΩ –¢–æ–ø–ª–∏–≤–æ'],
        ['üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏']
      ]
    };
    
    return {
      keyboard: keyboards[role] || keyboards.OPERATOR,
      resize_keyboard: true,
      one_time_keyboard: false
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–æ–ª–∏
  getRoleText(role) {
    const roles = {
      ADMIN: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      MANAGER: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
      WAREHOUSE: '–°–∫–ª–∞–¥',
      OPERATOR: '–û–ø–µ—Ä–∞—Ç–æ—Ä',
      TECHNICIAN: '–¢–µ—Ö–Ω–∏–∫',
      DRIVER: '–í–æ–¥–∏—Ç–µ–ª—å'
    };
    
    return roles[role] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–¥–∞—á–∏"
  async handleMyTasks(ctx) {
    try {
      const user = await telegramService.getUserByTelegramId(ctx.from.id.toString());
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      const tasks = await telegramService.getUserTasks(user.id, 'ASSIGNED');
      
      if (tasks.length === 0) {
        return await ctx.reply('üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á');
      }
      
      let message = 'üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n';
      
      tasks.forEach((task, index) => {
        message += `${index + 1}. ${task.title}\n`;
        message += `   üè≠ ${task.machine.internalNumber} - ${task.machine.location?.name || '–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏'}\n`;
        message += `   üìÖ –°—Ä–æ–∫: ${task.dueDate ? new Date(task.dueDate).toLocaleDateString() : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
      });
      
      await ctx.reply(message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleMyTasks:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á');
    }
  }
}

module.exports = new UserHandler();