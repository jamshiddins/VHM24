
const { Telegraf, Scenes, session } = require('telegraf');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
bot.use(async (ctx, next) => {
  const telegramId = ctx.from.id.toString();
  
  try {
    const user = await prisma.user.findUnique({
      where: { telegramId }
    });
    
    if (!user) {
      return ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
    
    if (user.status !== 'ACTIVE') {
      return ctx.reply('‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
    
    ctx.user = user;
    return next();
  } catch (error) {
    console.error('Auth error:', error);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const user = ctx.user;
  
  const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VendHub!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name}
üîë –†–æ–ª—å: ${user.role}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

  const keyboard = getMainKeyboard(user.role);
  
  return ctx.reply(welcomeMessage, keyboard);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —Ä–æ–ª–∏
function getMainKeyboard(role) {
  const keyboards = {
    ADMIN: [
      ['üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üè≠ –ê–≤—Ç–æ–º–∞—Ç—ã'],
      ['üìã –ó–∞–¥–∞—á–∏', 'üìä –û—Ç—á–µ—Ç—ã'],
      ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üìù –õ–æ–≥–∏']
    ],
    MANAGER: [
      ['üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', 'üìä –û—Ç—á–µ—Ç—ã'],
      ['üè≠ –ê–≤—Ç–æ–º–∞—Ç—ã', 'üì¶ –°–∫–ª–∞–¥'],
      ['üí∞ –§–∏–Ω–∞–Ω—Å—ã']
    ],
    WAREHOUSE: [
      ['üì¶ –ü—Ä–∏–µ–º–∫–∞', 'üì§ –í—ã–¥–∞—á–∞'],
      ['üéí –°—É–º–∫–∏', '‚öñÔ∏è –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ'],
      ['üìã –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å']
    ],
    OPERATOR: [
      ['üó∫Ô∏è –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã', 'üìã –ó–∞–¥–∞—á–∏'],
      ['üîÑ –ó–∞–º–µ–Ω–∞ –±—É–Ω–∫–µ—Ä–æ–≤', 'üíß –ó–∞–º–µ–Ω–∞ –≤–æ–¥—ã'],
      ['üßΩ –ß–∏—Å—Ç–∫–∞', 'üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è']
    ],
    TECHNICIAN: [
      ['üîß –†–µ–º–æ–Ω—Ç', 'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'],
      ['üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏']
    ]
  };
  
  return {
    reply_markup: {
      keyboard: keyboards[role] || keyboards.OPERATOR,
      resize_keyboard: true
    }
  };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
bot.hears('üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', async (ctx) => {
  const user = ctx.user;
  
  try {
    const tasks = await prisma.task.findMany({
      where: {
        assignedUserId: user.id,
        status: { in: ['CREATED', 'ASSIGNED', 'IN_PROGRESS'] }
      },
      include: {
        machine: { include: { location: true } }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    if (tasks.length === 0) {
      return ctx.reply('üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á');
    }
    
    let message = 'üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n';
    
    tasks.forEach((task, index) => {
      message += `${index + 1}. ${task.type} - ${task.machine.internalCode}\n`;
      message += `   üìç ${task.machine.location.name}\n`;
      message += `   üìÖ ${task.createdAt.toLocaleDateString()}\n\n`;
    });
    
    return ctx.reply(message);
  } catch (error) {
    console.error('Error fetching tasks:', error);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if (process.env.NODE_ENV !== 'test') {
  bot.launch();
  
}

module.exports = bot;
