require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const winston = require('winston');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'bot.log' })
  ]
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  telegramToken: process.env.TELEGRAM_BOT_TOKEN,
  apiUrl: process.env.API_URL || 'http://localhost:8000/api/v1',
  adminIds: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',') : []
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(config.telegramToken, { polling: true });

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Redis)
const userStates = new Map();
const userData = new Map();

// FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
const FSM_STATES = {
  START: 'start',
  REGISTRATION: 'registration',
  MAIN_MENU: 'main_menu',
  WAREHOUSE_MENU: 'warehouse_menu',
  MANAGER_MENU: 'manager_menu'
};

// –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const USER_ROLES = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  WAREHOUSE: 'WAREHOUSE',
  OPERATOR: 'OPERATOR',
  TECHNICIAN: 'TECHNICIAN',
  DRIVER: 'DRIVER'
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FSM (–±–µ–∑ Redis)
class FSMManager {
  static getUserState(userId) {
    return userStates.get(userId) || FSM_STATES.START;
  }
  
  static setUserState(userId, state, data = {}) {
    userStates.set(userId, state);
    if (Object.keys(data).length > 0) {
      userData.set(userId, { ...userData.get(userId), ...data });
    }
  }
  
  static getUserData(userId) {
    return userData.get(userId) || {};
  }
  
  static clearUserData(userId) {
    userData.delete(userId);
  }
}

// API –∫–ª–∏–µ–Ω—Ç
class APIClient {
  static async request(method, endpoint, data = null, userId = null) {
    try {
      const requestConfig = {
        method,
        url: `${config.apiUrl}${endpoint}`,
        headers: {
          'Content-Type': 'application/json'
        }
      };
      
      if (data) {
        requestConfig.data = data;
      }
      
      const response = await axios(requestConfig);
      return response.data;
    } catch (error) {
      logger.error('API request failed', { 
        method, 
        endpoint, 
        error: error.message,
        userId 
      });
      throw error;
    }
  }
  
  static async testConnection() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π health endpoint
      const response = await axios.get(`${config.apiUrl.replace('/api/v1', '')}/health`);
      return response.data.status === 'ok';
    } catch (error) {
      return false;
    }
  }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const keyboards = {
  mainMenu: (userRoles) => {
    const keyboard = [];
    
    if (userRoles.includes(USER_ROLES.ADMIN)) {
      keyboard.push([{ text: 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'admin_menu' }]);
    }
    
    if (userRoles.includes(USER_ROLES.MANAGER)) {
      keyboard.push([{ text: 'üìä –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', callback_data: 'manager_menu' }]);
    }
    
    if (userRoles.includes(USER_ROLES.WAREHOUSE)) {
      keyboard.push([{ text: 'üì¶ –°–∫–ª–∞–¥', callback_data: 'warehouse_menu' }]);
    }
    
    if (userRoles.includes(USER_ROLES.OPERATOR)) {
      keyboard.push([{ text: 'üéÆ –û–ø–µ—Ä–∞—Ü–∏–∏', callback_data: 'operator_menu' }]);
    }
    
    keyboard.push([{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]);
    
    return {
      reply_markup: {
        inline_keyboard: keyboard
      }
    };
  },
  
  warehouseMenu: {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üì• –ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'warehouse_receive' }],
        [{ text: 'üóÇÔ∏è –ë—É–Ω–∫–µ—Ä—ã', callback_data: 'warehouse_bunkers' }],
        [{ text: 'üìã –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è', callback_data: 'warehouse_inventory' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
      ]
    }
  },
  
  managerMenu: {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üóÉÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∏', callback_data: 'manager_cards' }],
        [{ text: 'üìä –û—Ç—á—ë—Ç—ã', callback_data: 'manager_reports' }],
        [{ text: 'üìã –ó–∞–¥–∞—á–∏', callback_data: 'manager_tasks' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
      ]
    }
  },
  
  backToMain: {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    logger.info('User started bot', { userId, chatId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    const apiConnected = await APIClient.testConnection();
    
    if (!apiConnected) {
      await bot.sendMessage(chatId, 
        '‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n' +
        '–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
      return;
    }
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = {
      id: userId.toString(),
      name: msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      roles: [USER_ROLES.OPERATOR, USER_ROLES.WAREHOUSE] // –î–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    };
    
    FSMManager.setUserState(userId, FSM_STATES.MAIN_MENU);
    userData.set(userId, testUser);
    
    await bot.sendMessage(chatId, 
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VHM24, ${testUser.name}! üëã\n\n` +
      `üéØ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ Redis)\n` +
      `–í–∞—à–∏ —Ä–æ–ª–∏: ${testUser.roles.join(', ')}\n\n` +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:',
      keyboards.mainMenu(testUser.roles)
    );
    
  } catch (error) {
    logger.error('Error in /start command', { error: error.message, userId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const helpText = `
ü§ñ *VHM24 Telegram Bot - –°–ø—Ä–∞–≤–∫–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

*–†–æ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏:*

üì¶ *–°–∫–ª–∞–¥:*
‚Ä¢ –ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–Ω–∫–µ—Ä–∞–º–∏
‚Ä¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è

üìä *–ú–µ–Ω–µ–¥–∂–µ—Ä:*
‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –û—Ç—á—ë—Ç—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏

üéÆ *–û–ø–µ—Ä–∞—Ç–æ—Ä:*
‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è

‚ö†Ô∏è *–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Redis –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π.

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @vhm24_support
  `;
  
  await bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
});

bot.onText(/\/menu/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = userData.get(userId);
    if (user) {
      FSMManager.setUserState(userId, FSM_STATES.MAIN_MENU);
      await bot.sendMessage(chatId, 
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        keyboards.mainMenu(user.roles)
      );
    } else {
      await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
    }
  } catch (error) {
    logger.error('Error in /menu command', { error: error.message, userId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const apiConnected = await APIClient.testConnection();
    
    const statusText = `
üîç *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã VHM24*

üåê Backend API: ${apiConnected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
ü§ñ Telegram Bot: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
üî¥ Redis: ‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
üìä –†–µ–∂–∏–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ Redis

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
    `;
    
    await bot.sendMessage(chatId, statusText, { parse_mode: 'Markdown' });
  } catch (error) {
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  try {
    await bot.answerCallbackQuery(callbackQuery.id);
    
    const user = userData.get(userId);
    if (!user) {
      await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }
    
    switch (data) {
      case 'main_menu':
        FSMManager.setUserState(userId, FSM_STATES.MAIN_MENU);
        await bot.editMessageText(
          '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
          {
            chat_id: chatId,
            message_id: msg.message_id,
            ...keyboards.mainMenu(user.roles)
          }
        );
        break;
        
      case 'warehouse_menu':
        if (!user.roles.includes(USER_ROLES.WAREHOUSE)) {
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.');
          return;
        }
        FSMManager.setUserState(userId, FSM_STATES.WAREHOUSE_MENU);
        await bot.editMessageText(
          'üì¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:',
          {
            chat_id: chatId,
            message_id: msg.message_id,
            parse_mode: 'Markdown',
            ...keyboards.warehouseMenu
          }
        );
        break;
        
      case 'manager_menu':
        if (!user.roles.includes(USER_ROLES.MANAGER)) {
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.');
          return;
        }
        FSMManager.setUserState(userId, FSM_STATES.MANAGER_MENU);
        await bot.editMessageText(
          'üìä *–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
          {
            chat_id: chatId,
            message_id: msg.message_id,
            parse_mode: 'Markdown',
            ...keyboards.managerMenu
          }
        );
        break;
        
      case 'warehouse_receive':
        await handleWarehouseReceive(chatId, userId, msg.message_id);
        break;
        
      case 'warehouse_bunkers':
        await handleWarehouseBunkers(chatId, userId, msg.message_id);
        break;
        
      case 'warehouse_inventory':
        await handleWarehouseInventory(chatId, userId, msg.message_id);
        break;
        
      case 'help':
        await bot.sendMessage(chatId, '–°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
        await bot.sendMessage(chatId, '/help');
        break;
        
      default:
        await bot.sendMessage(chatId, '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
    }
  } catch (error) {
    logger.error('Error in callback query', { error: error.message, userId, data });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
async function handleWarehouseReceive(chatId, userId, messageId) {
  await bot.editMessageText(
    'üì• *–ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–æ–≤*\n\n' +
    'üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º\n\n' +
    '–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n' +
    '‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤\n' +
    '‚Ä¢ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö\n' +
    '‚Ä¢ –§–æ—Ç–æ-—Ñ–∏–∫—Å–∞—Ü–∏—è\n' +
    '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤',
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      ...keyboards.backToMain
    }
  );
}

async function handleWarehouseBunkers(chatId, userId, messageId) {
  await bot.editMessageText(
    'üóÇÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–Ω–∫–µ—Ä–∞–º–∏*\n\n' +
    'üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º\n\n' +
    '–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n' +
    '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—É–Ω–∫–µ—Ä–æ–≤\n' +
    '‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–Ω–∫–µ—Ä–æ–≤\n' +
    '‚Ä¢ –ú–æ–π–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n' +
    '‚Ä¢ –§–æ—Ç–æ-—Ñ–∏–∫—Å–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è',
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      ...keyboards.backToMain
    }
  );
}

async function handleWarehouseInventory(chatId, userId, messageId) {
  await bot.editMessageText(
    'üìã *–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è*\n\n' +
    'üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º\n\n' +
    '–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n' +
    '‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤\n' +
    '‚Ä¢ –ü–æ–¥—Å—á—ë—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤\n' +
    '‚Ä¢ –§–æ—Ç–æ-—Ñ–∏–∫—Å–∞—Ü–∏—è\n' +
    '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤',
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      ...keyboards.backToMain
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  logger.error('Polling error', { error: error.message });
});

process.on('SIGINT', async () => {
  logger.info('Bot shutting down...');
  await bot.stopPolling();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    logger.info('Starting VHM24 Telegram Bot (No Redis Mode)...');
    logger.info(`Bot token: ${config.telegramToken ? 'Set' : 'Not set'}`);
    logger.info(`API URL: ${config.apiUrl}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    const apiConnected = await APIClient.testConnection();
    logger.info(`API connection: ${apiConnected ? 'Connected' : 'Failed'}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.setMyCommands([
      { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: 'menu', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
      { command: 'help', description: '–°–ø—Ä–∞–≤–∫–∞' },
      { command: 'status', description: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã' }
    ]);
    
    logger.info('VHM24 Telegram Bot started successfully! ü§ñ (No Redis Mode)');
  } catch (error) {
    logger.error('Failed to start bot', { error: error.message });
    process.exit(1);
  }
}

startBot();
