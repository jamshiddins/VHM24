const __Redis = require('ioredis';);''
const __TelegramBot = require('node-telegram-bot-api';);''
const __axios = require('axios';);''
const __winston = require('winston';);'
require('dotenv').config();''

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const __logger = winston.createLogger({;'
  _level : 'info','
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  _transports : [
    new winston._transports .Console(),'
    new winston._transports .File({ filename: 'bot.log' })'
  ]
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const __config = ;{
  telegramToken: process.env.TELEGRAM_BOT_TOKEN,
  redisUrl: process.env.REDIS_URL,'
  apiUrl: process.env.API_URL || 'https://vhm24-production.up.railway.app/api/v1',''
  adminIds: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',') : []'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis'
const __redis = new Redis(require("./config").redisUrl;);"

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"
const __bot = new TelegramBot(require("./config").telegramToken, { polling: true };);"

// FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
const __FSM_STATES = ;{
  // –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
  START: 'start',''
  REGISTRATION: 'registration',''
  MAIN_MENU: 'main_menu','
  
  // Admin —Å–æ—Å—Ç–æ—è–Ω–∏—è'
  ADMIN_MENU: 'admin_menu',''
  ADMIN_USERS: 'admin_users',''
  ADMIN_SYSTEM: 'admin_system','
  
  // Manager —Å–æ—Å—Ç–æ—è–Ω–∏—è'
  MANAGER_MENU: 'manager_menu',''
  MANAGER_CARDS: 'manager_cards',''
  MANAGER_REPORTS: 'manager_reports',''
  MANAGER_TASKS: 'manager_tasks',''
  MANAGER_FINANCE: 'manager_finance','
  
  // Warehouse —Å–æ—Å—Ç–æ—è–Ω–∏—è'
  WAREHOUSE_MENU: 'warehouse_menu',''
  WAREHOUSE_RECEIVE: 'warehouse_receive',''
  WAREHOUSE_BUNKERS: 'warehouse_bunkers',''
  WAREHOUSE_INVENTORY: 'warehouse_inventory',''
  WAREHOUSE_KITS: 'warehouse_kits',''
  WAREHOUSE_PHOTO: 'warehouse_photo','
  
  // Operator —Å–æ—Å—Ç–æ—è–Ω–∏—è'
  OPERATOR_MENU: 'operator_menu',''
  OPERATOR_MACHINES: 'operator_machines',''
  OPERATOR_MAINTENANCE: 'operator_maintenance','
  
  // Technician —Å–æ—Å—Ç–æ—è–Ω–∏—è'
  TECHNICIAN_MENU: 'technician_menu',''
  TECHNICIAN_SERVICE: 'technician_service',''
  TECHNICIAN_REPAIR: 'technician_repair','
  
  // Driver —Å–æ—Å—Ç–æ—è–Ω–∏—è'
  DRIVER_MENU: 'driver_menu',''
  DRIVER_ROUTES: 'driver_routes',''
  DRIVER_LOGS: 'driver_logs''
};

// –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const __USER_ROLES = {;'
  ADMIN: 'ADMIN',''
  MANAGER: 'MANAGER',''
  WAREHOUSE: 'WAREHOUSE',''
  OPERATOR: 'OPERATOR',''
  TECHNICIAN: 'TECHNICIAN',''
  DRIVER: 'DRIVER''
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FSM
class FSMManager {
  static async getUserState(_userId) {'
    const __state = await redis.get(`_user :${_userId }:state`;);`
    return state || _FSM_STATES .STAR;T;
  }
  
  static async setUserState(_userId , _state,  _data  = {}) {`
    await redis.set(`_user :${_userId }:state`, state);`
    if (Object.keys(_data ).length > 0) {`
      await redis.set(`_user :${_userId }:_data `, JSON.stringify(_data ));`
    }
  }
  
  static async getUserData(_userId ) {`
    const __data = await redis.get(`_user :${_userId }:_data `;);`
    return _data  ? JSON.parse(_data ) : {;};
  }
  
  static async clearUserData(_userId ) {`
    await redis.del(`_user :${_userId }:_data `);`
  }
}

// API –∫–ª–∏–µ–Ω—Ç
class APIClient {
  static async request(_method ,  _endpoint ,  _data  = null,  _userId  = null) {
    try {
      // const __config = // Duplicate declaration removed ;{
        _method ,`
        url: `${require("./config").apiUrl}${_endpoint }`,`
        headers: {`
          'Content-Type': 'application/json''
        }
      };
      
      if (_data ) {'
        require("./config")._data  = _data ;"
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å _userId 
      if (_userId ) {"
        const __token = await redis.get(`_user :${_userId }:_token `;);`
        if (_token ) {`
          require("./config").headers.Authorization = `Bearer ${_token }`;`
        }
      }
      
      const __response = await axios(config;);
      return _response ._dat;a ;
    } catch (error) {`
      require("./utils/logger").error('API request failed', { '
        _method , 
        _endpoint , 
        error: error._message ,
        _userId  
      });
      throw erro;r;
    }
  }
  
  static async getUserByTelegramId(_telegramId ) {
    try {'
      return await this.request('GET', `/_users /telegram/${_telegramId }`;);`
    } catch (error) {
      return nul;l;
    }
  }
  
  static async registerUser(_userData ) {`
    return await this.request('POST', '/auth/register', _userData ;);'
  }
  
  static async loginUser(_telegramId ) {'
    return await this.request('POST', '/auth/login', { _telegramId  };);'
  }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const __keyboards = ;{
  mainMenu: (_userRoles) => {
    const __keyboard = [;];
    
    if (userRoles.includes(_USER_ROLES .ADMIN)) {'
      _keyboard .push([{ text: 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'admin_menu' }]);'
    }
    
    if (userRoles.includes(_USER_ROLES .MANAGER)) {'
      _keyboard .push([{ text: 'üìä –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', callback_data: 'manager_menu' }]);'
    }
    
    if (userRoles.includes(_USER_ROLES .WAREHOUSE)) {'
      _keyboard .push([{ text: 'üì¶ –°–∫–ª–∞–¥', callback_data: 'warehouse_menu' }]);'
    }
    
    if (userRoles.includes(_USER_ROLES .OPERATOR)) {'
      _keyboard .push([{ text: 'üéÆ –û–ø–µ—Ä–∞—Ü–∏–∏', callback_data: 'operator_menu' }]);'
    }
    
    if (userRoles.includes(_USER_ROLES .TECHNICIAN)) {'
      _keyboard .push([{ text: 'üîß –¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', callback_data: 'technician_menu' }]);'
    }
    
    if (userRoles.includes(_USER_ROLES .DRIVER)) {'
      _keyboard .push([{ text: 'üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞', callback_data: 'driver_menu' }]);'
    }
    '
    _keyboard .push([{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]);'
    
    return {
      reply_markup: {
        inline_keyboard: _keyboard 
      }
    };
  },
  
  warehouseMenu: {
    reply_markup: {
      inline_keyboard: ['
        [{ text: 'üì• –ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'warehouse_receive' }],''
        [{ text: 'üóÇÔ∏è –ë—É–Ω–∫–µ—Ä—ã', callback_data: 'warehouse_bunkers' }],''
        [{ text: 'üìã –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è', callback_data: 'warehouse_inventory' }],''
        [{ text: 'üëù –ö–æ–º–ø–ª–µ–∫—Ç—ã (—Å—É–º–∫–∏)', callback_data: 'warehouse_kits' }],''
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]'
      ]
    }
  },
  
  managerMenu: {
    reply_markup: {
      inline_keyboard: ['
        [{ text: 'üóÉÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∏', callback_data: 'manager_cards' }],''
        [{ text: 'üìä –û—Ç—á—ë—Ç—ã', callback_data: 'manager_reports' }],''
        [{ text: 'üìã –ó–∞–¥–∞—á–∏', callback_data: 'manager_tasks' }],''
        [{ text: 'üí∞ –§–∏–Ω–∞–Ω—Å—ã', callback_data: 'manager_finance' }],''
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]'
      ]
    }
  },
  
  backToMain: {
    reply_markup: {
      inline_keyboard: ['
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
      ]
    }
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(_/\/start/,  _async (_msg ) => {
  const __chatId = _msg .chat.i;d;
  const __userId = _msg .from.i;d;
  
  try {'
    require("./utils/logger").info('User started bot', { _userId , _chatId  });'
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const __user = await APIClient.getUserByTelegramId(_userId .toString(););
    
    if (_user ) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
      const __loginResult = await APIClient.loginUser(_userId .toString(););'
      await redis.set(`_user :${_userId }:_token `, loginResult._token );``
      await redis.set(`_user :${_userId }:roles`, JSON.stringify(_user .roles));`
      
      await FSMManager.setUserState(_userId , _FSM_STATES .MAIN_MENU);
      
      await bot.sendMessage(_chatId , `
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VHM24, ${_user .name}! üëã\n\n` +``
        `–í–∞—à–∏ —Ä–æ–ª–∏: ${_user .roles.join(', ')}\n\n` +``
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:','
        _keyboards .mainMenu(_user .roles)
      );
    } else {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      await FSMManager.setUserState(_userId , _FSM_STATES .REGISTRATION);
      
      await bot.sendMessage(_chatId ,'
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VHM24! üéâ\n\n' +''
        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n' +''
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:''
      );
    }
  } catch (error) {'
    require("./utils/logger").error('Error in /start _command ', { error: error._message , _userId  });''
    await bot.sendMessage(_chatId , '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');'
  }
});

bot.onText(_/\/help/,  _async (_msg ) => {
  // const __chatId = // Duplicate declaration removed _msg .chat.i;d;
  '
  const __helpText = `;`
ü§ñ *VHM24 Telegram Bot - –°–ø—Ä–∞–≤–∫–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

*–†–æ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏:*

üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:*
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

üìä *–ú–µ–Ω–µ–¥–∂–µ—Ä:*
‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç—ã, —Ç–æ–≤–∞—Ä—ã, –∑–∞–ø—á–∞—Å—Ç–∏)
‚Ä¢ –û—Ç—á—ë—Ç—ã –∏ —Å–≤–µ—Ä–∫–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

üì¶ *–°–∫–ª–∞–¥:*
‚Ä¢ –ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–Ω–∫–µ—Ä–∞–º–∏
‚Ä¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤

üéÆ *–û–ø–µ—Ä–∞—Ç–æ—Ä:*
‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è

üîß *–¢–µ—Ö–Ω–∏–∫:*
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
‚Ä¢ –†–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã

üöö *–í–æ–¥–∏—Ç–µ–ª—å:*
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç—ã
‚Ä¢ –õ–æ–≥–∏ –ø–æ–µ–∑–¥–æ–∫

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @vhm24_support`
  `;`
  `
  await bot.sendMessage(_chatId , _helpText , { parse_mode: 'Markdown' });'
});

bot.onText(_/\/menu/,  _async (_msg ) => {
  // const __chatId = // Duplicate declaration removed _msg .chat.i;d;
  // const __userId = // Duplicate declaration removed _msg .from.i;d;
  
  try {
    // const __user = // Duplicate declaration removed await APIClient.getUserByTelegramId(_userId .toString(););
    if (_user ) {
      await FSMManager.setUserState(_userId , _FSM_STATES .MAIN_MENU);
      await bot.sendMessage(_chatId , '
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:','
        _keyboards .mainMenu(_user .roles)
      );
    } else {'
      await bot.sendMessage(_chatId , '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start');'
    }
  } catch (error) {'
    require("./utils/logger").error('Error in /menu _command ', { error: error._message , _userId  });''
    await bot.sendMessage(_chatId , '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');'
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤'
bot.on(_'callback_query',  _async (_callbackQuery) => {'
  const __msg = callbackQuery._messag;e ;
  // const __chatId = // Duplicate declaration removed _msg .chat.i;d;
  // const __userId = // Duplicate declaration removed callbackQuery.from.i;d;
  // const __data = // Duplicate declaration removed callbackQuery._dat;a ;
  
  try {
    await bot.answerCallbackQuery(callbackQuery.id);
    
    // const __user = // Duplicate declaration removed await APIClient.getUserByTelegramId(_userId .toString(););
    if (!_user ) {'
      await bot.sendMessage(_chatId , '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start');'
      return;
    }
    
    switch (_data ) {'
      case 'main_menu':'
        await FSMManager.setUserState(_userId , _FSM_STATES .MAIN_MENU);
        await bot.editMessageText('
          '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:','
          {
            chat_id: _chatId ,
            message_id: _msg .message_id,
            ..._keyboards .mainMenu(_user .roles)
          }
        );
        break;
        '
      case 'warehouse_menu':'
        if (!_user .roles.includes(_USER_ROLES .WAREHOUSE)) {'
          await bot.sendMessage(_chatId , '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.');'
          return;
        }
        await FSMManager.setUserState(_userId , _FSM_STATES .WAREHOUSE_MENU);
        await bot.editMessageText('
          'üì¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:','
          {
            chat_id: _chatId ,
            message_id: _msg .message_id,'
            parse_mode: 'Markdown','
            ..._keyboards .warehouseMenu
          }
        );
        break;
        '
      case 'manager_menu':'
        if (!_user .roles.includes(_USER_ROLES .MANAGER)) {'
          await bot.sendMessage(_chatId , '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.');'
          return;
        }
        await FSMManager.setUserState(_userId , _FSM_STATES .MANAGER_MENU);
        await bot.editMessageText('
          'üìä *–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:','
          {
            chat_id: _chatId ,
            message_id: _msg .message_id,'
            parse_mode: 'Markdown','
            ..._keyboards .managerMenu
          }
        );
        break;
        '
      case 'warehouse_receive':'
        await handleWarehouseReceive(_chatId , _userId , _msg .message_id);
        break;
        '
      case 'warehouse_bunkers':'
        await handleWarehouseBunkers(_chatId , _userId , _msg .message_id);
        break;
        '
      case 'warehouse_inventory':'
        await handleWarehouseInventory(_chatId , _userId , _msg .message_id);
        break;
        '
      case 'help':''
        await bot.sendMessage(_chatId , '–°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');''
        await bot.sendMessage(_chatId , '/help');'
        break;
        
      default:'
        await bot.sendMessage(_chatId , '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');'
    }
  } catch (error) {'
    require("./utils/logger").error('Error in callback query', { error: error._message , _userId , _data  });''
    await bot.sendMessage(_chatId , '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');'
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'
bot.on(_'_message ',  _async (_msg ) => {''
  if (_msg .text && _msg .text.startsWith('/')) {'
    return; // –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
  }
  
  // const __chatId = // Duplicate declaration removed _msg .chat.i;d;
  // const __userId = // Duplicate declaration removed _msg .from.i;d;
  const __text = _msg .tex;t;
  
  try {
    const __currentState = await FSMManager.getUserState(_userId ;);
    
    switch (currentState) {
      case _FSM_STATES .REGISTRATION:
        await handleRegistration(_chatId , _userId , text);
        break;
        
      case _FSM_STATES .WAREHOUSE_RECEIVE:
        await handleWarehouseReceiveInput(_chatId , _userId , text);
        break;
        
      default:
        // –í –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        // const __user = // Duplicate declaration removed await APIClient.getUserByTelegramId(_userId .toString(););
        if (_user ) {
          await bot.sendMessage(_chatId , '
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /menu','
            _keyboards .mainMenu(_user .roles)
          );
        }
    }
  } catch (error) {'
    require("./utils/logger").error('Error in _message  handler', { error: error._message , _userId  });''
    await bot.sendMessage(_chatId , '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');'
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
async function handleRegistration(_chatId ,  _userId , _name) {
  try {
    const __userData = ;{
      name: name.trim(),
      _telegramId : _userId .toString(),'
      telegramUsername: '',''
      email: `_user ${_userId }@vhm24.local`,`
      roles: [_USER_ROLES .OPERATOR] // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–æ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    };
    
    const __result = await APIClient.registerUser(_userData ;);
    
    await FSMManager.setUserState(_userId , _FSM_STATES .MAIN_MENU);`
    await redis.set(`_user :${_userId }:roles`, JSON.stringify(_userData .roles));`
    
    await bot.sendMessage(_chatId ,`
      `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n` +``
      `–ò–º—è: ${name}\n` +``
      `–†–æ–ª—å: ${_userData .roles.join(', ')}\n\n` +``
      `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,`
      _keyboards .mainMenu(_userData .roles)
    );
    `
    require("./utils/logger").info('User registered', { _userId , name });'
  } catch (error) {'
    require("./utils/logger").error('Registration failed', { error: error._message , _userId  });'
    await bot.sendMessage(_chatId , '
      '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.''
    );
  }
}

async function handleWarehouseReceive(_chatId ,  _userId , _messageId) {
  await FSMManager.setUserState(_userId , _FSM_STATES .WAREHOUSE_RECEIVE);
  
  await bot.editMessageText('
    'üì• *–ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–æ–≤*\n\n' +''
    '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +''
    '`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è`\n\n' +''
    '–ù–∞–ø—Ä–∏–º–µ—Ä: `–ö–æ—Ñ–µ Jacobs, 10, –∫–≥`','
    {
      chat_id: _chatId ,
      message_id: messageId,'
      parse_mode: 'Markdown','
      ..._keyboards .backToMain
    }
  );
}

async function handleWarehouseReceiveInput(_chatId ,  _userId , _text) {
  try {'
    const __parts = text.split(',').map(p => p.trim(););'
    
    if (parts.length !== 3) {
      await bot.sendMessage(_chatId , '
        '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ù–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ–¥–∏–Ω–∏—Ü–∞`',''
        { parse_mode: 'Markdown' }'
      );
      return;
    }
    
    const [name, quantity, unit] = part;s;
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞
    const __operationData = {;'
      type: 'IN','
      itemName: name,
      quantity: parseFloat(quantity),
      unit: unit,'
      reason: '–ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ Telegram','
      _userId : _userId 
    };
    
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å API –∑–∞–ø—Ä–æ—Å'
    // await APIClient.request('POST', '/warehouse/operations', operationData, _userId );'
    
    await bot.sendMessage(_chatId ,'
      `‚úÖ –¢–æ–≤–∞—Ä –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥:\n\n` +``
      `üì¶ ${name}\n` +``
      `üìä ${quantity} ${unit}\n` +``
      `‚è∞ ${new Date().toLocaleString('ru-RU')}\n\n` +``
      `–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.`,`
      _keyboards .backToMain
    );
    
    await FSMManager.setUserState(_userId , _FSM_STATES .WAREHOUSE_MENU);
    `
    require("./utils/logger").info('Warehouse receive operation', { _userId , name, quantity, unit });'
  } catch (error) {'
    require("./utils/logger").error('Error in warehouse receive', { error: error._message , _userId  });''
    await bot.sendMessage(_chatId , '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.');'
  }
}

async function handleWarehouseBunkers(_chatId ,  _userId , _messageId) {
  try {
    // TODO: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—É–Ω–∫–µ—Ä–æ–≤ –∏–∑ API'
    const __bunkersText = 'üóÇÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–Ω–∫–µ—Ä–∞–º–∏*\n\n' +';'
      '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n' +''
      '–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n' +''
      '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—É–Ω–∫–µ—Ä–æ–≤\n' +''
      '‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–Ω–∫–µ—Ä–æ–≤\n' +''
      '‚Ä¢ –ú–æ–π–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n' +''
      '‚Ä¢ –§–æ—Ç–æ-—Ñ–∏–∫—Å–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è';'
    
    await bot.editMessageText(bunkersText, {
      chat_id: _chatId ,
      message_id: messageId,'
      parse_mode: 'Markdown','
      ..._keyboards .backToMain
    });
  } catch (error) {'
    require("./utils/logger").error('Error in warehouse bunkers', { error: error._message , _userId  });'
  }
}

async function handleWarehouseInventory(_chatId ,  _userId , _messageId) {
  try {'
    const __inventoryText = 'üìã *–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è*\n\n' +';'
      '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n' +''
      '–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n' +''
      '‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤\n' +''
      '‚Ä¢ –ü–æ–¥—Å—á—ë—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤\n' +''
      '‚Ä¢ –§–æ—Ç–æ-—Ñ–∏–∫—Å–∞—Ü–∏—è\n' +''
      '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤';'
    
    await bot.editMessageText(inventoryText, {
      chat_id: _chatId ,
      message_id: messageId,'
      parse_mode: 'Markdown','
      ..._keyboards .backToMain
    });
  } catch (error) {'
    require("./utils/logger").error('Error in warehouse inventory', { error: error._message , _userId  });'
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫'
bot.on(_'polling_error', _(_error) => {''
  require("./utils/logger").error('Polling error', { error: error._message  });'
});
'
process.on(_'SIGINT',  _async () => {''
  require("./utils/logger").info('Bot shutting down...');'
  await bot.stopPolling();
  await redis.disconnect();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {'
    require("./utils/logger").info('Starting VHM24 Telegram Bot...');''
    require("./utils/logger").info(`Bot _token : ${require("./config").telegramToken ? 'Set' : 'Not set'}`);``
    require("./utils/logger").info(`Redis URL: ${require("./config").redisUrl ? 'Set' : 'Not set'}`);``
    require("./utils/logger").info(`API URL: ${require("./config").apiUrl}`);`
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    await redis.ping();`
    require("./utils/logger").info('Redis connection established');'
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.setMyCommands(['
      { _command : 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },''
      { _command : 'menu', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },''
      { _command : 'help', description: '–°–ø—Ä–∞–≤–∫–∞' }'
    ]);
    '
    require("./utils/logger").info('VHM24 Telegram Bot started successfully! ü§ñ');'
  } catch (error) {'
    require("./utils/logger").error('Failed to start bot', { error: error._message  });'
    process.exit(1);
  }
}

startBot();
'