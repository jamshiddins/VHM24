#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Prisma –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ VHM24...\n');

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É—Ç–∏
async function generatePrismaForPath(servicePath, serviceName) {
  console.log(`\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${serviceName}...`);
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma —Å —É–∫–∞–∑–∞–Ω–∏–µ–º output –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const schemaPath = path.join(__dirname, 'packages/database/prisma/schema.prisma');
    const outputPath = path.join(servicePath, 'node_modules/.prisma/client');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
    await fs.mkdir(path.join(servicePath, 'node_modules/.prisma'), { recursive: true });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º output
    const generateCmd = `npx prisma generate --schema="${schemaPath}" --generator="client={output=\\"${outputPath}\\"}"`;
    
    console.log(`  üî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞...`);
    await exec(generateCmd, { cwd: servicePath });
    
    // –°–æ–∑–¥–∞–µ–º index —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    const indexContent = `
const { PrismaClient } = require('./runtime/library');
module.exports = { PrismaClient };
module.exports.PrismaClient = PrismaClient;
module.exports.default = { PrismaClient };
`;
    
    await fs.writeFile(path.join(outputPath, 'index.js'), indexContent);
    await fs.writeFile(path.join(outputPath, 'index.d.ts'), 'export * from "./runtime/library";');
    
    // –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –≤ node_modules/@prisma/client
    const prismaClientPath = path.join(servicePath, 'node_modules/@prisma/client');
    try {
      await fs.rm(prismaClientPath, { recursive: true, force: true });
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
    
    await fs.mkdir(path.dirname(prismaClientPath), { recursive: true });
    await fs.symlink(outputPath, prismaClientPath, 'junction');
    
    console.log(`  ‚úÖ Prisma –∫–ª–∏–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${serviceName}`);
    return true;
    
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${serviceName}:`, error.message);
    return false;
  }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Prisma –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ shared –ø–∞–∫–µ—Ç–µ
async function fixSharedPackage() {
  console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ shared –ø–∞–∫–µ—Ç–∞...');
  
  try {
    const sharedPath = path.join(__dirname, 'packages/shared');
    await generatePrismaForPath(sharedPath, 'shared');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º middleware/security.js —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
    const securityPath = path.join(sharedPath, 'middleware/security.js');
    let securityContent = await fs.readFile(securityPath, 'utf8');
    
    // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç Prisma
    securityContent = securityContent.replace(
      /const\s*{\s*PrismaClient\s*}\s*=\s*require\(['"]\@prisma\/client['"]\);?/g,
      'const { PrismaClient } = require("../node_modules/.prisma/client");'
    );
    
    await fs.writeFile(securityPath, securityContent);
    console.log('  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω security.js');
    
  } catch (error) {
    console.log('  ‚ùå –û—à–∏–±–∫–∞ –≤ shared:', error.message);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Prisma –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...\n');
  
  // 1. –°–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π Prisma –∫–ª–∏–µ–Ω—Ç
  console.log('üì¶ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Prisma –∫–ª–∏–µ–Ω—Ç–∞...');
  try {
    await exec('npx prisma generate --schema=packages/database/prisma/schema.prisma');
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π Prisma –∫–ª–∏–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
  }
  
  // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º shared –ø–∞–∫–µ—Ç
  await fixSharedPackage();
  
  // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  const services = [
    { name: 'gateway', path: 'services/gateway' },
    { name: 'auth', path: 'services/auth' },
    { name: 'machines', path: 'services/machines' },
    { name: 'inventory', path: 'services/inventory' },
    { name: 'tasks', path: 'services/tasks' },
    { name: 'routes', path: 'services/routes' },
    { name: 'warehouse', path: 'services/warehouse' },
    { name: 'recipes', path: 'services/recipes' },
    { name: 'notifications', path: 'services/notifications' },
    { name: 'audit', path: 'services/audit' },
    { name: 'monitoring', path: 'services/monitoring' }
  ];
  
  for (const service of services) {
    const servicePath = path.join(__dirname, service.path);
    await generatePrismaForPath(servicePath, service.name);
  }
  
  console.log('\n‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!');
  console.log('\nüìã –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:');
  console.log('   node test-all-components.js');
  console.log('\nüöÄ –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:');
  console.log('   node start-with-railway.js');
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
