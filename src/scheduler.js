/**
 * Scheduler –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
 */
const dotenv = require('dotenv');
const dotenvExpand = require('dotenv-expand');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π .env —Ñ–∞–π–ª
const mainEnv = dotenv.config();
dotenvExpand.expand(mainEnv);

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env.scheduler —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏ –¥–ª—è Scheduler
const schedulerEnv = dotenv.config({ path: '.env.scheduler' });
dotenvExpand.expand(schedulerEnv);
const { createClient } = require('redis');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis-–∫–ª–∏–µ–Ω—Ç–∞
let redisClient;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
 */
async function initScheduler() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è REDIS_URL
    if (!process.env.REDIS_URL) {
      console.error('‚ùå REDIS_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    redisClient = createClient({
      url: process.env.REDIS_URL,
      socket: {
        reconnectStrategy: (retries) => {
          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - 20
          if (retries > 20) {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis');
            return new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis');
          }
          // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –º–∞–∫—Å–∏–º—É–º–æ–º –≤ 5 —Å–µ–∫—É–Ω–¥
          const delay = Math.min(Math.pow(2, retries) * 100, 5000);
          console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
          return delay;
        },
        connectTimeout: 10000, // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - 10 —Å–µ–∫—É–Ω–¥
        keepAlive: 5000 // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Redis
    redisClient.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ Redis:', err.message);
    });
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    await redisClient.connect();
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ');
    
    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    startScheduler();
    
    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á:', error.message);
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
 */
function startScheduler() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...');
  
  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
  scheduleTask('daily-report', '0 8 * * *', createDailyReportTask);
  scheduleTask('hourly-sync', '0 * * * *', createHourlySyncTask);
  scheduleTask('check-bot-health', '*/10 * * * *', createCheckBotHealthTask);
  scheduleTask('backup-database', '0 0 * * *', createBackupDatabaseTask);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  process.on('SIGINT', async () => {
    console.log('üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...');
    
    if (redisClient) {
      await redisClient.quit();
    }
    
    process.exit(0);
  });
}

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
 * @param {string} taskId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
 * @param {string} cronExpression - Cron-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @param {Function} taskCreator - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
function scheduleTask(taskId, cronExpression, taskCreator) {
  console.log(`üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ${taskId} —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º ${cronExpression}`);
  
  // –ü–∞—Ä—Å–∏–Ω–≥ cron-–≤—ã—Ä–∞–∂–µ–Ω–∏—è
  const [minute, hour, dayOfMonth, month, dayOfWeek] = cronExpression.split(' ');
  
  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  setInterval(() => {
    const now = new Date();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ cron-–≤—ã—Ä–∞–∂–µ–Ω–∏—é
    if (
      (minute === '*' || minute === `*/${now.getMinutes()}` || minute === now.getMinutes().toString()) &&
      (hour === '*' || hour === `*/${now.getHours()}` || hour === now.getHours().toString()) &&
      (dayOfMonth === '*' || dayOfMonth === now.getDate().toString()) &&
      (month === '*' || month === (now.getMonth() + 1).toString()) &&
      (dayOfWeek === '*' || dayOfWeek === now.getDay().toString())
    ) {
      // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏
      const task = taskCreator();
      sendTask(task);
    }
  }, 60000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
 * @param {object} task - –ó–∞–¥–∞—á–∞
 */
async function sendTask(task) {
  try {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏: ${JSON.stringify(task)}`);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –∫–∞–Ω–∞–ª Redis
    await redisClient.publish('tasks', JSON.stringify(task));
    
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏:', error.message);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 * @returns {object} –ó–∞–¥–∞—á–∞
 */
function createDailyReportTask() {
  return {
    id: `daily-report-${Date.now()}`,
    type: 'GENERATE_REPORT',
    data: {
      reportType: 'DAILY',
      period: new Date().toISOString().split('T')[0]
    },
    createdAt: new Date().toISOString()
  };
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –µ–∂–µ—á–∞—Å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @returns {object} –ó–∞–¥–∞—á–∞
 */
function createHourlySyncTask() {
  return {
    id: `hourly-sync-${Date.now()}`,
    type: 'SYNC_DATA',
    data: {
      source: 'API',
      destination: 'DATABASE',
      timestamp: new Date().toISOString()
    },
    createdAt: new Date().toISOString()
  };
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
 * @returns {object} –ó–∞–¥–∞—á–∞
 */
function createCheckBotHealthTask() {
  return {
    id: `check-bot-health-${Date.now()}`,
    type: 'CHECK_BOT_HEALTH',
    data: {
      botId: 'telegram-bot',
      timestamp: new Date().toISOString()
    },
    createdAt: new Date().toISOString()
  };
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @returns {object} –ó–∞–¥–∞—á–∞
 */
function createBackupDatabaseTask() {
  return {
    id: `backup-database-${Date.now()}`,
    type: 'BACKUP_DATABASE',
    data: {
      timestamp: new Date().toISOString()
    },
    createdAt: new Date().toISOString()
  };
}

// –ó–∞–ø—É—Å–∫ scheduler'–∞
async function main() {
  console.log('‚è∞ Scheduler —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª...');
  await initScheduler();
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
});
