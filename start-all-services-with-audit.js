const logger = require('@vhm24/shared/logger');

#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ VHM24 —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—É–¥–∏—Ç–∞...\n');

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∏—Ö –ø–æ—Ä—Ç–∞–º–∏ –∏ –ø—É—Ç—è–º–∏
const services = [
  {
    name: 'Gateway',
    path: 'services/gateway',
    port: process.env.GATEWAY_PORT || 8000,
    env: { PORT: process.env.GATEWAY_PORT || 8000 },
    icon: 'üåê'
  },
  {
    name: 'Auth',
    path: 'services/auth',
    port: process.env.AUTH_PORT || 3001,
    env: { PORT: process.env.AUTH_PORT || 3001 },
    icon: 'üîê'
  },
  {
    name: 'Machines',
    path: 'services/machines',
    port: process.env.MACHINES_PORT || 3002,
    env: { PORT: process.env.MACHINES_PORT || 3002 },
    icon: 'ü§ñ'
  },
  {
    name: 'Inventory',
    path: 'services/inventory',
    port: process.env.INVENTORY_PORT || 3003,
    env: { PORT: process.env.INVENTORY_PORT || 3003 },
    icon: 'üì¶'
  },
  {
    name: 'Tasks',
    path: 'services/tasks',
    port: process.env.TASKS_PORT || 3004,
    env: { PORT: process.env.TASKS_PORT || 3004 },
    icon: '‚úÖ'
  },
  {
    name: 'Routes',
    path: 'services/routes',
    port: process.env.ROUTES_PORT || 3005,
    env: { PORT: process.env.ROUTES_PORT || 3005 },
    icon: 'üõ£Ô∏è'
  },
  {
    name: 'Warehouse',
    path: 'services/warehouse',
    port: process.env.WAREHOUSE_PORT || 3006,
    env: { PORT: process.env.WAREHOUSE_PORT || 3006 },
    icon: 'üè≠'
  },
  {
    name: 'Recipes',
    path: 'services/recipes',
    port: process.env.RECIPES_PORT || 3007,
    env: { PORT: process.env.RECIPES_PORT || 3007 },
    icon: 'üìã'
  },
  {
    name: 'Notifications',
    path: 'services/notifications',
    port: process.env.NOTIFICATIONS_PORT || 3008,
    env: { PORT: process.env.NOTIFICATIONS_PORT || 3008 },
    icon: 'üîî'
  },
  {
    name: 'Audit',
    path: 'services/audit',
    port: process.env.AUDIT_SERVICE_PORT || 3009,
    env: { 
      PORT: process.env.AUDIT_SERVICE_PORT || 3009,
      AUDIT_SERVICE_PORT: process.env.AUDIT_SERVICE_PORT || 3009
    },
    icon: 'üîç'
  },
  {
    name: 'Monitoring',
    path: 'services/monitoring',
    port: process.env.MONITORING_PORT || 3010,
    env: { PORT: process.env.MONITORING_PORT || 3010 },
    icon: 'üìä'
  },
  {
    name: 'Backup',
    path: 'services/backup',
    port: process.env.BACKUP_PORT || 3011,
    env: { PORT: process.env.BACKUP_PORT || 3011 },
    icon: 'üíæ'
  },
  {
    name: 'Data Import',
    path: 'services/data-import',
    port: process.env.DATA_IMPORT_PORT || 3012,
    env: { PORT: process.env.DATA_IMPORT_PORT || 3012 },
    icon: 'üì•'
  }
];

const runningProcesses = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–∞
async function installDependencies(service) {
  try {
  return new Promise((resolve, reject) => {
    const servicePath = path.join(__dirname, service.path);
    
    if (!fs.existsSync(servicePath)) {
      logger.info(`‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å ${service.name  } catch (error) {
    logger.error('Error:', error);
    throw error;
  }
} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ ${servicePath}`);
      resolve();
      return;
    }

    logger.info(`üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è ${service.name}...`);
    
    const installProcess = spawn('npm', ['install'], {
      cwd: servicePath,
      stdio: 'pipe',
      shell: true
    });

    let output = '';
    installProcess.stdout.on('data', (data) => {
      output += data.toString();
    });

    installProcess.stderr.on('data', (data) => {
      output += data.toString();
    });

    installProcess.on('close', (code) => {
      if (code === 0) {
        logger.info(`‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è ${service.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`);
        resolve();
      } else {
        logger.info(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è ${service.name}:`, output);
        resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    });

    installProcess.on('error', (error) => {
      logger.info(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è ${service.name}:`, error.message);
      resolve();
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
function startService(service) {
  return new Promise((resolve) => {
    const servicePath = path.join(__dirname, service.path);
    
    if (!fs.existsSync(servicePath)) {
      logger.info(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ ${service.name} - —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      resolve();
      return;
    }

    logger.info(`${service.icon} –ó–∞–ø—É—Å–∫ ${service.name} –Ω–∞ –ø–æ—Ä—Ç—É ${service.port}...`);
    
    const serviceProcess = spawn('npm', ['start'], {
      cwd: servicePath,
      stdio: 'pipe',
      shell: true,
      env: {
        ...process.env,
        ...service.env,
        NODE_ENV: process.env.NODE_ENV || 'development'
      }
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å–µ—Ä–≤–∏—Å–∞
    serviceProcess.stdout.on('data', (data) => {
      const output = data.toString().trim();
      if (output) {
        logger.info(`[${service.name}] ${output}`);
      }
    });

    serviceProcess.stderr.on('data', (data) => {
      const output = data.toString().trim();
      if (output && !output.includes('ExperimentalWarning')) {
        logger.info(`[${service.name}] ‚ö†Ô∏è  ${output}`);
      }
    });

    serviceProcess.on('close', (code) => {
      logger.info(`[${service.name}] üõë –°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
      // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
      const index = runningProcesses.indexOf(serviceProcess);
      if (index > -1) {
        runningProcesses.splice(index, 1);
      }
    });

    serviceProcess.on('error', (error) => {
      logger.info(`[${service.name}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    runningProcesses.push(serviceProcess);
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    setTimeout(() => {
      resolve();
    }, 2000);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
function checkPort(port) {
  return new Promise((resolve) => {
    const net = require('net');
    const server = net.createServer();
    
    server.listen(port, () => {
      server.once('close', () => {
        resolve(true); // –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
      });
      server.close();
    });
    
    server.on('error', () => {
      resolve(false); // –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
async function showStatus() {
  try {
  logger.info('\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:');
  logger.info('‚îÅ'.repeat(50));
  
  for (const service of services) {
    const isPortFree = await checkPort(service.port);
    const status = isPortFree ? '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚úÖ –ó–∞–ø—É—â–µ–Ω';
    logger.info(`${service.icon  } catch (error) {
    logger.error('Error:', error);
    throw error;
  }
} ${service.name.padEnd(15)} ${service.port.toString().padEnd(6)} ${status}`);
  }
  
  logger.info('‚îÅ'.repeat(50));
  logger.info(`üìà –ó–∞–ø—É—â–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${runningProcesses.length}/${services.length}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function startAllServices() {
  try {
  logger.info('üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...\n');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  const installPromises = services.map(service => installDependencies(service));
  await Promise.all(installPromises);
  
  logger.info('\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...\n');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  for (const service of services) {
    await startService(service);
    } catch (error) {
    logger.error('Error:', error);
    throw error;
  }
}
  
  logger.info('\nüéâ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!\n');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
  await showStatus();
  
  logger.info('\nüåê –û—Å–Ω–æ–≤–Ω—ã–µ URL:');
  logger.info(`   Gateway:    http://localhost:${services[0].port}`);
  logger.info(`   Dashboard:  http://localhost:3000 (–∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ)`);
  logger.info(`   Audit:      http://localhost:${services.find(s => s.name === 'Audit').port}`);
  logger.info(`   WebSocket:  ws://localhost:${services[0].port}/ws`);
  
  logger.info('\nüìù –ö–æ–º–∞–Ω–¥—ã:');
  logger.info('   Ctrl+C     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã');
  logger.info('   npm run dashboard - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–¥–∞—à–±–æ—Ä–¥');
  logger.info('   npm run test-audit - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∞—É–¥–∏—Ç–∞');
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
  setInterval(async () => {
  try {
    await showStatus();
    } catch (error) {
    logger.error('Error:', error);
    throw error;
  }
}, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}

// Graceful shutdown
process.on('SIGINT', () => {
  logger.info('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
  
  runningProcesses.forEach((proc, index) => {
    if (proc && !proc.killed) {
      logger.info(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ ${services[index]?.name || index}...`);
      proc.kill('SIGINT');
    }
  });
  
  setTimeout(() => {
    logger.info('üëã –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    process.exit(0);
  }, 3000);
});

process.on('SIGTERM', () => {
  logger.info('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...');
  runningProcesses.forEach(proc => {
    if (proc && !proc.killed) {
      proc.kill('SIGTERM');
    }
  });
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  logger.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

// –ó–∞–ø—É—Å–∫
startAllServices().catch((error) => {
  logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
  process.exit(1);
});
