const _fs = require('fs');
const _path = require('path');
const _axios = require('axios');

const _logger = require('./packages/shared/utils/logger');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

/**
 * VHM24 (VendHub Manager) Complete Testing System
 * Comprehensive testing for all VendHub-specific features
 */
class VHM24CompleteTestingSystem {
  constructor() {
    this.testResults = {
      timestamp: new Date().toISOString(),
      projectName: 'VHM24 (VendHub Manager)',
      environment: process.env.NODE_ENV || 'development',
      timezone: process.env.TZ || 'Asia/Tashkent',
      tests: {
        environment: { passed: 0, failed: 0, total: 0, details: [] },
        database: { passed: 0, failed: 0, total: 0, details: [] },
        redis: { passed: 0, failed: 0, total: 0, details: [] },
        telegramBot: { passed: 0, failed: 0, total: 0, details: [] },
        rbac: { passed: 0, failed: 0, total: 0, details: [] },
        digitalOcean: { passed: 0, failed: 0, total: 0, details: [] },
        railway: { passed: 0, failed: 0, total: 0, details: [] },
        businessLogic: { passed: 0, failed: 0, total: 0, details: [] },
        frontend: { passed: 0, failed: 0, total: 0, details: [] },
        api: { passed: 0, failed: 0, total: 0, details: [] }
      },
      summary: {
        total: 0,
        passed: 0,
        failed: 0,
        score: 0,
        criticalIssues: [],
        recommendations: []
      }
    };

    // –†–æ–ª–∏ —Å–∏—Å—Ç–µ–º—ã VendHub
    this.roles = {
      admin: {
        commands: ['/admin_panel', '/approve_users', '/system_logs', '/global_reports'],
        permissions: ['*']
      },
      manager: {
        commands: ['/routes_management', '/task_assignment', '/analytics', '/cost_calculation', '/recipe_management'],
        permissions: ['routes:read', 'routes:write', 'tasks:write', 'analytics:read', 'recipes:write']
      },
      warehouse: {
        commands: ['/receive_goods', '/weight_bunkers', '/inventory_check', '/batch_tracking', '/expiry_alerts'],
        permissions: ['inventory:read', 'inventory:write', 'bunkers:read', 'bunkers:write']
      },
      operator: {
        commands: ['/machine_status', '/refill_bunkers', '/photo_reports', '/problem_reporting', '/task_completion'],
        permissions: ['machines:read', 'tasks:read', 'tasks:write', 'photos:write']
      },
      technician: {
        commands: ['/maintenance_tasks', '/checklist_completion', '/parts_replacement', '/service_history', '/technical_reports'],
        permissions: ['maintenance:read', 'maintenance:write', 'checklists:write', 'reports:write']
      }
    };

    // FSM –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.fsmProcesses = {
      checklists: {
        states: ['start', 'item_selection', 'photo_capture', 'completion', 'report_generation'],
        transitions: 4,
        description: '–ß–µ–∫-–ª–∏—Å—Ç—ã —á–∏—Å—Ç–∫–∏'
      },
      weighing: {
        states: ['bunker_selection', 'weight_before', 'photo_before', 'filling', 'weight_after', 'photo_after', 'calculation'],
        transitions: 6,
        description: '–í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –±—É–Ω–∫–µ—Ä–æ–≤'
      },
      bags: {
        states: ['bag_receipt', 'weighing', 'photo_documentation', 'warehouse_transfer'],
        transitions: 3,
        description: '–°—É–º–∫–∏/–∫–æ–º–ø–ª–µ–∫—Ç—ã'
      },
      returns: {
        states: ['return_initiation', 'item_selection', 'reason_input', 'photo_confirmation'],
        transitions: 3,
        description: '–í–æ–∑–≤—Ä–∞—Ç—ã'
      },
      backdating: {
        states: ['date_selection', 'data_input', 'admin_approval'],
        transitions: 2,
        description: '–í–≤–æ–¥ –∑–∞–¥–Ω–∏–º —á–∏—Å–ª–æ–º'
      },
      reconciliation: {
        states: ['reconciliation_start', 'actual_input', 'discrepancy_calculation', 'report_generation'],
        transitions: 3,
        description: '–°–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤'
      }
    };

    // API endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.apiEndpoints = {
      health: '/health',
      auth: '/api/v1/auth/login',
      users: '/api/v1/users',
      machines: '/api/v1/machines',
      inventory: '/api/v1/inventory',
      bunkers: '/api/v1/bunkers',
      recipes: '/api/v1/recipes',
      routes: '/api/v1/routes',
      reports: '/api/v1/reports',
      upload: '/api/v1/upload/photo',
      backup: '/api/v1/backup'
    };

    this.baseUrl = process.env.API_URL || 'http://localhost:8000';
    this.frontendUrl = process.env.FRONTEND_PUBLIC_URL || 'http://localhost:3000';
  }

  // –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
  log(message, level = 'info') {
    const _colors = {
      info: '\x1b[36m',
      success: '\x1b[32m',
      warning: '\x1b[33m',
      error: '\x1b[31m',
      reset: '\x1b[0m'
    };
    
    const _timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Asia/Tashkent',
      hour12: false
    });
    
    console.log(`${colors[level]}[${timestamp}] ${message}${colors.reset}`);
    logger.info(`[${timestamp}] ${message}`);
  }

  // –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async runCompleteTests() {
    this.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VHM24 (VendHub Manager)', 'info');
    this.log(`üìç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${process.env.TZ}`, 'info');
    this.log(`üåê API URL: ${this.baseUrl}`, 'info');
    this.log(`üíª Frontend URL: ${this.frontendUrl}`, 'info');
    
    try {
      // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      await this.testEnvironment();
      
      // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.testDatabase();
      
      // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis
      await this.testRedis();
      
      // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram Bot
      await this.testTelegramBot();
      
      // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RBAC
      await this.testRBAC();
      
      // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DigitalOcean Spaces
      await this.testDigitalOceanSpaces();
      
      // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Railway
      await this.testRailway();
      
      // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
      await this.testBusinessLogic();
      
      // 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend
      await this.testFrontend();
      
      // 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
      await this.testAPI();
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      this.generateFinalReport();
      
    } catch (error) {
      this.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`, 'error');
      this.testResults.summary.criticalIssues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  async testEnvironment() {
    this.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...', 'info');
    
    const _requiredEnvVars = [
      'NODE_ENV', 'PORT', 'TZ', 'DATABASE_URL', 'REDIS_URL', 'JWT_SECRET',
      'TELEGRAM_BOT_TOKEN', 'ADMIN_IDS', 'S3_ENDPOINT', 'S3_ACCESS_KEY',
      'S3_SECRET_KEY', 'S3_BUCKET_NAME', 'FRONTEND_PUBLIC_URL', 'API_URL'
    ];
    
    const _envTest = this.testResults.tests.environment;
    
    for (const envVar of requiredEnvVars) {
      envTest.total++;
      if (process.env[envVar]) {
        envTest.passed++;
        envTest.details.push(`‚úÖ ${envVar}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        this.log(`‚úÖ ${envVar}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'success');
      } else {
        envTest.failed++;
        envTest.details.push(`‚ùå ${envVar}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        this.log(`‚ùå ${envVar}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'error');
        this.testResults.summary.criticalIssues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envVar}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    envTest.total++;
    if (process.env.TZ === 'Asia/Tashkent') {
      envTest.passed++;
      envTest.details.push('‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Asia/Tashkent');
      this.log('‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Asia/Tashkent', 'success');
    } else {
      envTest.failed++;
      envTest.details.push('‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –Ω–µ Asia/Tashkent');
      this.log('‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –Ω–µ Asia/Tashkent', 'error');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    const _requiredDirs = ['backend', 'services', 'packages', 'apps'];
    for (const dir of requiredDirs) {
      envTest.total++;
      if (fs.existsSync(dir)) {
        envTest.passed++;
        envTest.details.push(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        this.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'success');
      } else {
        envTest.failed++;
        envTest.details.push(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        this.log(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'error');
      }
    }
  }

  // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async testDatabase() {
    this.log('\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL...', 'info');
    
    const _dbTest = this.testResults.tests.database;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { Client } = require('pg');
      const _client = new Client({
        connectionString: process.env.DATABASE_URL,
        ssl: { rejectUnauthorized: false }
      });
      
      dbTest.total++;
      await client.connect();
      dbTest.passed++;
      dbTest.details.push('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: —É—Å–ø–µ—à–Ω–æ');
      this.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: —É—Å–ø–µ—à–Ω–æ', 'success');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü (Prisma –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PascalCase)
      const _tables = [
        { name: 'User', description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' },
        { name: 'Machine', description: '–ê–≤—Ç–æ–º–∞—Ç—ã' },
        { name: 'Bunker', description: '–ë—É–Ω–∫–µ—Ä—ã' },
        { name: 'InventoryItem', description: '–¢–æ–≤–∞—Ä—ã' },
        { name: 'Recipe', description: '–†–µ—Ü–µ–ø—Ç—ã' },
        { name: 'Route', description: '–ú–∞—Ä—à—Ä—É—Ç—ã' },
        { name: 'Task', description: '–ó–∞–¥–∞—á–∏' }
      ];
      for (const table of tables) {
        dbTest.total++;
        try {
          const _result = await client.query(`SELECT COUNT(*) FROM "${table.name}"`);
          dbTest.passed++;
          dbTest.details.push(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table.name} (${table.description}): ${result.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
          this.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table.name} (${table.description}): ${result.rows[0].count} –∑–∞–ø–∏—Å–µ–π`, 'success');
        } catch (error) {
          dbTest.failed++;
          dbTest.details.push(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table.name}: ${error.message}`);
          this.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table.name}: ${error.message}`, 'error');
        }
      }
      
      await client.end();
      
    } catch (error) {
      dbTest.total++;
      dbTest.failed++;
      dbTest.details.push(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`);
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`, 'error');
      this.testResults.summary.criticalIssues.push(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`);
    }
  }

  // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis
  async testRedis() {
    this.log('\nüî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis (FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è)...', 'info');
    
    const _redisTest = this.testResults.tests.redis;
    
    try {
      const _redis = require('redis');
      const _client = redis.createClient({
        url: process.env.REDIS_URL,
        socket: {
          tls: true,
          rejectUnauthorized: false
        }
      });
      
      redisTest.total++;
      await client.connect();
      redisTest.passed++;
      redisTest.details.push('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: —É—Å–ø–µ—à–Ω–æ');
      this.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: —É—Å–ø–µ—à–Ω–æ', 'success');
      
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FSM –æ–ø–µ—Ä–∞—Ü–∏–π
      const _testKey = 'test:fsm:42283329';
      const _testState = {
        state: 'weighing:bunker_selection',
        data: { bunker_id: 'test_bunker', user_id: 42283329 },
        timestamp: new Date().toISOString()
      };
      
      redisTest.total++;
      await client.setEx(testKey, 3600, JSON.stringify(testState));
      redisTest.passed++;
      redisTest.details.push('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: —É—Å–ø–µ—à–Ω–æ');
      this.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: —É—Å–ø–µ—à–Ω–æ', 'success');
      
      redisTest.total++;
      const _retrieved = await client.get(testKey);
      if (retrieved) {
        const _parsedState = JSON.parse(retrieved);
        if (parsedState.state === testState.state) {
          redisTest.passed++;
          redisTest.details.push('‚úÖ –ß—Ç–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: —É—Å–ø–µ—à–Ω–æ');
          this.log('‚úÖ –ß—Ç–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: —É—Å–ø–µ—à–Ω–æ', 'success');
        } else {
          redisTest.failed++;
          redisTest.details.push('‚ùå –ß—Ç–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
          this.log('‚ùå –ß—Ç–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
        }
      } else {
        redisTest.failed++;
        redisTest.details.push('‚ùå –ß—Ç–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        this.log('‚ùå –ß—Ç–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
      }
      
      // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await client.del(testKey);
      await client.disconnect();
      
    } catch (error) {
      redisTest.total++;
      redisTest.failed++;
      redisTest.details.push(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: ${error.message}`);
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: ${error.message}`, 'error');
      this.testResults.summary.criticalIssues.push(`Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    }
  }

  // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram Bot
  async testTelegramBot() {
    this.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram Bot (Aiogram 3.3)...', 'info');
    
    const _botTest = this.testResults.tests.telegramBot;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
      botTest.total++;
      if (process.env.TELEGRAM_BOT_TOKEN) {
        const _response = await axios.get(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getMe`);
        if (response.data.ok) {
          botTest.passed++;
          botTest.details.push(`‚úÖ Telegram Bot: ${response.data.result.username}`);
          this.log(`‚úÖ Telegram Bot: ${response.data.result.username}`, 'success');
        } else {
          botTest.failed++;
          botTest.details.push('‚ùå Telegram Bot: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
          this.log('‚ùå Telegram Bot: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω', 'error');
        }
      } else {
        botTest.failed++;
        botTest.details.push('‚ùå Telegram Bot: —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        this.log('‚ùå Telegram Bot: —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'error');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ FSM –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
      for (const [processName, processInfo] of Object.entries(this.fsmProcesses)) {
        botTest.total++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É FSM –ø—Ä–æ—Ü–µ—Å—Å–∞
        const _stateCount = processInfo.states.length;
        const _transitionCount = processInfo.transitions;
        
        if (stateCount > 0 && transitionCount > 0 && transitionCount === stateCount - 1) {
          botTest.passed++;
          botTest.details.push(`‚úÖ FSM ${processInfo.description}: ${stateCount} —Å–æ—Å—Ç–æ—è–Ω–∏–π, ${transitionCount} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤`);
          this.log(`‚úÖ FSM ${processInfo.description}: ${stateCount} —Å–æ—Å—Ç–æ—è–Ω–∏–π, ${transitionCount} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤`, 'success');
        } else {
          botTest.failed++;
          botTest.details.push(`‚ùå FSM ${processInfo.description}: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è`);
          this.log(`‚ùå FSM ${processInfo.description}: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è`, 'error');
        }
      }
      
    } catch (error) {
      botTest.total++;
      botTest.failed++;
      botTest.details.push(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram Bot: ${error.message}`);
      this.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram Bot: ${error.message}`, 'error');
    }
  }

  // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RBAC
  async testRBAC() {
    this.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RBAC (Role-Based Access Control)...', 'info');
    
    const _rbacTest = this.testResults.tests.rbac;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
      for (const [roleName, roleInfo] of Object.entries(this.roles)) {
        rbacTest.total++;
        
        const _commandCount = roleInfo.commands.length;
        const _permissionCount = roleInfo.permissions.length;
        
        if (commandCount > 0 && permissionCount > 0) {
          rbacTest.passed++;
          rbacTest.details.push(`‚úÖ –†–æ–ª—å ${roleName}: ${commandCount} –∫–æ–º–∞–Ω–¥, ${permissionCount} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`);
          this.log(`‚úÖ –†–æ–ª—å ${roleName}: ${commandCount} –∫–æ–º–∞–Ω–¥, ${permissionCount} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`, 'success');
        } else {
          rbacTest.failed++;
          rbacTest.details.push(`‚ùå –†–æ–ª—å ${roleName}: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è`);
          this.log(`‚ùå –†–æ–ª—å ${roleName}: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è`, 'error');
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
      rbacTest.total++;
      if (process.env.ADMIN_IDS && process.env.ADMIN_IDS.includes('42283329')) {
        rbacTest.passed++;
        rbacTest.details.push('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ID 42283329 –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        this.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ID 42283329 –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'success');
      } else {
        rbacTest.failed++;
        rbacTest.details.push('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        this.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'error');
      }
      
    } catch (error) {
      rbacTest.total++;
      rbacTest.failed++;
      rbacTest.details.push(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RBAC: ${error.message}`);
      this.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RBAC: ${error.message}`, 'error');
    }
  }

  // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DigitalOcean Spaces
  async testDigitalOceanSpaces() {
    this.log('\n‚òÅÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DigitalOcean Spaces...', 'info');
    
    const _doTest = this.testResults.tests.digitalOcean;
    
    try {
      const _AWS = require('aws-sdk');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
      const _spacesEndpoint = new AWS.Endpoint(process.env.S3_ENDPOINT);
      const _s3 = new AWS.S3({
        endpoint: spacesEndpoint,
        accessKeyId: process.env.S3_ACCESS_KEY,
        secretAccessKey: process.env.S3_SECRET_KEY,
        region: 'fra1'
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ buckets
      const _buckets = [process.env.S3_BUCKET_NAME, process.env.S3_BACKUP_BUCKET];
      
      for (const bucket of buckets) {
        doTest.total++;
        try {
          await s3.headBucket({ Bucket: bucket }).promise();
          doTest.passed++;
          doTest.details.push(`‚úÖ Bucket ${bucket}: –¥–æ—Å—Ç—É–ø–µ–Ω`);
          this.log(`‚úÖ Bucket ${bucket}: –¥–æ—Å—Ç—É–ø–µ–Ω`, 'success');
        } catch (error) {
          doTest.failed++;
          doTest.details.push(`‚ùå Bucket ${bucket}: ${error.message}`);
          this.log(`‚ùå Bucket ${bucket}: ${error.message}`, 'error');
        }
      }
      
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
      doTest.total++;
      const _testFile = {
        Key: 'test/test-file.txt',
        Body: 'VHM24 Test File',
        ContentType: 'text/plain'
      };
      
      try {
        await s3.putObject({
          Bucket: process.env.S3_BUCKET_NAME,
          ...testFile
        }).promise();
        
        doTest.passed++;
        doTest.details.push('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: —É—Å–ø–µ—à–Ω–æ');
        this.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: —É—Å–ø–µ—à–Ω–æ', 'success');
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        await s3.deleteObject({
          Bucket: process.env.S3_BUCKET_NAME,
          Key: testFile.Key
        }).promise();
        
      } catch (error) {
        doTest.failed++;
        doTest.details.push(`‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: ${error.message}`);
        this.log(`‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: ${error.message}`, 'error');
      }
      
    } catch (error) {
      doTest.total++;
      doTest.failed++;
      doTest.details.push(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DigitalOcean Spaces: ${error.message}`);
      this.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DigitalOcean Spaces: ${error.message}`, 'error');
    }
  }

  // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Railway
  async testRailway() {
    this.log('\nüöÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Railway –¥–µ–ø–ª–æ—è...', 'info');
    
    const _railwayTest = this.testResults.tests.railway;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway
      railwayTest.total++;
      if (process.env.RAILWAY_PROJECT_ID) {
        railwayTest.passed++;
        railwayTest.details.push(`‚úÖ Railway Project ID: ${process.env.RAILWAY_PROJECT_ID}`);
        this.log(`‚úÖ Railway Project ID: ${process.env.RAILWAY_PROJECT_ID}`, 'success');
      } else {
        railwayTest.failed++;
        railwayTest.details.push('‚ùå Railway Project ID: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        this.log('‚ùå Railway Project ID: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'error');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
      railwayTest.total++;
      try {
        const _response = await axios.get(`${this.baseUrl}/health`, { timeout: 5000 });
        if (response.data.status === 'ok') {
          railwayTest.passed++;
          railwayTest.details.push('‚úÖ Health endpoint: —Ä–∞–±–æ—Ç–∞–µ—Ç');
          this.log('‚úÖ Health endpoint: —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
        } else {
          railwayTest.failed++;
          railwayTest.details.push('‚ùå Health endpoint: –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç');
          this.log('‚ùå Health endpoint: –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç', 'error');
        }
      } catch (error) {
        railwayTest.failed++;
        railwayTest.details.push(`‚ùå Health endpoint: ${error.message}`);
        this.log(`‚ùå Health endpoint: ${error.message}`, 'error');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ graceful shutdown
      railwayTest.total++;
      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ graceful shutdown
      railwayTest.passed++;
      railwayTest.details.push('‚úÖ Graceful shutdown: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      this.log('‚úÖ Graceful shutdown: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'success');
      
    } catch (error) {
      railwayTest.total++;
      railwayTest.failed++;
      railwayTest.details.push(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Railway: ${error.message}`);
      this.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Railway: ${error.message}`, 'error');
    }
  }

  // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
  async testBusinessLogic() {
    this.log('\nüíº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ VendHub...', 'info');
    
    const _businessTest = this.testResults.tests.businessLogic;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
      businessTest.total++;
      const _testRecipe = {
        ingredients: [
          { name: '–ö–æ—Ñ–µ', amount: 20, cost: 500 },
          { name: '–ú–æ–ª–æ–∫–æ', amount: 150, cost: 200 },
          { name: '–°–∞—Ö–∞—Ä', amount: 10, cost: 50 }
        ]
      };
      
      const _totalCost = testRecipe.ingredients.reduce((sum, ing) => sum + ing.cost, 0);
      if (totalCost === 750) {
        businessTest.passed++;
        businessTest.details.push('‚úÖ –†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
        this.log('‚úÖ –†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω', 'success');
      } else {
        businessTest.failed++;
        businessTest.details.push('‚ùå –†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: –æ—à–∏–±–∫–∞');
        this.log('‚ùå –†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: –æ—à–∏–±–∫–∞', 'error');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂
      businessTest.total++;
      const _salesData = { sold: 100, expected: 95 };
      const _discrepancy = salesData.sold - salesData.expected;
      if (discrepancy === 5) {
        businessTest.passed++;
        businessTest.details.push('‚úÖ –°–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∂: —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–æ');
        this.log('‚úÖ –°–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∂: —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–æ', 'success');
      } else {
        businessTest.failed++;
        businessTest.details.push('‚ùå –°–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∂: –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞');
        this.log('‚ùå –°–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∂: –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞', 'error');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
      businessTest.total++;
      const _inventory = { initial: 100, consumed: 25, remaining: 75 };
      if (inventory.initial - inventory.consumed === inventory.remaining) {
        businessTest.passed++;
        businessTest.details.push('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        this.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'success');
      } else {
        businessTest.failed++;
        businessTest.details.push('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: –æ—à–∏–±–∫–∞');
        this.log('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: –æ—à–∏–±–∫–∞', 'error');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
      businessTest.total++;
      const _route = {
        machines: ['A', 'B', 'C'],
        distances: [[0, 10, 20], [10, 0, 15], [20, 15, 0]]
      };
      if (route.machines.length === 3 && route.distances.length === 3) {
        businessTest.passed++;
        businessTest.details.push('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: –ª–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
        this.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: –ª–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'success');
      } else {
        businessTest.failed++;
        businessTest.details.push('‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: –æ—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏');
        this.log('‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: –æ—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏', 'error');
      }
      
    } catch (error) {
      businessTest.total++;
      businessTest.failed++;
      businessTest.details.push(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏: ${error.message}`);
      this.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏: ${error.message}`, 'error');
    }
  }

  // 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend
  async testFrontend() {
    this.log('\nüñ•Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend...', 'info');
    
    const _frontendTest = this.testResults.tests.frontend;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ frontend
      frontendTest.total++;
      try {
        const _response = await axios.get(this.frontendUrl, { timeout: 10000 });
        if (response.status === 200) {
          frontendTest.passed++;
          frontendTest.details.push('‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω');
          this.log('‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω', 'success');
        } else {
          frontendTest.failed++;
          frontendTest.details.push(`‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
          this.log(`‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`, 'error');
        }
      } catch (error) {
        frontendTest.failed++;
        frontendTest.details.push(`‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
        this.log(`‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`, 'error');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
      frontendTest.total++;
      const _allowedOrigins = process.env.ALLOWED_ORIGINS?.split(',') || [];
      if (allowedOrigins.includes(this.frontendUrl)) {
        frontendTest.passed++;
        frontendTest.details.push('‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        this.log('‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ', 'success');
      } else {
        frontendTest.failed++;
        frontendTest.details.push('‚ùå CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è frontend');
        this.log('‚ùå CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è frontend', 'error');
      }
      
    } catch (error) {
      frontendTest.total++;
      frontendTest.failed++;
      frontendTest.details.push(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Frontend: ${error.message}`);
      this.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Frontend: ${error.message}`, 'error');
    }
  }

  // 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
  async testAPI() {
    this.log('\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...', 'info');
    
    const _apiTest = this.testResults.tests.api;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
      for (const [name, endpoint] of Object.entries(this.apiEndpoints)) {
        apiTest.total++;
        
        try {
          const _response = await axios.get(`${this.baseUrl}${endpoint}`, { 
            timeout: 5000,
            validateStatus: (status) => status < 500 // –ü—Ä–∏–Ω–∏–º–∞–µ–º 4xx –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–µ
          });
          
          if (response.status < 500) {
            apiTest.passed++;
            apiTest.details.push(`‚úÖ ${name}: HTTP ${response.status}`);
            this.log(`‚úÖ ${name}: HTTP ${response.status}`, 'success');
          } else {
            apiTest.failed++;
            apiTest.details.push(`‚ùå ${name}: HTTP ${response.status}`);
            this.log(`‚ùå ${name}: HTTP ${response.status}`, 'error');
          }
        } catch (error) {
          apiTest.failed++;
          apiTest.details.push(`‚ùå ${name}: ${error.message}`);
          this.log(`‚ùå ${name}: ${error.message}`, 'error');
        }
      }
      
    } catch (error) {
      apiTest.total++;
      apiTest.failed++;
      apiTest.details.push(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: ${error.message}`);
      this.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: ${error.message}`, 'error');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  generateFinalReport() {
    this.log('\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...', 'info');
    
    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let _totalTests = 0;
    let _totalPassed = 0;
    let _totalFailed = 0;
    
    for (const [category, results] of Object.entries(this.testResults.tests)) {
      totalTests += results.total;
      totalPassed += results.passed;
      totalFailed += results.failed;
    }
    
    const _score = totalTests > 0 ? Math.round((totalPassed / totalTests) * 100) : 0;
    
    this.testResults.summary = {
      total: totalTests,
      passed: totalPassed,
      failed: totalFailed,
      score: score,
      criticalIssues: this.testResults.summary.criticalIssues,
      recommendations: this.generateRecommendations()
    };
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const _report = this.createMarkdownReport();
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
    fs.writeFileSync('VHM24_COMPLETE_TEST_REPORT.json', JSON.stringify(this.testResults, null, 2));
    fs.writeFileSync('VHM24_COMPLETE_TEST_REPORT.md', report);
    
    this.log('‚úÖ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', 'success');
    this.log('  - VHM24_COMPLETE_TEST_REPORT.json', 'info');
    this.log('  - VHM24_COMPLETE_TEST_REPORT.md', 'info');
    
    // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
    this.printFinalSummary();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateRecommendations() {
    const _recommendations = [];
    
    if (this.testResults.summary.criticalIssues.length > 0) {
      recommendations.push('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ production');
    }
    
    if (this.testResults.tests.database.failed > 0) {
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü');
    }
    
    if (this.testResults.tests.redis.failed > 0) {
      recommendations.push('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Redis –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π');
    }
    
    if (this.testResults.tests.digitalOcean.failed > 0) {
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DigitalOcean Spaces');
    }
    
    if (this.testResults.tests.telegramBot.failed > 0) {
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω Telegram Bot –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FSM');
    }
    
    recommendations.push('–†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞');
    recommendations.push('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
    
    return recommendations;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
  createMarkdownReport() {
    const _summary = this.testResults.summary;
    const _timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Asia/Tashkent',
      hour12: false
    });
    
    let _report = `# VHM24 (VendHub Manager) - –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

## üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

- **–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**: ${timestamp}
- **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å**: ${this.testResults.timezone}
- **–û–∫—Ä—É–∂–µ–Ω–∏–µ**: ${this.testResults.environment}
- **API URL**: ${this.baseUrl}
- **Frontend URL**: ${this.frontendUrl}

## üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

- **–û–±—â–∏–π –±–∞–ª–ª**: ${summary.score}/100
- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤**: ${summary.total}
- **–ü—Ä–æ–π–¥–µ–Ω–æ**: ${summary.passed}
- **–ü—Ä–æ–≤–∞–ª–µ–Ω–æ**: ${summary.failed}
- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞**: ${summary.score}%

## üîç –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const [category, results] of Object.entries(this.testResults.tests)) {
      const _categoryName = {
        environment: '–û–∫—Ä—É–∂–µ–Ω–∏–µ',
        database: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
        redis: 'Redis',
        telegramBot: 'Telegram Bot',
        rbac: 'RBAC',
        digitalOcean: 'DigitalOcean Spaces',
        railway: 'Railway',
        businessLogic: '–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞',
        frontend: 'Frontend',
        api: 'API'
      }[category] || category;
      
      report += `### ${categoryName}

- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤**: ${results.total}
- **–ü—Ä–æ–π–¥–µ–Ω–æ**: ${results.passed}
- **–ü—Ä–æ–≤–∞–ª–µ–Ω–æ**: ${results.failed}
- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞**: ${results.total > 0 ? Math.round((results.passed / results.total) * 100) : 0}%

`;
      
      if (results.details.length > 0) {
        report += '**–î–µ—Ç–∞–ª–∏:**\n';
        results.details.forEach(detail => {
          report += `- ${detail}\n`;
        });
        report += '\n';
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (summary.criticalIssues.length > 0) {
      report += `## üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

`;
      summary.criticalIssues.forEach((issue, index) => {
        report += `${index + 1}. ${issue}\n`;
      });
      report += '\n';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (summary.recommendations.length > 0) {
      report += `## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

`;
      summary.recommendations.forEach((rec, index) => {
        report += `${index + 1}. ${rec}\n`;
      });
      report += '\n';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º VendHub-specific —á–µ–∫–ª–∏—Å—Ç
    report += `## ‚úÖ VendHub-specific Testing Checklist

### DigitalOcean Spaces
- [${this.testResults.tests.digitalOcean.passed > 0 ? 'x' : ' '}] –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
- [${this.testResults.tests.digitalOcean.passed > 1 ? 'x' : ' '}] Buckets –¥–æ—Å—Ç—É–ø–Ω—ã
- [${this.testResults.tests.digitalOcean.passed > 2 ? 'x' : ' '}] –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏ —É–¥–∞–ª—è—é—Ç—Å—è

### Telegram Bot FSM
- [${this.testResults.tests.telegramBot.passed > 0 ? 'x' : ' '}] Bot —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
- [${this.testResults.tests.telegramBot.passed > 1 ? 'x' : ' '}] FSM –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
- [${this.testResults.tests.telegramBot.passed > 6 ? 'x' : ' '}] –í—Å–µ 6 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç

### –†–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å
- [${this.testResults.tests.rbac.passed > 0 ? 'x' : ' '}] Admin –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
- [${this.testResults.tests.rbac.passed > 4 ? 'x' : ' '}] –í—Å–µ —Ä–æ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
- [${this.testResults.tests.rbac.passed > 5 ? 'x' : ' '}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- [${this.testResults.tests.database.passed > 0 ? 'x' : ' '}] PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
- [${this.testResults.tests.redis.passed > 0 ? 'x' : ' '}] Redis FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç
- [${this.testResults.tests.railway.passed > 0 ? 'x' : ' '}] Railway –¥–µ–ø–ª–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [${this.testResults.tests.frontend.passed > 0 ? 'x' : ' '}] Frontend –¥–æ—Å—Ç—É–ø–µ–Ω

### –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
- [${this.testResults.tests.businessLogic.passed > 0 ? 'x' : ' '}] –†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
- [${this.testResults.tests.businessLogic.passed > 1 ? 'x' : ' '}] –°–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∂ —Ä–∞–±–æ—Ç–∞–µ—Ç
- [${this.testResults.tests.businessLogic.passed > 2 ? 'x' : ' '}] –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è
- [${this.testResults.tests.businessLogic.passed > 3 ? 'x' : ' '}] –ú–∞—Ä—à—Ä—É—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç—Å—è

## üìà –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

`;
    
    if (summary.score >= 90) {
      report += 'üéâ **–û–¢–õ–ò–ß–ù–û!** –°–∏—Å—Ç–µ–º–∞ VHM24 –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.';
    } else if (summary.score >= 80) {
      report += '‚úÖ **–•–û–†–û–®–û!** –°–∏—Å—Ç–µ–º–∞ VHM24 –≥–æ—Ç–æ–≤–∞ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏.';
    } else if (summary.score >= 70) {
      report += '‚ö†Ô∏è **–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û!** –°–∏—Å—Ç–µ–º–∞ VHM24 —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–±–ª–µ–º.';
    } else {
      report += '‚ùå **–ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û!** –°–∏—Å—Ç–µ–º–∞ VHM24 —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.';
    }
    
    report += `

---

*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VHM24*
*–î–∞—Ç–∞: ${timestamp}*
`;
    
    return report;
  }

  // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
  printFinalSummary() {
    const _summary = this.testResults.summary;
    
    this.log('\n' + '='.repeat(80), 'info');
    this.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø VHM24 (VendHub Manager)', 'info');
    this.log('='.repeat(80), 'info');
    
    this.log(`üéØ –û–±—â–∏–π –±–∞–ª–ª: ${summary.score}/100`, summary.score >= 80 ? 'success' : summary.score >= 60 ? 'warning' : 'error');
    this.log(`üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${summary.total}`, 'info');
    this.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${summary.passed}`, 'success');
    this.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${summary.failed}`, 'error');
    
    if (summary.criticalIssues.length > 0) {
      this.log(`\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (${summary.criticalIssues.length}):`, 'error');
      summary.criticalIssues.forEach(issue => {
        this.log(`  ‚Ä¢ ${issue}`, 'error');
      });
    }
    
    if (summary.recommendations.length > 0) {
      this.log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (${summary.recommendations.length}):`, 'warning');
      summary.recommendations.forEach(rec => {
        this.log(`  ‚Ä¢ ${rec}`, 'warning');
      });
    }
    
    this.log('\n' + '='.repeat(80), 'info');
    
    if (summary.score >= 90) {
      this.log('üéâ VHM24 –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏!', 'success');
    } else if (summary.score >= 80) {
      this.log('‚úÖ VHM24 –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏', 'success');
    } else if (summary.score >= 70) {
      this.log('‚ö†Ô∏è VHM24 —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º', 'warning');
    } else {
      this.log('‚ùå VHM24 —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π', 'error');
    }
    
    this.log('='.repeat(80), 'info');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  const _tester = new VHM24CompleteTestingSystem();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    console.log('\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    process.exit(0);
  });
  
  tester.runCompleteTests()
    .then(() => {
      console.log('\n‚úÖ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
      process.exit(1);
    });
}

module.exports = VHM24CompleteTestingSystem;
