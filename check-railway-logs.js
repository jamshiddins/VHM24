/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ Railway –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π: node check-railway-logs.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–æ–º
function log(message, color = 'reset') {
  console.log(colors[color] + message + colors.reset);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è Railway CLI
function checkRailwayCLI() {
  try {
    execSync('railway --version', { stdio: 'ignore' });
    return true;
  } catch (error) {
    log('‚ùå Railway CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: npm install -g @railway/cli', 'red');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Railway
function checkRailwayAuth() {
  try {
    execSync('railway whoami', { stdio: 'ignore' });
    return true;
  } catch (error) {
    log('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Railway. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: railway login', 'red');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ Railway
function getRailwayLogs(service = 'web', lines = 100) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ Windows
    const isWindows = process.platform === 'win32';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π Windows –∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ Railway CLI
    const command = isWindows 
      ? `railway logs --service ${service} --limit ${lines}`
      : `railway logs --service ${service} --limit ${lines}`;
    
    const output = execSync(command).toString();
    return output;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ Railway: ${error.message}`, 'red');
    
    // –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    try {
      const fallbackCommand = `railway logs -s ${service} -n ${lines}`;
      const output = execSync(fallbackCommand).toString();
      return output;
    } catch (fallbackError) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ Railway: ${fallbackError.message}`, 'red');
      return '';
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
function analyzeLogsForEnvErrors(logs) {
  const envErrorPatterns = [
    'process.env',
    'undefined variable',
    'cannot read property',
    'is not defined',
    'missing required',
    'environment variable',
    'env var',
    'dotenv',
    'DATABASE_URL',
    'REDIS_URL',
    'JWT_SECRET',
    'TELEGRAM_BOT_TOKEN',
    'S3_ACCESS_KEY',
    'S3_SECRET_KEY'
  ];
  
  const errors = [];
  const lines = logs.split('\n');
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (line.includes('error') || line.includes('exception') || line.includes('fail')) {
      for (const pattern of envErrorPatterns) {
        if (line.includes(pattern.toLowerCase())) {
          errors.push({
            line: i + 1,
            text: lines[i],
            pattern
          });
          break;
        }
      }
    }
  }
  
  return errors;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
function saveLogsToFile(logs, filename) {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = path.dirname(filename);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    fs.writeFileSync(filename, logs);
    log(`‚úÖ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`, 'green');
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª: ${error.message}`, 'red');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ Railway
function checkRailwayLogs() {
  log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Railway –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è...', 'blue');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Railway CLI –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!checkRailwayCLI() || !checkRailwayAuth()) {
    return;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ Railway
  log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ Railway...', 'blue');
  const logs = getRailwayLogs();
  
  if (!logs) {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ Railway', 'red');
    return;
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
  const logsDir = path.join(__dirname, 'logs');
  if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir, { recursive: true });
  }
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = path.join(logsDir, `railway-logs-${timestamp}.log`);
  saveLogsToFile(logs, filename);
  
  // –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  log('üîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è...', 'blue');
  const errors = analyzeLogsForEnvErrors(logs);
  
  if (errors.length > 0) {
    log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è:`, 'red');
    
    for (const error of errors) {
      log(`  –°—Ç—Ä–æ–∫–∞ ${error.line}: ${error.text}`, 'red');
      log(`  –ü–∞—Ç—Ç–µ—Ä–Ω: ${error.pattern}`, 'yellow');
      log('');
    }
    
    log('‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', 'yellow');
    log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway', 'yellow');
    log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç setup-railway-variables.js –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è', 'yellow');
    log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è', 'yellow');
    log('4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫', 'yellow');
  } else {
    log('‚úÖ –û—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'green');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
  const warnings = logs.split('\n').filter(line => 
    line.toLowerCase().includes('warn') || 
    line.toLowerCase().includes('warning') || 
    line.toLowerCase().includes('deprecated')
  );
  
  if (warnings.length > 0) {
    log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${warnings.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:`, 'yellow');
    
    for (const warning of warnings) {
      log(`  ${warning}`, 'yellow');
    }
  } else {
    log('‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'green');
  }
  
  log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Railway –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'green');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤
checkRailwayLogs();
