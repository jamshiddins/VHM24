#!/usr/bin/env node

const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã VHM24 (VendHub Manager)...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function runCommand(command, cwd = process.cwd()) {
    return new Promise((resolve, reject) => {
        
        const child = exec(command, { cwd }, (error, stdout, stderr) => {
            if (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                reject(error);
                return;
            }
            if (stderr) {
                console.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${stderr}`);
            }
            
            resolve(stdout);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
async function fixCriticalErrors() {
    

    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º backend/src/routes/api.js
    const apiRoutePath = path.join(__dirname, 'backend/src/routes/api.js');
    if (fs.existsSync(apiRoutePath)) {
        const apiContent = `const express = require('express');
const router = express.Router();

// Import route modules
const authRoutes = require('./auth');
const usersRoutes = require('./users');
const machinesRoutes = require('./machines');
const inventoryRoutes = require('./inventory');
const tasksRoutes = require('./tasks');
const warehouseRoutes = require('./warehouse');
const telegramRoutes = require('./telegram');

// Use routes
router.use('/auth', authRoutes);
router.use('/users', usersRoutes);
router.use('/machines', machinesRoutes);
router.use('/inventory', inventoryRoutes);
router.use('/tasks', tasksRoutes);
router.use('/warehouse', warehouseRoutes);
router.use('/telegram', telegramRoutes);

// Health check endpoint
router.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        service: 'VHM24 API',
        timestamp: new Date().toISOString() 
    });
});

module.exports = router;
`;
        fs.writeFileSync(apiRoutePath, apiContent);
        
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    const envPath = path.join(__dirname, '.env');
    if (!fs.existsSync(envPath)) {
        
        
        
        const envContent = `# VHM24 Environment Variables
NODE_ENV=development
PORT=3000

# Database
DATABASE_URL="postgresql://postgres:password@localhost:5432/vhm24?schema=public"

# JWT
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# Telegram Bot
TELEGRAM_BOT_TOKEN=your-telegram-bot-token

# AWS S3 (optional)
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_REGION=us-east-1
AWS_S3_BUCKET=your-bucket-name

# Redis (optional)
REDIS_URL=redis://localhost:6379
`;
        fs.writeFileSync(envPath, envContent);
        
    }

    // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º telegram bot index.js
    const botIndexPath = path.join(__dirname, 'apps/telegram-bot/src/index.js');
    if (fs.existsSync(botIndexPath)) {
        const botContent = `const { Telegraf } = require('telegraf');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config({ path: '../../.env' });



const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || 'demo-token');

// Basic commands
bot.start((ctx) => {
    ctx.reply('üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VHM24 (VendHub Manager)!\\n\\n–≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏.');
});

bot.help((ctx) => {
    ctx.reply('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\\n/help - –ü–æ–º–æ—â—å\\n/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã');
});

bot.command('status', (ctx) => {
    ctx.reply('‚úÖ VHM24 Bot –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// Error handling
bot.catch((err, ctx) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// Start bot
if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_BOT_TOKEN !== 'demo-token') {
    bot.launch()
        .then(() => {
            
        })
        .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        });
} else {
    
}

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

module.exports = bot;
`;
        fs.writeFileSync(botIndexPath, botContent);
        
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function startVHM24System() {
    try {
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        await fixCriticalErrors();

        
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ backend
        
        await runCommand('npm install', './backend');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ telegram-bot
        
        await runCommand('npm install', './apps/telegram-bot');

        
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client
        
        await runCommand('npx prisma generate', './backend');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client –¥–ª—è telegram-bot
        
        await runCommand('npx prisma generate', './apps/telegram-bot');

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        try {
            await runCommand('npx prisma db push', './backend');
            
        } catch (dbError) {
            
        }

        

        // –ó–∞–ø—É—Å–∫–∞–µ–º backend
        
        const backendProcess = spawn('npm', ['start'], {
            cwd: './backend',
            stdio: ['pipe', 'pipe', 'pipe']
        });

        backendProcess.stdout.on('data', (data) => {
            console.log(`[Backend] ${data.toString().trim()}`);
        });

        backendProcess.stderr.on('data', (data) => {
            console.log(`[Backend Error] ${data.toString().trim()}`);
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º telegram bot
        
        const botProcess = spawn('npm', ['start'], {
            cwd: './apps/telegram-bot',
            stdio: ['pipe', 'pipe', 'pipe']
        });

        botProcess.stdout.on('data', (data) => {
            console.log(`[Bot] ${data.toString().trim()}`);
        });

        botProcess.stderr.on('data', (data) => {
            console.log(`[Bot Error] ${data.toString().trim()}`);
        });

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 3000));

        console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ VHM24 (VendHub Manager) –∑–∞–ø—É—â–µ–Ω–∞!');
        
        
        
        console.log('   üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)');
        

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', () => {
            
            backendProcess.kill();
            botProcess.kill();
            process.exit(0);
        });

        // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
        setInterval(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        }, 5000);

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error.message);
        
        
        
        
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
startVHM24System();
