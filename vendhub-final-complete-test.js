const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ VendHub - –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã');
console.log('=' .repeat(60));

const results = {
    "tests": [],;
    "errors": [],;
    "warnings": [],;
    "success": true;
};

function addTest(name, status, details = '') {
    results.tests.push({ name, status, details });
    const icon = status === 'PASS' ? '‚úÖ' : status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
    console.log(`${icon} ${name}${details ? ': ' + details : ''}`);
    if (status === 'FAIL') results.success = false;
}

function addError(error) {
    results.errors.push(error);
    console.log(`‚ùå –û–®–ò–ë–ö–ê: ${error}`);
}

function addWarning(warning) {
    results.warnings.push(warning);
    console.log(`‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: ${warning}`);
}

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞;
console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
const requiredDirs = [;
    'backend',;
    'backend/src',;
    'backend/src/routes',;
    'backend/src/middleware',;
    'backend/src/utils',;
    'backend/prisma',;
    'apps/telegram-bot',;
    'apps/telegram-bot/src';
];

requiredDirs.forEach(dir => {
    if (fs.existsSync(dir)) {
        addTest(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir}`, 'PASS');
    } else {
        addTest(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir}`, 'FAIL', '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
});

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤;
console.log('\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...');
const requiredFiles = [;
    'backend/package.json',;
    'backend/src/index.js',;
    'backend/prisma/schema.prisma',;
    'apps/telegram-bot/package.json',;
    'apps/telegram-bot/src/index.js',;
    '.env';
];

requiredFiles.forEach(file => {
    if (fs.existsSync(file)) {
        addTest(`–§–∞–π–ª ${file}`, 'PASS');
    } else {
        addTest(`–§–∞–π–ª ${file}`, 'FAIL', '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
});

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è;
console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
try {
    const envContent = fs.readFileSync('.env', 'utf8');
    const requiredEnvVars = [;
        'DATABASE_URL',;
        'JWT_SECRET',;
        'TELEGRAM_BOT_TOKEN',;
        'AWS_ACCESS_KEY_ID',;
        'AWS_SECRET_ACCESS_KEY',;
        'AWS_REGION',;
        'AWS_S3_BUCKET';
    ];
    
    requiredEnvVars.forEach(envVar => {
        if (envContent.includes(`${envVar}=`)) {
            const value = envContent.match(new RegExp(`${envVar}=(.+)`))?.[1];
            if (value && value.trim() && !value.includes('your_')) {
                addTest(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${envVar}`, 'PASS');
            } else {
                addTest(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${envVar}`, 'WARN', '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
            }
        } else {
            addTest(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${envVar}`, 'FAIL', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
    });
} catch (error) {
    addError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª .env');
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã Prisma;
console.log('\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã Prisma...');
try {
    const schemaContent = fs.readFileSync('backend/prisma/schema.prisma', 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏;
    const requiredModels = [;
        'User', 'Machine', 'Task', 'Item', 'Movement',;
        'Hopper', 'WaterBottle', 'Syrup', 'Bag';
    ];
    
    requiredModels.forEach(model => {
        if (schemaContent.includes(`model ${model}`)) {
            addTest(`–ú–æ–¥–µ–ª—å ${model}`, 'PASS');
        } else {
            addTest(`–ú–æ–¥–µ–ª—å ${model}`, 'FAIL', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ');
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º enum;
    const requiredEnums = [;
        'UserRole', 'TaskStatus', 'TaskType', 'MachineStatus',;
        'TaskPriority', 'MovementType', 'MovementStatus';
    ];
    
    requiredEnums.forEach(enumType => {
        if (schemaContent.includes(`enum ${enumType}`)) {
            addTest(`Enum ${enumType}`, 'PASS');
        } else {
            addTest(`Enum ${enumType}`, 'FAIL', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ');
        }
    });
    
} catch (error) {
    addError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ö–µ–º—É Prisma');
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend;
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend...');
try {
    const backendPackage = JSON.parse(fs.readFileSync('backend/package.json', 'utf8'));
    const requiredDeps = [;
        '@prisma/client', 'prisma', 'express', 'cors', 'helmet',;
        'bcryptjs', 'jsonwebtoken', 'multer', 'aws-sdk';
    ];
    
    const allDeps = { ...backendPackage.dependencies, ...backendPackage.devDependencies };
    
    requiredDeps.forEach(dep => {
        if (allDeps[dep]) {
            addTest(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep}`, 'PASS');
        } else {
            addTest(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep}`, 'FAIL', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
    });
} catch (error) {
    addError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å package.json backend');
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π telegram-bot;
console.log('\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π telegram-bot...');
try {
    const botPackage = JSON.parse(fs.readFileSync('apps/telegram-bot/package.json', 'utf8'));
    const requiredBotDeps = ['telegraf', 'axios', 'dotenv'];
    
    const allBotDeps = { ...botPackage.dependencies, ...botPackage.devDependencies };
    
    requiredBotDeps.forEach(dep => {
        if (allBotDeps[dep]) {
            addTest(`Bot –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep}`, 'PASS');
        } else {
            addTest(`Bot –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep}`, 'FAIL', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
    });
} catch (error) {
    addError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å package.json telegram-bot');
}

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API;
console.log('\nüõ£Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API...');
const routeFiles = [;
    'backend/src/routes/auth.js',;
    'backend/src/routes/users.js',;
    'backend/src/routes/machines.js',;
    'backend/src/routes/tasks.js',;
    'backend/src/routes/inventory.js',;
    'backend/src/routes/warehouse.js',;
    'backend/src/routes/telegram.js';
];

routeFiles.forEach(routeFile => {
    if (fs.existsSync(routeFile)) {
        try {
            const content = fs.readFileSync(routeFile, 'utf8');
            if (content.includes('router.') && content.includes('module.exports')) {
                addTest(`–ú–∞—Ä—à—Ä—É—Ç ${path.basename(routeFile)}`, 'PASS');
            } else {
                addTest(`–ú–∞—Ä—à—Ä—É—Ç ${path.basename(routeFile)}`, 'WARN', '–≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã');
            }
        } catch (error) {
            addTest(`–ú–∞—Ä—à—Ä—É—Ç ${path.basename(routeFile)}`, 'FAIL', '–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è');
        }
    } else {
        addTest(`–ú–∞—Ä—à—Ä—É—Ç ${path.basename(routeFile)}`, 'FAIL', '—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
});

// 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware;
console.log('\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware...');
const middlewareFiles = [;
    'backend/src/middleware/auth.js',;
    'backend/src/middleware/roleCheck.js',;
    'backend/src/middleware/upload.js';
];

middlewareFiles.forEach(middlewareFile => {
    if (fs.existsSync(middlewareFile)) {
        addTest(`Middleware ${path.basename(middlewareFile)}`, 'PASS');
    } else {
        addTest(`Middleware ${path.basename(middlewareFile)}`, 'FAIL', '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
});

// 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–∏–ª–∏—Ç;
console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–∏–ª–∏—Ç...');
const utilFiles = [;
    'backend/src/utils/logger.js',;
    'backend/src/utils/s3.js',;
    'backend/src/utils/excelImport.js';
];

utilFiles.forEach(utilFile => {
    if (fs.existsSync(utilFile)) {
        addTest(`–£—Ç–∏–ª–∏—Ç–∞ ${path.basename(utilFile)}`, 'PASS');
    } else {
        addTest(`–£—Ç–∏–ª–∏—Ç–∞ ${path.basename(utilFile)}`, 'FAIL', '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
});

// 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤;
console.log('\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
const configFiles = [;
    'railway.toml',;
    'nixpacks.toml',;
    'docker-compose.yml';
];

configFiles.forEach(configFile => {
    if (fs.existsSync(configFile)) {
        addTest(`–ö–æ–Ω—Ñ–∏–≥ ${configFile}`, 'PASS');
    } else {
        addTest(`–ö–æ–Ω—Ñ–∏–≥ ${configFile}`, 'WARN', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
});

// –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç;
console.log('\n' + '='.repeat(60));
console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
console.log('='.repeat(60));

const passedTests = results.tests.filter(t => t.status === 'PASS').length;
const failedTests = results.tests.filter(t => t.status === 'FAIL').length;
const warnTests = results.tests.filter(t => t.status === 'WARN').length;

console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}`);
console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${failedTests}`);
console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnTests}`);
console.log(`üìù –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${results.errors.length}`);

if (results.success && failedTests === 0) {
    console.log('\nüéâ –í–°–ï –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ VendHub –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É');
    
    if (warnTests > 0) {
        console.log('\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã');
    }
} else {
    console.log('\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´');
    console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º');
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç;
const reportData = {
    "timestamp": new Date().toISOString(),;
    "summary": {,
  "total": results.tests.length,;
        "passed": passedTests,;
        "failed": failedTests,;
        "warnings": warnTests,;
        "errors": results.errors.length;
    },;
    "tests": results.tests,;
    "errors": results.errors,;
    "warnings": results.warnings,;
    "status": results.success && failedTests === 0 ? 'SUCCESS' : 'FAILED';
};

fs.writeFileSync('vendhub-test-report.json', JSON.stringify(reportData, null, 2));
console.log('\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ vendhub-test-report.json');

// –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏;
console.log('\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
if (results.success && failedTests === 0) {
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev (–≤ –ø–∞–ø–∫–µ backend)');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm start (–≤ –ø–∞–ø–∫–µ apps/telegram-bot)');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É API –Ω–∞ "http"://"localhost":3000');
    console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ Telegram –±–æ—Ç–∞');
} else {
    console.log('1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏');
    console.log('2. –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç');
    console.log('3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è - –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É');
}

console.log('\n' + '='.repeat(60));
process.exit(failedTests > 0 ? 1 : 0);
