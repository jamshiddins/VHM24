const logger = require('@vhm24/shared/logger');

const fs = require('fs')
const { promises: fsPromises } = fs;
const path = require('path');

class RailwayPreparation {
  constructor() {
    this.tasks = [];
    this.warnings = [];
  }

  async prepare() {
    logger.info('üöÇ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway...\n');
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
      this.createRailwayConfig();
      
      // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json
      this.updatePackageJson();
      
      // 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      this.prepareEnvironmentVariables();
      
      // 4. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è Railway –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      this.adaptForRailwayLimitations();
      
      // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–µ–ø–ª–æ—è
      this.createDeploymentScripts();
      
      // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      this.finalCheck();
      
      // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
      this.generateDeploymentGuide();
      
    } catch (error) {
      logger.error('‚ùå Error during preparation:', error);
      throw error;
    }
  }

  createRailwayConfig() {
    logger.info('üìù –°–æ–∑–¥–∞–Ω–∏–µ Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º nixpacks.toml –¥–ª—è monorepo
    const nixpacksConfig = `[phases.setup]
nixPkgs = ["nodejs-18_x", "npm-9_x"]

[phases.install]
cmds = ["npm install", "npm install --workspaces"]

[phases.build]
cmds = ["npm run build --if-present"]

[start]
cmd = "npm run start:production"`;
    
    await fsPromises.writeFile('nixpacks.toml', nixpacksConfig);
    this.tasks.push('Updated nixpacks.toml for monorepo');
    
    // –°–æ–∑–¥–∞–µ–º railway.toml –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    const railwayConfig = `[build]
builder = "nixpacks"
buildCommand = "npm install && npm install --workspaces"

[deploy]
startCommand = "npm run start:production"
healthcheckPath = "/health"
healthcheckTimeout = 30
restartPolicyType = "always"

[env]
NODE_ENV = "production"`;
    
    await fsPromises.writeFile('railway.toml', railwayConfig);
    this.tasks.push('Created railway.toml');
  }

  updatePackageJson() {
    logger.info('üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json...');
    
    const pkg = JSON.parse(await fsPromises.readFile('package.json', 'utf8'));
    
    // –î–æ–±–∞–≤–ª—è–µ–º production —Å–∫—Ä–∏–ø—Ç—ã
    pkg.scripts = pkg.scripts || {};
    pkg.scripts['start:production'] = 'node scripts/start-production.js';
    pkg.scripts['build'] = 'npm install --workspaces && npm run build --workspaces --if-present';
    pkg.scripts['railway:deploy'] = 'npm run build && npm run start:production';
    
    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –µ—Å—Ç—å engines
    pkg.engines = pkg.engines || {};
    pkg.engines.node = '>=18.0.0';
    pkg.engines.npm = '>=9.0.0';
    
    // –î–æ–±–∞–≤–ª—è–µ–º workspaces –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!pkg.workspaces) {
      pkg.workspaces = [
        "packages/*",
        "services/*",
        "apps/*"
      ];
    }
    
    await fsPromises.writeFile('package.json', JSON.stringify(pkg, null, 2));
    this.tasks.push('Updated root package.json');
  }

  prepareEnvironmentVariables() {
    logger.info('üîê –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    
    const envExample = `# Railway Environment Variables for VHM24

# ===== –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò =====
NODE_ENV=production
PORT=8000

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
# Railway PostgreSQL (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è Railway)
DATABASE_URL=postgresql://user:password@host:port/database

# ===== REDIS =====
# Railway Redis (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è Railway)
REDIS_URL=redis://default:password@host:port

# ===== –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ =====
JWT_SECRET=your-super-secret-jwt-key-min-32-chars-long
JWT_EXPIRES_IN=7d

# ===== –í–ù–£–¢–†–ï–ù–ù–ò–ï URL –°–ï–†–í–ò–°–û–í =====
# Railway –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–µ—Ç—å (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ Railway URLs)
GATEWAY_URL=https://gateway-production.up.railway.app
AUTH_SERVICE_URL=https://auth-production.up.railway.app
MACHINES_SERVICE_URL=https://machines-production.up.railway.app
INVENTORY_SERVICE_URL=https://inventory-production.up.railway.app
TASKS_SERVICE_URL=https://tasks-production.up.railway.app
NOTIFICATIONS_SERVICE_URL=https://notifications-production.up.railway.app
TELEGRAM_BOT_SERVICE_URL=https://telegram-bot-production.up.railway.app

# ===== –í–ù–ï–®–ù–ò–ï –°–ï–†–í–ò–°–´ =====
# Telegram Bot
TELEGRAM_BOT_TOKEN=your-bot-token-from-botfather

# S3 Storage (AWS, DigitalOcean Spaces, –∏–ª–∏ –¥—Ä—É–≥–æ–π S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
S3_BUCKET=your-s3-bucket-name
S3_ACCESS_KEY=your-s3-access-key
S3_SECRET_KEY=your-s3-secret-key
S3_ENDPOINT=https://s3.amazonaws.com
S3_REGION=us-east-1

# ===== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –õ–û–ì–ò =====
LOG_LEVEL=info
SENTRY_DSN=your-sentry-dsn-for-error-tracking

# ===== CORS –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ =====
ALLOWED_ORIGINS=https://your-frontend.railway.app,https://your-dashboard.railway.app
CORS_CREDENTIALS=true

# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò =====
# –¢–∞–π–º–∞—É—Ç—ã
REQUEST_TIMEOUT=30000
DB_CONNECTION_TIMEOUT=10000

# –õ–∏–º–∏—Ç—ã
MAX_FILE_SIZE=10485760
MAX_REQUEST_SIZE=52428800

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
CACHE_TTL=3600`;
    
    await fsPromises.writeFile('.env.railway.example', envExample);
    this.tasks.push('Created .env.railway.example');
    
    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const envChecker = `const required = [
  'DATABASE_URL',
  'REDIS_URL',
  'JWT_SECRET',
  'TELEGRAM_BOT_TOKEN'
];

const optional = [
  'S3_BUCKET',
  'S3_ACCESS_KEY',
  'S3_SECRET_KEY',
  'SENTRY_DSN'
];

logger.info('üîç Checking environment variables...');

const missing = required.filter(key => !process.env[key]);
const missingOptional = optional.filter(key => !process.env[key]);

if (missing.length > 0) {
  logger.error('‚ùå Missing required environment variables:');
  missing.forEach(key => logger.error(\`  - \${key}\`));
  process.exit(1);
}

if (missingOptional.length > 0) {
  logger.warn('‚ö†Ô∏è Missing optional environment variables:');
  missingOptional.forEach(key => logger.warn(\`  - \${key}\`));
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Å–µ–∫—Ä–µ—Ç–∞
if (process.env.JWT_SECRET && process.env.JWT_SECRET.length < 32) {
  logger.error('‚ùå JWT_SECRET must be at least 32 characters long');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ S3 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (process.env.S3_BUCKET && (!process.env.S3_ACCESS_KEY || !process.env.S3_SECRET_KEY)) {
  logger.error('‚ùå S3_BUCKET requires S3_ACCESS_KEY and S3_SECRET_KEY');
  process.exit(1);
}

logger.info('‚úÖ All required environment variables are set');
logger.info(\`üìä \${required.length - missing.length}/\${required.length} required variables configured\`);
logger.info(\`üìä \${optional.length - missingOptional.length}/\${optional.length} optional variables configured\`);`;
    
    await fsPromises.writeFile('scripts/check-env.js', envChecker);
    this.tasks.push('Created environment checker script');
  }

  adaptForRailwayLimitations() {
    logger.info('üîß –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Railway...');
    
    // Railway –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    this.warnings.push('MinIO –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –≤–Ω–µ—à–Ω–∏–π S3 - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ S3_BUCKET, S3_ACCESS_KEY, S3_SECRET_KEY');
    
    // Railway –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—É–±–ª–∏—á–Ω—ã–π –ø–æ—Ä—Ç –Ω–∞ —Å–µ—Ä–≤–∏—Å
    this.warnings.push('–ö–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ–π Railway URL, –æ–±–Ω–æ–≤–∏—Ç–µ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    
    // –°–æ–∑–¥–∞–µ–º middleware –¥–ª—è Railway —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const railwayMiddleware = `// Railway-specific middleware
const railwayMiddleware = (fastify, options, done) => {
  // –î–æ–±–∞–≤–ª—è–µ–º Railway health check headers
  fastify.addHook('onRequest', async (request, reply) => {
    if (request.url === '/health') {
      reply.header('X-Railway-Health', 'ok');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Railway –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  fastify.addHook('preHandler', async (request, reply) => {
    // –î–æ–±–∞–≤–ª—è–µ–º Railway request ID –µ—Å–ª–∏ –µ—Å—Ç—å
    if (request.headers['x-railway-request-id']) {
      request.railwayRequestId = request.headers['x-railway-request-id'];
    }
  });
  
  // Graceful shutdown –¥–ª—è Railway
  const gracefulShutdown = () => {
    logger.info('üõë Received shutdown signal, closing server gracefully...');
    fastify.close(() => {
      logger.info('‚úÖ Server closed successfully');
      process.exit(0);
    });
  };
  
  process.on('SIGTERM', gracefulShutdown);
  process.on('SIGINT', gracefulShutdown);
  
  done();
};

module.exports = railwayMiddleware;`;
    
    const middlewareDir = 'packages/shared/middleware';
    if (!fs.existsSync(middlewareDir)) {
      fs.mkdirSync(middlewareDir, { recursive: true });
    }
    
    await fsPromises.writeFile(path.join(middlewareDir, 'railway.js'), railwayMiddleware);
    this.tasks.push('Created Railway-specific middleware');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º .railwayignore
    const railwayIgnore = `# Development files
*.log
*.backup.*
node_modules/
.env
.env.local
.env.development

# Test files
coverage/
*.test.js
__tests__/

# Build artifacts
dist/
build/

# IDE files
.vscode/
.idea/
*.swp
*.swo

# OS files
.DS_Store
Thumbs.db

# Temporary files
tmp/
temp/
*.tmp

# Documentation (optional)
docs/
*.md
!README.md

# Scripts not needed in production
scripts/test-*
scripts/dev-*
scripts/local-*`;
    
    await fsPromises.writeFile('.railwayignore', railwayIgnore);
    this.tasks.push('Updated .railwayignore');
  }

  createDeploymentScripts() {
    logger.info('üìú –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–µ–ø–ª–æ—è...');
    
    // –°–∫—Ä–∏–ø—Ç –¥–ª—è production –∑–∞–ø—É—Å–∫–∞
    const productionStarter = `// Production starter for Railway deployment
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

logger.info('üöÄ Starting VHM24 in production mode on Railway...');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try {
  require('./check-env');
} catch (error) {
  logger.error('‚ùå Environment check failed:', error.message);
  process.exit(1);
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const SERVICE = process.env.RAILWAY_SERVICE_NAME || 
               process.env.SERVICE_NAME || 
               detectServiceFromPath() ||
               'gateway';

logger.info(\`üéØ Detected service: \${SERVICE}\`);

const serviceMap = {
  'gateway': { path: 'services/gateway', port: 8000, public: true },
  'auth': { path: 'services/auth', port: 3001, public: false },
  'machines': { path: 'services/machines', port: 3002, public: false },
  'inventory': { path: 'services/inventory', port: 3003, public: false },
  'tasks': { path: 'services/tasks', port: 3004, public: false },
  'telegram-bot': { path: 'services/telegram-bot', port: 3005, public: false },
  'notifications': { path: 'services/notifications', port: 3006, public: false },
  'audit': { path: 'services/audit', port: 3007, public: false },
  'data-import': { path: 'services/data-import', port: 3008, public: false },
  'backup': { path: 'services/backup', port: 3009, public: false },
  'monitoring': { path: 'services/monitoring', port: 3010, public: false },
  'routes': { path: 'services/routes', port: 3011, public: false },
  'warehouse': { path: 'services/warehouse', port: 3012, public: false },
  'recipes': { path: 'services/recipes', port: 3013, public: false },
  'bunkers': { path: 'services/bunkers', port: 3014, public: false }
};

const service = serviceMap[SERVICE];

if (!service) {
  logger.error(\`‚ùå Unknown service: \${SERVICE}\`);
  logger.info('Available services:', Object.keys(serviceMap).join(', '));
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
if (!fs.existsSync(service.path)) {
  logger.error(\`‚ùå Service path not found: \${service.path}\`);
  process.exit(1);
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PORT –¥–ª—è Railway
process.env.PORT = process.env.PORT || service.port.toString();

logger.info(\`üöÄ Starting \${SERVICE} service...\`);
logger.info(\`üìÅ Path: \${service.path}\`);
logger.info(\`üåê Port: \${process.env.PORT}\`);
logger.info(\`üîì Public: \${service.public ? 'Yes' : 'No'}\`);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
process.env.SERVICE_NAME = SERVICE;
process.env.SERVICE_PATH = service.path;

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
const child = spawn('npm', ['start'], {
  cwd: service.path,
  stdio: 'inherit',
  env: process.env
});

child.on('error', (error) => {
  logger.error('‚ùå Failed to start service:', error);
  process.exit(1);
});

child.on('exit', (code) => {
  logger.info(\`üõë Service \${SERVICE} exited with code \${code}\`);
  process.exit(code);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  logger.info('üõë Received SIGTERM, shutting down gracefully...');
  child.kill('SIGTERM');
});

process.on('SIGINT', () => {
  logger.info('üõë Received SIGINT, shutting down gracefully...');
  child.kill('SIGINT');
});

function detectServiceFromPath() {
  // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ä–≤–∏—Å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway
  const cwd = process.cwd();
  const servicePath = cwd.split(path.sep).find(part => 
    Object.keys(serviceMap).includes(part)
  );
  
  return servicePath || null;
}`;
    
    await fsPromises.writeFile('scripts/start-production.js', productionStarter);
    this.tasks.push('Created production starter script');
  }

  finalCheck() {
    logger.info('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    
    const checklist = {
      'Root package.json': fs.existsSync('package.json'),
      'Start script': JSON.parse(await fsPromises.readFile('package.json', 'utf8')).scripts?.['start:production'],
      'Node version specified': JSON.parse(await fsPromises.readFile('package.json', 'utf8')).engines?.node,
      'Environment example': fs.existsSync('.env.railway.example'),
      'Railway config': fs.existsSync('railway.toml'),
      'Nixpacks config': fs.existsSync('nixpacks.toml'),
      'S3 adapter': fs.existsSync('packages/shared/storage/s3.js'),
      'Railway middleware': fs.existsSync('packages/shared/middleware/railway.js'),
      'Environment checker': fs.existsSync('scripts/check-env.js'),
      'Production starter': fs.existsSync('scripts/start-production.js')
    };
    
    Object.entries(checklist).forEach(([item, status]) => {
      logger.info(`${status ? '‚úÖ' : '‚ùå'} ${item}`);
    });
    
    const passed = Object.values(checklist).filter(Boolean).length;
    const total = Object.keys(checklist).length;
    
    logger.info(`\nüìä Readiness: ${passed}/${total} (${Math.round(passed/total*100)}%)`);
  }

  generateDeploymentGuide() {
    logger.info('\nüìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –¥–µ–ø–ª–æ—é...');
    
    const guide = `# Railway Deployment Guide for VHM24

## üéØ –û–±–∑–æ—Ä

VHM24 –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway –∫–∞–∫ monorepo —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.

## üìã Pre-deployment Checklist

### 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Railway –ø—Ä–æ–µ–∫—Ç–∞
- [ ] –°–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ Railway
- [ ] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Railway CLI
- [ ] –í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
- [ ] –ù–∞—Å—Ç—Ä–æ–µ–Ω S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π storage
- [ ] –°–æ–∑–¥–∞–Ω Telegram Bot
- [ ] –ù–∞—Å—Ç—Ä–æ–µ–Ω Sentry (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

## üöÄ Deployment Steps

### –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ Railway –ø—Ä–æ–µ–∫—Ç–∞
railway new vhm24-production
railway link

### –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
railway add postgresql
railway add redis

### –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.railway.example

### –®–∞–≥ 4: –î–µ–ø–ª–æ–π
railway variables set RAILWAY_SERVICE_NAME="gateway"
railway up

## ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è

${this.warnings.map(w => `- ${w}`).join('\n')}

## üîß Troubleshooting

### –ü—Ä–æ–±–ª–µ–º–∞: –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
railway logs
railway variables
railway status

### –ü—Ä–æ–±–ª–µ–º–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL
- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PostgreSQL addon –∞–∫—Ç–∏–≤–µ–Ω

### –ü—Ä–æ–±–ª–µ–º–∞: –§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ S3 credentials
- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

- Railway Discord: https://discord.gg/railway
- Railway Docs: https://docs.railway.app
`;
    
    await fsPromises.writeFile('RAILWAY_DEPLOYMENT_GUIDE.md', guide);
    this.tasks.push('Created comprehensive deployment guide');
    
    logger.info('\n‚úÖ Railway preparation completed!');
    logger.info('\nüìã Completed tasks:');
    this.tasks.forEach(task => logger.info(`  ‚úÖ ${task}`));
    
    if (this.warnings.length > 0) {
      logger.info('\n‚ö†Ô∏è Important warnings:');
      this.warnings.forEach(warning => logger.info(`  ‚ö†Ô∏è ${warning}`));
    }
    
    logger.info('\nüìñ Next steps:');
    logger.info('1. Review RAILWAY_DEPLOYMENT_GUIDE.md');
    logger.info('2. Set up external services (S3, Telegram Bot)');
    logger.info('3. Create Railway project: railway new vhm24-production');
    logger.info('4. Add databases: railway add postgresql && railway add redis');
    logger.info('5. Set environment variables from .env.railway.example');
    logger.info('6. Deploy: railway up');
    
    logger.info('\nüéØ Quick start command:');
    logger.info('railway variables set RAILWAY_SERVICE_NAME=gateway && railway up');
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
const prep = new RailwayPreparation();
prep.prepare().catch(console.error);
