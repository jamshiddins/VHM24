const fs = require('fs');
const path = require('path');
const glob = require('glob');

console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (CommonJS)...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è glob
try {
  require.resolve('glob');
} catch (e) {
  console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ glob...');
  require('child_process').execSync('npm install glob', { stdio: 'inherit' });
  console.log('‚úÖ –ü–∞–∫–µ—Ç glob —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ JS —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
console.log('üîç –ü–æ–∏—Å–∫ JS —Ñ–∞–π–ª–æ–≤...');
const jsFiles = glob.sync('**/*.js', {
  ignore: [
    'node_modules/**', 
    'dist/**', 
    'build/**', 
    'scripts/standardize-modules.js',
    '**/*.min.js'
  ]
});

console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${jsFiles.length} JS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
let convertedFiles = 0;
let skippedFiles = 0;
let errorFiles = 0;

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ES6 –∏–º–ø–æ—Ä—Ç—ã/—ç–∫—Å–ø–æ—Ä—Ç—ã –≤ CommonJS
jsFiles.forEach(file => {
  try {
    let content = fs.readFileSync(file, 'utf8');
    let originalContent = content;
    let modified = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª ES6 –∏–º–ø–æ—Ä—Ç—ã/—ç–∫—Å–ø–æ—Ä—Ç—ã
    const hasES6Imports = /import\s+(?:\{[^}]+\}|\*\s+as\s+\w+|\w+)\s+from\s+['"][^'"]+['"]/g.test(content);
    const hasES6Exports = /export\s+(?:default\s+\w+|const|let|var|function|class)/g.test(content);
    
    if (!hasES6Imports && !hasES6Exports) {
      skippedFiles++;
      return;
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º import –Ω–∞ require
    content = content.replace(
      /import\s+(\{[^}]+\}|\*\s+as\s+\w+|\w+)\s+from\s+['"]([^'"]+)['"]/g,
      (match, imports, source) => {
        modified = true;
        if (imports.startsWith('{') && imports.endsWith('}')) {
          // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è: import { a, b } from 'module'
          const items = imports.slice(1, -1).split(',').map(item => item.trim());
          return `const { ${items.join(', ')} } = require('${source}')`;
        } else if (imports.startsWith('*')) {
          // –ò–º–ø–æ—Ä—Ç –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è: import * as name from 'module'
          const name = imports.replace(/\*\s+as\s+/, '').trim();
          return `const ${name} = require('${source}')`;
        } else {
          // –ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç: import name from 'module'
          return `const ${imports} = require('${source}')`;
        }
      }
    );
    
    // –ó–∞–º–µ–Ω—è–µ–º export default –Ω–∞ module.exports
    content = content.replace(
      /export\s+default\s+(\w+)/g,
      (match, name) => {
        modified = true;
        return `module.exports = ${name}`;
      }
    );
    
    // –ó–∞–º–µ–Ω—è–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
    const namedExports = [];
    content = content.replace(
      /export\s+(const|let|var|function|class)\s+(\w+)/g,
      (match, type, name) => {
        modified = true;
        namedExports.push(name);
        return `${type} ${name}`;
      }
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º module.exports –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
    if (namedExports.length > 0) {
      modified = true;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ module.exports –≤ —Ñ–∞–π–ª–µ
      if (content.includes('module.exports =')) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É module.exports
        content = content.replace(
          /module\.exports\s*=\s*([^;]+)/,
          (match, exports) => {
            // –ï—Å–ª–∏ exports —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
            if (exports.trim().startsWith('{') && exports.trim().endsWith('}')) {
              const objectContent = exports.trim().slice(1, -1).trim();
              const properties = objectContent ? objectContent.split(',').map(p => p.trim()) : [];
              properties.push(...namedExports);
              return `module.exports = { ${properties.join(', ')} }`;
            } else {
              // –ï—Å–ª–∏ exports —ç—Ç–æ –Ω–µ –æ–±—ä–µ–∫—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
              return `module.exports = { ${exports.trim()}, ${namedExports.join(', ')} }`;
            }
          }
        );
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π module.exports
        content += `\nmodule.exports = { ${namedExports.join(', ')} };\n`;
      }
    }
    
    if (modified) {
      fs.writeFileSync(file, content);
      console.log(`‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: ${file}`);
      convertedFiles++;
    } else {
      skippedFiles++;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
    errorFiles++;
  }
});

console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${convertedFiles} —Ñ–∞–π–ª–æ–≤`);
console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedFiles} —Ñ–∞–π–ª–æ–≤`);
console.log(`‚ùå –û—à–∏–±–∫–∏: ${errorFiles} —Ñ–∞–π–ª–æ–≤`);

console.log('\n‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
