const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üö® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º VHM24\n');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞
let report;
try {
  const reportContent = fs.readFileSync('analysis-report.json', 'utf8');
  report = JSON.parse(reportContent);
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
  console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ scripts/project-analyzer.js –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞');
  process.exit(1);
}

// 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º hardcoded credentials
console.log('üîí –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ hardcoded credentials...');
const credentialIssues = report.issues.critical.filter(issue => issue.issue === 'Hardcoded credentials');

credentialIssues.forEach(issue => {
  const filePath = issue.file;
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return;
  }

  console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
  let content = fs.readFileSync(filePath, 'utf8');

  // –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º hardcoded credentials
  const patterns = [
    { regex: /password\s*[:=]\s*["']([\w\d]{4,})["']/gi, envVar: 'PASSWORD' },
    { regex: /secret\s*[:=]\s*["']([\w\d]{4,})["']/gi, envVar: 'SECRET' },
    { regex: /api[_-]?key\s*[:=]\s*["']([\w\d]{4,})["']/gi, envVar: 'API_KEY' }
  ];

  let modified = false;
  patterns.forEach(pattern => {
    const matches = content.match(pattern.regex);
    if (matches) {
      matches.forEach(match => {
        const valueMatch = pattern.regex.exec(match);
        if (valueMatch && valueMatch[1]) {
          const value = valueMatch[1];
          const envVarName = `${pattern.envVar}_${Math.floor(Math.random() * 1000)}`;
          const replacement = match.replace(value, `\${process.env.${envVarName}}`);
          content = content.replace(match, replacement);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ .env, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          addToEnvFile(envVarName, value);
          
          modified = true;
          console.log(`‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ hardcoded credential –≤ ${filePath}`);
        }
      });
    }
  });

  if (modified) {
    fs.writeFileSync(filePath, content);
  }
});

// 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–µ—á–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
console.log('\nüîí –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö...');
const errorLeakIssues = report.issues.critical.filter(issue => issue.issue === '–£—Ç–µ—á–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö');

errorLeakIssues.forEach(issue => {
  const filePath = issue.file;
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return;
  }

  console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
  let content = fs.readFileSync(filePath, 'utf8');

  // –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —É—Ç–µ—á–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
  const errorPatterns = [
    { regex: /reply\.send\s*\(\s*err\s*\)/g, replacement: 'reply.code(500).send({ error: "Internal Server Error" })' },
    { regex: /reply\.code\(\d+\)\.send\s*\(\s*err\s*\)/g, replacement: 'reply.code(500).send({ error: "Internal Server Error" })' }
  ];

  let modified = false;
  errorPatterns.forEach(pattern => {
    if (pattern.regex.test(content)) {
      content = content.replace(pattern.regex, pattern.replacement);
      modified = true;
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Ç–µ—á–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö –≤ ${filePath}`);
    }
  });

  if (modified) {
    fs.writeFileSync(filePath, content);
  }
});

// 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—à–∏–≤–∞–Ω–∏–µ ES6 –∏ CommonJS –º–æ–¥—É–ª–µ–π
console.log('\nüì¶ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ—à–∏–≤–∞–Ω–∏—è ES6 –∏ CommonJS –º–æ–¥—É–ª–µ–π...');
const mixedModulesIssues = report.issues.high.filter(issue => issue.issue === '–°–º–µ—à–∏–≤–∞–Ω–∏–µ ES6 –∏ CommonJS –º–æ–¥—É–ª–µ–π');

mixedModulesIssues.forEach(issue => {
  const filePath = issue.file;
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return;
  }

  console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
  let content = fs.readFileSync(filePath, 'utf8');

  // –ó–∞–º–µ–Ω—è–µ–º import –Ω–∞ require
  const importRegex = /import\s+(\{[^}]+\}|\*\s+as\s+\w+|\w+)\s+from\s+['"]([^'"]+)['"]/g;
  let modified = false;

  if (importRegex.test(content)) {
    content = content.replace(importRegex, (match, imports, source) => {
      if (imports.startsWith('{') && imports.endsWith('}')) {
        // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è: const { a, b } = require('module')
        const items = imports.slice(1, -1).split(',').map(item => item.trim());
        return `const { ${items.join(', ')} } = require('${source}')`;
      } else if (imports.startsWith('*')) {
        // –ò–º–ø–æ—Ä—Ç –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è: const name = require('module')
        const name = imports.replace(/\*\s+as\s+/, '').trim();
        return `const ${name} = require('${source}')`;
      } else {
        // –ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç: const name = require('module')
        return `const ${imports} = require('${source}')`;
      }
    });
    
    // –ó–∞–º–µ–Ω—è–µ–º export –Ω–∞ module.exports
    content = content.replace(/export\s+default\s+(\w+)/g, 'module.exports = $1');
    content = content.replace(/export\s+const\s+(\w+)/g, 'const $1');
    content = content.replace(/export\s+function\s+(\w+)/g, 'function $1');
    
    // –î–æ–±–∞–≤–ª—è–µ–º module.exports –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
    if (content.includes('export const') || content.includes('export function')) {
      const exportedNames = [];
      const exportConstRegex = /export\s+const\s+(\w+)/g;
      const exportFuncRegex = /export\s+function\s+(\w+)/g;
      
      let match;
      while ((match = exportConstRegex.exec(content)) !== null) {
        exportedNames.push(match[1]);
      }
      
      while ((match = exportFuncRegex.exec(content)) !== null) {
        exportedNames.push(match[1]);
      }
      
      if (exportedNames.length > 0) {
        content += `\nmodule.exports = { ${exportedNames.join(', ')} };\n`;
      }
    }
    
    modified = true;
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ ES6 –∏ CommonJS –º–æ–¥—É–ª–µ–π –≤ ${filePath}`);
  }

  if (modified) {
    fs.writeFileSync(filePath, content);
  }
});

// 4. –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
console.log('\nüîç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
const validationIssues = report.issues.high.filter(issue => issue.issue === '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');

validationIssues.forEach(issue => {
  const filePath = issue.file;
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return;
  }

  console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
  let content = fs.readFileSync(filePath, 'utf8');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ —Ñ–∞–π–ª fastify
  if (content.includes('fastify') && content.includes('request.body') && !content.includes('schema:')) {
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const routeRegex = /fastify\.(post|put|patch)\s*\(\s*['"]([^'"]+)['"]\s*,\s*(?:{\s*(?!schema:)([^}]*)\s*})?\s*,?\s*async\s*\(\s*request\s*,\s*reply\s*\)\s*=>/g;
    
    let modified = false;
    content = content.replace(routeRegex, (match, method, route, options) => {
      const schemaName = `${method}${route.replace(/\//g, '')}Schema`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É –ø–µ—Ä–µ–¥ –º–∞—Ä—à—Ä—É—Ç–æ–º
      let schemaDefinition = `
// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è ${method.toUpperCase()} ${route}
const ${schemaName} = {
  body: {
    type: 'object',
    required: [],
    properties: {}
  }
};

`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É –≤ –æ–ø—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      let newOptions = options ? options.trim() : '';
      if (newOptions && !newOptions.endsWith(',')) {
        newOptions += ', ';
      }
      newOptions += `schema: ${schemaName}`;
      
      modified = true;
      return `${schemaDefinition}fastify.${method}('${route}', { ${newOptions} }, async (request, reply) =>`;
    });
    
    if (modified) {
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ ${filePath}`);
    }
  }
});

// 5. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
console.log('\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...');
const missingDirIssues = report.issues.medium.filter(issue => issue.issue && issue.issue.includes('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è'));

missingDirIssues.forEach(issue => {
  const dirPath = issue.fix.replace(/^mkdir -p /, '').trim();
  
  try {
    fs.mkdirSync(dirPath, { recursive: true });
    fs.writeFileSync(path.join(dirPath, '.gitkeep'), '');
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dirPath}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}:`, error.message);
  }
});

// 6. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ JWT —Ç–æ–∫–µ–Ω–∞–º
console.log('\nüîë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏ JWT —Ç–æ–∫–µ–Ω–∞–º...');
const jwtIssues = report.issues.medium.filter(issue => issue.issue === 'JWT —Ç–æ–∫–µ–Ω—ã –±–µ–∑ —Å—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏');

jwtIssues.forEach(issue => {
  const filePath = issue.file;
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return;
  }

  console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
  let content = fs.readFileSync(filePath, 'utf8');

  // –ò—â–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º expiresIn –≤ JWT –æ–ø—Ü–∏–∏
  const jwtSignRegex = /(jwt\.sign|sign|fastify\.jwt\.sign)\(\s*({[^}]*}|[^,]+)\s*,\s*(['"][^'"]+['"]|[^,)]+)\s*(?:,\s*({[^}]*})?\s*)?\)/g;
  
  let modified = false;
  content = content.replace(jwtSignRegex, (match, func, payload, secret, options) => {
    if (options && options.includes('expiresIn')) {
      return match; // –£–∂–µ –µ—Å—Ç—å expiresIn
    }
    
    if (options) {
      // –ï—Å—Ç—å –æ–ø—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º expiresIn
      const trimmedOptions = options.trim();
      if (trimmedOptions === '{}') {
        return `${func}(${payload}, ${secret}, { expiresIn: '1d' })`;
      } else {
        // –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º expiresIn
        return `${func}(${payload}, ${secret}, ${trimmedOptions.slice(0, -1)}, expiresIn: '1d' })`;
      }
    } else {
      // –ù–µ—Ç –æ–ø—Ü–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å expiresIn
      return `${func}(${payload}, ${secret}, { expiresIn: '1d' })`;
    }
  });
  
  if (content !== fs.readFileSync(filePath, 'utf8')) {
    modified = true;
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ JWT –≤ ${filePath}`);
  }
});

// 7. –°–æ–∑–¥–∞–µ–º .dockerignore, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (report.issues.medium.some(issue => issue.issue === '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .dockerignore')) {
  console.log('\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ .dockerignore...');
  
  const dockerignoreContent = `
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
node_modules
npm-debug.log
yarn-debug.log
yarn-error.log

# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
.DS_Store
Thumbs.db

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏
dist
build
coverage

# –§–∞–π–ª—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
.env
.env.*
!.env.example

# –õ–æ–≥–∏
logs
*.log

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
tmp
temp

# –§–∞–π–ª—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
.idea
.vscode
*.swp
*.swo

# –§–∞–π–ª—ã git
.git
.gitignore
`;

  fs.writeFileSync('.dockerignore', dockerignoreContent.trim());
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .dockerignore');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env —Ñ–∞–π–ª
function addToEnvFile(name, value) {
  const envPath = '.env';
  let envContent = '';
  
  if (fs.existsSync(envPath)) {
    envContent = fs.readFileSync(envPath, 'utf8');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
  if (!envContent.includes(`${name}=`)) {
    envContent += `\n${name}=${value}\n`;
    fs.writeFileSync(envPath, envContent);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${name} –≤ .env —Ñ–∞–π–ª`);
  }
}

console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
