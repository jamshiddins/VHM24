#!/bin/bash
# Скрипт для подготовки к запуску VHM24
# Этап 4: Подготовка к запуску

# Цвета для вывода
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Функция для вывода сообщений
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# Проверка наличия необходимых утилит
check_dependencies() {
    log "Проверка наличия необходимых утилит..."
    
    for cmd in docker docker-compose curl wget jq git npm node; do
        if ! command -v $cmd &> /dev/null; then
            error "Утилита $cmd не установлена. Пожалуйста, установите ее и запустите скрипт снова."
        fi
    done
    
    log "Все необходимые утилиты установлены."
}

# 4.1. Подготовка документации
setup_documentation() {
    log "Подготовка документации..."
    
    # Создание директории для документации
    mkdir -p ./docs/user-guides
    mkdir -p ./docs/technical
    mkdir -p ./docs/api
    
    # Создание руководства для администраторов
    cat > ./docs/user-guides/admin-guide.md << 'EOF'
# Руководство администратора VHM24

## Содержание

1. [Введение](#введение)
2. [Установка и настройка](#установка-и-настройка)
3. [Управление пользователями](#управление-пользователями)
4. [Управление автоматами](#управление-автоматами)
5. [Мониторинг системы](#мониторинг-системы)
6. [Резервное копирование](#резервное-копирование)
7. [Обновление системы](#обновление-системы)
8. [Устранение неполадок](#устранение-неполадок)

## Введение

VHM24 (Vending Hub Manager) - это система управления вендинговыми автоматами, которая позволяет эффективно управлять сетью автоматов, контролировать продажи, управлять запасами и обслуживанием.

Данное руководство предназначено для администраторов системы и содержит информацию о настройке, управлении и обслуживании системы.

## Установка и настройка

### Системные требования

- Docker и Docker Compose
- Node.js 16 или выше
- PostgreSQL 14 или выше
- Redis 6 или выше
- Nginx

### Установка

1. Клонируйте репозиторий:
   ```
   git clone https://github.com/your-organization/vhm24.git
   cd vhm24
   ```

2. Создайте файл .env на основе .env.example:
   ```
   cp .env.example .env
   ```

3. Отредактируйте файл .env, указав необходимые параметры.

4. Запустите систему:
   ```
   docker-compose -f docker-compose.production.yml up -d
   ```

### Настройка

1. Откройте веб-интерфейс по адресу http://your-domain.com
2. Войдите в систему, используя учетные данные администратора по умолчанию:
   - Логин: admin
   - Пароль: admin
3. Измените пароль администратора по умолчанию.
4. Настройте параметры системы в разделе "Администрирование".

## Управление пользователями

### Роли пользователей

- **ADMIN**: Полный доступ ко всем функциям системы.
- **MANAGER**: Управление маршрутами, задачами, аналитика.
- **OPERATOR**: Выполнение задач, работа с автоматами.
- **WAREHOUSE**: Управление запасами, инвентаризация.
- **TECHNICIAN**: Обслуживание и ремонт автоматов.

### Создание пользователя

1. Перейдите в раздел "Администрирование" -> "Пользователи".
2. Нажмите кнопку "Добавить пользователя".
3. Заполните форму, указав имя, логин, пароль и роль пользователя.
4. Нажмите кнопку "Сохранить".

### Редактирование пользователя

1. Перейдите в раздел "Администрирование" -> "Пользователи".
2. Найдите пользователя в списке и нажмите кнопку "Редактировать".
3. Внесите необходимые изменения.
4. Нажмите кнопку "Сохранить".

### Удаление пользователя

1. Перейдите в раздел "Администрирование" -> "Пользователи".
2. Найдите пользователя в списке и нажмите кнопку "Удалить".
3. Подтвердите удаление.

## Управление автоматами

### Добавление автомата

1. Перейдите в раздел "Администрирование" -> "Автоматы".
2. Нажмите кнопку "Добавить автомат".
3. Заполните форму, указав код, название, местоположение и другие параметры автомата.
4. Нажмите кнопку "Сохранить".

### Редактирование автомата

1. Перейдите в раздел "Администрирование" -> "Автоматы".
2. Найдите автомат в списке и нажмите кнопку "Редактировать".
3. Внесите необходимые изменения.
4. Нажмите кнопку "Сохранить".

### Удаление автомата

1. Перейдите в раздел "Администрирование" -> "Автоматы".
2. Найдите автомат в списке и нажмите кнопку "Удалить".
3. Подтвердите удаление.

## Мониторинг системы

### Просмотр логов

1. Перейдите в раздел "Администрирование" -> "Логи".
2. Выберите тип логов и период.
3. Нажмите кнопку "Показать".

### Мониторинг производительности

1. Перейдите в раздел "Администрирование" -> "Мониторинг".
2. Выберите тип метрик и период.
3. Нажмите кнопку "Показать".

## Резервное копирование

### Создание резервной копии

1. Перейдите в раздел "Администрирование" -> "Резервное копирование".
2. Нажмите кнопку "Создать резервную копию".
3. Дождитесь завершения процесса.
4. Скачайте резервную копию, нажав кнопку "Скачать".

### Восстановление из резервной копии

1. Перейдите в раздел "Администрирование" -> "Резервное копирование".
2. Нажмите кнопку "Загрузить резервную копию".
3. Выберите файл резервной копии.
4. Нажмите кнопку "Восстановить".
5. Подтвердите восстановление.

## Обновление системы

### Обновление через веб-интерфейс

1. Перейдите в раздел "Администрирование" -> "Обновление".
2. Нажмите кнопку "Проверить обновления".
3. Если доступны обновления, нажмите кнопку "Обновить".
4. Дождитесь завершения процесса обновления.

### Обновление через командную строку

1. Подключитесь к серверу по SSH.
2. Перейдите в директорию с проектом:
   ```
   cd /path/to/vhm24
   ```
3. Получите последние изменения из репозитория:
   ```
   git pull
   ```
4. Обновите зависимости:
   ```
   npm ci
   ```
5. Перезапустите систему:
   ```
   docker-compose -f docker-compose.production.yml down
   docker-compose -f docker-compose.production.yml up -d
   ```

## Устранение неполадок

### Проблемы с доступом к веб-интерфейсу

1. Проверьте, что все контейнеры запущены:
   ```
   docker-compose -f docker-compose.production.yml ps
   ```
2. Проверьте логи Nginx:
   ```
   docker-compose -f docker-compose.production.yml logs nginx
   ```
3. Проверьте логи API:
   ```
   docker-compose -f docker-compose.production.yml logs api
   ```

### Проблемы с базой данных

1. Проверьте, что контейнер с базой данных запущен:
   ```
   docker-compose -f docker-compose.production.yml ps db
   ```
2. Проверьте логи базы данных:
   ```
   docker-compose -f docker-compose.production.yml logs db
   ```
3. Проверьте подключение к базе данных:
   ```
   docker-compose -f docker-compose.production.yml exec db psql -U vhm24_user -d vhm24_db -c "SELECT 1;"
   ```

### Проблемы с Telegram-ботом

1. Проверьте, что контейнер с ботом запущен:
   ```
   docker-compose -f docker-compose.production.yml ps bot
   ```
2. Проверьте логи бота:
   ```
   docker-compose -f docker-compose.production.yml logs bot
   ```
3. Проверьте настройки бота в файле .env.
EOF
    
    log "Руководство для администраторов создано."
    
    # Создание руководства для менеджеров
    cat > ./docs/user-guides/manager-guide.md << 'EOF'
# Руководство менеджера VHM24

## Содержание

1. [Введение](#введение)
2. [Управление маршрутами](#управление-маршрутами)
3. [Планирование задач](#планирование-задач)
4. [Аналитика и отчеты](#аналитика-и-отчеты)
5. [Работа с Telegram-ботом](#работа-с-telegram-ботом)

## Введение

VHM24 (Vending Hub Manager) - это система управления вендинговыми автоматами, которая позволяет эффективно управлять сетью автоматов, контролировать продажи, управлять запасами и обслуживанием.

Данное руководство предназначено для менеджеров системы и содержит информацию о управлении маршрутами, планировании задач и работе с аналитикой.

## Управление маршрутами

### Создание маршрута

1. Перейдите в раздел "Маршруты".
2. Нажмите кнопку "Создать маршрут".
3. Заполните форму, указав название маршрута и оператора.
4. Добавьте автоматы в маршрут, перетаскивая их из списка доступных автоматов.
5. Установите порядок посещения автоматов, перетаскивая их в нужном порядке.
6. Нажмите кнопку "Сохранить".

### Редактирование маршрута

1. Перейдите в раздел "Маршруты".
2. Найдите маршрут в списке и нажмите кнопку "Редактировать".
3. Внесите необходимые изменения.
4. Нажмите кнопку "Сохранить".

### Удаление маршрута

1. Перейдите в раздел "Маршруты".
2. Найдите маршрут в списке и нажмите кнопку "Удалить".
3. Подтвердите удаление.

### Оптимизация маршрута

1. Перейдите в раздел "Маршруты".
2. Найдите маршрут в списке и нажмите кнопку "Оптимизировать".
3. Выберите критерий оптимизации (расстояние, время, приоритет).
4. Нажмите кнопку "Применить".
5. Просмотрите результат оптимизации.
6. Нажмите кнопку "Сохранить", если результат вас устраивает.

## Планирование задач

### Создание задачи

1. Перейдите в раздел "Задачи".
2. Нажмите кнопку "Создать задачу".
3. Заполните форму, указав название, описание, приоритет, исполнителя и срок выполнения задачи.
4. Выберите автомат, к которому относится задача.
5. Добавьте пункты чек-листа, если необходимо.
6. Нажмите кнопку "Сохранить".

### Редактирование задачи

1. Перейдите в раздел "Задачи".
2. Найдите задачу в списке и нажмите кнопку "Редактировать".
3. Внесите необходимые изменения.
4. Нажмите кнопку "Сохранить".

### Удаление задачи

1. Перейдите в раздел "Задачи".
2. Найдите задачу в списке и нажмите кнопку "Удалить".
3. Подтвердите удаление.

### Отслеживание выполнения задач

1. Перейдите в раздел "Задачи".
2. Используйте фильтры для отображения задач по статусу, исполнителю, приоритету и сроку выполнения.
3. Нажмите на задачу, чтобы просмотреть детальную информацию о ее выполнении.
4. Просмотрите комментарии и фотографии, добавленные исполнителем.
5. Добавьте свой комментарий, если необходимо.

## Аналитика и отчеты

### Просмотр аналитики

1. Перейдите в раздел "Аналитика".
2. Выберите тип аналитики (продажи, эффективность операторов, автоматы).
3. Установите период и другие параметры фильтрации.
4. Нажмите кнопку "Показать".
5. Просмотрите графики и таблицы с данными.

### Создание отчета

1. Перейдите в раздел "Отчеты".
2. Выберите тип отчета (продажи, инкассации, обслуживание).
3. Установите период и другие параметры фильтрации.
4. Нажмите кнопку "Создать отчет".
5. Просмотрите отчет.
6. Нажмите кнопку "Экспорт", чтобы скачать отчет в формате Excel или PDF.

### Анализ эффективности операторов

1. Перейдите в раздел "Аналитика" -> "Операторы".
2. Выберите период и другие параметры фильтрации.
3. Нажмите кнопку "Показать".
4. Просмотрите таблицу с данными о эффективности операторов.
5. Нажмите на оператора, чтобы просмотреть детальную информацию о его работе.

### Анализ эффективности автоматов

1. Перейдите в раздел "Аналитика" -> "Автоматы".
2. Выберите период и другие параметры фильтрации.
3. Нажмите кнопку "Показать".
4. Просмотрите таблицу с данными о эффективности автоматов.
5. Нажмите на автомат, чтобы просмотреть детальную информацию о его работе.

## Работа с Telegram-ботом

### Подключение к боту

1. Откройте Telegram.
2. Найдите бота по имени @VHM24Bot.
3. Нажмите кнопку "Start" или отправьте команду /start.
4. Введите свой логин и пароль от системы VHM24.
5. После успешной авторизации вы получите доступ к функциям бота.

### Управление маршрутами через бота

1. Отправьте команду /routes или нажмите кнопку "Маршруты".
2. Выберите маршрут из списка.
3. Используйте доступные команды для управления маршрутом.

### Управление задачами через бота

1. Отправьте команду /tasks или нажмите кнопку "Задачи".
2. Выберите задачу из списка или используйте фильтры для поиска нужной задачи.
3. Используйте доступные команды для управления задачей.

### Просмотр аналитики через бота

1. Отправьте команду /analytics или нажмите кнопку "Аналитика".
2. Выберите тип аналитики.
3. Установите период и другие параметры фильтрации.
4. Просмотрите результаты.
EOF
    
    log "Руководство для менеджеров создано."
    
    # Создание руководства для операторов
    cat > ./docs/user-guides/operator-guide.md << 'EOF'
# Руководство оператора VHM24

## Содержание

1. [Введение](#введение)
2. [Работа с маршрутами](#работа-с-маршрутами)
3. [Выполнение задач](#выполнение-задач)
4. [Работа с автоматами](#работа-с-автоматами)
5. [Работа с Telegram-ботом](#работа-с-telegram-ботом)

## Введение

VHM24 (Vending Hub Manager) - это система управления вендинговыми автоматами, которая позволяет эффективно управлять сетью автоматов, контролировать продажи, управлять запасами и обслуживанием.

Данное руководство предназначено для операторов системы и содержит информацию о работе с маршрутами, выполнении задач и обслуживании автоматов.

## Работа с маршрутами

### Просмотр маршрутов

1. Перейдите в раздел "Маршруты".
2. Просмотрите список доступных маршрутов.
3. Нажмите на маршрут, чтобы просмотреть детальную информацию о нем.

### Начало работы с маршрутом

1. Перейдите в раздел "Маршруты".
2. Найдите маршрут в списке и нажмите кнопку "Начать".
3. Подтвердите начало работы с маршрутом.
4. Система отобразит первый автомат в маршруте и задачи, связанные с ним.

### Навигация по маршруту

1. После начала работы с маршрутом, система отобразит карту с маршрутом и текущим положением.
2. Используйте кнопки "Предыдущий" и "Следующий" для навигации по автоматам в маршруте.
3. Нажмите кнопку "Завершить", когда все автоматы в маршруте будут обслужены.

## Выполнение задач

### Просмотр задач

1. Перейдите в раздел "Задачи".
2. Просмотрите список доступных задач.
3. Используйте фильтры для отображения задач по статусу, приоритету и сроку выполнения.
4. Нажмите на задачу, чтобы просмотреть детальную информацию о ней.

### Выполнение задачи

1. Перейдите в раздел "Задачи".
2. Найдите задачу в списке и нажмите кнопку "Выполнить".
3. Выполните все пункты чек-листа, отмечая их по мере выполнения.
4. Добавьте комментарий и фотографии, если необходимо.
5. Нажмите кнопку "Завершить", когда задача будет выполнена.

### Отложение задачи

1. Перейдите в раздел "Задачи".
2. Найдите задачу в списке и нажмите кнопку "Отложить".
3. Укажите причину отложения задачи.
4. Нажмите кнопку "Сохранить".

## Работа с автоматами

### Просмотр информации об автомате

1. Перейдите в раздел "Автоматы".
2. Найдите автомат в списке и нажмите на него, чтобы просмотреть детальную информацию.
3. Просмотрите информацию о местоположении, статусе, последнем обслуживании и продажах автомата.

### Обслуживание автомата

1. Перейдите в раздел "Автоматы".
2. Найдите автомат в списке и нажмите кнопку "Обслужить".
3. Выполните все пункты чек-листа обслуживания, отмечая их по мере выполнения.
4. Добавьте комментарий и фотографии, если необходимо.
5. Нажмите кнопку "Завершить", когда обслуживание будет выполнено.

### Инкассация автомата

1. Перейдите в раздел "Автоматы".
2. Найдите автомат в списке и нажмите кнопку "Инкассация".
3. Введите сумму инкассации.
4. Добавьте комментарий, если необходимо.
5. Нажмите кнопку "Сохранить".

### Пополнение автомата

1. Перейдите в раздел "Автоматы".
2. Найдите автомат в списке и нажмите кнопку "Пополнить".
3. Выберите продукты для пополнения и укажите количество.
4. Добавьте комментарий, если необходимо.
5. Нажмите кнопку "Сохранить".

## Работа с Telegram-ботом

### Подключение к боту

1. Откройте Telegram.
2. Найдите бота по имени @VHM24Bot.
3. Нажмите кнопку "Start" или отправьте команду /start.
4. Введите свой логин и пароль от системы VHM24.
5. После успешной авторизации вы получите доступ к функциям бота.

### Работа с маршрутами через бота

1. Отправьте команду /routes или нажмите кнопку "Маршруты".
2. Выберите маршрут из списка.
3. Используйте доступные команды для работы с маршрутом.

### Выполнение задач через бота

1. Отправьте команду /tasks или нажмите кнопку "Задачи".
2. Выберите задачу из списка или используйте фильтры для поиска нужной задачи.
3. Используйте доступные команды для выполнения задачи.

### Работа с автоматами через бота

1. Отправьте команду /machines или нажмите кнопку "Автоматы".
2. Выберите автомат из списка или отсканируйте QR-код автомата.
3. Используйте доступные команды для работы с автоматом.

### Отправка фотографий через бота

1. При выполнении задачи или обслуживании автомата, нажмите кнопку "Добавить фото".
2. Сделайте фотографию или выберите ее из галереи.
3. Добавьте комментарий к фотографии, если необходимо.
4. Отправьте фотографию.
EOF
    
    log "Руководство для операторов создано."
    
    # Создание технической документации
    cat > ./docs/technical/architecture.md << 'EOF'
# Архитектура системы VHM24

## Содержание

1. [Обзор](#обзор)
2. [Компоненты системы](#компоненты-системы)
3. [Взаимодействие компонентов](#взаимодействие-компонентов)
4. [Технологический стек](#технологический-стек)
5. [Схема базы данных](#схема-базы-данных)
6. [API](#api)
7. [Безопасность](#безопасность)
8. [Масштабирование](#масштабирование)

## Обзор

VHM24 (Vending Hub Manager) - это система управления вендинговыми автоматами, которая позволяет эффективно управлять сетью автоматов, контролировать продажи, управлять запасами и обслуживанием.

Система состоит из следующих основных компонентов:
- Бэкенд (API)
- Веб-интерфейс
- Telegram-бот
- База данных
- Система мониторинга и логирования

## Компоненты системы

### Бэкенд (API)

Бэкенд реализован на Node.js с использованием Express.js и предоставляет RESTful API для взаимодействия с системой. Он обрабатывает запросы от веб-интерфейса и Telegram-бота, взаимодействует с базой данных и внешними сервисами.

### Веб-интерфейс

Веб-интерфейс реализован с использованием HTML, CSS и JavaScript и предоставляет пользовательский интерфейс для работы с системой. Он взаимодействует с бэкендом через API.

### Telegram-бот

Telegram-бот реализован на Node.js с использованием библиотеки node-telegram-bot-api и предоставляет интерфейс для работы с системой через мессенджер Telegram. Он взаимодействует с бэкендом через API.

### База данных

База данных реализована на PostgreSQL и хранит все данные системы, включая информацию о пользователях, автоматах, маршрутах, задачах, продажах и т.д.

### Система мониторинга и логирования

Система мониторинга и логирования реализована с использованием Prometheus, Grafana, Elasticsearch, Logstash и Kibana и предоставляет инструменты для мониторинга производительности системы и анализа логов.

## Взаимодействие компонентов

```
+----------------+     +----------------+     +----------------+
|                |     |                |     |                |
| Веб-интерфейс  +---->+    Бэкенд     +---->+  База данных   |
|                |     |                |     |                |
+----------------+     +----------------+     +----------------+
                              ^
                              |
                              v
+----------------+     +----------------+
|                |     |                |
|  Telegram-бот  +---->+ Внешние сервисы|
|                |     |                |
+----------------+     +----------------+
```

## Технологический стек

### Бэкенд
- Node.js
- Express.js
- PostgreSQL
- Redis
- JWT для аутентификации
- Winston для логирования
- Jest для тестирования

### Веб-интерфейс
- HTML5
- CSS3
- JavaScript
- Bootstrap для стилей
- Chart.js для графиков
- Axios для HTTP-запросов

### Telegram-бот
- Node.js
- node-telegram-bot-api

### Система мониторинга и логирования
- Prometheus для сбора метрик
- Grafana для визуализации метрик
- Elasticsearch для хранения логов
- Logstash для обработки логов
- Kibana для визуализации логов
EOF
    
    log "Техническая документация создана."
    
    # Создание API документации
    cat > ./docs/api/api-documentation.md << 'EOF'
# API документация VHM24

## Общая информация

### Базовый URL

```
https://api.vhm24.com/v1
```

### Аутентификация

Для доступа к API необходимо использовать JWT-токен, который можно получить, отправив запрос на эндпоинт `/auth/login`.

Токен необходимо передавать в заголовке `Authorization` в формате `Bearer <token>`.

### Формат ответа

Все ответы API возвращаются в формате JSON.

Успешный ответ имеет следующую структуру:

```json
{
  "success": true,
  "data": { ... }
}
```

Ответ с ошибкой имеет следующую структуру:

```json
{
  "success": false,
  "error": {
    "code": "ERROR_CODE",
    "message": "Error message"
  }
}
```

## Эндпоинты

### Аутентификация

#### Вход в систему

```
POST /auth/login
```

Параметры запроса:

| Параметр | Тип | Обязательный | Описание |
|----------|-----|--------------|----------|
| username | string | Да | Имя пользователя |
| password | string | Да | Пароль |

Пример запроса:

```json
{
  "username": "admin",
  "password": "password"
}
```

Пример ответа:

```json
{
  "success": true,
  "data": {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "user": {
      "id": 1,
      "username": "admin",
      "role": "ADMIN",
      "firstName": "Admin",
      "lastName": "User"
    }
  }
}
```

#### Выход из системы

```
POST /auth/logout
```

Параметры запроса: нет

Пример ответа:

```json
{
  "success": true,
  "data": {
    "message": "Logout successful"
  }
}
```

### Пользователи

#### Получение списка пользователей

```
GET /users
```

Параметры запроса:

| Параметр | Тип | Обязательный | Описание |
|----------|-----|--------------|----------|
| page | number | Нет | Номер страницы (по умолчанию: 1) |
| limit | number | Нет | Количество записей на странице (по умолчанию: 10) |
| role | string | Нет | Фильтр по роли пользователя |

Пример ответа:

```json
{
  "success": true,
  "data": {
    "users": [
      {
        "id": 1,
        "username": "admin",
        "role": "ADMIN",
        "firstName": "Admin",
        "lastName": "User",
        "email": "admin@vhm24.com",
        "createdAt": "2025-01-01T00:00:00.000Z",
        "updatedAt": "2025-01-01T00:00:00.000Z"
      },
      ...
    ],
    "pagination": {
      "page": 1,
      "limit": 10,
      "totalPages": 5,
      "totalItems": 45
    }
  }
}
```

#### Получение информации о пользователе

```
GET /users/:id
```

Параметры запроса: нет

Пример ответа:

```json
{
  "success": true,
  "data": {
    "user": {
      "id": 1,
      "username": "admin",
      "role": "ADMIN",
      "firstName": "Admin",
      "lastName": "User",
      "email": "admin@vhm24.com",
      "createdAt": "2025-01-01T00:00:00.000Z",
      "updatedAt": "2025-01-01T00:00:00.000Z"
    }
  }
}
```

#### Создание пользователя

```
POST /users
```

Параметры запроса:

| Параметр | Тип | Обязательный | Описание |
|----------|-----|--------------|----------|
| username | string | Да | Имя пользователя |
| password | string | Да | Пароль |
| role | string | Да | Роль пользователя |
| firstName | string | Да | Имя |
| lastName | string | Да | Фамилия |
| email | string | Нет | Email |
| telegramId | number | Нет | ID пользователя в Telegram |

Пример запроса:

```json
{
  "username": "operator1",
  "password": "password",
  "role": "OPERATOR",
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@vhm24.com"
}
```

Пример ответа:

```json
{
  "success": true,
  "data": {
    "user": {
      "id": 2,
      "username": "operator1",
      "role": "OPERATOR",
      "firstName": "John",
      "lastName": "Doe",
      "email": "john.doe@vhm24.com",
      "createdAt": "2025-01-01T00:00:00.000Z",
      "updatedAt": "2025-01-01T00:00:00.000Z"
    }
  }
}
```
EOF
    
    log "API документация создана."
    
    log "Подготовка документации завершена."
}

# 4.2. Подготовка обучающих материалов
setup_training() {
    log "Подготовка обучающих материалов..."
    
    # Создание директории для обучающих материалов
    mkdir -p ./training/presentations
    mkdir -p ./training/videos
    mkdir -p ./training/exercises
    
    # Создание README для обучающих материалов
    cat > ./training/README.md << 'EOF'
# Обучающие материалы VHM24

В данной директории содержатся обучающие материалы для пользователей системы VHM24.

## Структура

- `presentations/` - Презентации для обучения пользователей
- `videos/` - Видеоуроки по работе с системой
- `exercises/` - Практические задания для закрепления навыков

## Презентации

- `admin_introduction.pptx` - Введение в систему для администраторов
- `manager_introduction.pptx` - Введение в систему для менеджеров
- `operator_introduction.pptx` - Введение в систему для операторов
- `warehouse_introduction.pptx` - Введение в систему для складских работников
- `technician_introduction.pptx` - Введение в систему для техников

## Видеоуроки

- `admin_tutorial.mp4` - Видеоурок по работе с системой для администраторов
- `manager_tutorial.mp4` - Видеоурок по работе с системой для менеджеров
- `operator_tutorial.mp4` - Видеоурок по работе с системой для операторов
- `warehouse_tutorial.mp4` - Видеоурок по работе с системой для складских работников
- `technician_tutorial.mp4` - Видеоурок по работе с системой для техников

## Практические задания

- `admin_exercises.pdf` - Практические задания для администраторов
- `manager_exercises.pdf` - Практические задания для менеджеров
- `operator_exercises.pdf` - Практические задания для операторов
- `warehouse_exercises.pdf` - Практические задания для складских работников
- `technician_exercises.pdf` - Практические задания для техников

## Как использовать

1. Начните с просмотра презентации, соответствующей вашей роли в системе.
2. Посмотрите видеоурок, чтобы увидеть, как работать с системой на практике.
3. Выполните практические задания для закрепления навыков.
4. При возникновении вопросов обратитесь к документации или к администратору системы.
EOF
    
    log "README для обучающих материалов создан."
    
    # Создание примера презентации для администраторов
    cat > ./training/presentations/admin_introduction.md << 'EOF'
# Введение в систему VHM24 для администраторов

## Содержание

1. Обзор системы VHM24
2. Роли пользователей
3. Управление пользователями
4. Управление автоматами
5. Мониторинг системы
6. Резервное копирование
7. Обновление системы
8. Устранение неполадок

## 1. Обзор системы VHM24

VHM24 (Vending Hub Manager) - это система управления вендинговыми автоматами, которая позволяет эффективно управлять сетью автоматов, контролировать продажи, управлять запасами и обслуживанием.

Система состоит из следующих основных компонентов:
- Бэкенд (API)
- Веб-интерфейс
- Telegram-бот
- База данных
- Система мониторинга и логирования

## 2. Роли пользователей

- **ADMIN**: Полный доступ ко всем функциям системы.
- **MANAGER**: Управление маршрутами, задачами, аналитика.
- **OPERATOR**: Выполнение задач, работа с автоматами.
- **WAREHOUSE**: Управление запасами, инвентаризация.
- **TECHNICIAN**: Обслуживание и ремонт автоматов.

## 3. Управление пользователями

- Создание пользователей
- Редактирование пользователей
- Удаление пользователей
- Управление ролями пользователей
- Сброс паролей пользователей

## 4. Управление автоматами

- Добавление автоматов
- Редактирование автоматов
- Удаление автоматов
- Мониторинг состояния автоматов
- Управление маршрутами

## 5. Мониторинг системы

- Просмотр логов
- Мониторинг производительности
- Настройка оповещений
- Анализ ошибок

## 6. Резервное копирование

- Создание резервных копий
- Восстановление из резервных копий
- Настройка автоматического резервного копирования
- Хранение резервных копий

## 7. Обновление системы

- Обновление через веб-интерфейс
- Обновление через командную строку
- Откат обновлений
- Проверка совместимости

## 8. Устранение неполадок

- Проблемы с доступом к веб-интерфейсу
- Проблемы с базой данных
- Проблемы с Telegram-ботом
- Проблемы с производительностью
EOF
    
    log "Пример презентации для администраторов создан."
    
    # Создание примера практических заданий для администраторов
    cat > ./training/exercises/admin_exercises.md << 'EOF'
# Практические задания для администраторов VHM24

## Задание 1: Установка и настройка системы

### Цель
Установить и настроить систему VHM24 на тестовом сервере.

### Шаги
1. Клонировать репозиторий с системой VHM24.
2. Создать файл .env на основе .env.example.
3. Настроить параметры подключения к базе данных.
4. Запустить систему с помощью Docker Compose.
5. Проверить доступность веб-интерфейса.
6. Войти в систему с учетными данными администратора по умолчанию.
7. Изменить пароль администратора по умолчанию.

### Ожидаемый результат
Система VHM24 успешно установлена и настроена на тестовом сервере, веб-интерфейс доступен, пароль администратора по умолчанию изменен.

## Задание 2: Управление пользователями

### Цель
Создать пользователей с различными ролями и настроить их права доступа.

### Шаги
1. Создать пользователя с ролью MANAGER.
2. Создать пользователя с ролью OPERATOR.
3. Создать пользователя с ролью WAREHOUSE.
4. Создать пользователя с ролью TECHNICIAN.
5. Проверить права доступа каждого пользователя.
6. Изменить роль одного из пользователей.
7. Удалить одного из пользователей.

### Ожидаемый результат
Пользователи с различными ролями созданы, права доступа настроены, роль одного из пользователей изменена, один из пользователей удален.

## Задание 3: Управление автоматами

### Цель
Добавить автоматы в систему и настроить их параметры.

### Шаги
1. Добавить 5 автоматов с различными параметрами.
2. Настроить местоположение каждого автомата.
3. Настроить продукты для каждого автомата.
4. Проверить статус каждого автомата.
5. Изменить параметры одного из автоматов.
6. Удалить один из автоматов.

### Ожидаемый результат
Автоматы добавлены в систему, параметры настроены, статус проверен, параметры одного из автоматов изменены, один из автоматов удален.

## Задание 4: Настройка мониторинга

### Цель
Настроить мониторинг системы и оповещения о критических событиях.

### Шаги
1. Настроить сбор метрик с помощью Prometheus.
2. Настроить визуализацию метрик с помощью Grafana.
3. Создать дашборд для мониторинга производительности системы.
4. Настроить оповещения о критических событиях.
5. Проверить работу оповещений.

### Ожидаемый результат
Мониторинг системы настроен, метрики собираются, дашборд создан, оповещения настроены и проверены.

## Задание 5: Резервное копирование и восстановление

### Цель
Настроить автоматическое резервное копирование и проверить процесс восстановления.

### Шаги
1. Настроить автоматическое резервное копирование базы данных.
2. Создать резервную копию вручную.
3. Внести изменения в базу данных.
4. Восстановить базу данных из резервной копии.
5. Проверить, что изменения отменены.

### Ожидаемый результат
Автоматическое резервное копирование настроено, резервная копия создана, база данных восстановлена из резервной копии, изменения отменены.
EOF
    
    log "Пример практических заданий для администраторов создан."
    
    log "Подготовка обучающих материалов завершена."
}

# 4.3. Подготовка данных
setup_data() {
    log "Подготовка данных..."
    
    # Создание скрипта для импорта начальных данных
    cat > ./scripts/import-initial-data.sh << 'EOF'
#!/bin/bash

# Проверка наличия аргументов
if [ $# -ne 1 ]; then
    echo "Использование: $0 <контейнер_базы_данных>"
    exit 1
fi

DB_CONTAINER=$1

# Импорт пользователей
echo "Импорт пользователей..."
cat > /tmp/users.sql << 'EOFSQL'
INSERT INTO users (username, password, email, role, first_name, last_name, created_at, updated_at)
VALUES
    ('admin', '$2b$10$X7VYVy9H5NvNvUYP8fOzB.Yz9yVHCZUBinX2/JNbGFoQYioLhWFJi', 'admin@vhm24.com', 'ADMIN', 'Admin', 'User', NOW(), NOW()),
    ('manager1', '$2b$10$X7VYVy9H5NvNvUYP8fOzB.Yz9yVHCZUBinX2/JNbGFoQYioLhWFJi', 'manager1@vhm24.com', 'MANAGER', 'John', 'Smith', NOW(), NOW()),
    ('operator1', '$2b$10$X7VYVy9H5NvNvUYP8fOzB.Yz9yVHCZUBinX2/JNbGFoQYioLhWFJi', 'operator1@vhm24.com', 'OPERATOR', 'Alice', 'Johnson', NOW(), NOW()),
    ('warehouse1', '$2b$10$X7VYVy9H5NvNvUYP8fOzB.Yz9yVHCZUBinX2/JNbGFoQYioLhWFJi', 'warehouse1@vhm24.com', 'WAREHOUSE', 'Bob', 'Williams', NOW(), NOW()),
    ('technician1', '$2b$10$X7VYVy9H5NvNvUYP8fOzB.Yz9yVHCZUBinX2/JNbGFoQYioLhWFJi', 'technician1@vhm24.com', 'TECHNICIAN', 'Charlie', 'Brown', NOW(), NOW())
ON CONFLICT (username) DO NOTHING;
EOFSQL

docker cp /tmp/users.sql $DB_CONTAINER:/tmp/users.sql
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -f /tmp/users.sql

# Импорт автоматов
echo "Импорт автоматов..."
cat > /tmp/machines.sql << 'EOFSQL'
INSERT INTO machines (code, name, location, status, created_at, updated_at)
VALUES
    ('VM-001', 'Автомат 1', 'Москва, ул. Ленина, 1', 'ACTIVE', NOW(), NOW()),
    ('VM-002', 'Автомат 2', 'Москва, ул. Пушкина, 2', 'ACTIVE', NOW(), NOW()),
    ('VM-003', 'Автомат 3', 'Москва, ул. Гагарина, 3', 'ACTIVE', NOW(), NOW()),
    ('VM-004', 'Автомат 4', 'Москва, ул. Королева, 4', 'ACTIVE', NOW(), NOW()),
    ('VM-005', 'Автомат 5', 'Москва, ул. Циолковского, 5', 'ACTIVE', NOW(), NOW())
ON CONFLICT (code) DO NOTHING;
EOFSQL

docker cp /tmp/machines.sql $DB_CONTAINER:/tmp/machines.sql
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -f /tmp/machines.sql

# Импорт продуктов
echo "Импорт продуктов..."
cat > /tmp/products.sql << 'EOFSQL'
INSERT INTO products (name, description, price, created_at, updated_at)
VALUES
    ('Капучино', 'Кофе капучино', 12500, NOW(), NOW()),
    ('Латте', 'Кофе латте', 15000, NOW(), NOW()),
    ('Эспрессо', 'Кофе эспрессо', 10000, NOW(), NOW()),
    ('Американо', 'Кофе американо', 11000, NOW(), NOW()),
    ('Чай', 'Чай черный', 8000, NOW(), NOW())
ON CONFLICT (name) DO NOTHING;
EOFSQL

docker cp /tmp/products.sql $DB_CONTAINER:/tmp/products.sql
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -f /tmp/products.sql

# Импорт маршрутов
echo "Импорт маршрутов..."
cat > /tmp/routes.sql << 'EOFSQL'
INSERT INTO routes (name, operator_id, status, created_at, updated_at)
VALUES
    ('Маршрут 1', (SELECT id FROM users WHERE username = 'operator1'), 'ACTIVE', NOW(), NOW())
ON CONFLICT (name) DO NOTHING;

INSERT INTO route_machines (route_id, machine_id, position, created_at, updated_at)
VALUES
    ((SELECT id FROM routes WHERE name = 'Маршрут 1'), (SELECT id FROM machines WHERE code = 'VM-001'), 1, NOW(), NOW()),
    ((SELECT id FROM routes WHERE name = 'Маршрут 1'), (SELECT id FROM machines WHERE code = 'VM-002'), 2, NOW(), NOW()),
    ((SELECT id FROM routes WHERE name = 'Маршрут 1'), (SELECT id FROM machines WHERE code = 'VM-003'), 3, NOW(), NOW())
ON CONFLICT (route_id, machine_id) DO NOTHING;
EOFSQL

docker cp /tmp/routes.sql $DB_CONTAINER:/tmp/routes.sql
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -f /tmp/routes.sql

# Импорт задач
echo "Импорт задач..."
cat > /tmp/tasks.sql << 'EOFSQL'
INSERT INTO tasks (title, description, status, priority, assignee_id, machine_id, due_date, created_at, updated_at)
VALUES
    ('Обслуживание автомата', 'Необходимо провести обслуживание автомата', 'PENDING', 'HIGH', (SELECT id FROM users WHERE username = 'operator1'), (SELECT id FROM machines WHERE code = 'VM-001'), NOW() + INTERVAL '1 day', NOW(), NOW()),
    ('Пополнение автомата', 'Необходимо пополнить автомат', 'PENDING', 'MEDIUM', (SELECT id FROM users WHERE username = 'operator1'), (SELECT id FROM machines WHERE code = 'VM-002'), NOW() + INTERVAL '2 days', NOW(), NOW()),
    ('Инкассация автомата', 'Необходимо провести инкассацию автомата', 'PENDING', 'LOW', (SELECT id FROM users WHERE username = 'operator1'), (SELECT id FROM machines WHERE code = 'VM-003'), NOW() + INTERVAL '3 days', NOW(), NOW())
ON CONFLICT DO NOTHING;

INSERT INTO checklists (task_id, title, completed, created_at, updated_at)
VALUES
    ((SELECT id FROM tasks WHERE title = 'Обслуживание автомата' LIMIT 1), 'Проверить работу автомата', FALSE, NOW(), NOW()),
    ((SELECT id FROM tasks WHERE title = 'Обслуживание автомата' LIMIT 1), 'Очистить автомат', FALSE, NOW(), NOW()),
    ((SELECT id FROM tasks WHERE title = 'Обслуживание автомата' LIMIT 1), 'Заменить фильтры', FALSE, NOW(), NOW()),
    ((SELECT id FROM tasks WHERE title = 'Пополнение автомата' LIMIT 1), 'Проверить остатки', FALSE, NOW(), NOW()),
    ((SELECT id FROM tasks WHERE title = 'Пополнение автомата' LIMIT 1), 'Пополнить ингредиенты', FALSE, NOW(), NOW()),
    ((SELECT id FROM tasks WHERE title = 'Инкассация автомата' LIMIT 1), 'Проверить сумму наличных', FALSE, NOW(), NOW()),
    ((SELECT id FROM tasks WHERE title = 'Инкассация автомата' LIMIT 1), 'Изъять наличные', FALSE, NOW(), NOW())
ON CONFLICT DO NOTHING;
EOFSQL

docker cp /tmp/tasks.sql $DB_CONTAINER:/tmp/tasks.sql
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -f /tmp/tasks.sql

echo "Импорт начальных данных завершен."
EOF
    
    chmod +x ./scripts/import-initial-data.sh
    
    log "Скрипт для импорта начальных данных создан."
    
    # Создание скрипта для проверки корректности импортированных данных
    cat > ./scripts/check-imported-data.sh << 'EOF'
#!/bin/bash

# Проверка наличия аргументов
if [ $# -ne 1 ]; then
    echo "Использование: $0 <контейнер_базы_данных>"
    exit 1
fi

DB_CONTAINER=$1

# Проверка пользователей
echo "Проверка пользователей..."
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -c "SELECT id, username, role, first_name, last_name FROM users;"

# Проверка автоматов
echo "Проверка автоматов..."
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -c "SELECT id, code, name, location, status FROM machines;"

# Проверка продуктов
echo "Проверка продуктов..."
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -c "SELECT id, name, description, price FROM products;"

# Проверка маршрутов
echo "Проверка маршрутов..."
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -c "SELECT r.id, r.name, u.username, r.status FROM routes r JOIN users u ON r.operator_id = u.id;"

# Проверка связей маршрутов и автоматов
echo "Проверка связей маршрутов и автоматов..."
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -c "SELECT rm.route_id, r.name, rm.machine_id, m.code, rm.position FROM route_machines rm JOIN routes r ON rm.route_id = r.id JOIN machines m ON rm.machine_id = m.id ORDER BY rm.route_id, rm.position;"

# Проверка задач
echo "Проверка задач..."
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -c "SELECT t.id, t.title, t.status, t.priority, u.username, m.code, t.due_date FROM tasks t JOIN users u ON t.assignee_id = u.id JOIN machines m ON t.machine_id = m.id;"

# Проверка чек-листов
echo "Проверка чек-листов..."
docker exec $DB_CONTAINER psql -U vhm24_user -d vhm24_db -c "SELECT c.id, t.title, c.title, c.completed FROM checklists c JOIN tasks t ON c.task_id = t.id;"

echo "Проверка импортированных данных завершена."
EOF
    
    chmod +x ./scripts/check-imported-data.sh
    
    log "Скрипт для проверки корректности импортированных данных создан."
    
    # Создание скрипта для настройки начальных параметров системы
    cat > ./scripts/setup-initial-parameters.sh << 'EOF'
#!/bin/bash

# Проверка наличия аргументов
if [ $# -ne 1 ]; then
    echo "Использование: $0 <контейнер_api>"
    exit 1
fi

API_CONTAINER=$1

# Настройка параметров системы
echo "Настройка параметров системы..."
cat > /tmp/parameters.json << 'EOFJSON'
{
  "system": {
    "name": "VHM24",
    "description": "Vending Hub Manager",
    "version": "1.0.0",
    "timezone": "Europe/Moscow",
    "language": "ru",
    "currency": "RUB",
    "dateFormat": "DD.MM.YYYY",
    "timeFormat": "HH:mm:ss"
  },
  "security": {
    "tokenExpiration": 86400,
    "passwordMinLength": 8,
    "passwordRequireUppercase": true,
    "passwordRequireLowercase": true,
    "passwordRequireNumbers": true,
    "passwordRequireSpecialChars": true,
    "maxLoginAttempts": 5,
    "lockoutTime": 300
  }
}
EOFJSON

docker cp /tmp/parameters.json $API_CONTAINER:/tmp/parameters.json
docker exec $API_CONTAINER curl -X POST -H "Content-Type: application/json" -d @/tmp/parameters.json http://localhost:3000/api/system/settings

echo "Настройка параметров системы завершена."
EOF
    
    chmod +x ./scripts/setup-initial-parameters.sh
    
    log "Скрипт для настройки начальных параметров системы создан."
    
    log "Подготовка данных завершена."
}

# Основная функция
main() {
    log "Начало подготовки к запуску VHM24..."
    
    check_dependencies
    setup_documentation
    setup_training
    setup_data
    
    log "Подготовка к запуску VHM24 завершена."
    log "Пожалуйста, отредактируйте созданные файлы, заменив значения по умолчанию на реальные."
    log "После этого выполните следующие команды для запуска системы:"
    log "1. Запустите инфраструктуру: ./scripts/setup-infrastructure.sh"
    log "2. Настройте мониторинг и логирование: ./scripts/setup-monitoring.sh"
    log "3. Настройте развертывание и тестирование: ./scripts/setup-deployment.sh"
    log "4. Импортируйте начальные данные: ./scripts/import-initial-data.sh <контейнер_базы_данных>"
    log "5. Настройте начальные параметры системы: ./scripts/setup-initial-parameters.sh <контейнер_api>"
}

# Запуск основной функции
main
