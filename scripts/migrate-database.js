/**
 * VHM24 - VendHub Manager 24/7
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/migrate-database.js [options]
 * 
 * –û–ø—Ü–∏–∏:
 * --create: —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
 * --name=NAME: –∏–º—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ --create)
 * --deploy: –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
 * --reset: —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 * --status: –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
 */

require('dotenv').config();
const { exec } = require('child_process');
const { promisify } = require('util');
const path = require('path');
const fs = require('fs').promises;

const execAsync = promisify(exec);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  create: process.argv.includes('--create'),
  deploy: process.argv.includes('--deploy'),
  reset: process.argv.includes('--reset'),
  status: process.argv.includes('--status'),
  name: process.argv.find(arg => arg.startsWith('--name='))?.split('=')[1],
  schemaPath: path.join(process.cwd(), 'packages/database/prisma/schema.prisma'),
  migrationsDir: path.join(process.cwd(), 'packages/database/prisma/migrations')
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Prisma —Å—Ö–µ–º—ã
async function checkSchema() {
  try {
    await fs.access(config.schemaPath);
    console.log(`‚úÖ Prisma schema –Ω–∞–π–¥–µ–Ω–∞: ${config.schemaPath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Prisma schema –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${config.schemaPath}`);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
async function createMigration() {
  if (!config.name) {
    console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –º–∏–≥—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --name=NAME');
    process.exit(1);
  }
  
  try {
    console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏: ${config.name}`);
    
    const command = `npx prisma migrate dev --name ${config.name} --schema=${config.schemaPath} --create-only`;
    const { stdout, stderr } = await execAsync(command);
    
    console.log(stdout);
    if (stderr) console.error(stderr);
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${config.name}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrations = await fs.readdir(config.migrationsDir);
    const latestMigration = migrations
      .filter(dir => dir.includes(config.name))
      .sort()
      .pop();
    
    if (latestMigration) {
      const migrationPath = path.join(config.migrationsDir, latestMigration, 'migration.sql');
      console.log(`üìù –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏: ${migrationPath}`);
      console.log('–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é --deploy');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
async function deployMigrations() {
  try {
    console.log('üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
    
    const command = `npx prisma migrate deploy --schema=${config.schemaPath}`;
    const { stdout, stderr } = await execAsync(command);
    
    console.log(stdout);
    if (stderr) console.error(stderr);
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
    await generateClient();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
    process.exit(1);
  }
}

// –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function resetDatabase() {
  if (process.env.NODE_ENV === 'production') {
    console.error('‚ùå –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–µ—â–µ–Ω –≤ production —Ä–µ–∂–∏–º–µ');
    process.exit(1);
  }
  
  try {
    console.log('‚ö†Ô∏è –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const command = `npx prisma migrate reset --schema=${config.schemaPath} --force`;
    const { stdout, stderr } = await execAsync(command);
    
    console.log(stdout);
    if (stderr) console.error(stderr);
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
async function showStatus() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π
    const migrations = await fs.readdir(config.migrationsDir);
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${migrations.length} –º–∏–≥—Ä–∞—Ü–∏–π:`);
    
    for (const migration of migrations) {
      const migrationPath = path.join(config.migrationsDir, migration);
      const stats = await fs.stat(migrationPath);
      console.log(`- ${migration} (${stats.mtime.toISOString()})`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      const command = `npx prisma migrate status --schema=${config.schemaPath}`;
      const { stdout, stderr } = await execAsync(command);
      
      console.log('\nüìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
      console.log(stdout);
      if (stderr) console.error(stderr);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
    process.exit(1);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
async function generateClient() {
  try {
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞...');
    
    const command = `npx prisma generate --schema=${config.schemaPath}`;
    const { stdout, stderr } = await execAsync(command);
    
    console.log(stdout);
    if (stderr) console.error(stderr);
    
    console.log('‚úÖ Prisma –∫–ª–∏–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
    process.exit(1);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log(`
üöÄ VHM24 - –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚è∞ –î–∞—Ç–∞: ${new Date().toISOString()}
  `);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Prisma —Å—Ö–µ–º—ã
  const schemaExists = await checkSchema();
  if (!schemaExists) {
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ–ø—Ü–∏—è
  if (!config.create && !config.deploy && !config.reset && !config.status) {
    console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –æ–ø—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --create, --deploy, --reset –∏–ª–∏ --status');
    process.exit(1);
  }
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—Ü–∏–π
  if (config.create) {
    await createMigration();
  } else if (config.deploy) {
    await deployMigrations();
  } else if (config.reset) {
    await resetDatabase();
  } else if (config.status) {
    await showStatus();
  }
}

// –ó–∞–ø—É—Å–∫
main()
  .then(() => {
    console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
