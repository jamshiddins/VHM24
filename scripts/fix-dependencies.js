const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π VHM24...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function runCommand(command, options = {}) {
  console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${command}`);
  try {
    const output = execSync(command, { encoding: 'utf8', ...options });
    console.log(output);
    return output;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${command}`);
    console.error(error.message);
    if (error.stdout) console.log(error.stdout.toString());
    if (error.stderr) console.error(error.stderr.toString());
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
function checkFileExists(filePath) {
  return fs.existsSync(filePath);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dirPath}`);
    return true;
  }
  return false;
}

// –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ tap –¥–ª—è —Ç–µ—Å—Ç–æ–≤
console.log('\nüìã –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ tap –¥–ª—è —Ç–µ—Å—Ç–æ–≤');
runCommand('npm install tap --save-dev');

// –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å fast-jwt
console.log('\nüìã –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å fast-jwt');
if (checkFileExists('package.json')) {
  let packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));

  // –î–æ–±–∞–≤–ª—è–µ–º overrides –¥–ª—è fast-jwt
  if (!packageJson.overrides) {
    packageJson.overrides = {};
  }

  packageJson.overrides['fast-jwt'] = {
    engines: {
      node: '>=16'
    }
  };

  fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω override –¥–ª—è fast-jwt –≤ package.json');
}

// –®–∞–≥ 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å canvas
console.log('\nüìã –®–∞–≥ 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å canvas');
if (checkFileExists('package.json')) {
  let packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ canvas –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
  const hasCanvas = packageJson.dependencies && packageJson.dependencies.canvas;

  if (hasCanvas) {
    console.log('–ù–∞–π–¥–µ–Ω –ø–∞–∫–µ—Ç canvas –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ skia-canvas');

    // –£–¥–∞–ª—è–µ–º canvas –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º skia-canvas
    delete packageJson.dependencies.canvas;

    if (!packageJson.dependencies['skia-canvas']) {
      packageJson.dependencies['skia-canvas'] = '^0.9.30';
    }

    fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
    console.log('‚úÖ –ó–∞–º–µ–Ω–µ–Ω canvas –Ω–∞ skia-canvas –≤ package.json');
  } else {
    console.log('–ü–∞–∫–µ—Ç canvas –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö');
  }
}

// –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('\nüìã –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
runCommand('npm install');

// –®–∞–≥ 5: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
console.log('\nüìã –®–∞–≥ 5: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
function updateTests(directory) {
  if (!fs.existsSync(directory)) {
    console.log(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${directory} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return;
  }

  const testFiles = fs
    .readdirSync(directory)
    .filter(file => file.endsWith('.test.js'))
    .map(file => path.join(directory, file));

  testFiles.forEach(file => {
    let content = fs.readFileSync(file, 'utf8');

    // –ó–∞–º–µ–Ω—è–µ–º tap –Ω–∞ jest
    if (content.includes("const { test } = require('tap')")) {
      content = content.replace(
        "const { test } = require('tap')",
        "const { describe, it, expect } = require('@jest/globals')"
      );

      // –ó–∞–º–µ–Ω—è–µ–º tap —Ç–µ—Å—Ç—ã –Ω–∞ jest —Ç–µ—Å—Ç—ã
      content = content.replace(
        /test\(['"](.+)['"]\s*,\s*async\s*\(\s*t\s*\)\s*=>\s*\{/g,
        "describe('$1', () => {\n  it('should work', async () => {"
      );

      // –ó–∞–º–µ–Ω—è–µ–º t.equal –Ω–∞ expect().toBe()
      content = content.replace(
        /t\.equal\(([^,]+),\s*([^)]+)\)/g,
        'expect($1).toBe($2)'
      );

      // –ó–∞–º–µ–Ω—è–µ–º t.ok –Ω–∞ expect().toBeTruthy()
      content = content.replace(/t\.ok\(([^)]+)\)/g, 'expect($1).toBeTruthy()');

      // –ó–∞–º–µ–Ω—è–µ–º t.notOk –Ω–∞ expect().toBeFalsy()
      content = content.replace(
        /t\.notOk\(([^)]+)\)/g,
        'expect($1).toBeFalsy()'
      );

      // –ó–∞–º–µ–Ω—è–µ–º t.same –Ω–∞ expect().toEqual()
      content = content.replace(
        /t\.same\(([^,]+),\s*([^)]+)\)/g,
        'expect($1).toEqual($2)'
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –¥–ª—è describe
      content = content.replace(/}\s*\)\s*$/, '  });\n});');

      fs.writeFileSync(file, content);
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç: ${file}`);
    }
  });
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
const servicesDir = path.join(__dirname, '..', 'services');
if (fs.existsSync(servicesDir)) {
  const services = fs
    .readdirSync(servicesDir)
    .filter(dir => fs.statSync(path.join(servicesDir, dir)).isDirectory());

  services.forEach(service => {
    const testsDir = path.join(servicesDir, service, 'tests');
    if (fs.existsSync(testsDir)) {
      updateTests(testsDir);
    }
  });
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tests
const testsDir = path.join(__dirname, '..', 'tests');
if (fs.existsSync(testsDir)) {
  const testDirs = fs
    .readdirSync(testsDir)
    .filter(dir => fs.statSync(path.join(testsDir, dir)).isDirectory());

  testDirs.forEach(dir => {
    updateTests(path.join(testsDir, dir));
  });
}

// –®–∞–≥ 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ jest.config.js
console.log('\nüìã –®–∞–≥ 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ jest.config.js');
if (checkFileExists('jest.config.js')) {
  let jestConfig = fs.readFileSync('jest.config.js', 'utf8');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ setupFilesAfterEnv
  if (!jestConfig.includes('setupFilesAfterEnv')) {
    jestConfig = jestConfig.replace(
      'module.exports = {',
      `module.exports = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],`
    );

    fs.writeFileSync('jest.config.js', jestConfig);
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω setupFilesAfterEnv –≤ jest.config.js');
  }
}

// –®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ jest.setup.js, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
console.log('\nüìã –®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ jest.setup.js');
if (!checkFileExists('jest.setup.js')) {
  const setupContent = `// jest.setup.js
const { jest } = require('@jest/globals');

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
jest.setTimeout(30000);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–æ–∫–∏
global.fetch = jest.fn();

// –û—á–∏—Å—Ç–∫–∞ –º–æ–∫–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
afterEach(() => {
  jest.clearAllMocks();
});
`;

  fs.writeFileSync('jest.setup.js', setupContent);
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω jest.setup.js');
}

// –®–∞–≥ 8: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
console.log('\nüìã –®–∞–≥ 8: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤');
if (checkFileExists('package.json')) {
  let packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
  if (!packageJson.scripts) {
    packageJson.scripts = {};
  }

  packageJson.scripts.test = 'jest';
  packageJson.scripts['test:watch'] = 'jest --watch';
  packageJson.scripts['test:coverage'] = 'jest --coverage';

  fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ package.json');
}

console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
console.log('npm test');
