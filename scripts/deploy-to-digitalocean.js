/**
 * VHM24 - VendHub Manager 24/7
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ DigitalOcean
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/deploy-to-digitalocean.js
 * 
 * –û–ø—Ü–∏–∏:
 * --production: –¥–µ–ø–ª–æ–π –≤ production —Ä–µ–∂–∏–º–µ
 * --monolith: –¥–µ–ø–ª–æ–π –≤ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
 */

require('dotenv').config();
const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs').promises;
const path = require('path');

const execAsync = promisify(exec);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  production: process.argv.includes('--production'),
  monolith: process.argv.includes('--monolith'),
  doApiToken: process.env.DO_API_TOKEN,
  projectName: 'vhm24',
  environment: process.argv.includes('--production') ? 'production' : 'development',
  region: 'fra1', // Frankfurt
  minioEndpoint: process.env.MINIO_ENDPOINT,
  minioAccessKey: process.env.MINIO_ACCESS_KEY,
  minioSecretKey: process.env.MINIO_SECRET_KEY
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è doctl
async function checkDoctl() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è doctl...');
    
    await execAsync('doctl version');
    console.log('‚úÖ doctl –Ω–∞–π–¥–µ–Ω');
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è doctl –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∫–∞...');
    
    try {
      if (process.platform === 'win32') {
        console.log('–î–ª—è Windows –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å doctl –≤—Ä—É—á–Ω—É—é —Å https://github.com/digitalocean/doctl/releases');
      } else if (process.platform === 'darwin') {
        await execAsync('brew install doctl');
      } else {
        await execAsync(`
          cd ~
          wget https://github.com/digitalocean/doctl/releases/download/v1.92.1/doctl-1.92.1-linux-amd64.tar.gz
          tar xf ~/doctl-1.92.1-linux-amd64.tar.gz
          sudo mv ~/doctl /usr/local/bin
        `);
      }
      console.log('‚úÖ doctl —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return true;
    } catch (installError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å doctl:', installError.message);
      return false;
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ DigitalOcean
function checkDoApiToken() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ DigitalOcean...');
  
  if (config.doApiToken) {
    console.log('‚úÖ –¢–æ–∫–µ–Ω DigitalOcean –Ω–∞–π–¥–µ–Ω');
    return true;
  } else {
    console.error('‚ùå –¢–æ–∫–µ–Ω DigitalOcean –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DO_API_TOKEN');
    console.log('–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DigitalOcean: https://cloud.digitalocean.com/account/api/tokens');
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ .env
async function checkEnvFile() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ .env...');
  
  const envPath = path.join(process.cwd(), '.env');
  const exists = await fs.access(envPath).then(() => true).catch(() => false);
  
  if (exists) {
    console.log('‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω');
    return true;
  } else {
    console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
}

// –õ–æ–≥–∏–Ω –≤ DigitalOcean
async function loginToDigitalOcean() {
  console.log('üîë –í—Ö–æ–¥ –≤ DigitalOcean...');
  
  try {
    await execAsync(`doctl auth init -t ${config.doApiToken}`);
    console.log('‚úÖ –í—Ö–æ–¥ –≤ DigitalOcean –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ DigitalOcean:', error.message);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ DigitalOcean App Platform
async function createDoApp() {
  console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ${config.projectName} –≤ DigitalOcean App Platform...`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const { stdout } = await execAsync('doctl apps list --format ID,Spec.Name --no-header');
    
    if (stdout.includes(config.projectName)) {
      console.log(`‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${config.projectName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ DigitalOcean App Platform`);
      return true;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ spec —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const specPath = path.join(process.cwd(), '.do', 'app.yaml');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .do, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await fs.mkdir(path.join(process.cwd(), '.do'), { recursive: true });
    
    // –°–æ–∑–¥–∞–Ω–∏–µ spec —Ñ–∞–π–ª–∞
    let spec;
    
    if (config.monolith) {
      spec = `
name: ${config.projectName}
region: ${config.region}
services:
- name: vhm24-monolith
  github:
    repo: ${process.env.GITHUB_REPO || 'your-username/vhm24'}
    branch: main
    deploy_on_push: true
  build_command: npm install
  run_command: node start-services.js --production --monolith
  http_port: 8000
  instance_count: 1
  instance_size_slug: basic-xxs
  routes:
  - path: /
  envs:
  - key: NODE_ENV
    value: ${config.environment}
    scope: RUN_TIME
databases:
- name: vhm24-db
  engine: PG
  version: "12"
  production: ${config.production}
  cluster_name: vhm24-db-cluster
  db_name: vhm24
  db_user: vhm24
`;
    } else {
      spec = `
name: ${config.projectName}
region: ${config.region}
services:
- name: vhm24-gateway
  github:
    repo: ${process.env.GITHUB_REPO || 'your-username/vhm24'}
    branch: main
    deploy_on_push: true
  build_command: npm install
  run_command: node services/gateway/src/index.js
  http_port: 8000
  instance_count: 1
  instance_size_slug: basic-xxs
  routes:
  - path: /
  envs:
  - key: NODE_ENV
    value: ${config.environment}
    scope: RUN_TIME

- name: vhm24-auth
  github:
    repo: ${process.env.GITHUB_REPO || 'your-username/vhm24'}
    branch: main
    deploy_on_push: true
  build_command: npm install
  run_command: node services/auth/src/index.js
  http_port: 3001
  instance_count: 1
  instance_size_slug: basic-xxs
  envs:
  - key: NODE_ENV
    value: ${config.environment}
    scope: RUN_TIME

- name: vhm24-machines
  github:
    repo: ${process.env.GITHUB_REPO || 'your-username/vhm24'}
    branch: main
    deploy_on_push: true
  build_command: npm install
  run_command: node services/machines/src/index.js
  http_port: 3002
  instance_count: 1
  instance_size_slug: basic-xxs
  envs:
  - key: NODE_ENV
    value: ${config.environment}
    scope: RUN_TIME

- name: vhm24-inventory
  github:
    repo: ${process.env.GITHUB_REPO || 'your-username/vhm24'}
    branch: main
    deploy_on_push: true
  build_command: npm install
  run_command: node services/inventory/src/index.js
  http_port: 3003
  instance_count: 1
  instance_size_slug: basic-xxs
  envs:
  - key: NODE_ENV
    value: ${config.environment}
    scope: RUN_TIME

- name: vhm24-tasks
  github:
    repo: ${process.env.GITHUB_REPO || 'your-username/vhm24'}
    branch: main
    deploy_on_push: true
  build_command: npm install
  run_command: node services/tasks/src/index.js
  http_port: 3004
  instance_count: 1
  instance_size_slug: basic-xxs
  envs:
  - key: NODE_ENV
    value: ${config.environment}
    scope: RUN_TIME

- name: vhm24-bunkers
  github:
    repo: ${process.env.GITHUB_REPO || 'your-username/vhm24'}
    branch: main
    deploy_on_push: true
  build_command: npm install
  run_command: node services/bunkers/src/index.js
  http_port: 3005
  instance_count: 1
  instance_size_slug: basic-xxs
  envs:
  - key: NODE_ENV
    value: ${config.environment}
    scope: RUN_TIME

- name: vhm24-backup
  github:
    repo: ${process.env.GITHUB_REPO || 'your-username/vhm24'}
    branch: main
    deploy_on_push: true
  build_command: npm install
  run_command: node services/backup/src/index.js
  instance_count: 1
  instance_size_slug: basic-xxs
  envs:
  - key: NODE_ENV
    value: ${config.environment}
    scope: RUN_TIME

- name: vhm24-telegram-bot
  github:
    repo: ${process.env.GITHUB_REPO || 'your-username/vhm24'}
    branch: main
    deploy_on_push: true
  build_command: npm install
  run_command: node services/telegram-bot/src/index.js
  instance_count: 1
  instance_size_slug: basic-xxs
  envs:
  - key: NODE_ENV
    value: ${config.environment}
    scope: RUN_TIME

databases:
- name: vhm24-db
  engine: PG
  version: "12"
  production: ${config.production}
  cluster_name: vhm24-db-cluster
  db_name: vhm24
  db_user: vhm24

- name: vhm24-redis
  engine: REDIS
  version: "6"
  production: ${config.production}
  cluster_name: vhm24-redis-cluster
  db_name: vhm24
`;
    }
    
    await fs.writeFile(specPath, spec);
    console.log(`‚úÖ Spec —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${specPath}`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await execAsync(`doctl apps create --spec ${specPath}`);
    console.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${config.projectName} —Å–æ–∑–¥–∞–Ω–æ –≤ DigitalOcean App Platform`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ DigitalOcean App Platform:', error.message);
    return false;
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ DigitalOcean App Platform
async function setupEnvironmentVariables() {
  console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ DigitalOcean App Platform...');
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const { stdout } = await execAsync('doctl apps list --format ID,Spec.Name --no-header');
    const appIdMatch = stdout.match(new RegExp(`([a-z0-9-]+)\\s+${config.projectName}`));
    
    if (!appIdMatch) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ${config.projectName}`);
      return false;
    }
    
    const appId = appIdMatch[1];
    
    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .env
    const envPath = path.join(process.cwd(), '.env');
    const envContent = await fs.readFile(envPath, 'utf-8');
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envVars = {};
    envContent.split('\n').forEach(line => {
      const match = line.match(/^([^#=]+)=(.*)$/);
      if (match) {
        const key = match[1].trim();
        const value = match[2].trim().replace(/^["']|["']$/g, '');
        if (key && value) {
          envVars[key] = value;
        }
      }
    });
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envSpecPath = path.join(process.cwd(), '.do', 'env.yaml');
    
    let envSpec = `
apps:
- app_id: ${appId}
  envs:
`;
    
    for (const [key, value] of Object.entries(envVars)) {
      envSpec += `  - key: ${key}
    value: ${value}
    scope: RUN_TIME
`;
    }
    
    await fs.writeFile(envSpecPath, envSpec);
    console.log(`‚úÖ –§–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: ${envSpecPath}`);
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    await execAsync(`doctl apps update ${appId} --spec ${envSpecPath}`);
    console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ DigitalOcean App Platform');
    
    return true;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ DigitalOcean App Platform:', error.message);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ Spaces –≤ DigitalOcean
async function createSpaces() {
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ Spaces –≤ DigitalOcean...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ Spaces
    if (!config.minioAccessKey || !config.minioSecretKey) {
      console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ Spaces. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è MINIO_ACCESS_KEY –∏ MINIO_SECRET_KEY');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Spaces
    const { stdout } = await execAsync('doctl spaces list --format Name,Region --no-header');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ Space –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    if (!stdout.includes('vhm24-uploads')) {
      await execAsync(`doctl spaces create vhm24-uploads --region ${config.region}`);
      console.log('‚úÖ Space vhm24-uploads —Å–æ–∑–¥–∞–Ω –≤ DigitalOcean');
    } else {
      console.log('‚ö†Ô∏è Space vhm24-uploads —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ DigitalOcean');
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ Space –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    if (!stdout.includes('vhm24-backups')) {
      await execAsync(`doctl spaces create vhm24-backups --region ${config.region}`);
      console.log('‚úÖ Space vhm24-backups —Å–æ–∑–¥–∞–Ω –≤ DigitalOcean');
    } else {
      console.log('‚ö†Ô∏è Space vhm24-backups —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ DigitalOcean');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Spaces –≤ DigitalOcean:', error.message);
    return false;
  }
}

// –î–µ–ø–ª–æ–π –Ω–∞ DigitalOcean App Platform
async function deployToDigitalOcean() {
  console.log('üöÄ –î–µ–ø–ª–æ–π –Ω–∞ DigitalOcean App Platform...');
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const { stdout } = await execAsync('doctl apps list --format ID,Spec.Name --no-header');
    const appIdMatch = stdout.match(new RegExp(`([a-z0-9-]+)\\s+${config.projectName}`));
    
    if (!appIdMatch) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ${config.projectName}`);
      return false;
    }
    
    const appId = appIdMatch[1];
    
    // –î–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await execAsync(`doctl apps create-deployment ${appId}`);
    console.log('‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ DigitalOcean App Platform –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
    return true;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π –Ω–∞ DigitalOcean App Platform:', error.message);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function getAppUrl() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const { stdout } = await execAsync('doctl apps list --format ID,Spec.Name --no-header');
    const appIdMatch = stdout.match(new RegExp(`([a-z0-9-]+)\\s+${config.projectName}`));
    
    if (!appIdMatch) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ${config.projectName}`);
      return null;
    }
    
    const appId = appIdMatch[1];
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const { stdout: appInfo } = await execAsync(`doctl apps get ${appId} --format DefaultIngress`);
    const url = appInfo.trim();
    
    if (url) {
      console.log(`‚úÖ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${url}`);
      return url;
    } else {
      console.log('‚ö†Ô∏è URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
    return null;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log(`
üöÄ VHM24 - –î–µ–ø–ª–æ–π –Ω–∞ DigitalOcean
‚è∞ –î–∞—Ç–∞: ${new Date().toISOString()}
üîß –†–µ–∂–∏–º: ${config.production ? 'production' : 'development'}
üèóÔ∏è –¢–∏–ø: ${config.monolith ? '–º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π' : '–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã'}
  `);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è doctl
  const doctlExists = await checkDoctl();
  if (!doctlExists) {
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ DigitalOcean
  const tokenExists = checkDoApiToken();
  if (!tokenExists) {
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ .env
  const envExists = await checkEnvFile();
  if (!envExists) {
    process.exit(1);
  }
  
  // –õ–æ–≥–∏–Ω –≤ DigitalOcean
  const loginSuccess = await loginToDigitalOcean();
  if (!loginSuccess) {
    process.exit(1);
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ Spaces –≤ DigitalOcean
  const spacesCreated = await createSpaces();
  if (!spacesCreated) {
    process.exit(1);
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ DigitalOcean App Platform
  const appCreated = await createDoApp();
  if (!appCreated) {
    process.exit(1);
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ DigitalOcean App Platform
  const envSetup = await setupEnvironmentVariables();
  if (!envSetup) {
    process.exit(1);
  }
  
  // –î–µ–ø–ª–æ–π –Ω–∞ DigitalOcean App Platform
  const deploySuccess = await deployToDigitalOcean();
  if (!deploySuccess) {
    process.exit(1);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const appUrl = await getAppUrl();
  
  console.log(`
‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ DigitalOcean –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!
üåê URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${appUrl || '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'}
üìä Health check: ${appUrl ? `https://${appUrl}/health` : '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'}
üì± API: ${appUrl ? `https://${appUrl}/api/v1` : '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'}
  `);
}

// –ó–∞–ø—É—Å–∫
main()
  .then(() => {
    console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
