const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

console.log('üîí –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö VHM24\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dirPath}`);
    return true;
  }
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ JWT —Å–µ–∫—Ä–µ—Ç–∞
function generateSecureJwtSecret() {
  return crypto.randomBytes(64).toString('hex');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ hardcoded credentials –≤ —Ñ–∞–π–ª–µ
function findHardcodedCredentials(filePath) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return [];
  }

  const content = fs.readFileSync(filePath, 'utf8');
  const credentials = [];

  // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ credentials
  const patterns = [
    // –ü–∞—Ä–æ–ª–∏
    { regex: /(?:password|pwd|passwd|secret)\s*[:=]\s*['"]([^'"]{8,})['"]/gi, type: 'password' },
    // API –∫–ª—é—á–∏
    { regex: /(?:api[_-]?key|apikey|token)\s*[:=]\s*['"]([a-zA-Z0-9_\-\.]{20,})['"]/gi, type: 'api_key' },
    // JWT —Å–µ–∫—Ä–µ—Ç—ã
    { regex: /(?:jwt[_-]?secret|jwtsecret)\s*[:=]\s*['"]([^'"]{16,})['"]/gi, type: 'jwt_secret' },
    // URL —Å credentials
    { regex: /(?:https?:\/\/)([^:]+):([^@]+)@/gi, type: 'url_with_credentials' },
    // –•–∞—Ä–¥–∫–æ–¥–µ–¥ ID
    { regex: /PASSWORD_\d+\s*=\s*['"]([^'"]+)['"]/gi, type: 'hardcoded_password' }
  ];

  patterns.forEach(pattern => {
    let match;
    while ((match = pattern.regex.exec(content)) !== null) {
      credentials.push({
        type: pattern.type,
        value: match[1],
        line: content.substring(0, match.index).split('\n').length,
        match: match[0]
      });
    }
  });

  return credentials;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã hardcoded credentials –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
function replaceHardcodedCredentials(filePath, credentials) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return false;
  }

  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;
  const envVars = {};

  credentials.forEach(cred => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    let envVarName;
    switch (cred.type) {
      case 'password':
        envVarName = `PASSWORD_${Math.floor(Math.random() * 1000)}`;
        break;
      case 'api_key':
        envVarName = `API_KEY_${Math.floor(Math.random() * 1000)}`;
        break;
      case 'jwt_secret':
        envVarName = 'JWT_SECRET';
        break;
      case 'url_with_credentials':
        envVarName = `URL_${Math.floor(Math.random() * 1000)}`;
        break;
      case 'hardcoded_password':
        // –î–ª—è PASSWORD_123 = "value" –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–∞–∫ –µ—Å—Ç—å
        const passwordMatch = cred.match.match(/PASSWORD_\d+/);
        if (passwordMatch) {
          envVarName = passwordMatch[0];
        } else {
          envVarName = `PASSWORD_${Math.floor(Math.random() * 1000)}`;
        }
        break;
      default:
        envVarName = `SECRET_${Math.floor(Math.random() * 1000)}`;
    }

    // –ó–∞–º–µ–Ω—è–µ–º hardcoded credentials –Ω–∞ process.env
    const replacement = cred.match.replace(cred.value, `\${process.env.${envVarName}}`);
    content = content.replace(cred.match, replacement);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ .env
    envVars[envVarName] = cred.value;
    
    modified = true;
  });

  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ó–∞–º–µ–Ω–µ–Ω—ã hardcoded credentials –≤ ${filePath}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª
    let envContent = '';
    if (fs.existsSync('.env')) {
      envContent = fs.readFileSync('.env', 'utf8');
    }
    
    let envUpdated = false;
    Object.entries(envVars).forEach(([key, value]) => {
      if (!envContent.includes(`${key}=`)) {
        envContent += `\n${key}=${value}`;
        envUpdated = true;
      }
    });
    
    if (envUpdated) {
      fs.writeFileSync('.env', envContent);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª`);
    }
    
    return true;
  }

  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JWT —Å–µ–∫—Ä–µ—Ç–∞ –≤ .env —Ñ–∞–π–ª–µ
function updateJwtSecret() {
  if (!fs.existsSync('.env')) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return false;
  }

  let envContent = fs.readFileSync('.env', 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ JWT_SECRET –≤ .env
  if (envContent.includes('JWT_SECRET=')) {
    const jwtSecretRegex = /JWT_SECRET=([^\n]+)/;
    const match = envContent.match(jwtSecretRegex);
    
    if (match && match[1].length < 64) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π JWT —Å–µ–∫—Ä–µ—Ç
      const newJwtSecret = generateSecureJwtSecret();
      
      // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π JWT —Å–µ–∫—Ä–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π
      envContent = envContent.replace(jwtSecretRegex, `JWT_SECRET=${newJwtSecret}`);
      
      fs.writeFileSync('.env', envContent);
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω JWT_SECRET –≤ .env —Ñ–∞–π–ª–µ`);
      return true;
    }
  } else {
    // –î–æ–±–∞–≤–ª—è–µ–º JWT_SECRET –≤ .env
    const newJwtSecret = generateSecureJwtSecret();
    envContent += `\nJWT_SECRET=${newJwtSecret}`;
    
    fs.writeFileSync('.env', envContent);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω JWT_SECRET –≤ .env —Ñ–∞–π–ª`);
    return true;
  }
  
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
function removeCredentialsFromRepo() {
  // –°–æ–∑–¥–∞–µ–º .gitignore, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!fs.existsSync('.gitignore')) {
    fs.writeFileSync('.gitignore', '');
  }
  
  let gitignoreContent = fs.readFileSync('.gitignore', 'utf8');
  
  // –î–æ–±–∞–≤–ª—è–µ–º .env –≤ .gitignore, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
  if (!gitignoreContent.includes('.env')) {
    gitignoreContent += '\n# Environment variables\n.env\n.env.*\n!.env.example\n';
    fs.writeFileSync('.gitignore', gitignoreContent);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω .env –≤ .gitignore`);
  }
  
  // –°–æ–∑–¥–∞–µ–º .env.example, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!fs.existsSync('.env.example')) {
    if (fs.existsSync('.env')) {
      let envContent = fs.readFileSync('.env', 'utf8');
      
      // –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã
      envContent = envContent
        .replace(/JWT_SECRET=.+/g, 'JWT_SECRET=your_jwt_secret_here')
        .replace(/DATABASE_URL=.+/g, 'DATABASE_URL=postgresql://user:password@localhost:5432/dbname')
        .replace(/REDIS_URL=.+/g, 'REDIS_URL=redis://localhost:6379')
        .replace(/TELEGRAM_BOT_TOKEN=.+/g, 'TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here')
        .replace(/PASSWORD_\d+=.+/g, 'PASSWORD_XXX=your_password_here');
      
      fs.writeFileSync('.env.example', envContent);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω .env.example –∏–∑ .env —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏`);
    } else {
      console.log(`‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å .env.example`);
    }
  }
  
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤
function checkJwtSecurity() {
  const jwtFiles = [
    'services/auth/src/index.js',
    'services/gateway/src/index.js',
    'packages/shared/middleware/auth.js'
  ];
  
  let modified = false;
  
  jwtFiles.forEach(filePath => {
    if (!fs.existsSync(filePath)) {
      console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ JWT —Ç–æ–∫–µ–Ω—ã –±–µ–∑ —Å—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏
    const jwtSignRegex = /(jwt\.sign|sign|fastify\.jwt\.sign)\(\s*({[^}]*}|[^,]+)\s*,\s*(['"][^'"]+['"]|[^,)]+)\s*(?:,\s*({[^}]*})?\s*)?\)/g;
    
    let match;
    while ((match = jwtSignRegex.exec(content)) !== null) {
      const [fullMatch, func, payload, secret, options] = match;
      
      // –ï—Å–ª–∏ –Ω–µ—Ç options –∏–ª–∏ –≤ options –Ω–µ—Ç expiresIn
      if (!options || !options.includes('expiresIn')) {
        // –î–æ–±–∞–≤–ª—è–µ–º expiresIn
        let replacement;
        
        if (!options) {
          replacement = `${func}(${payload}, ${secret}, { expiresIn: '1d' })`;
        } else if (options.trim() === '{}') {
          replacement = `${func}(${payload}, ${secret}, { expiresIn: '1d' })`;
        } else {
          // –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º expiresIn
          replacement = `${func}(${payload}, ${secret}, ${options.slice(0, -1)}, expiresIn: '1d' })`;
        }
        
        content = content.replace(fullMatch, replacement);
        modified = true;
      }
    }
    
    if (modified) {
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ JWT —Ç–æ–∫–µ–Ω–∞–º –≤ ${filePath}`);
    }
  });
  
  return modified;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
function fixErrorHandling() {
  const files = [
    'services/auth/src/index.js',
    'services/inventory/src/index.js',
    'services/tasks/src/index.js',
    'services/data-import/src/index.js',
    'services/gateway/src/index.js',
    'services/machines/src/index.js',
    'services/warehouse/src/index.js',
    'services/telegram-bot/src/index.js'
  ];
  
  let modified = false;
  
  files.forEach(filePath => {
    if (!fs.existsSync(filePath)) {
      console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    const errorSendRegex = /reply\.send\s*\(\s*err\s*\)/g;
    
    if (errorSendRegex.test(content)) {
      // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
      content = content.replace(errorSendRegex, `reply.code(500).send({ 
        statusCode: 500, 
        error: 'Internal Server Error', 
        message: 'An unexpected error occurred' 
      })`);
      
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ ${filePath}`);
      modified = true;
    }
  });
  
  return modified;
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

// 1. –û–±–Ω–æ–≤–ª—è–µ–º JWT —Å–µ–∫—Ä–µ—Ç
console.log('\nüîë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JWT —Å–µ–∫—Ä–µ—Ç–∞...');
updateJwtSecret();

// 2. –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º hardcoded credentials –≤ —Ñ–∞–π–ª–∞—Ö
console.log('\nüîç –ü–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞ hardcoded credentials...');
const filesToCheck = [
  'services/auth/src/index.js',
  'services/inventory/src/index.js',
  'services/tasks/src/index.js',
  'services/data-import/src/index.js',
  'services/gateway/src/index.js',
  'services/machines/src/index.js',
  'services/warehouse/src/index.js',
  'services/telegram-bot/src/index.js',
  'packages/shared/middleware/auth.js',
  'packages/shared/utils/config.js'
];

filesToCheck.forEach(filePath => {
  const credentials = findHardcodedCredentials(filePath);
  if (credentials.length > 0) {
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${credentials.length} hardcoded credentials –≤ ${filePath}`);
    replaceHardcodedCredentials(filePath, credentials);
  }
});

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–æ–≤
console.log('\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤...');
checkJwtSecurity();

// 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
console.log('\nüõ°Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
fixErrorHandling();

// 5. –£–¥–∞–ª—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
console.log('\nüßπ –£–¥–∞–ª–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
removeCredentialsFromRepo();

console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!');
