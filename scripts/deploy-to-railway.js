/**
 * VHM24 - VendHub Manager 24/7
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Railway
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/deploy-to-railway.js
 * 
 * –û–ø—Ü–∏–∏:
 * --production: –¥–µ–ø–ª–æ–π –≤ production —Ä–µ–∂–∏–º–µ
 * --monolith: –¥–µ–ø–ª–æ–π –≤ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
 */

require('dotenv').config();
const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs').promises;
const path = require('path');

const execAsync = promisify(exec);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  production: process.argv.includes('--production'),
  monolith: process.argv.includes('--monolith'),
  railwayToken: process.env.RAILWAY_TOKEN,
  projectName: 'vhm24',
  environment: process.argv.includes('--production') ? 'production' : 'development'
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Railway CLI
async function checkRailwayCLI() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Railway CLI...');
    
    await execAsync('railway --version');
    console.log('‚úÖ Railway CLI –Ω–∞–π–¥–µ–Ω');
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è Railway CLI –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∫–∞...');
    
    try {
      await execAsync('npm install -g @railway/cli');
      console.log('‚úÖ Railway CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return true;
    } catch (installError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Railway CLI:', installError.message);
      return false;
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ Railway
function checkRailwayToken() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ Railway...');
  
  if (config.railwayToken) {
    console.log('‚úÖ –¢–æ–∫–µ–Ω Railway –Ω–∞–π–¥–µ–Ω');
    return true;
  } else {
    console.error('‚ùå –¢–æ–∫–µ–Ω Railway –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è RAILWAY_TOKEN');
    console.log('–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π: railway login');
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ railway.toml
async function checkRailwayConfig() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ railway.toml...');
  
  const railwayPath = path.join(process.cwd(), 'railway.toml');
  const exists = await fs.access(railwayPath).then(() => true).catch(() => false);
  
  if (exists) {
    console.log('‚úÖ –§–∞–π–ª railway.toml –Ω–∞–π–¥–µ–Ω');
    return true;
  } else {
    console.error('‚ùå –§–∞–π–ª railway.toml –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ .env
async function checkEnvFile() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ .env...');
  
  const envPath = path.join(process.cwd(), '.env');
  const exists = await fs.access(envPath).then(() => true).catch(() => false);
  
  if (exists) {
    console.log('‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω');
    return true;
  } else {
    console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
}

// –õ–æ–≥–∏–Ω –≤ Railway
async function loginToRailway() {
  console.log('üîë –í—Ö–æ–¥ –≤ Railway...');
  
  try {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    console.log('‚úÖ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Railway —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É railway login');
    return true;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Railway:', error.message);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Railway
async function createRailwayProject() {
  console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ ${config.projectName} –≤ Railway...`);
  
  try {
    // –ü—Ä–æ–µ–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ —Å–≤—è–∑–∞–Ω —Å —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç ${config.projectName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–≤—è–∑–∞–Ω —Å —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Railway:', error.message);
    return false;
  }
}

// –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å Railway
async function linkRailwayProject() {
  console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å Railway...`);
  
  try {
    // –ü—Ä–æ–µ–∫—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å Railway (–æ–∫—Ä—É–∂–µ–Ω–∏–µ: ${config.environment})`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤—è–∑–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å Railway:', error.message);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Railway
async function createRailwayServices() {
  if (config.monolith) {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ Railway...');
    
    try {
      await execAsync('railway add --service vhm24-monolith');
      console.log('‚úÖ –ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –≤ Railway');
      return true;
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚ö†Ô∏è –ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Railway');
        return true;
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤ Railway:', error.message);
        return false;
      }
    }
  } else {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Railway...');
    
    const services = [
      'vhm24-gateway',
      'vhm24-auth',
      'vhm24-machines',
      'vhm24-inventory',
      'vhm24-tasks',
      'vhm24-bunkers',
      'vhm24-backup',
      'vhm24-telegram-bot'
    ];
    
    for (const service of services) {
      try {
        await execAsync(`railway add --service ${service}`);
        console.log(`‚úÖ –°–µ—Ä–≤–∏—Å ${service} —Å–æ–∑–¥–∞–Ω –≤ Railway`);
      } catch (error) {
        if (error.message.includes('already exists')) {
          console.log(`‚ö†Ô∏è –°–µ—Ä–≤–∏—Å ${service} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Railway`);
        } else {
          console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å ${service} –≤ Railway:`, error.message);
          return false;
        }
      }
    }
    
    return true;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≤ Railway
async function createPostgresDatabase() {
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≤ Railway...');
  
  try {
    await execAsync('railway add --database postgres');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —Å–æ–∑–¥–∞–Ω–∞ –≤ Railway');
    return true;
  } catch (error) {
    if (error.message.includes('already exists')) {
      console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Railway');
      return true;
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≤ Railway:', error.message);
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ Redis –≤ Railway
async function createRedis() {
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ Redis –≤ Railway...');
  
  try {
    await execAsync('railway add --database redis');
    console.log('‚úÖ Redis —Å–æ–∑–¥–∞–Ω –≤ Railway');
    return true;
  } catch (error) {
    if (error.message.includes('already exists')) {
      console.log('‚ö†Ô∏è Redis —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Railway');
      return true;
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Redis –≤ Railway:', error.message);
      return false;
    }
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway
async function setupEnvironmentVariables() {
  console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway...');
  
  try {
    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .env
    const envPath = path.join(process.cwd(), '.env');
    const envContent = await fs.readFile(envPath, 'utf-8');
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envVars = {};
    envContent.split('\n').forEach(line => {
      const match = line.match(/^([^#=]+)=(.*)$/);
      if (match) {
        const key = match[1].trim();
        const value = match[2].trim().replace(/^["']|["']$/g, '');
        if (key && value) {
          envVars[key] = value;
        }
      }
    });
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway
    for (const [key, value] of Object.entries(envVars)) {
      try {
        await execAsync(`railway variables set ${key}=${value}`);
        console.log(`‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${key} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Railway`);
      } catch (error) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ${key} –≤ Railway:`, error.message);
      }
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è production
    if (config.production) {
      await execAsync('railway variables set NODE_ENV=production');
      console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è NODE_ENV=production —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Railway');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway:', error.message);
    return false;
  }
}

// –î–µ–ø–ª–æ–π –Ω–∞ Railway
async function deployToRailway() {
  console.log('üöÄ –î–µ–ø–ª–æ–π –Ω–∞ Railway...');
  
  try {
    let command = 'railway up';
    
    if (config.production) {
      command += ' --environment production';
    }
    
    if (config.monolith) {
      command += ' --service vhm24-monolith';
    }
    
    const { stdout, stderr } = await execAsync(command);
    
    console.log(stdout);
    if (stderr) console.error(stderr);
    
    console.log('‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ Railway –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π –Ω–∞ Railway:', error.message);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–æ–µ–∫—Ç–∞
async function getProjectUrl() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–æ–µ–∫—Ç–∞...');
  
  try {
    const { stdout } = await execAsync('railway status');
    
    const urlMatch = stdout.match(/URL:\s+(https:\/\/[^\s]+)/);
    if (urlMatch && urlMatch[1]) {
      const url = urlMatch[1];
      console.log(`‚úÖ URL –ø—Ä–æ–µ–∫—Ç–∞: ${url}`);
      return url;
    } else {
      console.log('‚ö†Ô∏è URL –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
    return null;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log(`
üöÄ VHM24 - –î–µ–ø–ª–æ–π –Ω–∞ Railway
‚è∞ –î–∞—Ç–∞: ${new Date().toISOString()}
üîß –†–µ–∂–∏–º: ${config.production ? 'production' : 'development'}
üèóÔ∏è –¢–∏–ø: ${config.monolith ? '–º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π' : '–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã'}
  `);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Railway CLI
  const cliExists = await checkRailwayCLI();
  if (!cliExists) {
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ Railway
  const tokenExists = checkRailwayToken();
  if (!tokenExists) {
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ railway.toml
  const configExists = await checkRailwayConfig();
  if (!configExists) {
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ .env
  const envExists = await checkEnvFile();
  if (!envExists) {
    process.exit(1);
  }
  
  // –õ–æ–≥–∏–Ω –≤ Railway
  const loginSuccess = await loginToRailway();
  if (!loginSuccess) {
    process.exit(1);
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Railway
  const projectCreated = await createRailwayProject();
  if (!projectCreated) {
    process.exit(1);
  }
  
  // –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å Railway
  const projectLinked = await linkRailwayProject();
  if (!projectLinked) {
    process.exit(1);
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Railway
  const servicesCreated = await createRailwayServices();
  if (!servicesCreated) {
    process.exit(1);
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≤ Railway
  const postgresCreated = await createPostgresDatabase();
  if (!postgresCreated) {
    process.exit(1);
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ Redis –≤ Railway
  const redisCreated = await createRedis();
  if (!redisCreated) {
    process.exit(1);
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway
  const envSetup = await setupEnvironmentVariables();
  if (!envSetup) {
    process.exit(1);
  }
  
  // –î–µ–ø–ª–æ–π –Ω–∞ Railway
  const deploySuccess = await deployToRailway();
  if (!deploySuccess) {
    process.exit(1);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–æ–µ–∫—Ç–∞
  const projectUrl = await getProjectUrl();
  
  console.log(`
‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ Railway –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!
üåê URL –ø—Ä–æ–µ–∫—Ç–∞: ${projectUrl || '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'}
üìä Health check: ${projectUrl ? `${projectUrl}/health` : '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'}
üì± API: ${projectUrl ? `${projectUrl}/api/v1` : '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'}
  `);
}

// –ó–∞–ø—É—Å–∫
main()
  .then(() => {
    console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
