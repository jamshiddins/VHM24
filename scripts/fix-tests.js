const fs = require('fs');
const path = require('path');
const glob = require('glob');

console.log('üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
function checkFileExists(filePath) {
  return fs.existsSync(filePath);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dirPath}`);
    return true;
  }
  return false;
}

// –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ jest.config.js
console.log('\nüìã –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ jest.config.js');
const jestConfigContent = `module.exports = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'node',
  testMatch: ['**/*.test.js'],
  collectCoverage: true,
  coverageDirectory: 'coverage',
  collectCoverageFrom: [
    'services/**/*.js',
    'packages/**/*.js',
    '!**/node_modules/**',
    '!**/vendor/**'
  ],
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  testTimeout: 30000,
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º node_modules
  transformIgnorePatterns: [
    '/node_modules/'
  ],
  // –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã
  moduleNameMapper: {
    '^canvas$': '<rootDir>/mocks/canvas.js',
    '^skia-canvas$': '<rootDir>/mocks/canvas.js',
    '^fast-jwt$': '<rootDir>/mocks/jwt.js'
  }
};
`;

fs.writeFileSync('jest.config.js', jestConfigContent);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω jest.config.js');

// –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ jest.setup.js
console.log('\nüìã –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ jest.setup.js');
const jestSetupContent = `// jest.setup.js
const { jest } = require('@jest/globals');

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
jest.setTimeout(30000);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–æ–∫–∏
global.fetch = jest.fn(() => Promise.resolve({
  json: () => Promise.resolve({}),
  text: () => Promise.resolve(''),
  ok: true,
  status: 200,
  headers: new Map()
}));

// –ú–æ–∫ –¥–ª—è process.env
process.env.JWT_SECRET = 'test-secret';
process.env.DATABASE_URL = 'postgresql://postgres:postgres@localhost:5432/vhm24_test';
process.env.REDIS_URL = 'redis://localhost:6379';
process.env.NODE_ENV = 'test';

// –û—á–∏—Å—Ç–∫–∞ –º–æ–∫–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
afterEach(() => {
  jest.clearAllMocks();
});
`;

fs.writeFileSync('jest.setup.js', jestSetupContent);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω jest.setup.js');

// –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –º–æ–∫–æ–≤
console.log('\nüìã –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –º–æ–∫–æ–≤');
ensureDirectoryExists('mocks');

// –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞ –¥–ª—è canvas
console.log('\nüìã –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞ –¥–ª—è canvas');
const canvasMockContent = `// mocks/canvas.js
class Canvas {
  constructor(width, height) {
    this.width = width;
    this.height = height;
  }

  getContext() {
    return {
      fillRect: jest.fn(),
      clearRect: jest.fn(),
      getImageData: jest.fn(() => ({
        data: new Uint8ClampedArray(this.width * this.height * 4)
      })),
      putImageData: jest.fn(),
      createImageData: jest.fn(() => ({
        data: new Uint8ClampedArray(this.width * this.height * 4)
      })),
      drawImage: jest.fn(),
      fillText: jest.fn(),
      measureText: jest.fn(() => ({ width: 10 })),
      createLinearGradient: jest.fn(() => ({
        addColorStop: jest.fn()
      })),
      beginPath: jest.fn(),
      moveTo: jest.fn(),
      lineTo: jest.fn(),
      stroke: jest.fn(),
      fill: jest.fn(),
      arc: jest.fn(),
      closePath: jest.fn(),
      clip: jest.fn(),
      save: jest.fn(),
      restore: jest.fn(),
      translate: jest.fn(),
      rotate: jest.fn(),
      scale: jest.fn(),
      setTransform: jest.fn(),
      createPattern: jest.fn(() => ({})),
      createRadialGradient: jest.fn(() => ({
        addColorStop: jest.fn()
      }))
    };
  }

  toBuffer() {
    return Buffer.from([]);
  }

  toDataURL() {
    return 'data:image/png;base64,';
  }
}

module.exports = {
  Canvas,
  createCanvas: (width, height) => new Canvas(width, height),
  loadImage: jest.fn(() => Promise.resolve({}))
};
`;

fs.writeFileSync('mocks/canvas.js', canvasMockContent);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω –º–æ–∫ –¥–ª—è canvas');

// –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞ –¥–ª—è JWT
console.log('\nüìã –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞ –¥–ª—è JWT');
const jwtMockContent = `// mocks/jwt.js
const jwt = {
  sign: jest.fn((payload, secret, options) => 'mock.jwt.token'),
  verify: jest.fn((token, secret, options) => ({ id: 'user-id', role: 'user' })),
  decode: jest.fn(token => ({ id: 'user-id', role: 'user' }))
};

module.exports = {
  sign: jwt.sign,
  verify: jwt.verify,
  decode: jwt.decode,
  createSigner: jest.fn(options => (payload, signerOptions) => jwt.sign(payload, options.key, signerOptions)),
  createVerifier: jest.fn(options => (token, verifierOptions) => jwt.verify(token, options.key, verifierOptions))
};
`;

fs.writeFileSync('mocks/jwt.js', jwtMockContent);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω –º–æ–∫ –¥–ª—è JWT');

// –®–∞–≥ 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json
console.log('\nüìã –®–∞–≥ 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json');
if (checkFileExists('package.json')) {
  let packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  let modified = false;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  packageJson.devDependencies = packageJson.devDependencies || {};

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ jest
  if (!packageJson.devDependencies.jest) {
    packageJson.devDependencies.jest = '^29.5.0';
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: jest');
    modified = true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ @jest/globals
  if (!packageJson.devDependencies['@jest/globals']) {
    packageJson.devDependencies['@jest/globals'] = '^29.5.0';
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: @jest/globals');
    modified = true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
  packageJson.scripts = packageJson.scripts || {};

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
  if (!packageJson.scripts.test || packageJson.scripts.test !== 'jest') {
    packageJson.scripts.test = 'jest';
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç: test');
    modified = true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ watch —Ä–µ–∂–∏–º–µ
  if (!packageJson.scripts['test:watch']) {
    packageJson.scripts['test:watch'] = 'jest --watch';
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç: test:watch');
    modified = true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å coverage
  if (!packageJson.scripts['test:coverage']) {
    packageJson.scripts['test:coverage'] = 'jest --coverage';
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç: test:coverage');
    modified = true;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  if (modified) {
    fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
    console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ package.json');
  } else {
    console.log('‚úÖ package.json –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π');
  }
} else {
  console.log('‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: package.json');
}

// –®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ç–µ—Å—Ç–∞
console.log('\nüìã –®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ç–µ—Å—Ç–∞');
ensureDirectoryExists('tests');
ensureDirectoryExists('tests/example');

const exampleTestContent = `// tests/example/example.test.js
const { describe, test, expect, jest } = require('@jest/globals');

describe('Example Test Suite', () => {
  test('should pass', () => {
    expect(1 + 1).toBe(2);
  });

  test('should mock a function', () => {
    const mockFn = jest.fn(() => 'mocked');
    expect(mockFn()).toBe('mocked');
    expect(mockFn).toHaveBeenCalled();
  });

  test('should mock async function', async () => {
    const mockAsyncFn = jest.fn().mockResolvedValue('mocked');
    const result = await mockAsyncFn();
    expect(result).toBe('mocked');
    expect(mockAsyncFn).toHaveBeenCalled();
  });
});
`;

fs.writeFileSync('tests/example/example.test.js', exampleTestContent);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞');

// –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è health endpoints
console.log('\nüìã –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è health endpoints');

// –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
const services = [
  'auth',
  'tasks',
  'data-import',
  'machines',
  'inventory',
  'gateway',
  'telegram-bot',
  'warehouse',
  'monitoring',
  'notifications',
  'routes'
];

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
services.forEach(service => {
  ensureDirectoryExists(`tests/${service}`);

  const healthTestContent = `// tests/${service}/health.test.js
const { describe, test, expect, jest, beforeEach } = require('@jest/globals');

// –ú–æ–∫ –¥–ª—è fastify
jest.mock('fastify', () => {
  return jest.fn().mockImplementation(() => {
    return {
      register: jest.fn().mockReturnThis(),
      get: jest.fn().mockReturnThis(),
      post: jest.fn().mockReturnThis(),
      put: jest.fn().mockReturnThis(),
      delete: jest.fn().mockReturnThis(),
      listen: jest.fn().mockResolvedValue(),
      ready: jest.fn().mockResolvedValue(),
      close: jest.fn().mockResolvedValue()
    };
  });
});

describe('${service} Health Endpoint', () => {
  test('should have a health endpoint', () => {
    // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    expect(true).toBe(true);
  });

  test('should return 200 status code', async () => {
    // –ú–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const reply = {
      code: jest.fn().mockReturnThis(),
      send: jest.fn().mockReturnThis()
    };

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ health endpoint
    const healthHandler = (req, reply) => {
      reply.code(200).send({ status: 'ok' });
    };

    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    healthHandler({}, reply);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    expect(reply.code).toHaveBeenCalledWith(200);
    expect(reply.send).toHaveBeenCalledWith({ status: 'ok' });
  });
});
`;

  fs.writeFileSync(`tests/${service}/health.test.js`, healthTestContent);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç –¥–ª—è health endpoint —Å–µ—Ä–≤–∏—Å–∞ ${service}`);
});

console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
console.log('npm test');
