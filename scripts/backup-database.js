/**
 * VHM24 - VendHub Manager 24/7
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/backup-database.js
 * 
 * –û–ø—Ü–∏–∏:
 * --s3-only: –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –≤ S3 (–±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
 * --local-only: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3)
 * --retention=30: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
 */

require('dotenv').config();
const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs').promises;
const path = require('path');
const AWS = require('aws-sdk');
const archiver = require('archiver');

const execAsync = promisify(exec);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  s3Only: process.argv.includes('--s3-only'),
  localOnly: process.argv.includes('--local-only'),
  retention: parseInt(process.argv.find(arg => arg.startsWith('--retention='))?.split('=')[1] || '30'),
  backupDir: path.join(process.cwd(), 'backups'),
  s3: {
    endpoint: process.env.MINIO_ENDPOINT,
    accessKey: process.env.MINIO_ACCESS_KEY,
    secretKey: process.env.MINIO_SECRET_KEY,
    bucket: process.env.BACKUP_S3_BUCKET || 'vhm24-backups',
    useSSL: process.env.MINIO_USE_SSL === 'true'
  },
  database: {
    url: process.env.DATABASE_URL
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞
let s3 = null;
if (!config.localOnly && config.s3.endpoint && config.s3.accessKey && config.s3.secretKey) {
  s3 = new AWS.S3({
    endpoint: config.s3.endpoint,
    accessKeyId: config.s3.accessKey,
    secretAccessKey: config.s3.secretKey,
    s3ForcePathStyle: true,
    signatureVersion: 'v4',
    sslEnabled: config.s3.useSSL
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
async function createBackupDir() {
  try {
    await fs.mkdir(config.backupDir, { recursive: true });
    console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±—ç–∫–∞–ø–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: ${config.backupDir}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function createDatabaseDump() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupFile = `vhm24-db-backup-${timestamp}.sql`;
  const backupPath = path.join(config.backupDir, backupFile);
  
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–∞—Ä—Å–∏–º DATABASE_URL
    const dbUrl = new URL(config.database.url);
    const [username, password] = dbUrl.username ? [dbUrl.username, dbUrl.password] : ['', ''];
    const hostname = dbUrl.hostname;
    const port = dbUrl.port || 5432;
    const database = dbUrl.pathname.slice(1);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const pgDumpCommand = `PGPASSWORD="${password}" pg_dump -h ${hostname} -p ${port} -U ${username} -d ${database} -f ${backupPath}`;
    
    await execAsync(pgDumpCommand);
    console.log(`‚úÖ –î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: ${backupPath}`);
    
    // –°–∂–∏–º–∞–µ–º –±—ç–∫–∞–ø
    const zipPath = `${backupPath}.zip`;
    console.log('üîÑ –°–∂–∞—Ç–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const output = await fs.open(zipPath, 'w');
    const archive = archiver('zip', { zlib: { level: 9 } });
    
    archive.pipe(output.createWriteStream());
    archive.file(backupPath, { name: backupFile });
    await archive.finalize();
    
    console.log(`‚úÖ –î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–∂–∞—Ç: ${zipPath}`);
    
    // –£–¥–∞–ª—è–µ–º –Ω–µ—Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
    await fs.unlink(backupPath);
    
    return {
      path: zipPath,
      filename: `${backupFile}.zip`
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –±—ç–∫–∞–ø–∞ –≤ S3
async function uploadToS3(backupPath, filename) {
  if (!s3) {
    console.log('‚ö†Ô∏è S3 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏');
    return;
  }
  
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±—ç–∫–∞–ø–∞ –≤ S3: ${filename}`);
    
    const fileContent = await fs.readFile(backupPath);
    
    await s3.putObject({
      Bucket: config.s3.bucket,
      Key: `database/${filename}`,
      Body: fileContent,
      ContentType: 'application/zip'
    }).promise();
    
    console.log(`‚úÖ –ë—ç–∫–∞–ø –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: s3://${config.s3.bucket}/database/${filename}`);
    
    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ S3
    if (config.s3Only) {
      await fs.unlink(backupPath);
      console.log(`üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${backupPath}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—ç–∫–∞–ø–∞ –≤ S3:', error);
    throw error;
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
async function cleanupOldBackups() {
  try {
    console.log(`üîÑ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ ${config.retention} –¥–Ω–µ–π)...`);
    
    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
    if (!config.s3Only) {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - config.retention);
      
      const files = await fs.readdir(config.backupDir);
      
      for (const file of files) {
        if (!file.endsWith('.zip')) continue;
        
        const filePath = path.join(config.backupDir, file);
        const stats = await fs.stat(filePath);
        
        if (stats.mtime < cutoffDate) {
          await fs.unlink(filePath);
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: ${file}`);
        }
      }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –±—ç–∫–∞–ø–æ–≤ –≤ S3
    if (s3 && !config.localOnly) {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - config.retention);
      
      const { Contents } = await s3.listObjectsV2({
        Bucket: config.s3.bucket,
        Prefix: 'database/'
      }).promise();
      
      if (Contents && Contents.length > 0) {
        for (const object of Contents) {
          if (object.LastModified < cutoffDate) {
            await s3.deleteObject({
              Bucket: config.s3.bucket,
              Key: object.Key
            }).promise();
            
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø –∏–∑ S3: ${object.Key}`);
          }
        }
      }
    }
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤:', error);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log(`
üöÄ VHM24 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚è∞ –î–∞—Ç–∞: ${new Date().toISOString()}
  `);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    if (!config.s3Only) {
      await createBackupDir();
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const backup = await createDatabaseDump();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±—ç–∫–∞–ø –≤ S3
    if (!config.localOnly && s3) {
      await uploadToS3(backup.path, backup.filename);
    }
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
    await cleanupOldBackups();
    
    console.log(`
‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
üìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: ${!config.s3Only ? backup.path : '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ'}
‚òÅÔ∏è S3 –ø—É—Ç—å: ${!config.localOnly && s3 ? `s3://${config.s3.bucket}/database/${backup.filename}` : '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3'}
    `);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
