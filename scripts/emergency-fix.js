const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üö® –ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ VHM24\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dirPath}`);
    return true;
  }
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª–µ
function fixSyntaxErrors(filePath, replacements) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return false;
  }

  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  replacements.forEach(({ search, replace }) => {
    if (content.includes(search)) {
      content = content.replace(search, replace);
      modified = true;
    }
  });

  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ ${filePath}`);
    return true;
  }

  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ async —Ñ—É–Ω–∫—Ü–∏–∏
function addErrorHandling(filePath) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return false;
  }

  let content = fs.readFileSync(filePath, 'utf8');
  
  // –ò—â–µ–º async —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ try-catch
  const asyncFuncRegex = /async\s+(?:function\s+\w+|\(\s*(?:\w+(?:,\s*\w+)*\s*)?\)\s*=>|[^{]*=>)\s*{(?![^{}]*try\s*{[^{}]*}[^{}]*catch[^{}]*{)/g;
  
  if (asyncFuncRegex.test(content)) {
    // –ó–∞–º–µ–Ω—è–µ–º async —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è—è try-catch
    content = content.replace(asyncFuncRegex, (match) => {
      // –ù–∞—Ö–æ–¥–∏–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É —Ñ—É–Ω–∫—Ü–∏–∏
      const openBraceIndex = match.indexOf('{');
      
      if (openBraceIndex !== -1) {
        return match.substring(0, openBraceIndex + 1) + `
    try {
      ` + match.substring(openBraceIndex + 1);
      }
      
      return match;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º catch –±–ª–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π
    let depth = 0;
    let result = '';
    let i = 0;
    
    while (i < content.length) {
      const char = content[i];
      
      if (char === '{') {
        depth++;
      } else if (char === '}') {
        depth--;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–µ—Ç catch –±–ª–æ–∫–∞
        if (depth === 0 && !content.substring(Math.max(0, i - 50), i).includes('catch')) {
          result += `
    } catch (error) {
      console.error('Error:', error);
      throw error;
    }`;
        }
      }
      
      result += char;
      i++;
    }
    
    fs.writeFileSync(filePath, result);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ ${filePath}`);
    return true;
  }
  
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è graceful shutdown
function addGracefulShutdown(filePath) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return false;
  }

  let content = fs.readFileSync(filePath, 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ SIGINT –∏ SIGTERM
  if (!content.includes('SIGINT') && !content.includes('SIGTERM')) {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    const shutdownCode = `

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è graceful shutdown...');
  try {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    if (prisma) {
      await prisma.$disconnect();
      console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º fastify —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (fastify) {
      await fastify.close();
      console.log('Fastify —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    console.log('Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ graceful shutdown:', error);
    process.exit(1);
  }
});

process.on('SIGTERM', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è graceful shutdown...');
  try {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    if (prisma) {
      await prisma.$disconnect();
      console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º fastify —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (fastify) {
      await fastify.close();
      console.log('Fastify —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    console.log('Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ graceful shutdown:', error);
    process.exit(1);
  }
});
`;

    content += shutdownCode;
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω graceful shutdown –≤ ${filePath}`);
    return true;
  }
  
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ kill-ports.js, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function createKillPortsScript() {
  const scriptPath = path.join('scripts', 'kill-ports.js');
  
  if (!fs.existsSync(scriptPath)) {
    const scriptContent = `const { execSync } = require('child_process');

// –ü–æ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å
const ports = [
  8000, // auth
  8001, // inventory
  8002, // machines
  8003, // warehouse
  8004, // tasks
  3000, // gateway
  3001, // web-dashboard
  3009  // data-import
];

console.log('üîÑ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤...');

ports.forEach(port => {
  try {
    // –î–ª—è Windows
    if (process.platform === 'win32') {
      const result = execSync(\`netstat -ano | findstr :$\{port}\`).toString();
      
      if (result) {
        const lines = result.split('\\n');
        
        lines.forEach(line => {
          const parts = line.trim().split(/\\s+/);
          if (parts.length > 4 && parts[1].includes(':' + port)) {
            const pid = parts[4];
            try {
              execSync(\`taskkill /F /PID $\{pid}\`);
              console.log(\`‚úÖ –ü–æ—Ä—Ç $\{port\} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω (PID: $\{pid\})\`);
            } catch (error) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
            }
          }
        });
      }
    } 
    // –î–ª—è Linux/Mac
    else {
      try {
        const pid = execSync(\`lsof -t -i:$\{port}\`).toString().trim();
        if (pid) {
          execSync(\`kill -9 $\{pid}\`);
          console.log(\`‚úÖ –ü–æ—Ä—Ç $\{port\} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω (PID: $\{pid\})\`);
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ –∑–∞–Ω—è—Ç
  }
});

console.log('‚úÖ –í—Å–µ –ø–æ—Ä—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
`;

    ensureDirectoryExists('scripts');
    fs.writeFileSync(scriptPath, scriptContent);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç ${scriptPath}`);
    return true;
  }
  
  return false;
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

// 1. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
console.log('\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...');
const services = fs.readdirSync('services');
services.forEach(service => {
  const servicePath = path.join('services', service);
  
  if (fs.existsSync(servicePath) && fs.statSync(servicePath).isDirectory()) {
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    ['src', 'tests', 'docs'].forEach(dir => {
      ensureDirectoryExists(path.join(servicePath, dir));
    });
  }
});

// 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...');

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º fs.await –Ω–∞ await –≤ —Ñ–∞–π–ª–∞—Ö
const fsAwaitReplacements = [
  { search: 'fs.await fsPromises.readFile', replace: 'await fsPromises.readFile' },
  { search: 'fs.await fsPromises.writeFile', replace: 'await fsPromises.writeFile' },
  { search: 'fs.await fs.promises.readFile', replace: 'await fs.promises.readFile' },
  { search: 'fs.await fs.promises.writeFile', replace: 'await fs.promises.writeFile' }
];

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const filesToCheck = [
  'services/gateway/src/index.js',
  'services/telegram-bot/src/utils/s3Storage.js',
  'packages/shared/utils/pagination.js',
  'scripts/project-analyzer.js'
];

filesToCheck.forEach(filePath => {
  fixSyntaxErrors(filePath, fsAwaitReplacements);
});

// 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
console.log('\nüõ°Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
const filesToAddErrorHandling = [
  'services/auth/src/index.js',
  'services/inventory/src/index.js',
  'services/tasks/src/index.js',
  'services/data-import/src/index.js'
];

filesToAddErrorHandling.forEach(filePath => {
  addErrorHandling(filePath);
});

// 4. –î–æ–±–∞–≤–ª—è–µ–º graceful shutdown –≤ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
console.log('\nüîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ graceful shutdown...');
const filesToAddGracefulShutdown = [
  'services/auth/src/index.js',
  'services/inventory/src/index.js',
  'services/tasks/src/index.js',
  'services/data-import/src/index.js'
];

filesToAddGracefulShutdown.forEach(filePath => {
  addGracefulShutdown(filePath);
});

// 5. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç kill-ports.js
console.log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ kill-ports.js...');
createKillPortsScript();

console.log('\n‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
