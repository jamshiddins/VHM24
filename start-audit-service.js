const logger = require('@vhm24/shared/logger');

#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

logger.info('üîç –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏—Ç–∞ VHM24...\n');

// –ü—É—Ç—å –∫ —Å–µ—Ä–≤–∏—Å—É –∞—É–¥–∏—Ç–∞
const auditServicePath = path.join(__dirname, 'services', 'audit');

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
logger.info('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏—Ç–∞...');
const installProcess = spawn('npm', ['install'], {
  cwd: auditServicePath,
  stdio: 'inherit',
  shell: true
});

installProcess.on('close', (code) => {
  if (code !== 0) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏—Ç–∞');
    process.exit(1);
  }

  logger.info('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏—Ç–∞...\n');

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏—Ç–∞
  const auditProcess = spawn('npm', ['start'], {
    cwd: auditServicePath,
    stdio: 'inherit',
    shell: true,
    env: {
      ...process.env,
      AUDIT_SERVICE_PORT: process.env.AUDIT_SERVICE_PORT || '3009',
      AUDIT_SERVICE_URL: process.env.AUDIT_SERVICE_URL || 'http://localhost:3009',
      AUDIT_RETENTION_DAYS: process.env.AUDIT_RETENTION_DAYS || '90',
      NODE_ENV: process.env.NODE_ENV || 'development'
    }
  });

  auditProcess.on('close', (code) => {
    logger.info(`\nüîç –°–µ—Ä–≤–∏—Å –∞—É–¥–∏—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
  });

  auditProcess.on('error', (error) => {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏—Ç–∞:', error);
  });

  // Graceful shutdown
  process.on('SIGINT', () => {
    logger.info('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏—Ç–∞...');
    auditProcess.kill('SIGINT');
  });

  process.on('SIGTERM', () => {
    logger.info('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏—Ç–∞...');
    auditProcess.kill('SIGTERM');
  });
});

installProcess.on('error', (error) => {
  logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error);
  process.exit(1);
});
