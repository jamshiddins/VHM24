#!/usr/bin/env node

/**
 * VHM24 –ü–û–õ–ù–´–ô –ê–£–î–ò–¢, –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ò –î–û–†–ê–ë–û–¢–ö–ê –ü–†–û–ï–ö–¢–ê
 * 
 * –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ vhm24.docx:
 * 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
 * 2. –ê—É–¥–∏—Ç –∫–æ–¥–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ 3000+ –æ—à–∏–±–æ–∫)
 * 3. –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (–∑–∞–º–µ–Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
 * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * 5. –û—á–∏—Å—Ç–∫–∞ –æ—Ç –º—É—Å–æ—Ä–∞
 * 6. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é
 * 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class VHM24CompleteAuditor {
    constructor() {
        this.projectRoot = process.cwd();
        this.errors = [];
        this.warnings = [];
        this.fixes = [];
        this.cleanedFiles = [];
        this.missingFeatures = [];
        this.envVariables = new Map();
        
        console.log('üöÄ VHM24 –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –ò –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ù–ê–ß–ê–¢');
        console.log('üìã –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ vhm24.docx');
    }

    // ============================================================================
    // 1. –°–†–ê–í–ù–ï–ù–ò–ï –° –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ï–ô –ò –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –§–£–ù–ö–¶–ò–ô
    // ============================================================================

    async compareWithDocumentation() {
        console.log('\nüìÑ 1. –°–†–ê–í–ù–ï–ù–ò–ï –° –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ï–ô vhm24.docx');
        
        const requiredFeatures = {
            // –†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞
            roles: ['admin', 'manager', 'warehouse', 'operator', 'technician', 'driver'],
            
            // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            catalogs: [
                'machines', 'ingredients', 'hoppers', 'bags', 'syrups', 'water',
                'consumables', 'spare_parts', 'recipes', 'users', 'locations',
                'suppliers', 'routes', 'sim_cards', 'electricity_meters'
            ],
            
            // –¢–∏–ø—ã –∑–∞–¥–∞—á
            taskTypes: [
                'replace_ingredients', 'replace_water', 'replace_syrups', 'cleaning',
                'maintenance', 'cash_collection', 'repair', 'inspection', 'test_purchase'
            ]
        };

        await this.checkMissingFeatures(requiredFeatures);
        await this.implementMissingFeatures();
    }

    async checkMissingFeatures(required) {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π Prisma
        const schemaPath = path.join(this.projectRoot, 'backend/prisma/schema.prisma');
        if (fs.existsSync(schemaPath)) {
            const schema = fs.readFileSync(schemaPath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
            const taskTypeEnum = schema.match(/enum TaskType \{([^}]+)\}/);
            if (taskTypeEnum) {
                const existingTypes = taskTypeEnum[1].match(/\w+/g) || [];
                const missingTypes = required.taskTypes.filter(type => 
                    !existingTypes.some(t => t.toLowerCase().includes(type.toLowerCase().replace('_', '')))
                );
                if (missingTypes.length > 0) {
                    this.missingFeatures.push({
                        type: 'task_types',
                        missing: missingTypes,
                        priority: 'high'
                    });
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–æ—É—Ç–æ–≤
        const routesDir = path.join(this.projectRoot, 'backend/src/routes');
        if (fs.existsSync(routesDir)) {
            const routeFiles = fs.readdirSync(routesDir);
            const missingRoutes = required.catalogs.filter(catalog => 
                !routeFiles.some(file => file.includes(catalog))
            );
            if (missingRoutes.length > 0) {
                this.missingFeatures.push({
                    type: 'api_routes',
                    missing: missingRoutes,
                    priority: 'medium'
                });
            }
        }

        console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${this.missingFeatures.length} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π`);
    }

    async implementMissingFeatures() {
        console.log('üîß –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
        
        for (const feature of this.missingFeatures) {
            switch (feature.type) {
                case 'task_types':
                    await this.addMissingTaskTypes(feature.missing);
                    break;
                case 'api_routes':
                    await this.createMissingRoutes(feature.missing);
                    break;
            }
        }
    }

    async addMissingTaskTypes(missingTypes) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á: ${missingTypes.join(', ')}`);
        
        const schemaPath = path.join(this.projectRoot, 'backend/prisma/schema.prisma');
        if (fs.existsSync(schemaPath)) {
            let schema = fs.readFileSync(schemaPath, 'utf8');
            
            const taskTypeEnumMatch = schema.match(/(enum TaskType \{[^}]+)(\})/);
            if (taskTypeEnumMatch) {
                const existingTypes = taskTypeEnumMatch[1];
                const newTypes = missingTypes.map(type => `  ${type.toUpperCase()}`).join('\n');
                schema = schema.replace(taskTypeEnumMatch[0], `${existingTypes}\n${newTypes}\n}`);
                
                fs.writeFileSync(schemaPath, schema);
                this.fixes.push(`–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã –∑–∞–¥–∞—á: ${missingTypes.join(', ')}`);
            }
        }
    }

    async createMissingRoutes(missingRoutes) {
        console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ä–æ—É—Ç–æ–≤: ${missingRoutes.join(', ')}`);
        
        const routesDir = path.join(this.projectRoot, 'backend/src/routes');
        
        for (const route of missingRoutes) {
            const routeFile = path.join(routesDir, `${route}.js`);
            if (!fs.existsSync(routeFile)) {
                const routeContent = this.generateRouteTemplate(route);
                fs.writeFileSync(routeFile, routeContent);
                this.fixes.push(`–°–æ–∑–¥–∞–Ω —Ä–æ—É—Ç: ${route}.js`);
            }
        }
    }

    generateRouteTemplate(routeName) {
        return `const express = require('express');
const { PrismaClient } = require('@prisma/client');
const { authenticateToken, requireRole } = require('../middleware/auth');

const router = express.Router();
const prisma = new PrismaClient();

// GET /${routeName} - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
router.get('/', authenticateToken, async (req, res) => {
    try {
        const items = await prisma.${routeName.slice(0, -1)}.findMany();
        res.json(items);
    } catch (error) {
        console.error('Error fetching ${routeName}:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// POST /${routeName} - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
router.post('/', authenticateToken, requireRole(['ADMIN', 'MANAGER']), async (req, res) => {
    try {
        const item = await prisma.${routeName.slice(0, -1)}.create({
            data: req.body
        });
        res.status(201).json(item);
    } catch (error) {
        console.error('Error creating ${routeName.slice(0, -1)}:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏' });
    }
});

module.exports = router;
`;
    }

    // ============================================================================
    // 2. –ê–£–î–ò–¢ –ö–û–î–ê –ò –ê–†–•–ò–¢–ï–ö–¢–£–†–´
    // ============================================================================

    async auditCodeAndArchitecture() {
        console.log('\nüîç 2. –ê–£–î–ò–¢ –ö–û–î–ê –ò –ê–†–•–ò–¢–ï–ö–¢–£–†–´');
        
        await this.checkCodeQuality();
        await this.fixArchitectureIssues();
    }

    async checkCodeQuality() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...');
        
        const jsFiles = this.getAllFiles(this.projectRoot, '.js');
        
        for (const file of jsFiles) {
            if (file.includes('node_modules') || file.includes('.git')) continue;
            
            try {
                const content = fs.readFileSync(file, 'utf8');
                await this.analyzeFile(file, content);
            } catch (error) {
                this.errors.push(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}: ${error.message}`);
            }
        }
    }

    async analyzeFile(filePath, content) {
        const relativePath = path.relative(this.projectRoot, filePath);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        const syntaxIssues = this.checkSyntaxIssues(content);
        if (syntaxIssues.length > 0) {
            this.errors.push(`${relativePath}: ${syntaxIssues.join(', ')}`);
        }
    }

    checkSyntaxIssues(content) {
        const issues = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∫–æ–±–æ–∫
        const openBraces = (content.match(/\{/g) || []).length;
        const closeBraces = (content.match(/\}/g) || []).length;
        if (openBraces !== closeBraces) {
            issues.push('–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ console.log –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        if (content.includes('console.log') && !content.includes('// DEBUG')) {
            issues.push('–ù–∞–π–¥–µ–Ω—ã console.log –±–µ–∑ –ø–æ–º–µ—Ç–∫–∏ DEBUG');
        }
        
        return issues;
    }

    async fixArchitectureIssues() {
        console.log('üèóÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        const requiredDirs = [
            'backend/src/middleware',
            'backend/src/utils',
            'backend/src/config',
            'logs'
        ];

        for (const dir of requiredDirs) {
            const fullPath = path.join(this.projectRoot, dir);
            if (!fs.existsSync(fullPath)) {
                fs.mkdirSync(fullPath, { recursive: true });
                this.fixes.push(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
            }
        }
    }

    // ============================================================================
    // 3. –†–ê–ë–û–¢–ê –° –ü–ï–†–ï–ú–ï–ù–ù–´–ú–ò
    // ============================================================================

    async fixVariables() {
        console.log('\nüîß 3. –†–ê–ë–û–¢–ê –° –ü–ï–†–ï–ú–ï–ù–ù–´–ú–ò');
        
        await this.updateEnvironmentFiles();
    }

    async updateEnvironmentFiles() {
        console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º .env
        const envPath = path.join(this.projectRoot, '.env');
        let envContent = '';
        
        if (fs.existsSync(envPath)) {
            envContent = fs.readFileSync(envPath, 'utf8');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        const requiredVars = {
            'DATABASE_URL': 'postgresql://postgres:password@localhost:5432/vhm24?schema=public',
            'JWT_SECRET': 'vhm24-super-secret-key-2024',
            'TELEGRAM_BOT_TOKEN': 'REQUIRED_TELEGRAM_BOT_TOKEN',
            'API_URL': 'http://localhost:3000',
            'PORT': '3000',
            'NODE_ENV': 'development'
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env
        Object.entries(requiredVars).forEach(([key, value]) => {
            const regex = new RegExp(`^${key}=.*$`, 'm');
            if (!regex.test(envContent)) {
                envContent += `\n${key}=${value}`;
                this.fixes.push(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${key}`);
            }
        });

        fs.writeFileSync(envPath, envContent.trim() + '\n');

        // –û–±–Ω–æ–≤–ª—è–µ–º .env.example
        const envExamplePath = path.join(this.projectRoot, '.env.example');
        const exampleContent = Object.entries(requiredVars)
            .map(([key, value]) => `${key}=${key.includes('REQUIRED_') ? value : 'your_value_here'}`)
            .join('\n');
        
        fs.writeFileSync(envExamplePath, exampleContent);
        this.fixes.push('–û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª .env.example');
    }

    // ============================================================================
    // 4. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
    // ============================================================================

    async checkConnections() {
        console.log('\nüîå 4. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô');
        
        await this.checkDatabaseConnection();
        await this.checkTelegramAPI();
    }

    async checkDatabaseConnection() {
        console.log('üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            execSync('npx prisma db pull', { cwd: path.join(this.projectRoot, 'backend'), stdio: 'pipe' });
            this.fixes.push('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç');
        } catch (error) {
            this.warnings.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å DATABASE_URL –≤ .env');
        }
    }

    async checkTelegramAPI() {
        console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API...');
        
        const envPath = path.join(this.projectRoot, '.env');
        if (fs.existsSync(envPath)) {
            const envContent = fs.readFileSync(envPath, 'utf8');
            if (envContent.includes('TELEGRAM_BOT_TOKEN') && !envContent.includes('REQUIRED_')) {
                this.fixes.push('Telegram Bot Token: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω');
            } else {
                this.warnings.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å TELEGRAM_BOT_TOKEN –≤ .env');
            }
        }
    }

    // ============================================================================
    // 5. –û–ß–ò–°–¢–ö–ê –û–¢ –ú–£–°–û–†–ê
    // ============================================================================

    async cleanupProject() {
        console.log('\nüßπ 5. –û–ß–ò–°–¢–ö–ê –û–¢ –ú–£–°–û–†–ê');
        
        await this.removeUnusedFiles();
        await this.optimizeAssets();
    }

    async removeUnusedFiles() {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤...');
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ glob
        const garbageExtensions = ['.bak', '.log', '.zip', '.tmp'];
        
        const cleanDir = (dir) => {
            try {
                const items = fs.readdirSync(dir);
                
                for (const item of items) {
                    const fullPath = path.join(dir, item);
                    const stat = fs.statSync(fullPath);
                    
                    if (stat.isDirectory()) {
                        if (item === 'node_modules' || item === '.git') continue;
                        if (item === 'coverage' || item === 'dist' || item === 'build') {
                            try {
                                fs.rmSync(fullPath, { recursive: true, force: true });
                                this.cleanedFiles.push(path.relative(this.projectRoot, fullPath));
                            } catch (error) {
                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                            }
                        } else {
                            cleanDir(fullPath);
                        }
                    } else {
                        const ext = path.extname(item);
                        if (garbageExtensions.includes(ext)) {
                            try {
                                fs.unlinkSync(fullPath);
                                this.cleanedFiles.push(path.relative(this.projectRoot, fullPath));
                            } catch (error) {
                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                            }
                        }
                    }
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
            }
        };
        
        cleanDir(this.projectRoot);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${this.cleanedFiles.length} —Ñ–∞–π–ª–æ–≤`);
    }

    async optimizeAssets() {
        console.log('üé® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤...');
        
        // –°–æ–∑–¥–∞–µ–º .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const gitignorePath = path.join(this.projectRoot, '.gitignore');
        const gitignoreContent = `# Dependencies
node_modules/
npm-debug.log*

# Production builds
dist/
build/
coverage/

# Environment files
.env
.env.local
.env.production

# Logs
logs/
*.log

# Temporary files
*.tmp
*.temp
*.bak
*.backup
`;

        if (!fs.existsSync(gitignorePath)) {
            fs.writeFileSync(gitignorePath, gitignoreContent.trim());
            this.fixes.push('–°–æ–∑–¥–∞–Ω .gitignore —Ñ–∞–π–ª');
        }
    }

    // ============================================================================
    // 6. –ü–û–î–ì–û–¢–û–í–ö–ê –ö –î–ï–ü–õ–û–Æ
    // ============================================================================

    async prepareForDeployment() {
        console.log('\nüöÄ 6. –ü–û–î–ì–û–¢–û–í–ö–ê –ö –î–ï–ü–õ–û–Æ');
        
        await this.optimizeBuild();
        await this.validateStartCommands();
    }

    async optimizeBuild() {
        console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json scripts
        const packageJsonPath = path.join(this.projectRoot, 'package.json');
        if (fs.existsSync(packageJsonPath)) {
            const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
            
            if (!packageJson.scripts) {
                packageJson.scripts = {};
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
            const requiredScripts = {
                "start": "node backend/src/index.js",
                "dev": "cd backend && npm run dev",
                "migrate": "cd backend && npx prisma migrate deploy",
                "generate": "cd backend && npx prisma generate"
            };
            
            Object.entries(requiredScripts).forEach(([script, command]) => {
                if (!packageJson.scripts[script]) {
                    packageJson.scripts[script] = command;
                    this.fixes.push(`–î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç: ${script}`);
                }
            });
            
            fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
        }
    }

    async validateStartCommands() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—Å–∫–∞...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const railwayTomlPath = path.join(this.projectRoot, 'railway.toml');
        if (!fs.existsSync(railwayTomlPath)) {
            const railwayConfig = `[build]
builder = "nixpacks"

[deploy]
startCommand = "npm start"
restartPolicyType = "always"

[env]
NODE_ENV = "production"
`;
            fs.writeFileSync(railwayTomlPath, railwayConfig);
            this.fixes.push('–°–æ–∑–¥–∞–Ω railway.toml');
        }
    }

    // ============================================================================
    // 7. –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–û–í –ò –§–ò–ö–°–ê–¶–ò–Ø
    // ============================================================================

    async generateReports() {
        console.log('\nüìã 7. –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–û–í –ò –§–ò–ö–°–ê–¶–ò–Ø');
        
        await this.createFixReport();
        await this.updateReadme();
    }

    async createFixReport() {
        console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö...');
        
        const report = `# üîß –û–¢–ß–ï–¢ –û–ë –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–• VHM24

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π**: ${this.fixes.length}
- **–û—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω–æ**: ${this.errors.length}
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π**: ${this.warnings.length}
- **–§–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω–æ**: ${this.cleanedFiles.length}
- **–ù–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π**: ${this.missingFeatures.length}

## ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

${this.fixes.map((fix, index) => `${index + 1}. ${fix}`).join('\n')}

## ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏

${this.errors.map((error, index) => `${index + 1}. ${error}`).join('\n')}

## üîî –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

${this.warnings.map((warning, index) => `${index + 1}. ${warning}`).join('\n')}

## üßπ –û—á–∏—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

${this.cleanedFiles.map((file, index) => `${index + 1}. ${file}`).join('\n')}

## üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: \`npm run migrate\`
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É: \`npm run dev\`
4. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ –Ω–∞ Railway: \`railway up\`

---
–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toISOString()}
`;

        fs.writeFileSync(path.join(this.projectRoot, 'VHM24_AUDIT_REPORT.md'), report);
        console.log('‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ VHM24_AUDIT_REPORT.md');
    }

    async updateReadme() {
        console.log('üìñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README.md...');
        
        const readmePath = path.join(this.projectRoot, 'README.md');
        const readmeContent = `# ü§ñ VHM24 - VendHub Management System

–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏ —Å Telegram-–±–æ—Ç–æ–º –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Node.js 18+
- PostgreSQL 15+

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞

1. –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:
\`\`\`bash
git clone https://github.com/jamshiddins/VHM24.git
cd VHM24
\`\`\`

2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
\`\`\`bash
npm install
\`\`\`

3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
\`\`\`bash
cp .env.example .env
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª
\`\`\`

4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏:
\`\`\`bash
npm run migrate
\`\`\`

5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
\`\`\`bash
npm run dev
\`\`\`

## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

–û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env:

\`\`\`env
DATABASE_URL=postgresql://user:password@localhost:5432/vhm24
TELEGRAM_BOT_TOKEN=your_bot_token
JWT_SECRET=your_jwt_secret
API_URL=http://localhost:3000
\`\`\`

## üöÄ –î–µ–ø–ª–æ–π

### Railway

1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ Railway
2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
4. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ: \`railway up\`

---
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toISOString()}
`;

        fs.writeFileSync(readmePath, readmeContent);
        console.log('‚úÖ README.md –æ–±–Ω–æ–≤–ª–µ–Ω');
    }

    // ============================================================================
    // –£–¢–ò–õ–ò–¢–´
    // ============================================================================

    getAllFiles(dir, extension) {
        const files = [];
        
        const scanDir = (currentDir) => {
            try {
                const items = fs.readdirSync(currentDir);
                
                for (const item of items) {
                    const fullPath = path.join(currentDir, item);
                    const stat = fs.statSync(fullPath);
                    
                    if (stat.isDirectory()) {
                        if (!item.startsWith('.') && item !== 'node_modules') {
                            scanDir(fullPath);
                        }
                    } else if (item.endsWith(extension)) {
                        files.push(fullPath);
                    }
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
            }
        };
        
        scanDir(dir);
        return files;
    }

    // ============================================================================
    // –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
    // ============================================================================

    async run() {
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ VHM24...\n');
            
            // 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            await this.compareWithDocumentation();
            
            // 2. –ê—É–¥–∏—Ç –∫–æ–¥–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            await this.auditCodeAndArchitecture();
            
            // 3. –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
            await this.fixVariables();
            
            // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            await this.checkConnections();
            
            // 5. –û—á–∏—Å—Ç–∫–∞ –æ—Ç –º—É—Å–æ—Ä–∞
            await this.cleanupProject();
            
            // 6. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é
            await this.prepareForDeployment();
            
            // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è
            await this.generateReports();
            
            console.log('\nüéâ –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –ò –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!');
            console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${this.fixes.length}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`);
            console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.warnings.length}`);
            console.log(`üßπ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.cleanedFiles.length}`);
            console.log(`üÜï –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: ${this.missingFeatures.length}`);
            
            console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
            console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ VHM24_AUDIT_REPORT.md –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞');
            console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env');
            console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run migrate');
            console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: npm run dev');
            console.log('5. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ: railway up');
            
            console.log('\nüöÄ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ –ù–ê RAILWAY!');
            
        } catch (error) {
            console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
            process.exit(1);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–æ—Ä–∞
if (require.main === module) {
    const auditor = new VHM24CompleteAuditor();
    auditor.run();
}

module.exports = VHM24CompleteAuditor;
