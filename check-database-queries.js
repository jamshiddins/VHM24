/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
const { Client } = require('pg');
const dotenv = require('dotenv');
const dotenvExpand = require('dotenv-expand');

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env.development —Ñ–∞–π–ª –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const devEnv = dotenv.config({ path: '.env.development' });
dotenvExpand.expand(devEnv);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π .env —Ñ–∞–π–ª
const mainEnv = dotenv.config();
dotenvExpand.expand(mainEnv);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseQueries() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–ü–†–û–°–û–í –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ===');
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç PostgreSQL
  const client = new Client({
    connectionString: process.env.DATABASE_URL
  });
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${process.env.DATABASE_URL.split('@')[1]}`);
    await client.connect();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º SELECT –∑–∞–ø—Ä–æ—Å
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SELECT –∑–∞–ø—Ä–æ—Å–∞:');
    const selectResult = await client.query('SELECT NOW() as time');
    console.log(`‚úÖ SELECT –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${selectResult.rows[0].time}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CREATE TABLE –∑–∞–ø—Ä–æ—Å
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CREATE TABLE –∑–∞–ø—Ä–æ—Å–∞:');
    try {
      await client.query(`
        CREATE TABLE IF NOT EXISTS test_table (
          id SERIAL PRIMARY KEY,
          name VARCHAR(100) NOT NULL,
          created_at TIMESTAMP DEFAULT NOW()
        )
      `);
      console.log('‚úÖ CREATE TABLE –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ CREATE TABLE –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º INSERT –∑–∞–ø—Ä–æ—Å
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ INSERT –∑–∞–ø—Ä–æ—Å–∞:');
    try {
      const insertResult = await client.query(`
        INSERT INTO test_table (name) 
        VALUES ($1)
        RETURNING id, name, created_at
      `, [`Test_${Date.now()}`]);
      
      console.log(`‚úÖ INSERT –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: ID=${insertResult.rows[0].id}, Name=${insertResult.rows[0].name}, Created=${insertResult.rows[0].created_at}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ INSERT –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º UPDATE –∑–∞–ø—Ä–æ—Å
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ UPDATE –∑–∞–ø—Ä–æ—Å–∞:');
    try {
      const updateResult = await client.query(`
        UPDATE test_table 
        SET name = $1 
        WHERE name LIKE 'Test_%'
        RETURNING id, name, created_at
      `, [`Updated_${Date.now()}`]);
      
      console.log(`‚úÖ UPDATE –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.rowCount} –∑–∞–ø–∏—Å–µ–π`);
      if (updateResult.rows.length > 0) {
        console.log(`  –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏: ID=${updateResult.rows[0].id}, Name=${updateResult.rows[0].name}, Created=${updateResult.rows[0].created_at}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ UPDATE –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º SELECT —Å JOIN –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã)
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SELECT —Å JOIN –∑–∞–ø—Ä–æ—Å–∞:');
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
      const tablesResult = await client.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name != 'test_table'
        ORDER BY table_name
        LIMIT 2
      `);
      
      if (tablesResult.rows.length >= 2) {
        const table1 = tablesResult.rows[0].table_name;
        const table2 = tablesResult.rows[1].table_name;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏ —Ç–∞–±–ª–∏—Ü
        const pk1Result = await client.query(`
          SELECT a.attname as column_name
          FROM pg_index i
          JOIN pg_attribute a ON a.attrelid = i.indrelid AND a.attnum = ANY(i.indkey)
          WHERE i.indrelid = $1::regclass AND i.indisprimary
        `, [`public.${table1}`]);
        
        const pk2Result = await client.query(`
          SELECT a.attname as column_name
          FROM pg_index i
          JOIN pg_attribute a ON a.attrelid = i.indrelid AND a.attnum = ANY(i.indkey)
          WHERE i.indrelid = $2::regclass AND i.indisprimary
        `, [`public.${table2}`]);
        
        if (pk1Result.rows.length > 0 && pk2Result.rows.length > 0) {
          const pk1 = pk1Result.rows[0].column_name;
          const pk2 = pk2Result.rows[0].column_name;
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º JOIN –∑–∞–ø—Ä–æ—Å
          const joinResult = await client.query(`
            SELECT t1.${pk1}, t2.${pk2}
            FROM "${table1}" t1
            LEFT JOIN "${table2}" t2 ON t1.${pk1} = t2.${pk1}
            LIMIT 5
          `);
          
          console.log(`‚úÖ SELECT —Å JOIN –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: –ø–æ–ª—É—á–µ–Ω–æ ${joinResult.rowCount} –∑–∞–ø–∏—Å–µ–π`);
          console.log(`  –¢–∞–±–ª–∏—Ü—ã: ${table1} JOIN ${table2}`);
        } else {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü ${table1} –∏ ${table2}`);
        }
      } else {
        console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JOIN –∑–∞–ø—Ä–æ—Å–∞');
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SELECT —Å JOIN –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–∞:');
    try {
      const deleteResult = await client.query(`
        DELETE FROM test_table 
        WHERE name LIKE 'Updated_%'
        RETURNING id
      `);
      
      console.log(`‚úÖ DELETE –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: —É–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ DELETE –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º DROP TABLE –∑–∞–ø—Ä–æ—Å
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DROP TABLE –∑–∞–ø—Ä–æ—Å–∞:');
    try {
      await client.query('DROP TABLE IF EXISTS test_table');
      console.log('‚úÖ DROP TABLE –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ DROP TABLE –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
    try {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await client.query('BEGIN');
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      await client.query(`
        CREATE TEMPORARY TABLE test_transaction (
          id SERIAL PRIMARY KEY,
          value TEXT
        )
      `);
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await client.query(`
        INSERT INTO test_transaction (value) VALUES ('Transaction Test')
      `);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã
      const checkResult = await client.query('SELECT COUNT(*) as count FROM test_transaction');
      
      if (checkResult.rows[0].count > 0) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await client.query('ROLLBACK');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞
        try {
          await client.query('SELECT COUNT(*) FROM test_transaction');
          console.log('‚ùå –û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ test_transaction –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ ROLLBACK');
        } catch (error) {
          console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–µ–Ω–∞ (ROLLBACK)');
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        await client.query('ROLLBACK');
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`);
      await client.query('ROLLBACK').catch(() => {});
    }
    
    console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===');
    return true;
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.error(error.stack);
    return false;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await client.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkDatabaseQueries().catch(error => {
  console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  process.exit(1);
});
