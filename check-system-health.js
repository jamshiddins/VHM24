/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π: npm run check:health
 */

require('dotenv').config();
const axios = require('axios');
const { createClient } = require('redis');
const { PrismaClient } = require('@prisma/client');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['DATABASE_URL', 'REDIS_URL', 'RAILWAY_PUBLIC_URL'];
const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);

if (missingEnvVars.length > 0) {
  console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingEnvVars.join(', ')}`);
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const prisma = new PrismaClient();
const redisClient = createClient({
  url: process.env.REDIS_URL
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Redis
redisClient.on('error', (err) => {
  console.error('Redis error:', err);
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function checkDatabaseHealth() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const result = await prisma.$queryRaw`SELECT version()`;
    
    console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞. –í–µ—Ä—Å–∏—è: ${result[0].version}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return false;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis
 */
async function checkRedisHealth() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    await redisClient.connect();
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const pingResult = await redisClient.ping();
    const infoResult = await redisClient.info();
    
    console.log(`‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω. Ping: ${pingResult}`);
    console.log(`‚úÖ Redis –≤–µ—Ä—Å–∏—è: ${infoResult.split('\n').find(line => line.startsWith('redis_version'))}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', error.message);
    return false;
  } finally {
    await redisClient.quit();
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
 */
async function checkApiHealth() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
    const healthUrl = `${process.env.RAILWAY_PUBLIC_URL}/api/health`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await axios.get(healthUrl);
    
    if (response.status === 200) {
      console.log(`‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.data.status}`);
      console.log(`üìä –°–µ—Ä–≤–∏—Å—ã: ${JSON.stringify(response.data.services)}`);
      return true;
    } else {
      console.error(`‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}`);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API:');
    if (error.response) {
      console.error(`üìù –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`üìù –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
    } else {
      console.error(error.message);
    }
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Telegram –±–æ—Ç–∞
 */
async function checkTelegramBotHealth() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞');
      return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const getBotInfoUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getMe`;
    const botInfoResponse = await axios.get(getBotInfoUrl);
    
    if (botInfoResponse.data.ok) {
      console.log(`‚úÖ Telegram –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω. –ò–º—è: ${botInfoResponse.data.result.first_name}`);
      console.log(`‚úÖ Username: @${botInfoResponse.data.result.username}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
      const getWebhookInfoUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getWebhookInfo`;
      const webhookInfoResponse = await axios.get(getWebhookInfoUrl);
      
      if (webhookInfoResponse.data.ok) {
        const webhookInfo = webhookInfoResponse.data.result;
        
        if (webhookInfo.url) {
          console.log(`‚úÖ –í–µ–±—Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. URL: ${webhookInfo.url}`);
          
          if (webhookInfo.pending_update_count > 0) {
            console.warn(`‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookInfo.pending_update_count}`);
          }
          
          return true;
        } else {
          console.error('‚ùå –í–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
          return false;
        }
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ: ${webhookInfoResponse.data.description}`);
        return false;
      }
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: ${botInfoResponse.data.description}`);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram –±–æ—Ç–∞:');
    if (error.response) {
      console.error(`üìù –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`üìù –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
    } else {
      console.error(error.message);
    }
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
 */
async function checkSystemHealth() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...');
  console.log('üìÖ –í—Ä–µ–º—è:', new Date().toISOString());
  console.log('üåê –û–∫—Ä—É–∂–µ–Ω–∏–µ:', process.env.NODE_ENV || 'development');
  console.log('üîó URL:', process.env.RAILWAY_PUBLIC_URL);
  console.log('-----------------------------------');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  const dbHealth = await checkDatabaseHealth();
  console.log('-----------------------------------');
  
  const redisHealth = await checkRedisHealth();
  console.log('-----------------------------------');
  
  const apiHealth = await checkApiHealth();
  console.log('-----------------------------------');
  
  const telegramHealth = await checkTelegramBotHealth();
  console.log('-----------------------------------');
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  console.log(`üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbHealth ? '‚úÖ OK' : '‚ùå ERROR'}`);
  console.log(`üìÅ Redis: ${redisHealth ? '‚úÖ OK' : '‚ùå ERROR'}`);
  console.log(`üìÅ API: ${apiHealth ? '‚úÖ OK' : '‚ùå ERROR'}`);
  console.log(`üìÅ Telegram –±–æ—Ç: ${telegramHealth ? '‚úÖ OK' : '‚ùå ERROR'}`);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
  const overallStatus = dbHealth && redisHealth && apiHealth && telegramHealth;
  console.log('-----------------------------------');
  console.log(`üö¶ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${overallStatus ? '‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
  
  // –í—ã—Ö–æ–¥–∏–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
  process.exit(overallStatus ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è
checkSystemHealth();
