/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã VHM24
 */
require('dotenv').config();
const axios = require('axios');
const { createClient } = require('redis');
const { PrismaClient } = require('@prisma/client');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RAILWAY_PUBLIC_URL = process.env.RAILWAY_PUBLIC_URL || 'https://web-production-d9582.up.railway.app';
const API_BASE_URL = `${RAILWAY_PUBLIC_URL}/api`;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8015112367:AAHi25gHhI3p1X1uyuCAt8vUnlMZRrcoKEQ';
const DATABASE_URL = process.env.DATABASE_URL || 'postgresql://postgres:TnKaHJbWffrqtZOIklgKNSlNZHDcxsQh@postgres.railway.internal:5432/railway';
const REDIS_URL = process.env.REDIS_URL || 'redis://default:AlBzXGfakMRiVrFolnlZITTgniXFVBPX@yamanote.proxy.rlwy.net:21211';
const S3_ACCESS_KEY = process.env.S3_ACCESS_KEY || 'DO00XEB6BC6XZ8Q2M4KQ';
const S3_SECRET_KEY = process.env.S3_SECRET_KEY || 'SeYpfXGQ4eKR8WEDdGKjtLo0c6BK82r2hfnrzB63swk';
const S3_BUCKET_NAME = process.env.S3_BUCKET_NAME || 'vhm24-uploads';
const S3_REGION = process.env.S3_REGION || 'fra1';
const S3_ENDPOINT = process.env.S3_ENDPOINT || 'https://fra1.digitaloceanspaces.com';

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
const results = {
  api: { status: 'pending', message: '' },
  database: { status: 'pending', message: '' },
  redis: { status: 'pending', message: '' },
  telegram: { status: 'pending', message: '' },
  s3: { status: 'pending', message: '' },
  worker: { status: 'pending', message: '' },
  scheduler: { status: 'pending', message: '' }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ API
 */
async function checkAPI() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API...');
    const response = await axios.get(`${API_BASE_URL}/health`, { timeout: 10000 });
    
    if (response.status === 200 && response.data.status === 'OK') {
      results.api.status = 'success';
      results.api.message = `API —Ä–∞–±–æ—Ç–∞–µ—Ç. –í–µ—Ä—Å–∏—è: ${response.data.version}, –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${response.data.uptime} —Å–µ–∫.`;
      console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    } else {
      results.api.status = 'warning';
      results.api.message = `API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ OK: ${JSON.stringify(response.data)}`;
      console.log('‚ö†Ô∏è API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ OK');
    }
  } catch (error) {
    results.api.status = 'error';
    results.api.message = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: ${error.message}`;
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API:', error.message);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function checkDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
    const response = await axios.get(`${API_BASE_URL}/database/health`, { timeout: 10000 });
    
    if (response.status === 200 && response.data.status === 'OK') {
      results.database.status = 'success';
      results.database.message = '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ API)';
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ API)');
    } else {
      results.database.status = 'warning';
      results.database.message = `–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ OK: ${JSON.stringify(response.data)}`;
      console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ OK');
    }
  } catch (error) {
    // –ï—Å–ª–∏ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    results.database.status = 'warning';
    results.database.message = '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ Railway.';
    console.log('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ Railway.');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
 */
async function checkRedis() {
  let redisClient;
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...');
    redisClient = createClient({
      url: REDIS_URL
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    redisClient.on('error', (err) => {
      results.redis.status = 'error';
      results.redis.message = `–û—à–∏–±–∫–∞ Redis: ${err.message}`;
      console.error('‚ùå –û—à–∏–±–∫–∞ Redis:', err.message);
    });
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    await redisClient.connect();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    const testKey = `test:${Date.now()}`;
    await redisClient.set(testKey, 'test-value');
    const value = await redisClient.get(testKey);
    await redisClient.del(testKey);
    
    if (value === 'test-value') {
      results.redis.status = 'success';
      results.redis.message = 'Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ';
      console.log('‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    } else {
      results.redis.status = 'warning';
      results.redis.message = 'Redis –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É';
      console.log('‚ö†Ô∏è Redis –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É');
    }
  } catch (error) {
    results.redis.status = 'error';
    results.redis.message = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Redis: ${error.message}`;
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Redis:', error.message);
  } finally {
    if (redisClient && redisClient.isOpen) {
      await redisClient.quit();
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞
 */
async function checkTelegram() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞...');
    const response = await axios.get(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe`, { timeout: 10000 });
    
    if (response.status === 200 && response.data.ok) {
      results.telegram.status = 'success';
      results.telegram.message = `Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò–º—è: ${response.data.result.first_name}, Username: @${response.data.result.username}`;
      console.log(`‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. Username: @${response.data.result.username}`);
    } else {
      results.telegram.status = 'warning';
      results.telegram.message = `Telegram API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ OK: ${JSON.stringify(response.data)}`;
      console.log('‚ö†Ô∏è Telegram API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ OK');
    }
  } catch (error) {
    results.telegram.status = 'error';
    results.telegram.message = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram –±–æ—Ç–∞: ${error.message}`;
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram –±–æ—Ç–∞:', error.message);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 */
async function checkS3() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
    const response = await axios.get(`${API_BASE_URL}/storage/health`, { timeout: 10000 });
    
    if (response.status === 200 && response.data.status === 'OK') {
      results.s3.status = 'success';
      results.s3.message = 'S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ';
      console.log('‚úÖ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    } else {
      results.s3.status = 'warning';
      results.s3.message = `S3 API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ OK: ${JSON.stringify(response.data)}`;
      console.log('‚ö†Ô∏è S3 API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ OK');
    }
  } catch (error) {
    // –ï—Å–ª–∏ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ S3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    results.s3.status = 'warning';
    results.s3.message = '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–∫–∞–ª—å–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ Railway.';
    console.log('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–∫–∞–ª—å–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ Railway.');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ Worker
 */
async function checkWorker() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Worker...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Redis
    const redisClient = createClient({
      url: REDIS_URL
    });
    
    await redisClient.connect();
    
    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const testTask = {
      id: `test-task-${Date.now()}`,
      type: 'TEST',
      data: {
        timestamp: new Date().toISOString()
      }
    };
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    const responseChannel = `test-response-${Date.now()}`;
    let responseReceived = false;
    
    const subscription = redisClient.duplicate();
    await subscription.connect();
    
    await subscription.subscribe(responseChannel, (message) => {
      try {
        const response = JSON.parse(message);
        if (response.taskId === testTask.id) {
          responseReceived = true;
          results.worker.status = 'success';
          results.worker.message = 'Worker —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ';
          console.log('‚úÖ Worker —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Worker:', error.message);
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–¥–∞—á—É
    testTask.responseChannel = responseChannel;
    
    // –ü—É–±–ª–∏–∫—É–µ–º –∑–∞–¥–∞—á—É
    await redisClient.publish('tasks', JSON.stringify(testTask));
    
    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    if (!responseReceived) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
      try {
        const response = await axios.get(`${API_BASE_URL}/worker/status`, { timeout: 5000 });
        
        if (response.status === 200 && response.data.status === 'OK') {
          results.worker.status = 'success';
          results.worker.message = 'Worker —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ API)';
          console.log('‚úÖ Worker —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ API)');
        } else {
          results.worker.status = 'warning';
          results.worker.message = 'Worker –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É, –Ω–æ API —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç';
          console.log('‚ö†Ô∏è Worker –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É, –Ω–æ API —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç');
        }
      } catch (apiError) {
        results.worker.status = 'error';
        results.worker.message = 'Worker –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É, –∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        console.error('‚ùå Worker –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É, –∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await subscription.unsubscribe(responseChannel);
    await subscription.quit();
    await redisClient.quit();
    
  } catch (error) {
    results.worker.status = 'error';
    results.worker.message = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Worker: ${error.message}`;
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Worker:', error.message);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ Scheduler
 */
async function checkScheduler() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Scheduler...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
    const response = await axios.get(`${API_BASE_URL}/scheduler/status`, { timeout: 5000 });
    
    if (response.status === 200 && response.data.status === 'OK') {
      results.scheduler.status = 'success';
      results.scheduler.message = 'Scheduler —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ';
      console.log('‚úÖ Scheduler —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    } else {
      results.scheduler.status = 'warning';
      results.scheduler.message = `Scheduler API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ OK: ${JSON.stringify(response.data)}`;
      console.log('‚ö†Ô∏è Scheduler API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ OK');
    }
  } catch (error) {
    // –ï—Å–ª–∏ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Scheduler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Redis
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Scheduler —á–µ—Ä–µ–∑ Redis...');
      
      const redisClient = createClient({
        url: REDIS_URL
      });
      
      await redisClient.connect();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö Scheduler
      const keys = await redisClient.keys('scheduler:*');
      
      if (keys.length > 0) {
        results.scheduler.status = 'success';
        results.scheduler.message = `Scheduler —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–æ ${keys.length} –∫–ª—é—á–µ–π –≤ Redis`;
        console.log(`‚úÖ Scheduler —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–æ ${keys.length} –∫–ª—é—á–µ–π –≤ Redis`);
      } else {
        results.scheduler.status = 'warning';
        results.scheduler.message = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π Scheduler –≤ Redis';
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π Scheduler –≤ Redis');
      }
      
      await redisClient.quit();
    } catch (redisError) {
      results.scheduler.status = 'error';
      results.scheduler.message = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Scheduler: ${error.message}. Redis –æ—à–∏–±–∫–∞: ${redisError.message}`;
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Scheduler:', error.message);
      console.error('‚ùå Redis –æ—à–∏–±–∫–∞:', redisError.message);
    }
  }
}

/**
 * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function printResults() {
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã VHM24:');
  console.log('=====================================');
  
  const components = Object.keys(results);
  const maxComponentLength = Math.max(...components.map(c => c.length));
  
  for (const component of components) {
    const result = results[component];
    const status = result.status === 'success' ? '‚úÖ' : 
                  result.status === 'warning' ? '‚ö†Ô∏è' : 
                  result.status === 'error' ? '‚ùå' : '‚ùì';
    
    console.log(`${status} ${component.padEnd(maxComponentLength)}: ${result.message}`);
  }
  
  console.log('=====================================');
  
  // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const stats = {
    success: components.filter(c => results[c].status === 'success').length,
    warning: components.filter(c => results[c].status === 'warning').length,
    error: components.filter(c => results[c].status === 'error').length,
    pending: components.filter(c => results[c].status === 'pending').length
  };
  
  console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ‚úÖ ${stats.success} —É—Å–ø–µ—à–Ω–æ, ‚ö†Ô∏è ${stats.warning} —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏, ‚ùå ${stats.error} —Å –æ—à–∏–±–∫–∞–º–∏, ‚ùì ${stats.pending} –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ`);
  
  // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
  if (stats.error > 0) {
    console.log('‚ùå –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò');
  } else if (stats.warning > 0) {
    console.log('‚ö†Ô∏è –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –ï–°–¢–¨ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø');
  } else if (stats.pending > 0) {
    console.log('‚ùì –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –ü–†–û–í–ï–†–ö–ê –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê');
  } else {
    console.log('‚úÖ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢');
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
 */
async function runChecks() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã VHM24...');
  console.log(`üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${new Date().toLocaleString()}`);
  console.log(`üîó API URL: ${API_BASE_URL}`);
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await Promise.all([
      checkAPI(),
      checkDatabase(),
      checkRedis(),
      checkTelegram(),
      checkS3(),
      checkWorker(),
      checkScheduler()
    ]);
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    printResults();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    return results;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫:', error);
    return results;
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runChecks().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { runChecks };
