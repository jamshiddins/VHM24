/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤ production
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π: npm run start:prod
 */

require('dotenv').config();
const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const validateEnvironmentVariables = require('./check-env-variables');
const isValid = validateEnvironmentVariables();

if (!isValid) {
  console.error(`‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`);
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ production
if (process.env.NODE_ENV !== 'production') {
  console.warn(`‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ ${process.env.NODE_ENV}, –∞ –Ω–µ production`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
const logDir = path.join(__dirname, 'logs');
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ª–æ–≥–æ–≤
const serverLogStream = fs.createWriteStream(path.join(logDir, 'server.log'), { flags: 'a' });
const botLogStream = fs.createWriteStream(path.join(logDir, 'bot.log'), { flags: 'a' });

/**
 * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
function startProcess(command, args, name, logStream) {
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ ${name}...`);
  
  const process = spawn(command, args, {
    stdio: ['ignore', 'pipe', 'pipe'],
    shell: true
  });
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ stdout
  process.stdout.on('data', (data) => {
    const message = data.toString().trim();
    const timestamp = new Date().toISOString();
    logStream.write(`[${timestamp}] [INFO] ${message}\n`);
    console.log(`[${name}] ${message}`);
  });
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ stderr
  process.stderr.on('data', (data) => {
    const message = data.toString().trim();
    const timestamp = new Date().toISOString();
    logStream.write(`[${timestamp}] [ERROR] ${message}\n`);
    console.error(`[${name}] ‚ùå ${message}`);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  process.on('close', (code) => {
    const timestamp = new Date().toISOString();
    const message = `–ü—Ä–æ—Ü–µ—Å—Å ${name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`;
    logStream.write(`[${timestamp}] [INFO] ${message}\n`);
    console.log(`[${name}] ${message}`);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (code !== 0) {
      const restartMessage = `–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ${name}...`;
      logStream.write(`[${timestamp}] [INFO] ${restartMessage}\n`);
      console.log(`[${name}] ${restartMessage}`);
      
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        startProcess(command, args, name, logStream);
      }, 5000);
    }
  });
  
  return process;
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
 */
function startSystem() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤ production...');
  console.log('üìÖ –í—Ä–µ–º—è:', new Date().toISOString());
  console.log('üåê –û–∫—Ä—É–∂–µ–Ω–∏–µ:', process.env.NODE_ENV);
  console.log('üîó –ü–æ—Ä—Ç:', process.env.PORT);
  console.log('-----------------------------------');
  
  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  const serverProcess = startProcess('node', ['server.js'], 'Server', serverLogStream);
  
  // –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
  const botProcess = startProcess('node', ['apps/telegram-bot/src/index.js'], 'Telegram Bot', botLogStream);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    serverProcess.kill();
    botProcess.kill();
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    console.log('üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    serverProcess.kill();
    botProcess.kill();
    process.exit(0);
  });
}

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
startSystem();
