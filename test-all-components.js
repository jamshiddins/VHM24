#!/usr/bin/env node

require('dotenv').config();
const { spawn } = require('child_process');
const path = require('path');

console.log('üß™ VHM24 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvironment() {
  console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n');
  
  const required = [
    'DATABASE_URL',
    'JWT_SECRET',
    'REDIS_URL',
    'TELEGRAM_BOT_TOKEN',
    'S3_ACCESS_KEY',
    'S3_SECRET_KEY'
  ];
  
  let allPresent = true;
  
  required.forEach(key => {
    if (process.env[key]) {
      console.log(`‚úÖ ${key}: ${key.includes('SECRET') || key.includes('KEY') ? '***' : process.env[key].substring(0, 30) + '...'}`);
    } else {
      console.log(`‚ùå ${key}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`);
      allPresent = false;
    }
  });
  
  return allPresent;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function testDatabase() {
  console.log('\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
  
  try {
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    
    await prisma.$connect();
    const result = await prisma.$queryRaw`SELECT 1`;
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    await prisma.$disconnect();
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç Web Dashboard
async function testWebDashboard() {
  console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Web Dashboard...');
  
  return new Promise((resolve) => {
    const dashboard = spawn('npm', ['run', 'dev'], {
      cwd: path.join(__dirname, 'apps/web-dashboard'),
      shell: true
    });
    
    let started = false;
    
    dashboard.stdout.on('data', (data) => {
      const output = data.toString();
      if (output.includes('Ready') && !started) {
        started = true;
        console.log('‚úÖ Web Dashboard –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000');
        dashboard.kill();
        resolve(true);
      }
    });
    
    dashboard.stderr.on('data', (data) => {
      const error = data.toString();
      if (error && !error.includes('ExperimentalWarning')) {
        console.log('‚ö†Ô∏è  Dashboard –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:', error.substring(0, 100));
      }
    });
    
    setTimeout(() => {
      if (!started) {
        console.log('‚ùå Web Dashboard –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥');
        dashboard.kill();
        resolve(false);
      }
    }, 30000);
  });
}

// –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
async function testService(name, port, servicePath) {
  console.log(`\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${name} —Å–µ—Ä–≤–∏—Å–∞...`);
  
  return new Promise((resolve) => {
    const service = spawn('npm', ['start'], {
      cwd: path.join(__dirname, servicePath),
      shell: true,
      env: { ...process.env, PORT: port }
    });
    
    let started = false;
    let error = false;
    
    service.stdout.on('data', (data) => {
      const output = data.toString();
      if ((output.includes('running') || output.includes('started')) && !started) {
        started = true;
        console.log(`‚úÖ ${name} —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        service.kill();
        resolve(true);
      }
    });
    
    service.stderr.on('data', (data) => {
      const errorMsg = data.toString();
      if (errorMsg.includes('Error') && !error) {
        error = true;
        console.log(`‚ùå ${name} —Å–µ—Ä–≤–∏—Å –æ—à–∏–±–∫–∞:`, errorMsg.substring(0, 200));
        service.kill();
        resolve(false);
      }
    });
    
    setTimeout(() => {
      if (!started && !error) {
        console.log(`‚ö†Ô∏è  ${name} —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞ –∑–∞ 10 —Å–µ–∫—É–Ω–¥`);
        service.kill();
        resolve(false);
      }
    }, 10000);
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ VHM24...\n');
  
  const results = {
    environment: false,
    database: false,
    dashboard: false,
    services: {}
  };
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  results.environment = checkEnvironment();
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  if (results.environment) {
    results.database = await testDatabase();
  }
  
  // 3. –¢–µ—Å—Ç Web Dashboard
  results.dashboard = await testWebDashboard();
  
  // 4. –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  const servicesToTest = [
    { name: 'Auth', port: 3001, path: 'services/auth' },
    { name: 'Gateway', port: 8000, path: 'services/gateway' },
    { name: 'Notifications', port: 3008, path: 'services/notifications' }
  ];
  
  for (const service of servicesToTest) {
    results.services[service.name] = await testService(service.name, service.port, service.path);
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(60) + '\n');
  
  console.log('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', results.environment ? '‚úÖ –û–ö' : '‚ùå –û–®–ò–ë–ö–ê');
  console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', results.database ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
  console.log('Web Dashboard:', results.dashboard ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—à–∏–±–∫–∞');
  
  console.log('\n–°–µ—Ä–≤–∏—Å—ã:');
  Object.entries(results.services).forEach(([name, status]) => {
    console.log(`  ${name}:`, status ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—à–∏–±–∫–∞');
  });
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  
  if (!results.environment) {
    console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }
  
  if (!results.database) {
    console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PostgreSQL');
    console.log('- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL –∏–∑ Railway Dashboard');
  }
  
  if (!results.dashboard) {
    console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Web Dashboard: cd apps/web-dashboard && npm install');
  }
  
  const failedServices = Object.entries(results.services)
    .filter(([_, status]) => !status)
    .map(([name]) => name);
    
  if (failedServices.length > 0) {
    console.log(`- –°–µ—Ä–≤–∏—Å—ã —Å –æ—à–∏–±–∫–∞–º–∏: ${failedServices.join(', ')}`);
    console.log('- –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node fix-backend-services.js');
  }
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
  const allOk = results.environment && results.database && results.dashboard && 
                Object.values(results.services).every(status => status);
  
  console.log('\n' + '='.repeat(60));
  if (allOk) {
    console.log('üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
    console.log('–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É: node start-with-railway.js');
  } else {
    console.log('‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö');
    console.log('–°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –≤—ã—à–µ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º');
  }
  console.log('='.repeat(60));
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
