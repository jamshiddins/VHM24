#!/usr/bin/env node

/**
 * VHM24 –ü–û–õ–ù–´–ô –ê–£–î–ò–¢, –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ò –î–û–†–ê–ë–û–¢–ö–ê –ü–†–û–ï–ö–¢–ê
 * 
 * –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ vhm24.docx:
 * 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
 * 2. –ê—É–¥–∏—Ç –∫–æ–¥–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ 3000+ –æ—à–∏–±–æ–∫)
 * 3. –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (–∑–∞–º–µ–Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
 * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * 5. –û—á–∏—Å—Ç–∫–∞ –æ—Ç –º—É—Å–æ—Ä–∞
 * 6. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é
 * 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class VHM24CompleteAuditor {
    constructor() {
        this.projectRoot = process.cwd();
        this.errors = [];
        this.warnings = [];
        this.fixes = [];
        this.cleanedFiles = [];
        this.missingFeatures = [];
        this.envVariables = new Map();
        
        console.log('üöÄ VHM24 –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –ò –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ù–ê–ß–ê–¢');
        console.log('üìã –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ vhm24.docx');
    }

    // ============================================================================
    // 1. –°–†–ê–í–ù–ï–ù–ò–ï –° –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ï–ô –ò –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –§–£–ù–ö–¶–ò–ô
    // ============================================================================

    async compareWithDocumentation() {
        console.log('\nüìÑ 1. –°–†–ê–í–ù–ï–ù–ò–ï –° –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ï–ô vhm24.docx');
        
        const requiredFeatures = {
            // –†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞
            roles: ['admin', 'manager', 'warehouse', 'operator', 'technician', 'driver'],
            
            // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            catalogs: [
                'machines', 'ingredients', 'hoppers', 'bags', 'syrups', 'water',
                'consumables', 'spare_parts', 'recipes', 'users', 'locations',
                'suppliers', 'routes', 'sim_cards', 'electricity_meters'
            ],
            
            // FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á
            taskStates: [
                'created', 'assigned', 'in_progress', 'completed', 'error', 'cancelled'
            ],
            
            // –¢–∏–ø—ã –∑–∞–¥–∞—á
            taskTypes: [
                'replace_ingredients', 'replace_water', 'replace_syrups', 'cleaning',
                'maintenance', 'cash_collection', 'repair', 'inspection', 'test_purchase'
            ],
            
            // –ß–µ–∫-–ª–∏—Å—Ç—ã
            checklists: [
                'ingredient_replacement', 'water_replacement', 'syrup_replacement',
                'cleaning', 'maintenance', 'cash_collection', 'repair'
            ],
            
            // –û—Ç—á–µ—Ç—ã
            reports: [
                'sales_reconciliation', 'ingredient_consumption', 'cash_collection',
                'inventory_status', 'task_completion', 'financial_summary'
            ],
            
            // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            integrations: [
                'telegram_bot', 'payment_systems', 'fiscal_module', 'vending_system'
            ]
        };

        await this.checkMissingFeatures(requiredFeatures);
        await this.implementMissingFeatures();
    }

    async checkMissingFeatures(required) {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π Prisma
        const schemaPath = path.join(this.projectRoot, 'backend/prisma/schema.prisma');
        if (fs.existsSync(schemaPath)) {
            const schema = fs.readFileSync(schemaPath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
            const roleEnum = schema.match(/enum UserRole \{([^}]+)\}/);
            if (roleEnum) {
                const existingRoles = roleEnum[1].match(/\w+/g) || [];
                const missingRoles = required.roles.filter(role => 
                    !existingRoles.some(r => r.toLowerCase() === role.toLowerCase())
                );
                if (missingRoles.length > 0) {
                    this.missingFeatures.push({
                        type: 'roles',
                        missing: missingRoles,
                        priority: 'high'
                    });
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
            const taskTypeEnum = schema.match(/enum TaskType \{([^}]+)\}/);
            if (taskTypeEnum) {
                const existingTypes = taskTypeEnum[1].match(/\w+/g) || [];
                const missingTypes = required.taskTypes.filter(type => 
                    !existingTypes.some(t => t.toLowerCase().includes(type.toLowerCase().replace('_', '')))
                );
                if (missingTypes.length > 0) {
                    this.missingFeatures.push({
                        type: 'task_types',
                        missing: missingTypes,
                        priority: 'high'
                    });
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–æ—É—Ç–æ–≤
        const routesDir = path.join(this.projectRoot, 'backend/src/routes');
        if (fs.existsSync(routesDir)) {
            const routeFiles = fs.readdirSync(routesDir);
            const missingRoutes = required.catalogs.filter(catalog => 
                !routeFiles.some(file => file.includes(catalog))
            );
            if (missingRoutes.length > 0) {
                this.missingFeatures.push({
                    type: 'api_routes',
                    missing: missingRoutes,
                    priority: 'medium'
                });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram FSM
        const telegramBotPath = path.join(this.projectRoot, 'apps/telegram-bot/src');
        if (fs.existsSync(telegramBotPath)) {
            const botFiles = this.getAllFiles(telegramBotPath, '.js');
            const hasFSM = botFiles.some(file => {
                const content = fs.readFileSync(file, 'utf8');
                return content.includes('FSM') || content.includes('State');
            });
            
            if (!hasFSM) {
                this.missingFeatures.push({
                    type: 'telegram_fsm',
                    missing: ['FSM implementation'],
                    priority: 'high'
                });
            }
        }

        console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${this.missingFeatures.length} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π`);
    }

    async implementMissingFeatures() {
        console.log('üîß –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
        
        for (const feature of this.missingFeatures) {
            switch (feature.type) {
                case 'roles':
                    await this.addMissingRoles(feature.missing);
                    break;
                case 'task_types':
                    await this.addMissingTaskTypes(feature.missing);
                    break;
                case 'api_routes':
                    await this.createMissingRoutes(feature.missing);
                    break;
                case 'telegram_fsm':
                    await this.implementTelegramFSM();
                    break;
            }
        }
    }

    async addMissingRoles(missingRoles) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π: ${missingRoles.join(', ')}`);
        
        const schemaPath = path.join(this.projectRoot, 'backend/prisma/schema.prisma');
        if (fs.existsSync(schemaPath)) {
            let schema = fs.readFileSync(schemaPath, 'utf8');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–æ–ª–∏
            const roleEnumMatch = schema.match(/(enum UserRole \{[^}]+)(\})/);
            if (roleEnumMatch) {
                const existingRoles = roleEnumMatch[1];
                const newRoles = missingRoles.map(role => `  ${role.toUpperCase()}`).join('\n');
                schema = schema.replace(roleEnumMatch[0], `${existingRoles}\n${newRoles}\n}`);
                
                fs.writeFileSync(schemaPath, schema);
                this.fixes.push(`–î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–æ–ª–∏: ${missingRoles.join(', ')}`);
            }
        }
    }

    async addMissingTaskTypes(missingTypes) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á: ${missingTypes.join(', ')}`);
        
        const schemaPath = path.join(this.projectRoot, 'backend/prisma/schema.prisma');
        if (fs.existsSync(schemaPath)) {
            let schema = fs.readFileSync(schemaPath, 'utf8');
            
            const taskTypeEnumMatch = schema.match(/(enum TaskType \{[^}]+)(\})/);
            if (taskTypeEnumMatch) {
                const existingTypes = taskTypeEnumMatch[1];
                const newTypes = missingTypes.map(type => `  ${type.toUpperCase()}`).join('\n');
                schema = schema.replace(taskTypeEnumMatch[0], `${existingTypes}\n${newTypes}\n}`);
                
                fs.writeFileSync(schemaPath, schema);
                this.fixes.push(`–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã –∑–∞–¥–∞—á: ${missingTypes.join(', ')}`);
            }
        }
    }

    async createMissingRoutes(missingRoutes) {
        console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ä–æ—É—Ç–æ–≤: ${missingRoutes.join(', ')}`);
        
        const routesDir = path.join(this.projectRoot, 'backend/src/routes');
        
        for (const route of missingRoutes) {
            const routeFile = path.join(routesDir, `${route}.js`);
            if (!fs.existsSync(routeFile)) {
                const routeContent = this.generateRouteTemplate(route);
                fs.writeFileSync(routeFile, routeContent);
                this.fixes.push(`–°–æ–∑–¥–∞–Ω —Ä–æ—É—Ç: ${route}.js`);
            }
        }
    }

    generateRouteTemplate(routeName) {
        const modelName = routeName.charAt(0).toUpperCase() + routeName.slice(1, -1);
        
        return `const express = require('express');
const { PrismaClient } = require('@prisma/client');
const { authenticateToken, requireRole } = require('../middleware/auth');

const router = express.Router();
const prisma = new PrismaClient();

// GET /${routeName} - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
router.get('/', authenticateToken, async (req, res) => {
    try {
        const items = await prisma.${routeName.slice(0, -1)}.findMany({
            include: {
                // –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            }
        });
        res.json(items);
    } catch (error) {
        console.error('Error fetching ${routeName}:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// GET /${routeName}/:id - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID
router.get('/:id', authenticateToken, async (req, res) => {
    try {
        const item = await prisma.${routeName.slice(0, -1)}.findUnique({
            where: { id: req.params.id },
            include: {
                // –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            }
        });
        
        if (!item) {
            return res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        res.json(item);
    } catch (error) {
        console.error('Error fetching ${routeName.slice(0, -1)}:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// POST /${routeName} - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
router.post('/', authenticateToken, requireRole(['ADMIN', 'MANAGER']), async (req, res) => {
    try {
        const item = await prisma.${routeName.slice(0, -1)}.create({
            data: req.body
        });
        res.status(201).json(item);
    } catch (error) {
        console.error('Error creating ${routeName.slice(0, -1)}:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏' });
    }
});

// PUT /${routeName}/:id - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
router.put('/:id', authenticateToken, requireRole(['ADMIN', 'MANAGER']), async (req, res) => {
    try {
        const item = await prisma.${routeName.slice(0, -1)}.update({
            where: { id: req.params.id },
            data: req.body
        });
        res.json(item);
    } catch (error) {
        console.error('Error updating ${routeName.slice(0, -1)}:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏' });
    }
});

// DELETE /${routeName}/:id - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
router.delete('/:id', authenticateToken, requireRole(['ADMIN']), async (req, res) => {
    try {
        await prisma.${routeName.slice(0, -1)}.delete({
            where: { id: req.params.id }
        });
        res.status(204).send();
    } catch (error) {
        console.error('Error deleting ${routeName.slice(0, -1)}:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏' });
    }
});

module.exports = router;
`;
    }

    async implementTelegramFSM() {
        console.log('ü§ñ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Telegram FSM...');
        
        const fsmPath = path.join(this.projectRoot, 'apps/telegram-bot/src/fsm');
        if (!fs.existsSync(fsmPath)) {
            fs.mkdirSync(fsmPath, { recursive: true });
        }

        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π FSM
        const baseFSMContent = `const { Scenes, session } = require('telegraf');

// –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –ø–æ —Ä–æ–ª—è–º
const STATES = {
    ADMIN: {
        MAIN_MENU: 'admin_main_menu',
        MANAGE_USERS: 'admin_manage_users',
        VIEW_REPORTS: 'admin_view_reports',
        SYSTEM_SETTINGS: 'admin_system_settings'
    },
    MANAGER: {
        MAIN_MENU: 'manager_main_menu',
        CREATE_TASK: 'manager_create_task',
        VIEW_REPORTS: 'manager_view_reports',
        MANAGE_CATALOGS: 'manager_manage_catalogs'
    },
    WAREHOUSE: {
        MAIN_MENU: 'warehouse_main_menu',
        RECEIVE_ITEMS: 'warehouse_receive_items',
        ISSUE_BAGS: 'warehouse_issue_bags',
        INVENTORY: 'warehouse_inventory'
    },
    OPERATOR: {
        MAIN_MENU: 'operator_main_menu',
        MY_ROUTES: 'operator_my_routes',
        EXECUTE_TASKS: 'operator_execute_tasks',
        RETURN_ITEMS: 'operator_return_items'
    },
    TECHNICIAN: {
        MAIN_MENU: 'technician_main_menu',
        REPAIR_TASKS: 'technician_repair_tasks',
        MAINTENANCE: 'technician_maintenance'
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
const createRoleScenes = () => {
    const scenes = [];
    
    // –°—Ü–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    scenes.push(new Scenes.BaseScene(STATES.ADMIN.MAIN_MENU)
        .enter((ctx) => {
            ctx.reply('üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', {
                reply_markup: {
                    keyboard: [
                        ['üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'üìä –û—Ç—á–µ—Ç—ã'],
                        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã', 'üìã –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π'],
                        ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            });
        })
        .hears('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', (ctx) => {
            ctx.scene.enter(STATES.ADMIN.MANAGE_USERS);
        })
        .hears('üìä –û—Ç—á–µ—Ç—ã', (ctx) => {
            ctx.scene.enter(STATES.ADMIN.VIEW_REPORTS);
        })
    );
    
    // –°—Ü–µ–Ω—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    scenes.push(new Scenes.BaseScene(STATES.MANAGER.MAIN_MENU)
        .enter((ctx) => {
            ctx.reply('üìã –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', {
                reply_markup: {
                    keyboard: [
                        ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', 'üìä –û—Ç—á–µ—Ç—ã'],
                        ['üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏', 'üó∫ –ú–∞—Ä—à—Ä—É—Ç—ã'],
                        ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            });
        })
        .hears('üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', (ctx) => {
            ctx.scene.enter(STATES.MANAGER.CREATE_TASK);
        })
    );
    
    // –°—Ü–µ–Ω—ã –¥–ª—è —Å–∫–ª–∞–¥–∞
    scenes.push(new Scenes.BaseScene(STATES.WAREHOUSE.MAIN_MENU)
        .enter((ctx) => {
            ctx.reply('üì¶ –ü–∞–Ω–µ–ª—å —Å–∫–ª–∞–¥–∞', {
                reply_markup: {
                    keyboard: [
                        ['üì• –ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä–∞', 'üì§ –í—ã–¥–∞—á–∞ —Å—É–º–æ–∫'],
                        ['üìä –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è', 'üßπ –í–æ–∑–≤—Ä–∞—Ç –∏ –º–æ–π–∫–∞'],
                        ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            });
        })
    );
    
    // –°—Ü–µ–Ω—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    scenes.push(new Scenes.BaseScene(STATES.OPERATOR.MAIN_MENU)
        .enter((ctx) => {
            ctx.reply('üöö –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', {
                reply_markup: {
                    keyboard: [
                        ['üó∫ –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã', 'üìã –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏'],
                        ['üîÑ –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞', 'üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è'],
                        ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            });
        })
    );
    
    return scenes;
};

module.exports = {
    STATES,
    createRoleScenes
};
`;

        fs.writeFileSync(path.join(fsmPath, 'index.js'), baseFSMContent);
        this.fixes.push('–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π Telegram FSM');
    }

    // ============================================================================
    // 2. –ê–£–î–ò–¢ –ö–û–î–ê –ò –ê–†–•–ò–¢–ï–ö–¢–£–†–´
    // ============================================================================

    async auditCodeAndArchitecture() {
        console.log('\nüîç 2. –ê–£–î–ò–¢ –ö–û–î–ê –ò –ê–†–•–ò–¢–ï–ö–¢–£–†–´');
        
        await this.checkCodeQuality();
        await this.fixArchitectureIssues();
        await this.validateBusinessLogic();
        await this.standardizeCodeStyle();
    }

    async fixArchitectureIssues() {
        console.log('üèóÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        const requiredDirs = [
            'backend/src/middleware',
            'backend/src/utils',
            'backend/src/config',
            'apps/telegram-bot/src/handlers',
            'apps/telegram-bot/src/middleware',
            'logs'
        ];

        for (const dir of requiredDirs) {
            const fullPath = path.join(this.projectRoot, dir);
            if (!fs.existsSync(fullPath)) {
                fs.mkdirSync(fullPath, { recursive: true });
                this.fixes.push(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
            }
        }
    }

    async validateBusinessLogic() {
        console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö middleware
        const middlewareDir = path.join(this.projectRoot, 'backend/src/middleware');
        const requiredMiddleware = ['auth.js', 'validation.js', 'errorHandler.js'];
        
        for (const middleware of requiredMiddleware) {
            const middlewarePath = path.join(middlewareDir, middleware);
            if (!fs.existsSync(middlewarePath)) {
                this.warnings.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç middleware: ${middleware}`);
            }
        }
    }

    async standardizeCodeStyle() {
        console.log('üé® –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª—è –∫–æ–¥–∞...');
        
        // –°–æ–∑–¥–∞–µ–º .eslintrc.js –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const eslintPath = path.join(this.projectRoot, '.eslintrc.js');
        if (!fs.existsSync(eslintPath)) {
            const eslintConfig = `module.exports = {
    env: {
        node: true,
        es2021: true,
    },
    extends: ['eslint:recommended'],
    parserOptions: {
        ecmaVersion: 12,
        sourceType: 'module',
    },
    rules: {
        'no-console': 'warn',
        'no-unused-vars': 'error',
        'prefer-const': 'error',
        'no-var': 'error',
    },
};
`;
            fs.writeFileSync(eslintPath, eslintConfig);
            this.fixes.push('–°–æ–∑–¥–∞–Ω .eslintrc.js');
        }
    }

    async checkCodeQuality() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...');
        
        const jsFiles = this.getAllFiles(this.projectRoot, '.js');
        const tsFiles = this.getAllFiles(this.projectRoot, '.ts');
        const allFiles = [...jsFiles, ...tsFiles];
        
        for (const file of allFiles) {
            if (file.includes('node_modules') || file.includes('.git')) continue;
            
            try {
                const content = fs.readFileSync(file, 'utf8');
                await this.analyzeFile(file, content);
            } catch (error) {
                this.errors.push(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}: ${error.message}`);
            }
        }
    }

    async analyzeFile(filePath, content) {
        const relativePath = path.relative(this.projectRoot, filePath);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        const syntaxIssues = this.checkSyntaxIssues(content);
        if (syntaxIssues.length > 0) {
            this.errors.push(`${relativePath}: ${syntaxIssues.join(', ')}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        const architectureIssues = this.checkArchitectureIssues(content);
        if (architectureIssues.length > 0) {
            this.warnings.push(`${relativePath}: ${architectureIssues.join(', ')}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const securityIssues = this.checkSecurityIssues(content);
        if (securityIssues.length > 0) {
            this.errors.push(`${relativePath}: –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ - ${securityIssues.join(', ')}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const performanceIssues = this.checkPerformanceIssues(content);
        if (performanceIssues.length > 0) {
            this.warnings.push(`${relativePath}: –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ - ${performanceIssues.join(', ')}`);
        }
    }

    checkSyntaxIssues(content) {
        const issues = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∫–æ–±–æ–∫
        const openBraces = (content.match(/\{/g) || []).length;
        const closeBraces = (content.match(/\}/g) || []).length;
        if (openBraces !== closeBraces) {
            issues.push('–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫
        const openParens = (content.match(/\(/g) || []).length;
        const closeParens = (content.match(/\)/g) || []).length;
        if (openParens !== closeParens) {
            issues.push('–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        const undefinedVars = content.match(/\bundefined\b/g);
        if (undefinedVars && undefinedVars.length > 2) {
            issues.push('–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ undefined');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ console.log –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        if (content.includes('console.log') && !content.includes('// DEBUG')) {
            issues.push('–ù–∞–π–¥–µ–Ω—ã console.log –±–µ–∑ –ø–æ–º–µ—Ç–∫–∏ DEBUG');
        }
        
        return issues;
    }

    checkArchitectureIssues(content) {
        const issues = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        const functions = content.match(/function\s+\w+\s*\([^)]*\)\s*\{[^}]*\}/g) || [];
        functions.forEach(func => {
            const lines = func.split('\n').length;
            if (lines > 50) {
                issues.push('–§—É–Ω–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (>50 —Å—Ç—Ä–æ–∫)');
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
        const lines = content.split('\n');
        const duplicates = this.findDuplicateLines(lines);
        if (duplicates.length > 0) {
            issues.push(`–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞: ${duplicates.length} –ø–æ–≤—Ç–æ—Ä–æ–≤`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª
        const magicNumbers = content.match(/\b\d{3,}\b/g);
        if (magicNumbers && magicNumbers.length > 3) {
            issues.push('–ù–∞–π–¥–µ–Ω—ã –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞');
        }
        
        return issues;
    }

    checkSecurityIssues(content) {
        const issues = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
        const hardcodedSecrets = [
            /password\s*[:=]\s*['"][^'"]+['"]/i,
            /token\s*[:=]\s*['"][^'"]+['"]/i,
            /secret\s*[:=]\s*['"][^'"]+['"]/i,
            /api_key\s*[:=]\s*['"][^'"]+['"]/i
        ];
        
        hardcodedSecrets.forEach(pattern => {
            if (pattern.test(content)) {
                issues.push('–ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã');
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–π
        if (content.includes('SELECT') && content.includes('+') && content.includes('req.')) {
            issues.push('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è SQL –∏–Ω—ä–µ–∫—Ü–∏—è');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ eval
        if (content.includes('eval(')) {
            issues.push('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ eval()');
        }
        
        return issues;
    }

    checkPerformanceIssues(content) {
        const issues = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if (content.includes('readFileSync') || content.includes('writeFileSync')) {
            issues.push('–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
        if (content.includes('for') && content.includes('await') && !content.includes('Promise.all')) {
            issues.push('–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
        if (content.includes('setInterval') && !content.includes('clearInterval')) {
            issues.push('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏ (setInterval)');
        }
        
        return issues;
    }

    findDuplicateLines(lines) {
        const lineCount = {};
        const duplicates = [];
        
        lines.forEach(line => {
            const trimmed = line.trim();
            if (trimmed.length > 10) {
                lineCount[trimmed] = (lineCount[trimmed] || 0) + 1;
                if (lineCount[trimmed] === 2) {
                    duplicates.push(trimmed);
                }
            }
        });
        
        return duplicates;
    }

    // ============================================================================
    // 3. –†–ê–ë–û–¢–ê –° –ü–ï–†–ï–ú–ï–ù–ù–´–ú–ò
    // ============================================================================

    async fixVariables() {
        console.log('\nüîß 3. –†–ê–ë–û–¢–ê –° –ü–ï–†–ï–ú–ï–ù–ù–´–ú–ò');
        
        await this.findHardcodedVariables();
        await this.updateEnvironmentFiles();
        await this.replaceHardcodedValues();
    }

    async findHardcodedVariables() {
        console.log('üîç –ü–æ–∏—Å–∫ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...');
        
        const patterns = [
            { pattern: /process.env.TELEGRAM_BOT_TOKEN/g, replacement: 'process.env.TELEGRAM_BOT_TOKEN', env: 'TELEGRAM_BOT_TOKEN' },
            { pattern: /process.env.API_URL/g, replacement: 'process.env.API_URL', env: 'API_URL' },
            { pattern: /http:\/\/127\.0\.0\.1/g, replacement: 'process.env.API_URL', env: 'API_URL' },
            { pattern: /http:\/\/localhost:3000/g, replacement: 'process.env.API_URL', env: 'API_URL' },
            { pattern: /process.env.DB_PASSWORD/g, replacement: 'process.env.DB_PASSWORD', env: 'DB_PASSWORD' },
            { pattern: /process.env.JWT_SECRET/g, replacement: 'process.env.JWT_SECRET', env: 'JWT_SECRET' }
        ];
        
        const allFiles = this.getAllFiles(this.projectRoot, '.js');
        
        for (const file of allFiles) {
            if (file.includes('node_modules') || file.includes('.git')) continue;
            
            try {
                let content = fs.readFileSync(file, 'utf8');
                let modified = false;
                
                patterns.forEach(({ pattern, replacement, env }) => {
                    if (pattern.test(content)) {
                        content = content.replace(pattern, replacement);
                        modified = true;
                        this.envVariables.set(env, `REQUIRED_${env}`);
                        this.fixes.push(`${path.relative(this.projectRoot, file)}: –ó–∞–º–µ–Ω–µ–Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞ ${env}`);
                    }
                });
                
                if (modified) {
                    fs.writeFileSync(file, content);
                }
            } catch (error) {
                this.errors.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${file}: ${error.message}`);
            }
        }
    }

    async updateEnvironmentFiles() {
        console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º .env
        const envPath = path.join(this.projectRoot, '.env');
        let envContent = '';
        
        if (fs.existsSync(envPath)) {
            envContent = fs.readFileSync(envPath, 'utf8');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        const requiredVars = {
            'DATABASE_URL': 'postgresql://postgres:password@localhost:5432/vhm24?schema=public',
            'JWT_SECRET': 'vhm24-super-secret-key-2024',
            'TELEGRAM_BOT_TOKEN': 'REQUIRED_TELEGRAM_BOT_TOKEN',
            'API_URL': 'process.env.API_URL',
            'PORT': '3000',
            'NODE_ENV': 'development',
            'UPLOAD_DIR': 'uploads',
            'MAX_FILE_SIZE': '10485760',
            'SESSION_SECRET': 'vhm24-session-secret',
            'CORS_ORIGIN': 'process.env.API_URL,http://localhost:3001',
            'LOG_LEVEL': 'info',
            'LOG_FILE': 'logs/app.log',
            'REDIS_URL': 'redis://localhost:6379',
            'MULTIKASSA_API_URL': 'https://api.multikassa.uz',
            'PAYME_API_URL': 'https://checkout.paycom.uz',
            'CLICK_API_URL': 'https://api.click.uz',
            'UZUM_API_URL': 'https://api.uzum.uz'
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        this.envVariables.forEach((value, key) => {
            requiredVars[key] = value;
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env
        Object.entries(requiredVars).forEach(([key, value]) => {
            const regex = new RegExp(`^${key}=.*$`, 'm');
            if (regex.test(envContent)) {
                // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
            } else {
                envContent += `\n${key}=${value}`;
                this.fixes.push(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${key}`);
            }
        });

        fs.writeFileSync(envPath, envContent.trim() + '\n');

        // –û–±–Ω–æ–≤–ª—è–µ–º .env.example
        const envExamplePath = path.join(this.projectRoot, '.env.example');
        const exampleContent = Object.entries(requiredVars)
            .map(([key, value]) => `${key}=${key.includes('REQUIRED_') ? value : 'your_value_here'}`)
            .join('\n');
        
        fs.writeFileSync(envExamplePath, exampleContent);
        this.fixes.push('–û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª .env.example');
    }

    async replaceHardcodedValues() {
        console.log('üîÑ –ó–∞–º–µ–Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π...');
        
        const configFiles = [
            'backend/src/config/database.js',
            'backend/src/config/app.js',
            'apps/telegram-bot/src/config.js'
        ];

        for (const configFile of configFiles) {
            const fullPath = path.join(this.projectRoot, configFile);
            if (fs.existsSync(fullPath)) {
                let content = fs.readFileSync(fullPath, 'utf8');
                
                // –ó–∞–º–µ–Ω—è–µ–º –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                content = content.replace(/localhost/g, 'process.env.DB_HOST || "localhost"');
                content = content.replace(/5432/g, 'process.env.DB_PORT || 5432');
                content = content.replace(/3000/g, 'process.env.PORT || 3000');
                
                fs.writeFileSync(fullPath, content);
                this.fixes.push(`–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${configFile}`);
            }
        }
    }

    // ============================================================================
    // 4. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
    // ============================================================================

    async checkConnections() {
        console.log('\nüîå 4. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô');
        
        await this.checkDatabaseConnection();
        await this.checkTelegramAPI();
        await this.checkExternalServices();
        await this.removeDevStubs();
    }

    async checkDatabaseConnection() {
        console.log('üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            const { execSync } = require('child_process');
            execSync('npx prisma db pull', { cwd: path.join(this.projectRoot, 'backend'), stdio: 'pipe' });
            this.fixes.push('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç');
        } catch (error) {
            this.errors.push('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ‚ùå –û—à–∏–±–∫–∞');
            this.warnings.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å DATABASE_URL –≤ .env');
        }
    }

    async checkTelegramAPI() {
        console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API...');
        
        const envPath = path.join(this.projectRoot, '.env');
        if (fs.existsSync(envPath)) {
            const envContent = fs.readFileSync(envPath, 'utf8');
            if (envContent.includes('TELEGRAM_BOT_TOKEN') && !envContent.includes('REQUIRED_')) {
                this.fixes.push('Telegram Bot Token: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω');
            } else {
                this.warnings.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å TELEGRAM_BOT_TOKEN –≤ .env');
            }
        }
    }

    async checkExternalServices() {
        console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
        
        const services = [
            'MULTIKASSA_API_URL',
            'PAYME_API_URL', 
            'CLICK_API_URL',
            'UZUM_API_URL'
        ];

        services.forEach(service => {
            this.warnings.push(`–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ${service} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏`);
        });
    }

    async removeDevStubs() {
        console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ dev-–∑–∞–≥–ª—É—à–µ–∫...');
        
        const allFiles = this.getAllFiles(this.projectRoot, '.js');
        
        for (const file of allFiles) {
            if (file.includes('node_modules')) continue;
            
            try {
                let content = fs.readFileSync(file, 'utf8');
                let modified = false;
                
                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –∑–∞–≥–ª—É—à–∫–∏
                if (content.includes('
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Production builds
dist/
build/
coverage/

# Environment files
.env
.env.local
.env.production

# Logs
logs/
*.log

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Database
*.sqlite
*.db

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE files
.vscode/
.idea/
*.swp
*.swo

# Temporary files
*.tmp
*.temp
*.bak
*.backup

# Cache
.cache/
.parcel-cache/
.next/
.nuxt/
`;

        if (!fs.existsSync(gitignorePath)) {
            fs.writeFileSync(gitignorePath, gitignoreContent.trim());
            this.fixes.push('–°–æ–∑–¥–∞–Ω .gitignore —Ñ–∞–π–ª');
        }
    }

    // ============================================================================
    // 6. –ü–û–î–ì–û–¢–û–í–ö–ê –ö –î–ï–ü–õ–û–Æ
    // ============================================================================

    async prepareForDeployment() {
        console.log('\nüöÄ 6. –ü–û–î–ì–û–¢–û–í–ö–ê –ö –î–ï–ü–õ–û–Æ');
        
        await this.checkDockerfiles();
        await this.optimizeBuild();
        await this.validateStartCommands();
        await this.generateDeploymentChecklist();
    }

    async checkDockerfiles() {
        console.log('üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        
        const dockerfilePath = path.join(this.projectRoot, 'Dockerfile');
        if (!fs.existsSync(dockerfilePath)) {
            const dockerfileContent = `FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY backend/package*.json ./backend/
COPY apps/telegram-bot/package*.json ./apps/telegram-bot/

# Install dependencies
RUN npm ci --only=production
RUN cd backend && npm ci --only=production
RUN cd apps/telegram-bot && npm ci --only=production

# Copy source code
COPY . .

# Generate Prisma client
RUN cd backend && npx prisma generate

# Expose port
EXPOSE 3000

# Start command
CMD ["npm", "start"]
`;
            fs.writeFileSync(dockerfilePath, dockerfileContent);
            this.fixes.push('–°–æ–∑–¥–∞–Ω Dockerfile');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose
        const dockerComposePath = path.join(this.projectRoot, 'docker-compose.yml');
        if (!fs.existsSync(dockerComposePath)) {
            const dockerComposeContent = `version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=\${DATABASE_URL}
      - TELEGRAM_BOT_TOKEN=\${TELEGRAM_BOT_TOKEN}
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=vhm24
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=\${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

volumes:
  postgres_data:
`;
            fs.writeFileSync(dockerComposePath, dockerComposeContent);
            this.fixes.push('–°–æ–∑–¥–∞–Ω docker-compose.yml');
        }
    }

    async optimizeBuild() {
        console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json scripts
        const packageJsonPath = path.join(this.projectRoot, 'package.json');
        if (fs.existsSync(packageJsonPath)) {
            const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
            
            if (!packageJson.scripts) {
                packageJson.scripts = {};
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
            const requiredScripts = {
                "start": "node backend/src/index.js",
                "dev": "concurrently \"npm run dev:backend\" \"npm run dev:bot\"",
                "dev:backend": "cd backend && npm run dev",
                "dev:bot": "cd apps/telegram-bot && npm run dev",
                "build": "npm run build:backend && npm run build:bot",
                "build:backend": "cd backend && npm run build",
                "build:bot": "cd apps/telegram-bot && npm run build",
                "test": "npm run test:backend && npm run test:bot",
                "test:backend": "cd backend && npm test",
                "test:bot": "cd apps/telegram-bot && npm test",
                "migrate": "cd backend && npx prisma migrate deploy",
                "generate": "cd backend && npx prisma generate",
                "postinstall": "npm run generate"
            };
            
            Object.entries(requiredScripts).forEach(([script, command]) => {
                if (!packageJson.scripts[script]) {
                    packageJson.scripts[script] = command;
                    this.fixes.push(`–î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç: ${script}`);
                }
            });
            
            fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
        }
    }

    async validateStartCommands() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—Å–∫–∞...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const railwayTomlPath = path.join(this.projectRoot, 'railway.toml');
        if (!fs.existsSync(railwayTomlPath)) {
            const railwayConfig = `[build]
builder = "nixpacks"

[deploy]
startCommand = "npm start"
restartPolicyType = "always"

[env]
NODE_ENV = "production"
`;
            fs.writeFileSync(railwayTomlPath, railwayConfig);
            this.fixes.push('–°–æ–∑–¥–∞–Ω railway.toml');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º nixpacks –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const nixpacksPath = path.join(this.projectRoot, 'nixpacks.toml');
        if (!fs.existsSync(nixpacksPath)) {
            const nixpacksConfig = `[phases.setup]
nixPkgs = ["nodejs-18_x", "npm-9_x"]

[phases.install]
cmds = [
    "npm ci --include=dev",
    "cd backend && npm ci --include=dev",
    "cd apps/telegram-bot && npm ci --include=dev"
]

[phases.build]
cmds = [
    "cd backend && npx prisma generate",
    "npm run build"
]

[start]
cmd = "npm start"
`;
            fs.writeFileSync(nixpacksPath, nixpacksConfig);
            this.fixes.push('–°–æ–∑–¥–∞–Ω nixpacks.toml');
        }
    }

    async generateDeploymentChecklist() {
        console.log('üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞ –¥–µ–ø–ª–æ—è...');
        
        const checklist = `# üöÄ DEPLOYMENT CHECKLIST - VHM24

## ‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–ø–ª–æ—é

### üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
- [x] Dockerfile —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [x] docker-compose.yml –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [x] railway.toml —Å–æ–∑–¥–∞–Ω
- [x] nixpacks.toml —Å–æ–∑–¥–∞–Ω
- [x] .env.example –æ–±–Ω–æ–≤–ª–µ–Ω
- [x] .gitignore –Ω–∞—Å—Ç—Ä–æ–µ–Ω

### üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
- [ ] DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [ ] Prisma —Å—Ö–µ–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞
- [ ] –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
- [ ] Prisma Client —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω

### ü§ñ Telegram Bot
- [ ] TELEGRAM_BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [ ] Webhook URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
- [ ] FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã

### üåê API
- [ ] –í—Å–µ —Ä–æ—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
- [ ] Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
- [ ] CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [ ] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç

### üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- [ ] JWT_SECRET –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [ ] –í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
- [ ] –ù–µ—Ç –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
- [ ] HTTPS –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)

### üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- [ ] –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
- [ ] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
- [ ] Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç

### üöÄ –î–µ–ø–ª–æ–π
- [ ] Railway –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω
- [ ] –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
- [ ] –î–æ–º–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- [ ] SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω

## üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è

### –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
\`\`\`bash
npm install
npm run dev
\`\`\`

### –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å–±–æ—Ä–∫–∞
\`\`\`bash
npm run build
npm start
\`\`\`

### Docker
\`\`\`bash
docker-compose up -d
\`\`\`

### Railway
\`\`\`bash
railway login
railway link
railway up
\`\`\`

## ‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏

1. **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö**: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DATABASE_URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
2. **Telegram Bot**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ webhook
3. **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è**: –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
4. **–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏**: –í—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
5. **–ü–æ—Ä—Ç—ã**: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç—ã –Ω–µ –∑–∞–Ω—è—Ç—ã

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: \`railway logs\`
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: \`railway variables\`
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: \`railway restart\`

---
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toISOString()}
`;

        fs.writeFileSync(path.join(this.projectRoot, 'deployment_checklist.md'), checklist);
        this.fixes.push('–°–æ–∑–¥–∞–Ω deployment_checklist.md');
    }

    // ============================================================================
    // 7. –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–û–í –ò –§–ò–ö–°–ê–¶–ò–Ø
    // ============================================================================

    async generateReports() {
        console.log('\nüìã 7. –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–û–í –ò –§–ò–ö–°–ê–¶–ò–Ø');
        
        await this.createFixReport();
        await this.createCleanupLog();
        await this.updateReadme();
        await this.commitChanges();
    }

    async createFixReport() {
        console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö...');
        
        const report = `# üîß –û–¢–ß–ï–¢ –û–ë –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–• VHM24

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π**: ${this.fixes.length}
- **–û—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω–æ**: ${this.errors.length}
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π**: ${this.warnings.length}
- **–§–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω–æ**: ${this.cleanedFiles.length}
- **–ù–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π**: ${this.missingFeatures.length}

## ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

${this.fixes.map((fix, index) => `${index + 1}. ${fix}`).join('\n')}

## ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏

${this.errors.map((error, index) => `${index + 1}. ${error}`).join('\n')}

## üîî –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

${this.warnings.map((warning, index) => `${index + 1}. ${warning}`).join('\n')}

## üßπ –û—á–∏—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

${this.cleanedFiles.map((file, index) => `${index + 1}. ${file}`).join('\n')}

## üÜï –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

${this.missingFeatures.map((feature, index) => 
    `${index + 1}. **${feature.type}**: ${feature.missing.join(', ')} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${feature.priority})`
).join('\n')}

## üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env:

${Array.from(this.envVariables.entries()).map(([key, value]) => `- **${key}**: ${value}`).join('\n')}

## üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: \`npm run migrate\`
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É: \`npm run dev\`
4. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ –Ω–∞ Railway: \`railway up\`

---
–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toISOString()}
`;

        fs.writeFileSync(path.join(this.projectRoot, 'fix_report.md'), report);
        console.log('‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ fix_report.md');
    }

    async createCleanupLog() {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–∞ –æ—á–∏—Å—Ç–∫–∏...');
        
        const cleanupLog = `# üßπ –ñ–£–†–ù–ê–õ –û–ß–ò–°–¢–ö–ò –§–ê–ô–õ–û–í

## –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (${this.cleanedFiles.length})

${this.cleanedFiles.map((file, index) => `${index + 1}. ${file}`).join('\n')}

## –ü—Ä–∏—á–∏–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è

- *.bak - —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤
- *.log - –ª–æ–≥ —Ñ–∞–π–ª—ã
- *.zip - –∞—Ä—Ö–∏–≤—ã
- __pycache__ - –∫—ç—à Python
- node_modules/.cache - –∫—ç—à npm
- coverage - –æ—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤
- dist/build - —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

–í—Å–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∫—ç—à —Ñ–∞–π–ª–æ–≤.

---
–õ–æ–≥ —Å–æ–∑–¥–∞–Ω: ${new Date().toISOString()}
`;

        fs.writeFileSync(path.join(this.projectRoot, 'cleaned_files.log'), cleanupLog);
        console.log('‚úÖ –õ–æ–≥ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ cleaned_files.log');
    }

    async updateReadme() {
        console.log('üìñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README.md...');
        
        const readmePath = path.join(this.projectRoot, 'README.md');
        const readmeContent = `# ü§ñ VHM24 - VendHub Management System

–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏ —Å Telegram-–±–æ—Ç–æ–º –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Node.js 18+
- PostgreSQL 15+
- Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞

1. –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:
\`\`\`bash
git clone https://github.com/jamshiddins/VHM24.git
cd VHM24
\`\`\`

2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
\`\`\`bash
npm install
\`\`\`

3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
\`\`\`bash
cp .env.example .env
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª
\`\`\`

4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏:
\`\`\`bash
npm run migrate
\`\`\`

5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
\`\`\`bash
npm run dev
\`\`\`

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

\`\`\`
VHM24/
‚îú‚îÄ‚îÄ backend/                 # API —Å–µ—Ä–≤–µ—Ä
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ routes/         # API —Ä–æ—É—Ç—ã
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ middleware/     # Middleware
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ utils/          # –£—Ç–∏–ª–∏—Ç—ã
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.js        # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
‚îÇ   ‚îî‚îÄ‚îÄ prisma/             # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
‚îú‚îÄ‚îÄ apps/
‚îÇ   ‚îî‚îÄ‚îÄ telegram-bot/       # Telegram –±–æ—Ç
‚îú‚îÄ‚îÄ frontend/               # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚îî‚îÄ‚îÄ docs/                   # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
\`\`\`

## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

–û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env:

\`\`\`env
DATABASE_URL=postgresql://user:password@localhost:5432/vhm24
TELEGRAM_BOT_TOKEN=your_bot_token
JWT_SECRET=your_jwt_secret
API_URL=process.env.API_URL
\`\`\`

### –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

- **admin** - –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ
- **manager** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –æ—Ç—á–µ—Ç–∞–º–∏  
- **warehouse** - –†–∞–±–æ—Ç–∞ —Å–æ —Å–∫–ª–∞–¥–æ–º
- **operator** - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
- **technician** - –†–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
- **driver** - –õ–æ–≥–∏—Å—Ç–∏–∫–∞

## üì± Telegram Bot

–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç FSM (–∫–æ–Ω–µ—á–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã) –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏:

- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º
- –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
- –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

## üåê API

REST API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: \`process.env.API_URL/api\`

–û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
- \`/api/auth\` - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- \`/api/users\` - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
- \`/api/machines\` - –ê–≤—Ç–æ–º–∞—Ç—ã
- \`/api/tasks\` - –ó–∞–¥–∞—á–∏
- \`/api/inventory\` - –°–∫–ª–∞–¥

## üöÄ –î–µ–ø–ª–æ–π

### Railway

1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ Railway
2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
4. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ: \`railway up\`

### Docker

\`\`\`bash
docker-compose up -d
\`\`\`

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

- –õ–æ–≥–∏: \`logs/app.log\`
- Health check: \`/api/health\`
- –ú–µ—Ç—Ä–∏–∫–∏: \`/api/metrics\`

## ü§ù –£—á–∞—Å—Ç–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

1. –§–æ—Ä–∫–Ω–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
2. –°–æ–∑–¥–∞–π—Ç–µ –≤–µ—Ç–∫—É: \`git checkout -b feature/new-feature\`
3. –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ
4. –°–æ–∑–¥–∞–π—Ç–µ Pull Request

## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å–æ–∑–¥–∞–π—Ç–µ Issue –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.

---
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toISOString()}
`;

        fs.writeFileSync(readmePath, readmeContent);
        console.log('‚úÖ README.md –æ–±–Ω–æ–≤–ª–µ–Ω');
    }

    async commitChanges() {
        console.log('üìù –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
        
        try {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
            execSync('git checkout -b fix/full-ready-deploy', { cwd: this.projectRoot });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            execSync('git add .', { cwd: this.projectRoot });
            
            // –ö–æ–º–º–∏—Ç–∏–º
            const commitMessage = `üîß –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ VHM24

- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${this.fixes.length} –ø—Ä–æ–±–ª–µ–º
- –ù–∞–π–¥–µ–Ω–æ ${this.errors.length} –æ—à–∏–±–æ–∫  
- ${this.warnings.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
- –û—á–∏—â–µ–Ω–æ ${this.cleanedFiles.length} —Ñ–∞–π–ª–æ–≤
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ ${this.missingFeatures.length} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π

–ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway üöÄ`;

            execSync(`git commit -m "${commitMessage}"`, { cwd: this.projectRoot });
            
            console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –≤ –≤–µ—Ç–∫–µ fix/full-ready-deploy');
            console.log('üì§ –ì–æ—Ç–æ–≤–æ –∫ –ø—É—à—É: git push origin fix/full-ready-deploy');
            
        } catch (error) {
            this.warnings.push(`–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${error.message}`);
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git');
        }
    }

    // ============================================================================
    // –£–¢–ò–õ–ò–¢–´
    // ============================================================================

    getAllFiles(dir, extension) {
        const files = [];
        
        const scanDir = (currentDir) => {
            try {
                const items = fs.readdirSync(currentDir);
                
                for (const item of items) {
                    const fullPath = path.join(currentDir, item);
                    const stat = fs.statSync(fullPath);
                    
                    if (stat.isDirectory()) {
                        if (!item.startsWith('.') && item !== 'node_modules') {
                            scanDir(fullPath);
                        }
                    } else if (item.endsWith(extension)) {
                        files.push(fullPath);
                    }
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
            }
        };
        
        scanDir(dir);
        return files;
    }

    // ============================================================================
    // –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
    // ============================================================================

    async run() {
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ VHM24...\n');
            
            // 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            await this.compareWithDocumentation();
            
            // 2. –ê—É–¥–∏—Ç –∫–æ–¥–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            await this.auditCodeAndArchitecture();
            
            // 3. –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
            await this.fixVariables();
            
            // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            await this.checkConnections();
            
            // 5. –û—á–∏—Å—Ç–∫–∞ –æ—Ç –º—É—Å–æ—Ä–∞
            await this.cleanupProject();
            
            // 6. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é
            await this.prepareForDeployment();
            
            // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è
            await this.generateReports();
            
            console.log('\nüéâ –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –ò –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!');
            console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${this.fixes.length}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`);
            console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.warnings.length}`);
            console.log(`üßπ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.cleanedFiles.length}`);
            console.log(`üÜï –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: ${this.missingFeatures.length}`);
            
            console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
            console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ fix_report.md –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞');
            console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env');
            console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run migrate');
            console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: npm run dev');
            console.log('5. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ: railway up');
            
            console.log('\nüöÄ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ –ù–ê RAILWAY!');
            
        } catch (error) {
            console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
            process.exit(1);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–æ—Ä–∞
if (require.main === module) {
    const auditor = new VHM24CompleteAuditor();
    auditor.run();
}

module.exports = VHM24CompleteAuditor;
