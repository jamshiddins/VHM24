const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã VendHub...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
function startProcess(command, args, cwd, name) {
    return new Promise((resolve, reject) => {
        console.log(`üì¶ –ó–∞–ø—É—Å–∫ ${name}...`);
        
        const process = spawn(command, args, {
            cwd: cwd,
            stdio: 'inherit',
            shell: true
        });

        process.on('error', (error) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${name}:`, error);
            reject(error);
        });

        process.on('exit', (code) => {
            if (code === 0) {
                console.log(`‚úÖ ${name} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                resolve();
            } else {
                console.error(`‚ùå ${name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
                reject(new Error(`Process exited with code ${code}`));
            }
        });

        // –î–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        setTimeout(() => {
            console.log(`‚úÖ ${name} –∑–∞–ø—É—â–µ–Ω`);
            resolve();
        }, 3000);
    });
}

async function startSystem() {
    try {
        console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend
        console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend...');
        await startProcess('npm', ['install'], './backend', 'Backend Dependencies');
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π telegram-bot
        console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π telegram-bot...');
        await startProcess('npm', ['install'], './apps/telegram-bot', 'Telegram Bot Dependencies');
        
        console.log('\nüóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
        await startProcess('npx', ['prisma', 'generate'], './backend', 'Prisma Generate');
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
        await startProcess('npx', ['prisma', 'db', 'push'], './backend', 'Database Migration');
        
        console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...');
        
        // –ó–∞–ø—É—Å–∫ backend –≤ —Ñ–æ–Ω–µ
        const backendProcess = spawn('npm', ['start'], {
            cwd: './backend',
            stdio: 'pipe',
            shell: true
        });
        
        backendProcess.stdout.on('data', (data) => {
            console.log(`[Backend] ${data.toString().trim()}`);
        });
        
        backendProcess.stderr.on('data', (data) => {
            console.error(`[Backend Error] ${data.toString().trim()}`);
        });
        
        // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ backend
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // –ó–∞–ø—É—Å–∫ telegram bot
        const botProcess = spawn('npm', ['start'], {
            cwd: './apps/telegram-bot',
            stdio: 'pipe',
            shell: true
        });
        
        botProcess.stdout.on('data', (data) => {
            console.log(`[Bot] ${data.toString().trim()}`);
        });
        
        botProcess.stderr.on('data', (data) => {
            console.error(`[Bot Error] ${data.toString().trim()}`);
        });
        
        console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ VendHub –∑–∞–ø—É—â–µ–Ω–∞!');
        console.log('üìã –°–µ—Ä–≤–∏—Å—ã:');
        console.log('   üîß Backend API: process.env.API_URL');
        console.log('   ü§ñ Telegram Bot: –ê–∫—Ç–∏–≤–µ–Ω');
        console.log('   üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞');
        console.log('\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', () => {
            console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
            backendProcess.kill();
            botProcess.kill();
            process.exit(0);
        });
        
        process.on('SIGTERM', () => {
            console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
            backendProcess.kill();
            botProcess.kill();
            process.exit(0);
        });
        
        // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
        setInterval(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        }, 10000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
startSystem();
