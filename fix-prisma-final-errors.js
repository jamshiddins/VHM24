const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ —Å—Ö–µ–º–µ Prisma...');

const schemaPath = path.join(__dirname, 'backend', 'prisma', 'schema.prisma');

try {
    let schema = fs.readFileSync(schemaPath, 'utf8');
    
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö enum –∏ –º–æ–¥–µ–ª–µ–π...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ enum;
    const missingEnums = `;
enum TaskPriority {
  LOW;
  NORMAL;
  HIGH;
  URGENT;
}

enum MovementType {
  RECEIVE;
  ISSUE;
  TRANSFER;
  RETURN;
  ADJUSTMENT;
}

enum MovementStatus {
  PENDING;
  COMPLETED;
  CANCELLED;
}
`;

    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Movement;
    const movementModel = `;
model Movement {
  id          String        @id @default(cuid());
  type        MovementType;
  status      MovementStatus @default(PENDING);
  quantity    Float;
  notes       String?;
  createdAt   DateTime      @default(now());
  updatedAt   DateTime      @updatedAt;
  // –°–≤—è–∑–∏;
  userId      String;
  user        User          @relation("fields": [userId], "references": [id]);
  machineId   String?;
  machine     Machine?      @relation("fields": [machineId], "references": [id]);
  itemId      String?;
  item        Item?         @relation("fields": [itemId], "references": [id]);
  @@map("movements");
}
`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ enum TaskPriority;
    if (!schema.includes('enum TaskPriority')) {
        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö enum;
        const enumInsertPoint = schema.lastIndexOf('enum ');
        if (enumInsertPoint !== -1) {
            const nextLineAfterEnum = schema.indexOf('\n}', enumInsertPoint) + 2;
            schema = schema.slice(0, nextLineAfterEnum) + '\n' + missingEnums + schema.slice(nextLineAfterEnum);
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö enum, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ generator;
            const generatorEnd = schema.indexOf('}\n\n') + 3;
            schema = schema.slice(0, generatorEnd) + missingEnums + '\n' + schema.slice(generatorEnd);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–æ–¥–µ–ª—å Movement;
    if (!schema.includes('model Movement')) {
        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Movement –≤ –∫–æ–Ω–µ—Ü;
        schema += '\n' + movementModel;
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ –º–æ–¥–µ–ª–∏ Item, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å;
    if (schema.includes('model Item')) {
        if (!schema.includes('movements   Movement[]')) {
            schema = schema.replace(;
                /model Item \{[\s\S]*?\n\}/,;
                (match) => {
                    if (!match.includes('movements   Movement[]')) {
                        return match.replace(/(\n  @@map\("items"\)\n\})/, '\n  movements   Movement[]\n$1');
                    }
                    return match;
                }
            );
        }
    }
    
    console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã...');
    fs.writeFileSync(schemaPath, schema);
    
    console.log('üéâ –í—Å–µ –æ—à–∏–±–∫–∏ –≤ —Å—Ö–µ–º–µ Prisma –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    console.log('üìÅ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: backend/prisma/schema.prisma');
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã:', error.message);
    process.exit(1);
}
