#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);

console.log(
  'üîß –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º backend —Å–µ—Ä–≤–∏—Å–æ–≤ VHM24...\n'
);

// 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
async function installGlobalDependencies() {
  console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');

  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Prisma –≥–ª–æ–±–∞–ª—å–Ω–æ
    await exec('npm install -g prisma @prisma/client');
    console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error.message);
  }
}

// 2. –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ Prisma –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
async function createUnifiedPrismaClient() {
  console.log('\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ Prisma –∫–ª–∏–µ–Ω—Ç–∞...');

  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    const unifiedClientPath = path.join(__dirname, 'packages/prisma-client');
    await fs.mkdir(unifiedClientPath, { recursive: true });

    // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ö–µ–º—É
    const schemaSource = path.join(
      __dirname,
      'packages/database/prisma/schema.prisma'
    );
    const schemaDest = path.join(unifiedClientPath, 'schema.prisma');
    await fs.copyFile(schemaSource, schemaDest);

    // –°–æ–∑–¥–∞–µ–º package.json
    const packageJson = {
      name: '@vhm24/prisma-client',
      version: '1.0.0',
      main: 'index.js',
      scripts: {
        generate: 'prisma generate'
      },
      dependencies: {
        '@prisma/client': '^6.11.1'
      }
    };

    await fs.writeFile(
      path.join(unifiedClientPath, 'package.json'),
      JSON.stringify(packageJson, null, 2)
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    console.log('  üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    await exec('npm install', { cwd: unifiedClientPath });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
    console.log('  üî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞...');
    await exec('npx prisma generate --schema=schema.prisma', {
      cwd: unifiedClientPath
    });

    // –°–æ–∑–¥–∞–µ–º index.js –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const indexContent = `
const { PrismaClient } = require('@prisma/client');

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
const prisma = new PrismaClient({
  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = { PrismaClient, prisma };
`;

    await fs.writeFile(path.join(unifiedClientPath, 'index.js'), indexContent);

    console.log('‚úÖ –ï–¥–∏–Ω—ã–π Prisma –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω');
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
    return false;
  }
}

// 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async function updateServicesToUseUnifiedClient() {
  console.log('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...');

  const services = [
    'gateway',
    'auth',
    'machines',
    'inventory',
    'tasks',
    'routes',
    'warehouse',
    'recipes',
    'notifications',
    'audit',
    'monitoring',
    'backup',
    'data-import'
  ];

  for (const service of services) {
    try {
      const servicePath = path.join(__dirname, 'services', service);
      const packageJsonPath = path.join(servicePath, 'package.json');

      // –ß–∏—Ç–∞–µ–º package.json
      const packageJson = JSON.parse(
        await fs.readFile(packageJsonPath, 'utf8')
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞ –µ–¥–∏–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
      if (!packageJson.dependencies) {
        packageJson.dependencies = {};
      }
      packageJson.dependencies['@vhm24/prisma-client'] =
        'file:../../packages/prisma-client';

      // –£–¥–∞–ª—è–µ–º –ø—Ä—è–º—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç @prisma/client
      delete packageJson.dependencies['@prisma/client'];

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π package.json
      await fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2));

      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω ${service}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${service}:`, error.message);
    }
  }
}

// 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ Prisma –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
async function fixPrismaImports() {
  console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ Prisma...');

  const filesToFix = [
    'packages/shared/middleware/security.js',
    'services/gateway/src/index.js',
    'services/auth/src/index.js',
    'services/auth/src/controllers/authController.js',
    'services/machines/src/index.js',
    'services/inventory/src/index.js',
    'services/tasks/src/index.js',
    'services/routes/src/index.js',
    'services/warehouse/src/index.js',
    'services/recipes/src/index.js',
    'services/notifications/src/index.js',
    'services/audit/src/index.js',
    'services/monitoring/src/index.js'
  ];

  for (const filePath of filesToFix) {
    try {
      const fullPath = path.join(__dirname, filePath);
      let content = await fs.readFile(fullPath, 'utf8');

      // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
      content = content.replace(
        /const\s*{\s*PrismaClient\s*}\s*=\s*require\s*\(\s*['"]@prisma\/client['"]\s*\)/g,
        "const { PrismaClient, prisma } = require('@vhm24/prisma-client')"
      );

      // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ
      content = content.replace(
        /const\s+prisma\s*=\s*new\s+PrismaClient\s*\([^)]*\)/g,
        '// –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π Prisma –∫–ª–∏–µ–Ω—Ç –∏–∑ @vhm24/prisma-client'
      );

      await fs.writeFile(fullPath, content);
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ${path.basename(filePath)}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å ${filePath}:`, error.message);
    }
  }
}

// 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
async function installAllDependencies() {
  console.log('\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');

  const services = [
    'services/gateway',
    'services/auth',
    'services/machines',
    'services/inventory',
    'services/tasks',
    'services/routes',
    'services/warehouse',
    'services/recipes',
    'services/notifications',
    'services/audit',
    'services/monitoring'
  ];

  for (const service of services) {
    try {
      console.log(`  üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è ${path.basename(service)}...`);
      await exec('npm install', { cwd: path.join(__dirname, service) });
      console.log(`  ‚úÖ ${path.basename(service)} –≥–æ—Ç–æ–≤`);
    } catch (error) {
      console.log(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–ª—è ${path.basename(service)}:`, error.message);
    }
  }
}

// 6. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
async function createTestScript() {
  console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...');

  const testScript = `#!/usr/bin/env node

const { prisma } = require('./packages/prisma-client');

async function testConnection() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    await prisma.$connect();
    const result = await prisma.$queryRaw\`SELECT 1 as test\`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', result);
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: 'test_' + Date.now(),
        username: 'test_user',
        role: 'operator',
        isActive: true
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.id);
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.user.delete({ where: { id: testUser.id } });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
    
    await prisma.$disconnect();
    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    await prisma.$disconnect();
    process.exit(1);
  }
}

testConnection();
`;

  await fs.writeFile(
    path.join(__dirname, 'test-prisma-connection.js'),
    testScript
  );
  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...\n');

  try {
    // 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    await installGlobalDependencies();

    // 2. –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π Prisma –∫–ª–∏–µ–Ω—Ç
    const clientCreated = await createUnifiedPrismaClient();

    if (clientCreated) {
      // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
      await updateServicesToUseUnifiedClient();

      // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
      await fixPrismaImports();

      // 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      await installAllDependencies();

      // 6. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
      await createTestScript();
    }

    console.log('\n‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!');
    console.log('\nüìã –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:');
    console.log('1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:');
    console.log('   node test-prisma-connection.js');
    console.log('\n2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:');
    console.log('   node test-all-components.js');
    console.log('\n3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:');
    console.log('   node start-with-railway.js');
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
