/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –µ—ë —Å–≤—è–∑–∏ —Å Telegram-–±–æ—Ç–æ–º –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 */

require('dotenv').config();
const { PrismaClient } = require('@prisma/client');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  let color = colors.white;
  
  switch (type) {
    case 'success':
      color = colors.green;
      break;
    case 'error':
      color = colors.red;
      break;
    case 'warning':
      color = colors.yellow;
      break;
    case 'info':
      color = colors.blue;
      break;
    case 'title':
      color = colors.magenta;
      break;
    default:
      color = colors.white;
  }
  
  console.log(`${color}[${timestamp}] [${type.toUpperCase()}] ${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function testDatabaseConnection() {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...', 'title');
  
  try {
    const prisma = new PrismaClient();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await prisma.$connect();
    log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `;
    
    log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${tables.length}`, 'info');
    
    if (tables.length > 0) {
      log('–°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:', 'info');
      tables.forEach((table, index) => {
        log(`  ${index + 1}. ${table.table_name}`, 'info');
      });
    } else {
      log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏', 'warning');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try {
      const usersCount = await prisma.user.count();
      log(`üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${usersCount}`, 'info');
      
      if (usersCount > 0) {
        const users = await prisma.user.findMany({
          take: 5,
          orderBy: {
            createdAt: 'desc'
          }
        });
        
        log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', 'info');
        users.forEach((user, index) => {
          log(`  ${index + 1}. ID: ${user.id}, Telegram ID: ${user.telegramId}, –†–æ–ª—å: ${user.role}, –°—Ç–∞—Ç—É—Å: ${user.status}`, 'info');
        });
      } else {
        log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'warning');
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`, 'error');
      log('–í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É', 'warning');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–≤—Ç–æ–º–∞—Ç–æ–≤
    try {
      const machinesCount = await prisma.machine.count();
      log(`üè≠ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${machinesCount}`, 'info');
      
      if (machinesCount > 0) {
        const machines = await prisma.machine.findMany({
          take: 5,
          orderBy: {
            createdAt: 'desc'
          }
        });
        
        log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–≤—Ç–æ–º–∞—Ç–æ–≤:', 'info');
        machines.forEach((machine, index) => {
          log(`  ${index + 1}. ID: ${machine.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${machine.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}, –°—Ç–∞—Ç—É—Å: ${machine.status || '–ù–µ —É–∫–∞–∑–∞–Ω'}`, 'info');
        });
      } else {
        log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–æ–≤', 'warning');
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–º–∞—Ç–æ–≤: ${error.message}`, 'error');
      log('–í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É', 'warning');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–¥–∞—á
    try {
      const tasksCount = await prisma.task.count();
      log(`üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${tasksCount}`, 'info');
      
      if (tasksCount > 0) {
        const tasks = await prisma.task.findMany({
          take: 5,
          orderBy: {
            createdAt: 'desc'
          }
        });
        
        log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–¥–∞—á:', 'info');
        tasks.forEach((task, index) => {
          log(`  ${index + 1}. ID: ${task.id}, –¢–∏–ø: ${task.type || '–ù–µ —É–∫–∞–∑–∞–Ω'}, –°—Ç–∞—Ç—É—Å: ${task.status || '–ù–µ —É–∫–∞–∑–∞–Ω'}`, 'info');
        });
      } else {
        log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–¥–∞—á', 'warning');
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á: ${error.message}`, 'error');
      log('–í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É', 'warning');
    }
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await prisma.$disconnect();
    log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', 'success');
    
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL
    if (!process.env.DATABASE_URL) {
      log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'warning');
      log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'warning');
    } else {
      log(`üìù –¢–µ–∫—É—â–∏–π URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${process.env.DATABASE_URL}`, 'info');
    }
    
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram-–±–æ—Ç–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function testTelegramBotDatabaseConnection() {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram-–±–æ—Ç–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...', 'title');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ role-sync.js
    const roleSyncPath = path.join(__dirname, 'apps', 'telegram-bot', 'src', 'utils', 'role-sync.js');
    
    if (fs.existsSync(roleSyncPath)) {
      log('‚úÖ –§–∞–π–ª role-sync.js –Ω–∞–π–¥–µ–Ω', 'success');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
      const roleSyncContent = fs.readFileSync(roleSyncPath, 'utf8');
      
      if (roleSyncContent.includes('PrismaClient') && roleSyncContent.includes('checkUserRole')) {
        log('‚úÖ –§–∞–π–ª role-sync.js —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'success');
      } else {
        log('‚ö†Ô∏è –§–∞–π–ª role-sync.js –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'warning');
      }
    } else {
      log('‚ùå –§–∞–π–ª role-sync.js –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
      log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª role-sync.js –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª–µ–π –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'warning');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ main-menu.scene.js
    const mainMenuScenePath = path.join(__dirname, 'apps', 'telegram-bot', 'src', 'scenes', 'main-menu.scene.js');
    
    if (fs.existsSync(mainMenuScenePath)) {
      log('‚úÖ –§–∞–π–ª main-menu.scene.js –Ω–∞–π–¥–µ–Ω', 'success');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
      const mainMenuSceneContent = fs.readFileSync(mainMenuScenePath, 'utf8');
      
      if (mainMenuSceneContent.includes('role-sync') && mainMenuSceneContent.includes('checkUserRole')) {
        log('‚úÖ –§–∞–π–ª main-menu.scene.js –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ role-sync.js –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'success');
      } else {
        log('‚ö†Ô∏è –§–∞–π–ª main-menu.scene.js –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ role-sync.js –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'warning');
      }
    } else {
      log('‚ùå –§–∞–π–ª main-menu.scene.js –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ index.js
    const indexPath = path.join(__dirname, 'apps', 'telegram-bot', 'src', 'index.js');
    
    if (fs.existsSync(indexPath)) {
      log('‚úÖ –§–∞–π–ª index.js –Ω–∞–π–¥–µ–Ω', 'success');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
      const indexContent = fs.readFileSync(indexPath, 'utf8');
      
      if (indexContent.includes('PrismaClient') || indexContent.includes('prisma')) {
        log('‚úÖ –§–∞–π–ª index.js —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'success');
      } else {
        log('‚ö†Ô∏è –§–∞–π–ª index.js –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'warning');
        log('–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö', 'info');
      }
    } else {
      log('‚ùå –§–∞–π–ª index.js –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
    }
    
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram-–±–æ—Ç–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function testWebInterfaceDatabaseConnection() {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...', 'title');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ index.js –≤ backend
    const backendIndexPath = path.join(__dirname, 'backend', 'src', 'index.js');
    
    if (fs.existsSync(backendIndexPath)) {
      log('‚úÖ –§–∞–π–ª backend/src/index.js –Ω–∞–π–¥–µ–Ω', 'success');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
      const backendIndexContent = fs.readFileSync(backendIndexPath, 'utf8');
      
      if (backendIndexContent.includes('PrismaClient') || backendIndexContent.includes('prisma')) {
        log('‚úÖ –§–∞–π–ª backend/src/index.js —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'success');
      } else {
        log('‚ö†Ô∏è –§–∞–π–ª backend/src/index.js –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'warning');
        log('–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö', 'info');
      }
    } else {
      log('‚ùå –§–∞–π–ª backend/src/index.js –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ users.js
    const usersRoutePath = path.join(__dirname, 'backend', 'src', 'routes', 'users.js');
    
    if (fs.existsSync(usersRoutePath)) {
      log('‚úÖ –§–∞–π–ª backend/src/routes/users.js –Ω–∞–π–¥–µ–Ω', 'success');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
      const usersRouteContent = fs.readFileSync(usersRoutePath, 'utf8');
      
      if (usersRouteContent.includes('PrismaClient') && usersRouteContent.includes('/sync')) {
        log('‚úÖ –§–∞–π–ª backend/src/routes/users.js —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'success');
      } else {
        log('‚ö†Ô∏è –§–∞–π–ª backend/src/routes/users.js –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'warning');
      }
    } else {
      log('‚ùå –§–∞–π–ª backend/src/routes/users.js –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ health.js
    const healthRoutePath = path.join(__dirname, 'backend', 'src', 'routes', 'health.js');
    
    if (fs.existsSync(healthRoutePath)) {
      log('‚úÖ –§–∞–π–ª backend/src/routes/health.js –Ω–∞–π–¥–µ–Ω', 'success');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
      const healthRouteContent = fs.readFileSync(healthRoutePath, 'utf8');
      
      if (healthRouteContent.includes('PrismaClient') && healthRouteContent.includes('$queryRaw')) {
        log('‚úÖ –§–∞–π–ª backend/src/routes/health.js —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'success');
      } else {
        log('‚ö†Ô∏è –§–∞–π–ª backend/src/routes/health.js –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'warning');
      }
    } else {
      log('‚ùå –§–∞–π–ª backend/src/routes/health.js –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API-—Å–µ—Ä–≤–µ—Ä–∞
    const API_PORT = process.env.PORT || 3000;
    const API_URL = process.env.API_BASE_URL || `http://localhost:${API_PORT}`;
    
    try {
      log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API-—Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É ${API_URL}/api/health...`, 'info');
      
      const response = await axios.get(`${API_URL}/api/health`, { timeout: 5000 });
      
      if (response.status === 200) {
        log('‚úÖ API-—Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', 'success');
        
        if (response.data && response.data.database) {
          log(`üìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${response.data.database.status}`, 'info');
          
          if (response.data.database.status === 'OK') {
            log('‚úÖ API-—Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'success');
          } else {
            log(`‚ùå API-—Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${response.data.database.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
          }
        } else {
          log('‚ö†Ô∏è API-—Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'warning');
        }
      } else {
        log(`‚ùå API-—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`, 'error');
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API-—Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, 'error');
      log('–í–æ–∑–º–æ–∂–Ω–æ, API-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'warning');
    }
    
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
async function testDataSynchronization() {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º...', 'title');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ role-sync.js
    const roleSyncPath = path.join(__dirname, 'apps', 'telegram-bot', 'src', 'utils', 'role-sync.js');
    
    if (fs.existsSync(roleSyncPath)) {
      log('‚úÖ –§–∞–π–ª role-sync.js –Ω–∞–π–¥–µ–Ω', 'success');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
      const roleSyncContent = fs.readFileSync(roleSyncPath, 'utf8');
      
      if (roleSyncContent.includes('syncUserWithAPI')) {
        log('‚úÖ –§–∞–π–ª role-sync.js —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é syncUserWithAPI –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'success');
      } else {
        log('‚ö†Ô∏è –§–∞–π–ª role-sync.js –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ syncUserWithAPI –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'warning');
      }
    } else {
      log('‚ùå –§–∞–π–ª role-sync.js –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ users.js
    const usersRoutePath = path.join(__dirname, 'backend', 'src', 'routes', 'users.js');
    
    if (fs.existsSync(usersRoutePath)) {
      log('‚úÖ –§–∞–π–ª backend/src/routes/users.js –Ω–∞–π–¥–µ–Ω', 'success');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
      const usersRouteContent = fs.readFileSync(usersRoutePath, 'utf8');
      
      if (usersRouteContent.includes('/sync')) {
        log('‚úÖ –§–∞–π–ª backend/src/routes/users.js —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä—à—Ä—É—Ç /sync –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'success');
      } else {
        log('‚ö†Ô∏è –§–∞–π–ª backend/src/routes/users.js –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä—à—Ä—É—Ç–∞ /sync –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'warning');
      }
    } else {
      log('‚ùå –§–∞–π–ª backend/src/routes/users.js –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API-—Å–µ—Ä–≤–µ—Ä–∞
    const API_PORT = process.env.PORT || 3000;
    const API_URL = process.env.API_BASE_URL || `http://localhost:${API_PORT}`;
    
    try {
      log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API-—Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É ${API_URL}/api/health...`, 'info');
      
      const response = await axios.get(`${API_URL}/api/health`, { timeout: 5000 });
      
      if (response.status === 200) {
        log('‚úÖ API-—Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', 'success');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ /api/users/sync
        try {
          log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ ${API_URL}/api/users/sync...`, 'info');
          
          // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          const testUser = {
            userId: 'test-' + Date.now(),
            telegramId: 'test-' + Date.now(),
            firstName: 'Test',
            lastName: 'User',
            role: 'ADMIN'
          };
          
          const syncResponse = await axios.post(`${API_URL}/api/users/sync`, testUser, {
            timeout: 5000,
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (syncResponse.status === 200 && syncResponse.data.success) {
            log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç /api/users/sync —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'success');
            log(`üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${JSON.stringify(syncResponse.data)}`, 'info');
          } else {
            log(`‚ùå –ú–∞—Ä—à—Ä—É—Ç /api/users/sync –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${JSON.stringify(syncResponse.data)}`, 'error');
          }
        } catch (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ /api/users/sync: ${error.message}`, 'error');
          log('–í–æ–∑–º–æ–∂–Ω–æ, –º–∞—Ä—à—Ä—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'warning');
        }
      } else {
        log(`‚ùå API-—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`, 'error');
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API-—Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, 'error');
      log('–í–æ–∑–º–æ–∂–Ω–æ, API-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'warning');
    }
    
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  log('=== –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• –ò –ï–Å –°–í–Ø–ó–ò –° TELEGRAM-–ë–û–¢–û–ú –ò –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–û–ú ===', 'title');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const isDatabaseConnected = await testDatabaseConnection();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram-–±–æ—Ç–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const isTelegramBotConnected = await testTelegramBotDatabaseConnection();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const isWebInterfaceConnected = await testWebInterfaceDatabaseConnection();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
  const isDataSynchronized = await testDataSynchronization();
  
  // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  log('=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===', 'title');
  log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${isDatabaseConnected ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`, isDatabaseConnected ? 'success' : 'error');
  log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram-–±–æ—Ç–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${isTelegramBotConnected ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`, isTelegramBotConnected ? 'success' : 'error');
  log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${isWebInterfaceConnected ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`, isWebInterfaceConnected ? 'success' : 'error');
  log(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º: ${isDataSynchronized ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`, isDataSynchronized ? 'success' : 'error');
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—à–∏–±–æ–∫
  if (!isDatabaseConnected || !isTelegramBotConnected || !isWebInterfaceConnected || !isDataSynchronized) {
    log('=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ –û–®–ò–ë–û–ö ===', 'title');
    
    if (!isDatabaseConnected) {
      log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –≤ —Ñ–∞–π–ª–µ .env', 'warning');
      log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞', 'warning');
      log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:', 'warning');
      log('   npx prisma migrate dev', 'info');
    }
    
    if (!isTelegramBotConnected) {
      log('1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª role-sync.js –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ apps/telegram-bot/src/utils/', 'warning');
      log('2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª main-menu.scene.js –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ role-sync.js', 'warning');
      log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ index.js –µ—Å—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'warning');
    }
    
    if (!isWebInterfaceConnected) {
      log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ backend/src/index.js –µ—Å—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'warning');
      log('2. –î–æ–±–∞–≤—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç /sync –≤ —Ñ–∞–π–ª backend/src/routes/users.js', 'warning');
      log('3. –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª backend/src/routes/health.js –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'warning');
    }
    
    if (!isDataSynchronized) {
      log('1. –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é syncUserWithAPI –≤ —Ñ–∞–π–ª role-sync.js', 'warning');
      log('2. –î–æ–±–∞–≤—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç /sync –≤ —Ñ–∞–π–ª backend/src/routes/users.js', 'warning');
      log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω', 'warning');
    }
    
    log('–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', 'info');
    log('node run-vendhub.js', 'info');
  } else {
    log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ VendHub –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞.', 'success');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch(error => {
  log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
  process.exit(1);
});
