const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîß VHM24 –°–ò–°–¢–ï–ú–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n');

const fixes = [];
const errors = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function runCommand(command, description) {
  try {
    console.log(`‚ö° ${description}...`);
    const result = execSync(command, { encoding: 'utf8', stdio: 'pipe' });
    console.log(`‚úÖ ${description} - —É—Å–ø–µ—à–Ω–æ`);
    fixes.push(description);
    return result;
  } catch (error) {
    console.log(`‚ùå ${description} - –æ—à–∏–±–∫–∞: ${error.message}`);
    errors.push({ description, error: error.message });
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
function ensureFileExists(filePath, content, description) {
  try {
    if (!fs.existsSync(filePath)) {
      const dir = path.dirname(filePath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ ${description} - —Å–æ–∑–¥–∞–Ω`);
      fixes.push(description);
    } else {
      console.log(`‚úÖ ${description} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
  } catch (error) {
    console.log(`‚ùå ${description} - –æ—à–∏–±–∫–∞: ${error.message}`);
    errors.push({ description, error: error.message });
  }
}

async function fixAndTestSystem() {
  console.log('1. üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  const directories = [
    'logs',
    'uploads',
    'backups',
    'backend/logs',
    'apps/telegram-bot/logs'
  ];
  
  directories.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
      fixes.push(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
    }
  });
  
  console.log('\n2. üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤
  const envContent = fs.readFileSync('.env', 'utf8');
  if (envContent.includes('redis.railway.internal')) {
    console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Railway internal URLs –≤ .env - —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ');
  }
  
  console.log('\n3. üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è backend
  runCommand('cd backend && npm install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend');
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è telegram-bot
  runCommand('cd apps/telegram-bot && npm install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π telegram-bot');
  
  console.log('\n4. üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
  runCommand('cd backend && npx prisma generate', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞');
  
  console.log('\n5. üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  
  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
  try {
    const { testSystemComponents } = require('./test-system-comprehensive.js');
    const testResults = await testSystemComponents();
    
    console.log('\n6. üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('=' .repeat(50));
    
    if (testResults.overall) {
      console.log('üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!');
    } else {
      console.log('‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ö–†–ò–¢–ò–ß–ù–´–ú–ò –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò');
    }
    
    console.log('\n7. üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    const portChecks = [
      { port: 8000, service: 'Backend API' },
      { port: 6379, service: 'Redis' }
    ];
    
    for (const check of portChecks) {
      try {
        const result = runCommand(`netstat -an | findstr :${check.port}`, `–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ ${check.port} (${check.service})`);
        if (result && result.includes(`${check.port}`)) {
          console.log(`‚úÖ –ü–æ—Ä—Ç ${check.port} (${check.service}) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
        } else {
          console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${check.port} (${check.service}) - —Å–≤–æ–±–æ–¥–µ–Ω`);
        }
      } catch (error) {
        console.log(`‚ùì –ü–æ—Ä—Ç ${check.port} (${check.service}) - —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω`);
      }
    }
    
    console.log('\n8. üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É:');
    console.log('=' .repeat(50));
    
    if (testResults.database && testResults.backend && testResults.telegram) {
      console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£!');
      console.log('\nüí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:');
      console.log('   1. Backend: cd backend && npm start');
      console.log('   2. Telegram Bot: cd apps/telegram-bot && npm start');
      console.log('   3. –ü—Ä–æ–≤–µ—Ä–∫–∞: curl http://localhost:8000/health');
    } else {
      console.log('‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ù–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê');
      console.log('\nüîß –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:');
      
      if (!testResults.database) {
        console.log('   ‚ùå –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      if (!testResults.redis) {
        console.log('   ‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç—å Redis: redis-server');
      }
      if (!testResults.telegram) {
        console.log('   ‚ùå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞');
      }
    }
    
    console.log('\n9. üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç:');
    console.log('=' .repeat(50));
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${fixes.length}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${errors.length}`);
    
    if (fixes.length > 0) {
      console.log('\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
      fixes.forEach((fix, index) => {
        console.log(`   ${index + 1}. ${fix}`);
      });
    }
    
    if (errors.length > 0) {
      console.log('\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:');
      errors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error.description}: ${error.error}`);
      });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
    const report = {
      timestamp: new Date().toISOString(),
      fixes: fixes,
      errors: errors,
      testResults: testResults,
      recommendations: testResults.overall ? 
        '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É' : 
        '–¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
    };
    
    fs.writeFileSync('fix-and-test-report.json', JSON.stringify(report, null, 2));
    console.log('\nüìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: fix-and-test-report.json');
    
    return testResults.overall;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    errors.push({ description: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', error: error.message });
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  fixAndTestSystem()
    .then(success => {
      console.log('\nüéØ –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´');
      console.log('=' .repeat(50));
      if (success) {
        console.log('üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
        console.log('üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
        process.exit(0);
      } else {
        console.log('‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø');
        console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á—ë—Ç –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
      process.exit(1);
    });
}

module.exports = { fixAndTestSystem };
