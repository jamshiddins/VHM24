#!/usr/bin/env node



const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class RailwayDatabaseSetup {
    constructor() {
        this.projectRoot = process.cwd();
        this.railwayKeys = {};
        
        
    }

    async run() {
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Railway CLI
            await this.checkRailwayCLI();
            
            // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            await this.setupRailwayProject();
            
            // 3. –î–æ–±–∞–≤–ª—è–µ–º PostgreSQL
            await this.addPostgreSQL();
            
            // 4. –ü–æ–ª—É—á–∞–µ–º DATABASE_URL
            await this.getDatabaseURL();
            
            // 5. –û–±–Ω–æ–≤–ª—è–µ–º .env
            await this.updateEnvFile();
            
            // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await this.testConnection();
            
            // 7. –î–µ–ø–ª–æ–∏–º –ø—Ä–æ–µ–∫—Ç
            await this.deployProject();
            
            
            
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞:', error.message);
            process.exit(1);
        }
    }

    async checkRailwayCLI() {
        
        
        try {
            const version = execSync('railway --version', { encoding: 'utf8' });
            }`);
        } catch (error) {
            
            
            
            
            
            throw new Error('Railway CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }

    async setupRailwayProject() {
        
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–µ–∫—Ç
            const status = execSync('railway status', { encoding: 'utf8', stdio: 'pipe' });
            
        } catch (error) {
            
            try {
                execSync('railway login', { stdio: 'inherit' });
                execSync('railway init', { stdio: 'inherit' });
                
            } catch (initError) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Railway –ø—Ä–æ–µ–∫—Ç');
            }
        }
    }

    async addPostgreSQL() {
        
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ PostgreSQL
            const services = execSync('railway service list', { encoding: 'utf8', stdio: 'pipe' });
            if (services.includes('postgres')) {
                
                return;
            }
        } catch (error) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        }

        try {
            
            
            // –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è PostgreSQL –≤ Railway
            execSync('railway service create --name postgres', { stdio: 'inherit' });
            
            // –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –î–æ–±–∞–≤–ª—è–µ–º PostgreSQL –ø–ª–∞–≥–∏–Ω
            execSync('railway plugin add postgresql', { stdio: 'inherit' });
            
            
            
            // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
            await new Promise(resolve => setTimeout(resolve, 10000));
            
        } catch (error) {
            
            
            try {
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                execSync('railway plugin add postgresql --service postgres', { stdio: 'inherit' });
                ');
            } catch (altError) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å PostgreSQL');
            }
        }
    }

    async getDatabaseURL() {
        
        
        let attempts = 0;
        const maxAttempts = 5;
        
        while (attempts < maxAttempts) {
            try {
                const dbUrl = execSync('railway variables get DATABASE_URL', { 
                    encoding: 'utf8',
                    stdio: 'pipe'
                });
                
                if (dbUrl && dbUrl.trim() && !dbUrl.includes('not found')) {
                    this.railwayKeys.DATABASE_URL = dbUrl.trim();
                    
                    return;
                }
            } catch (error) {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
            }
            
            attempts++;
            
            await new Promise(resolve => setTimeout(resolve, 5000));
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã
        try {
            
            const allVars = execSync('railway variables', { encoding: 'utf8' });
            
            
            
            // –ò—â–µ–º DATABASE_URL –≤ –≤—ã–≤–æ–¥–µ
            const lines = allVars.split('\n');
            for (const line of lines) {
                if (line.includes('DATABASE_URL')) {
                    const match = line.match(/DATABASE_URL[=\s]+(.+)/);
                    if (match && match[1]) {
                        this.railwayKeys.DATABASE_URL = match[1].trim();
                        
                        return;
                    }
                }
            }
        } catch (error) {
            
        }
        
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å DATABASE_URL');
    }

    async updateEnvFile() {
        
        
        if (!this.railwayKeys.DATABASE_URL) {
            throw new Error('DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env
        let envContent = '';
        if (fs.existsSync('.env')) {
            envContent = fs.readFileSync('.env', 'utf8');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º DATABASE_URL
        if (envContent.includes('DATABASE_URL=')) {
            envContent = envContent.replace(
                /DATABASE_URL="[^"]*"/,
                `DATABASE_URL="${this.railwayKeys.DATABASE_URL}"`
            );
        } else {
            envContent = `DATABASE_URL="${this.railwayKeys.DATABASE_URL}"\n` + envContent;
        }
        
        fs.writeFileSync('.env', envContent);
        
    }

    async testConnection() {
        
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
        const testScript = `
const { PrismaClient } = require('@prisma/client');

async function testConnection() {
    const prisma = new PrismaClient();
    
    try {
        
        await prisma.$connect();
        
        
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        const result = await prisma.$queryRaw\`SELECT version() as version\`;
        
        
        await prisma.$disconnect();
        
        process.exit(0);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
        process.exit(1);
    }
}

testConnection();
`;

        fs.writeFileSync(process.env.API_KEY_339 || 'test-railway-connection.js', testScript);
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤—ã–º DATABASE_URL
            
            execSync('cd backend && npx prisma generate', { stdio: 'inherit' });
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            execSync('node test-railway-connection.js', { stdio: 'inherit' });
            
            
        } catch (error) {
            throw new Error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        }
    }

    async deployProject() {
        
        
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            
            
            const envVars = [
                'NODE_ENV=production',
                'PORT=3000'
            ];
            
            for (const envVar of envVars) {
                try {
                    execSync(`railway variables set "${envVar}"`, { stdio: 'pipe' });
                    [0]}`);
                } catch (error) {
                    
                }
            }
            
            // –î–µ–ø–ª–æ–∏–º
            
            execSync('railway up --detach', { stdio: 'inherit' });
            
            // –ü–æ–ª—É—á–∞–µ–º URL
            try {
                const url = execSync('railway domain', { encoding: 'utf8' });
                }`);
            } catch (error) {
                
            }
            
            
            
        } catch (error) {
            
        }
    }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    const setup = new RailwayDatabaseSetup();
    setup.run();
}

module.exports = RailwayDatabaseSetup;
