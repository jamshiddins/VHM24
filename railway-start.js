const logger = require('@vhm24/shared/logger');

#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
const isRailway = process.env.RAILWAY_ENVIRONMENT || process.env.RAILWAY_STATIC_URL || process.env.RAILWAY_PROJECT_ID;
const isProduction = process.env.NODE_ENV === 'production' || isRailway;

logger.info('üöÄ VHM24 Platform Starting...');
logger.info(`üìç Environment: ${isProduction ? 'Production' : 'Development'}`);
logger.info(`üöÇ Railway: ${isRailway ? 'Yes' : 'No'}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
function startProcess(command, args = [], options = {}) {
  return new Promise((resolve, reject) => {
    logger.info(`üîß Running: ${command} ${args.join(' ')}`);
    
    const child = spawn(command, args, {
      stdio: 'inherit',
      shell: true,
      ...options
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Process exited with code ${code}`));
      }
    });

    child.on('error', reject);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function start() {
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    process.env.PORT = process.env.PORT || '8000';
    process.env.NODE_ENV = process.env.NODE_ENV || (isRailway ? 'production' : 'development');

    if (isRailway) {
      logger.info('üöÇ Starting in Railway mode...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      if (!process.env.DATABASE_URL) {
        throw new Error('DATABASE_URL is required for Railway deployment');
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
      if (fs.existsSync('packages/database/prisma/schema.prisma')) {
        logger.info('üîß Generating Prisma client...');
        try {
          await startProcess('npx', ['prisma', 'generate'], {
            cwd: 'packages/database'
          });
          logger.info('‚úÖ Prisma client generated successfully');
        } catch (error) {
          logger.error('‚ùå Failed to generate Prisma client:', error.message);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ –∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
        }
      }

      // –í Railway –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ Gateway (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å)
      logger.info('üì° Starting Gateway service for Railway...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º dotenv –¥–ª—è Railway
      try {
        require('dotenv').config();
      } catch (error) {
        logger.info('‚ö†Ô∏è  dotenv not available, using environment variables');
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º Gateway
      require('./services/gateway/src/index.js');
      
    } else {
      logger.info('üíª Starting in local development mode...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
      if (!fs.existsSync('.env')) {
        logger.info('‚ö†Ô∏è  .env file not found, using environment variables');
      }
      
      // –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ start.js
      require('./start.js');
    }

  } catch (error) {
    logger.error('‚ùå Failed to start application:', error.message);
    logger.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', () => {
  logger.info('üõë Received SIGTERM, shutting down gracefully...');
  process.exit(0);
});

process.on('SIGINT', () => {
  logger.info('üõë Received SIGINT, shutting down gracefully...');
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  logger.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
start();
