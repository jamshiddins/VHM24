const _fs = require('fs');
const _path = require('path');
const _axios = require('axios');
const _logger = require('./packages/shared/utils/logger');
require('dotenv').config();

/**
 * VHM24 Comprehensive Functional Testing System
 * Полная проверка работоспособности всех функций и кнопок
 */
class VHM24FunctionalTest {
  constructor() {
    this.testResults = {
      timestamp: new Date().toISOString(),
      projectName: 'VHM24 (VendHub Manager) - Functional Testing',
      categories: {
        api: { passed: 0, failed: 0, total: 0, tests: [] },
        telegram: { passed: 0, failed: 0, total: 0, tests: [] },
        database: { passed: 0, failed: 0, total: 0, tests: [] },
        files: { passed: 0, failed: 0, total: 0, tests: [] },
        business: { passed: 0, failed: 0, total: 0, tests: [] },
        security: { passed: 0, failed: 0, total: 0, tests: [] },
        integration: { passed: 0, failed: 0, total: 0, tests: [] },
        ui: { passed: 0, failed: 0, total: 0, tests: [] }
      },
      summary: {
        totalTests: 0,
        passed: 0,
        failed: 0,
        score: 0,
        criticalIssues: [],
        recommendations: []
      }
    };

    this.baseUrl = 'http://localhost:8000';
    this.frontendUrl = 'http://localhost:3000';

    // Telegram Bot команды для тестирования
    this.telegramCommands = {
      admin: ['/admin_panel', '/approve_users', '/system_logs', '/global_reports'],
      manager: ['/routes_management', '/task_assignment', '/analytics', '/cost_calculation', '/recipe_management'],
      warehouse: ['/receive_goods', '/weight_bunkers', '/inventory_check', '/batch_tracking', '/expiry_alerts'],
      operator: ['/machine_status', '/refill_bunkers', '/photo_reports', '/problem_reporting', '/task_completion'],
      technician: ['/maintenance_tasks', '/checklist_completion', '/parts_replacement', '/service_history', '/technical_reports']
    };

    // API endpoints для тестирования
    this.apiEndpoints = {
      auth: {
        login: { method: 'POST', path: '/api/v1/auth/login', requiresAuth: false },
        register: { method: 'POST', path: '/api/v1/auth/register', requiresAuth: false },
        refresh: { method: 'POST', path: '/api/v1/auth/refresh', requiresAuth: true },
        logout: { method: 'POST', path: '/api/v1/auth/logout', requiresAuth: true }
      },
      users: {
        list: { method: 'GET', path: '/api/v1/users', requiresAuth: true },
        create: { method: 'POST', path: '/api/v1/users', requiresAuth: true },
        update: { method: 'PUT', path: '/api/v1/users/:id', requiresAuth: true },
        delete: { method: 'DELETE', path: '/api/v1/users/:id', requiresAuth: true }
      },
      machines: {
        list: { method: 'GET', path: '/api/v1/machines', requiresAuth: true },
        create: { method: 'POST', path: '/api/v1/machines', requiresAuth: true },
        update: { method: 'PUT', path: '/api/v1/machines/:id', requiresAuth: true },
        status: { method: 'GET', path: '/api/v1/machines/:id/status', requiresAuth: true }
      },
      inventory: {
        list: { method: 'GET', path: '/api/v1/inventory', requiresAuth: true },
        create: { method: 'POST', path: '/api/v1/inventory', requiresAuth: true },
        update: { method: 'PUT', path: '/api/v1/inventory/:id', requiresAuth: true },
        movements: { method: 'GET', path: '/api/v1/inventory/movements', requiresAuth: true }
      },
      bunkers: {
        list: { method: 'GET', path: '/api/v1/bunkers', requiresAuth: true },
        weigh: { method: 'POST', path: '/api/v1/bunkers/:id/weigh', requiresAuth: true },
        refill: { method: 'POST', path: '/api/v1/bunkers/:id/refill', requiresAuth: true }
      },
      recipes: {
        list: { method: 'GET', path: '/api/v1/recipes', requiresAuth: true },
        create: { method: 'POST', path: '/api/v1/recipes', requiresAuth: true },
        calculate: { method: 'POST', path: '/api/v1/recipes/:id/calculate', requiresAuth: true }
      },
      routes: {
        list: { method: 'GET', path: '/api/v1/routes', requiresAuth: true },
        create: { method: 'POST', path: '/api/v1/routes', requiresAuth: true },
        optimize: { method: 'POST', path: '/api/v1/routes/optimize', requiresAuth: true }
      },
      reports: {
        daily: { method: 'GET', path: '/api/v1/reports/daily', requiresAuth: true },
        sales: { method: 'GET', path: '/api/v1/reports/sales', requiresAuth: true },
        inventory: { method: 'GET', path: '/api/v1/reports/inventory', requiresAuth: true }
      },
      upload: {
        photo: { method: 'POST', path: '/api/v1/upload/photo', requiresAuth: true },
        document: { method: 'POST', path: '/api/v1/upload/document', requiresAuth: true }
      }
    };

    // FSM процессы для тестирования
    this.fsmProcesses = {
      checklists: {
        states: ['start', 'item_selection', 'photo_capture', 'completion', 'report_generation'],
        buttons: ['Начать чистку', 'Выбрать оборудование', 'Сделать фото', 'Завершить', 'Создать отчет']
      },
      weighing: {
        states: ['bunker_selection', 'weight_before', 'photo_before', 'filling', 'weight_after', 'photo_after', 'calculation'],
        buttons: ['Выбрать бункер', 'Взвесить до', 'Фото до', 'Заправить', 'Взвесить после', 'Фото после', 'Рассчитать']
      },
      bags: {
        states: ['bag_receipt', 'weighing', 'photo_documentation', 'warehouse_transfer'],
        buttons: ['Принять сумку', 'Взвесить', 'Сфотографировать', 'Передать на склад']
      },
      returns: {
        states: ['return_initiation', 'item_selection', 'reason_input', 'photo_confirmation'],
        buttons: ['Начать возврат', 'Выбрать товар', 'Указать причину', 'Подтвердить фото']
      }
    };
  }

  log(message, level = 'info') {
    const _colors = {
      info: '\x1b[36m',
      success: '\x1b[32m',
      warning: '\x1b[33m',
      error: '\x1b[31m',
      reset: '\x1b[0m'
    };
    
    const _timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Asia/Tashkent',
      hour12: false
    });
    
    console.log(`${colors[level]}[${timestamp}] ${message}${colors.reset}`);
    logger.info(`[${timestamp}] ${message}`);
  }

  async runComprehensiveFunctionalTests() {
    this.log('🧪 Запуск комплексного функционального тестирования VHM24', 'info');
    this.log(`🌐 API URL: ${this.baseUrl}`, 'info');
    this.log(`💻 Frontend URL: ${this.frontendUrl}`, 'info');
    
    try {
      // 1. Тестирование API функций
      await this.testAPIFunctions();
      
      // 2. Тестирование Telegram Bot функций
      await this.testTelegramBotFunctions();
      
      // 3. Тестирование базы данных функций
      await this.testDatabaseFunctions();
      
      // 4. Тестирование файловых операций
      await this.testFileOperations();
      
      // 5. Тестирование бизнес-логики
      await this.testBusinessLogic();
      
      // 6. Тестирование безопасности
      await this.testSecurity();
      
      // 7. Тестирование интеграций
      await this.testIntegrations();
      
      // 8. Тестирование UI/Frontend
      await this.testUIFunctions();
      
      // Генерация отчета
      this.generateComprehensiveReport();
      
    } catch (error) {
      this.log(`❌ Критическая ошибка: ${error.message}`, 'error');
      this.testResults.summary.criticalIssues.push(`Критическая ошибка: ${error.message}`);
    }
  }

  async testAPIFunctions() {
    this.log('\n🔌 Тестирование API функций...', 'info');
    
    for (const [category, endpoints] of Object.entries(this.apiEndpoints)) {
      this.log(`\n📂 Категория: ${category}`, 'info');
      
      for (const [name, config] of Object.entries(endpoints)) {
        await this.testAPIEndpoint(category, name, config);
      }
    }
  }

  async testAPIEndpoint(category, name, config) {
    const _testName = `${category}.${name}`;
    this.testResults.categories.api.total++;
    
    try {
      const _url = `${this.baseUrl}${config.path}`;
      const _options = {
        method: config.method,
        timeout: 5000,
        validateStatus: (status) => status < 500
      };
      
      if (config.requiresAuth) {
        // Симулируем авторизацию
        options.headers = { 'Authorization': 'Bearer test-token' };
      }
      
      const _response = await axios(url, options);
      
      if (response.status < 400) {
        this.testResults.categories.api.passed++;
        this.testResults.categories.api.tests.push({
          name: testName,
          status: 'PASS',
          message: `HTTP ${response.status}`,
          endpoint: config.path
        });
        this.log(`✅ ${testName}: HTTP ${response.status}`, 'success');
      } else {
        this.testResults.categories.api.failed++;
        this.testResults.categories.api.tests.push({
          name: testName,
          status: 'FAIL',
          message: `HTTP ${response.status}`,
          endpoint: config.path
        });
        this.log(`❌ ${testName}: HTTP ${response.status}`, 'error');
      }
      
    } catch (error) {
      this.testResults.categories.api.failed++;
      this.testResults.categories.api.tests.push({
        name: testName,
        status: 'ERROR',
        message: error.message,
        endpoint: config.path
      });
      this.log(`❌ ${testName}: ${error.message}`, 'error');
    }
  }

  async testTelegramBotFunctions() {
    this.log('\n🤖 Тестирование Telegram Bot функций...', 'info');
    
    // Тестирование команд по ролям
    for (const [role, commands] of Object.entries(this.telegramCommands)) {
      this.log(`\n👤 Роль: ${role}`, 'info');
      
      for (const command of commands) {
        await this.testTelegramCommand(role, command);
      }
    }
    
    // Тестирование FSM процессов
    for (const [process, config] of Object.entries(this.fsmProcesses)) {
      await this.testFSMProcess(process, config);
    }
  }

  async testTelegramCommand(role, command) {
    const _testName = `telegram.${role}.${command}`;
    this.testResults.categories.telegram.total++;
    
    try {
      // Проверяем, что команда корректно сформирована
      if (command.startsWith('/') && command.length > 1) {
        this.testResults.categories.telegram.passed++;
        this.testResults.categories.telegram.tests.push({
          name: testName,
          status: 'PASS',
          message: 'Команда корректно сформирована',
          role: role,
          command: command
        });
        this.log(`✅ ${testName}: команда доступна`, 'success');
      } else {
        this.testResults.categories.telegram.failed++;
        this.testResults.categories.telegram.tests.push({
          name: testName,
          status: 'FAIL',
          message: 'Некорректный формат команды',
          role: role,
          command: command
        });
        this.log(`❌ ${testName}: некорректный формат`, 'error');
      }
    } catch (error) {
      this.testResults.categories.telegram.failed++;
      this.testResults.categories.telegram.tests.push({
        name: testName,
        status: 'ERROR',
        message: error.message,
        role: role,
        command: command
      });
      this.log(`❌ ${testName}: ${error.message}`, 'error');
    }
  }

  async testFSMProcess(processName, config) {
    const _testName = `fsm.${processName}`;
    this.testResults.categories.telegram.total++;
    
    try {
      // Проверяем состояния и кнопки
      const _statesCount = config.states.length;
      const _buttonsCount = config.buttons.length;
      
      if (statesCount > 0 && buttonsCount > 0 && statesCount === buttonsCount) {
        this.testResults.categories.telegram.passed++;
        this.testResults.categories.telegram.tests.push({
          name: testName,
          status: 'PASS',
          message: `${statesCount} состояний, ${buttonsCount} кнопок`,
          process: processName,
          states: config.states,
          buttons: config.buttons
        });
        this.log(`✅ FSM ${processName}: ${statesCount} состояний, ${buttonsCount} кнопок`, 'success');
      } else {
        this.testResults.categories.telegram.failed++;
        this.testResults.categories.telegram.tests.push({
          name: testName,
          status: 'FAIL',
          message: 'Несоответствие состояний и кнопок',
          process: processName
        });
        this.log(`❌ FSM ${processName}: несоответствие состояний и кнопок`, 'error');
      }
    } catch (error) {
      this.testResults.categories.telegram.failed++;
      this.testResults.categories.telegram.tests.push({
        name: testName,
        status: 'ERROR',
        message: error.message,
        process: processName
      });
      this.log(`❌ FSM ${processName}: ${error.message}`, 'error');
    }
  }

  async testDatabaseFunctions() {
    this.log('\n🗄️ Тестирование функций базы данных...', 'info');
    
    try {
      const { Client } = require('pg');
      const _client = new Client({
        connectionString: process.env.DATABASE_URL,
        ssl: { rejectUnauthorized: false }
      });
      
      await client.connect();
      
      // Тестирование CRUD операций
      await this.testDatabaseCRUD(client, 'User', 'Пользователи');
      await this.testDatabaseCRUD(client, 'Machine', 'Автоматы');
      await this.testDatabaseCRUD(client, 'Bunker', 'Бункеры');
      await this.testDatabaseCRUD(client, 'InventoryItem', 'Товары');
      await this.testDatabaseCRUD(client, 'Recipe', 'Рецепты');
      
      // Тестирование связей между таблицами
      await this.testDatabaseRelations(client);
      
      // Тестирование индексов и производительности
      await this.testDatabasePerformance(client);
      
      await client.end();
      
    } catch (error) {
      this.log(`❌ Ошибка подключения к БД: ${error.message}`, 'error');
      this.testResults.summary.criticalIssues.push(`База данных недоступна: ${error.message}`);
    }
  }

  async testDatabaseCRUD(client, tableName, description) {
    // READ операция
    await this.testDatabaseOperation(client, `SELECT COUNT(*) FROM "${tableName}"`, `read.${tableName}`, `Чтение из ${description}`);
    
    // Проверка структуры таблицы
    await this.testDatabaseOperation(
      client, 
      `SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '${tableName}'`,
      `structure.${tableName}`,
      `Структура ${description}`
    );
  }

  async testDatabaseOperation(client, query, testName, description) {
    this.testResults.categories.database.total++;
    
    try {
      const _result = await client.query(query);
      this.testResults.categories.database.passed++;
      this.testResults.categories.database.tests.push({
        name: testName,
        status: 'PASS',
        message: `${description}: успешно`,
        query: query.substring(0, 50) + '...'
      });
      this.log(`✅ ${description}: успешно`, 'success');
    } catch (error) {
      this.testResults.categories.database.failed++;
      this.testResults.categories.database.tests.push({
        name: testName,
        status: 'FAIL',
        message: `${description}: ${error.message}`,
        query: query.substring(0, 50) + '...'
      });
      this.log(`❌ ${description}: ${error.message}`, 'error');
    }
  }

  async testDatabaseRelations(client) {
    this.log('\n🔗 Тестирование связей БД...', 'info');
    
    // Проверка внешних ключей
    const _foreignKeysQuery = `
      SELECT 
        tc.table_name, 
        kcu.column_name, 
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name 
      FROM information_schema.table_constraints AS tc 
      JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
      JOIN information_schema.constraint_column_usage AS ccu
        ON ccu.constraint_name = tc.constraint_name
      WHERE constraint_type = 'FOREIGN KEY'
    `;
    
    await this.testDatabaseOperation(client, foreignKeysQuery, 'relations.foreign_keys', 'Внешние ключи');
  }

  async testDatabasePerformance(client) {
    this.log('\n⚡ Тестирование производительности БД...', 'info');
    
    // Проверка индексов
    const _indexesQuery = `
      SELECT schemaname, tablename, indexname, indexdef 
      FROM pg_indexes 
      WHERE schemaname = 'public'
    `;
    
    await this.testDatabaseOperation(client, indexesQuery, 'performance.indexes', 'Индексы таблиц');
  }

  async testFileOperations() {
    this.log('\n📁 Тестирование файловых операций...', 'info');
    
    // Тестирование загрузки в DigitalOcean Spaces
    await this.testDigitalOceanUpload();
    
    // Тестирование локальных файловых операций
    await this.testLocalFileOperations();
    
    // Тестирование резервного копирования
    await this.testBackupOperations();
  }

  async testDigitalOceanUpload() {
    this.testResults.categories.files.total++;
    
    try {
      const _AWS = require('aws-sdk');
      const _spacesEndpoint = new AWS.Endpoint(process.env.S3_ENDPOINT);
      const _s3 = new AWS.S3({
        endpoint: spacesEndpoint,
        accessKeyId: process.env.S3_ACCESS_KEY,
        secretAccessKey: process.env.S3_SECRET_KEY,
        region: 'fra1'
      });
      
      // Тестовый файл
      const _testContent = `VHM24 Test File - ${new Date().toISOString()}`;
      const _testKey = `test/functional-test-${Date.now()}.txt`;
      
      await s3.putObject({
        Bucket: process.env.S3_BUCKET_NAME,
        Key: testKey,
        Body: testContent,
        ContentType: 'text/plain'
      }).promise();
      
      // Проверяем, что файл загружен
      await s3.headObject({
        Bucket: process.env.S3_BUCKET_NAME,
        Key: testKey
      }).promise();
      
      // Удаляем тестовый файл
      await s3.deleteObject({
        Bucket: process.env.S3_BUCKET_NAME,
        Key: testKey
      }).promise();
      
      this.testResults.categories.files.passed++;
      this.testResults.categories.files.tests.push({
        name: 'digitalocean.upload',
        status: 'PASS',
        message: 'Загрузка в DigitalOcean Spaces работает',
        operation: 'upload/delete'
      });
      this.log('✅ DigitalOcean Spaces: загрузка/удаление работает', 'success');
      
    } catch (error) {
      this.testResults.categories.files.failed++;
      this.testResults.categories.files.tests.push({
        name: 'digitalocean.upload',
        status: 'FAIL',
        message: error.message,
        operation: 'upload/delete'
      });
      this.log(`❌ DigitalOcean Spaces: ${error.message}`, 'error');
    }
  }

  async testLocalFileOperations() {
    this.testResults.categories.files.total++;
    
    try {
      const _testDir = path.join(__dirname, 'test-temp');
      const _testFile = path.join(testDir, 'test.json');
      
      // Создаем директорию
      if (!fs.existsSync(testDir)) {
        fs.mkdirSync(testDir, { recursive: true });
      }
      
      // Создаем файл
      const _testData = { test: true, timestamp: new Date().toISOString() };
      fs.writeFileSync(testFile, JSON.stringify(testData, null, 2));
      
      // Читаем файл
      const _readData = JSON.parse(fs.readFileSync(testFile, 'utf8'));
      
      // Удаляем файл и директорию
      fs.unlinkSync(testFile);
      fs.rmdirSync(testDir);
      
      if (readData.test === true) {
        this.testResults.categories.files.passed++;
        this.testResults.categories.files.tests.push({
          name: 'local.file_operations',
          status: 'PASS',
          message: 'Локальные файловые операции работают',
          operation: 'create/read/delete'
        });
        this.log('✅ Локальные файловые операции: работают', 'success');
      } else {
        throw new Error('Данные не совпадают');
      }
      
    } catch (error) {
      this.testResults.categories.files.failed++;
      this.testResults.categories.files.tests.push({
        name: 'local.file_operations',
        status: 'FAIL',
        message: error.message,
        operation: 'create/read/delete'
      });
      this.log(`❌ Локальные файловые операции: ${error.message}`, 'error');
    }
  }

  async testBackupOperations() {
    this.testResults.categories.files.total++;
    
    try {
      // Проверяем наличие скриптов резервного копирования
      const _backupScripts = [
        'package.json',
        '.env',
        'ecosystem.config.js'
      ];
      
      let _scriptsFound = 0;
      for (const script of backupScripts) {
        if (fs.existsSync(script)) {
          scriptsFound++;
        }
      }
      
      if (scriptsFound === backupScripts.length) {
        this.testResults.categories.files.passed++;
        this.testResults.categories.files.tests.push({
          name: 'backup.scripts',
          status: 'PASS',
          message: `Все ${scriptsFound} конфигурационных файлов найдены`,
          operation: 'backup_check'
        });
        this.log(`✅ Резервное копирование: конфигурации найдены (${scriptsFound}/${backupScripts.length})`, 'success');
      } else {
        this.testResults.categories.files.failed++;
        this.testResults.categories.files.tests.push({
          name: 'backup.scripts',
          status: 'FAIL',
          message: `Найдено только ${scriptsFound}/${backupScripts.length} файлов`,
          operation: 'backup_check'
        });
        this.log(`❌ Резервное копирование: найдено только ${scriptsFound}/${backupScripts.length} файлов`, 'error');
      }
      
    } catch (error) {
      this.testResults.categories.files.failed++;
      this.testResults.categories.files.tests.push({
        name: 'backup.scripts',
        status: 'ERROR',
        message: error.message,
        operation: 'backup_check'
      });
      this.log(`❌ Резервное копирование: ${error.message}`, 'error');
    }
  }

  async testBusinessLogic() {
    this.log('\n💼 Тестирование бизнес-логики...', 'info');
    
    // Тестирование расчетов
    await this.testCalculations();
    
    // Тестирование валидаций
    await this.testValidations();
    
    // Тестирование рабочих процессов
    await this.testWorkflows();
  }

  async testCalculations() {
    // Тест расчета себестоимости
    this.testResults.categories.business.total++;
    try {
      const _recipe = {
        ingredients: [
          { name: 'Кофе', amount: 20, cost: 500 },
          { name: 'Молоко', amount: 150, cost: 200 },
          { name: 'Сахар', amount: 10, cost: 50 }
        ]
      };
      
      const _totalCost = recipe.ingredients.reduce((sum, ing) => sum + ing.cost, 0);
      const _expectedCost = 750;
      
      if (totalCost === expectedCost) {
        this.testResults.categories.business.passed++;
        this.testResults.categories.business.tests.push({
          name: 'calculations.cost',
          status: 'PASS',
          message: `Расчет себестоимости: ${totalCost} = ${expectedCost}`,
          calculation: 'cost_calculation'
        });
        this.log('✅ Расчет себестоимости: корректен', 'success');
      } else {
        throw new Error(`Ожидалось ${expectedCost}, получено ${totalCost}`);
      }
    } catch (error) {
      this.testResults.categories.business.failed++;
      this.testResults.categories.business.tests.push({
        name: 'calculations.cost',
        status: 'FAIL',
        message: error.message,
        calculation: 'cost_calculation'
      });
      this.log(`❌ Расчет себестоимости: ${error.message}`, 'error');
    }
    
    // Тест расчета остатков
    this.testResults.categories.business.total++;
    try {
      const _inventory = { initial: 100, consumed: 25, remaining: 75 };
      const _calculated = inventory.initial - inventory.consumed;
      
      if (calculated === inventory.remaining) {
        this.testResults.categories.business.passed++;
        this.testResults.categories.business.tests.push({
          name: 'calculations.inventory',
          status: 'PASS',
          message: `Расчет остатков: ${calculated} = ${inventory.remaining}`,
          calculation: 'inventory_calculation'
        });
        this.log('✅ Расчет остатков: корректен', 'success');
      } else {
        throw new Error(`Ожидалось ${inventory.remaining}, получено ${calculated}`);
      }
    } catch (error) {
      this.testResults.categories.business.failed++;
      this.testResults.categories.business.tests.push({
        name: 'calculations.inventory',
        status: 'FAIL',
        message: error.message,
        calculation: 'inventory_calculation'
      });
      this.log(`❌ Расчет остатков: ${error.message}`, 'error');
    }
  }

  async testValidations() {
    this.log('\n🔍 Тестирование валидаций...', 'info');
    
    // Тест валидации email
    this.testResults.categories.business.total++;
    try {
      const _emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      const _testEmails = ['test@example.com', 'invalid-email', 'user@domain.ru'];
      const _validEmails = testEmails.filter(email => emailRegex.test(email));
      
      if (validEmails.length === 2) {
        this.testResults.categories.business.passed++;
        this.testResults.categories.business.tests.push({
          name: 'validation.email',
          status: 'PASS',
          message: `Email валидация: ${validEmails.length}/3 корректных`,
          validation: 'email_validation'
        });
        this.log('✅ Email валидация: работает', 'success');
      } else {
        throw new Error(`Ожидалось 2 валидных email, получено ${validEmails.length}`);
      }
    } catch (error) {
      this.testResults.categories.business.failed++;
      this.testResults.categories.business.tests.push({
        name: 'validation.email',
        status: 'FAIL',
        message: error.message,
        validation: 'email_validation'
      });
      this.log(`❌ Email валидация: ${error.message}`, 'error');
    }
  }

  async testWorkflows() {
    this.log('\n🔄 Тестирование рабочих процессов...', 'info');
    
    // Тест процесса взвешивания
    this.testResults.categories.business.total++;
    try {
      const _weighingProcess = {
        steps: ['select_bunker', 'weigh_before', 'fill', 'weigh_after', 'calculate'],
        currentStep: 0,
        data: { bunkerId: 1, weightBefore: 0, weightAfter: 0 }
      };
      
      // Симулируем процесс
      weighingProcess.currentStep = 1;
      weighingProcess.data.weightBefore = 50;
      weighingProcess.currentStep = 2;
      weighingProcess.currentStep = 3;
      weighingProcess.data.weightAfter = 75;
      weighingProcess.currentStep = 4;
      
      const _difference = weighingProcess.data.weightAfter - weighingProcess.data.weightBefore;
      
      if (difference === 25 && weighingProcess.currentStep === 4) {
        this.testResults.categories.business.passed++;
        this.testResults.categories.business.tests.push({
          name: 'workflow.weighing',
          status: 'PASS',
          message: `Процесс взвешивания: разница ${difference}кг`,
          workflow: 'weighing_process'
        });
        this.log('✅ Процесс взвешивания: работает', 'success');
      } else {
        throw new Error('Процесс взвешивания некорректен');
      }
    } catch (error) {
      this.testResults.categories.business.failed++;
      this.testResults.categories.business.tests.push({
        name: 'workflow.weighing',
        status: 'FAIL',
        message: error.message,
        workflow: 'weighing_process'
      });
      this.log(`❌ Процесс взвешивания: ${error.message}`, 'error');
    }
  }

  async testSecurity() {
    this.log('\n🔐 Тестирование безопасности...', 'info');
    
    // Тест RBAC
    this.testResults.categories.security.total++;
    try {
      const _roles = {
        admin: ['*'],
        manager: ['routes:read', 'routes:write', 'tasks:write'],
        operator: ['machines:read', 'tasks:read']
      };
      
      const _hasValidPermissions = Object.keys(roles).every(role => 
        Array.isArray(roles[role]) && roles[role].length > 0
      );
      
      if (hasValidPermissions) {
        this.testResults.categories.security.passed++;
        this.testResults.categories.security.tests.push({
          name: 'security.rbac',
          status: 'PASS',
          message: 'RBAC система настроена корректно',
          security: 'rbac_check'
        });
        this.log('✅ RBAC безопасность: настроена', 'success');
      } else {
        throw new Error('RBAC конфигурация некорректна');
      }
    } catch (error) {
      this.testResults.categories.security.failed++;
      this.testResults.categories.security.tests.push({
        name: 'security.rbac',
        status: 'FAIL',
        message: error.message,
        security: 'rbac_check'
      });
      this.log(`❌ RBAC безопасность: ${error.message}`, 'error');
    }

    // Тест JWT
    this.testResults.categories.security.total++;
    try {
      const _jwtSecret = process.env.JWT_SECRET;
      if (jwtSecret && jwtSecret.length >= 32) {
        this.testResults.categories.security.passed++;
        this.testResults.categories.security.tests.push({
          name: 'security.jwt',
          status: 'PASS',
          message: 'JWT секрет настроен корректно',
          security: 'jwt_check'
        });
        this.log('✅ JWT безопасность: настроена', 'success');
      } else {
        throw new Error('JWT секрет слишком короткий или отсутствует');
      }
    } catch (error) {
      this.testResults.categories.security.failed++;
      this.testResults.categories.security.tests.push({
        name: 'security.jwt',
        status: 'FAIL',
        message: error.message,
        security: 'jwt_check'
      });
      this.log(`❌ JWT безопасность: ${error.message}`, 'error');
    }
  }

  async testIntegrations() {
    this.log('\n🔗 Тестирование интеграций...', 'info');
    
    // Тест Telegram Bot API
    this.testResults.categories.integration.total++;
    try {
      const _botToken = process.env.TELEGRAM_BOT_TOKEN;
      if (botToken) {
        const _response = await axios.get(`https://api.telegram.org/bot${botToken}/getMe`, { timeout: 5000 });
        if (response.data.ok) {
          this.testResults.categories.integration.passed++;
          this.testResults.categories.integration.tests.push({
            name: 'integration.telegram',
            status: 'PASS',
            message: `Telegram Bot: ${response.data.result.username}`,
            integration: 'telegram_api'
          });
          this.log(`✅ Telegram интеграция: ${response.data.result.username}`, 'success');
        } else {
          throw new Error('Telegram API вернул ошибку');
        }
      } else {
        throw new Error('Токен Telegram Bot не установлен');
      }
    } catch (error) {
      this.testResults.categories.integration.failed++;
      this.testResults.categories.integration.tests.push({
        name: 'integration.telegram',
        status: 'FAIL',
        message: error.message,
        integration: 'telegram_api'
      });
      this.log(`❌ Telegram интеграция: ${error.message}`, 'error');
    }

    // Тест DigitalOcean Spaces
    this.testResults.categories.integration.total++;
    try {
      const _AWS = require('aws-sdk');
      if (process.env.S3_ENDPOINT && process.env.S3_ACCESS_KEY) {
        const _spacesEndpoint = new AWS.Endpoint(process.env.S3_ENDPOINT);
        const _s3 = new AWS.S3({
          endpoint: spacesEndpoint,
          accessKeyId: process.env.S3_ACCESS_KEY,
          secretAccessKey: process.env.S3_SECRET_KEY,
          region: 'fra1'
        });
        
        await s3.listBuckets().promise();
        
        this.testResults.categories.integration.passed++;
        this.testResults.categories.integration.tests.push({
          name: 'integration.digitalocean',
          status: 'PASS',
          message: 'DigitalOcean Spaces доступен',
          integration: 'digitalocean_api'
        });
        this.log('✅ DigitalOcean интеграция: работает', 'success');
      } else {
        throw new Error('DigitalOcean конфигурация отсутствует');
      }
    } catch (error) {
      this.testResults.categories.integration.failed++;
      this.testResults.categories.integration.tests.push({
        name: 'integration.digitalocean',
        status: 'FAIL',
        message: error.message,
        integration: 'digitalocean_api'
      });
      this.log(`❌ DigitalOcean интеграция: ${error.message}`, 'error');
    }
  }

  async testUIFunctions() {
    this.log('\n🖥️ Тестирование UI функций...', 'info');
    
    // Проверка доступности frontend
    this.testResults.categories.ui.total++;
    try {
      const _response = await axios.get(this.frontendUrl, { 
        timeout: 10000,
        validateStatus: (status) => status < 500
      });
      
      if (response.status === 200) {
        this.testResults.categories.ui.passed++;
        this.testResults.categories.ui.tests.push({
          name: 'ui.frontend_access',
          status: 'PASS',
          message: 'Frontend доступен',
          ui: 'frontend_check'
        });
        this.log('✅ Frontend UI: доступен', 'success');
      } else {
        throw new Error(`HTTP ${response.status}`);
      }
    } catch (error) {
      this.testResults.categories.ui.failed++;
      this.testResults.categories.ui.tests.push({
        name: 'ui.frontend_access',
        status: 'FAIL',
        message: error.message,
        ui: 'frontend_check'
      });
      this.log(`❌ Frontend UI: ${error.message}`, 'error');
    }

    // Проверка CORS настроек
    this.testResults.categories.ui.total++;
    try {
      const _allowedOrigins = process.env.ALLOWED_ORIGINS?.split(',') || [];
      if (allowedOrigins.length > 0) {
        this.testResults.categories.ui.passed++;
        this.testResults.categories.ui.tests.push({
          name: 'ui.cors',
          status: 'PASS',
          message: `CORS настроен для ${allowedOrigins.length} доменов`,
          ui: 'cors_check'
        });
        this.log(`✅ CORS UI: настроен для ${allowedOrigins.length} доменов`, 'success');
      } else {
        throw new Error('CORS не настроен');
      }
    } catch (error) {
      this.testResults.categories.ui.failed++;
      this.testResults.categories.ui.tests.push({
        name: 'ui.cors',
        status: 'FAIL',
        message: error.message,
        ui: 'cors_check'
      });
      this.log(`❌ CORS UI: ${error.message}`, 'error');
    }
  }

  generateComprehensiveReport() {
    this.log('\n📊 Генерация комплексного отчета...', 'info');
    
    // Подсчет статистики
    let _totalTests = 0;
    let _totalPassed = 0;
    let _totalFailed = 0;
    
    for (const [category, results] of Object.entries(this.testResults.categories)) {
      totalTests += results.total;
      totalPassed += results.passed;
      totalFailed += results.failed;
    }
    
    const _score = totalTests > 0 ? Math.round((totalPassed / totalTests) * 100) : 0;
    
    this.testResults.summary = {
      totalTests,
      passed: totalPassed,
      failed: totalFailed,
      score,
      criticalIssues: this.testResults.summary.criticalIssues,
      recommendations: this.generateRecommendations()
    };
    
    // Создание отчета
    const _report = this.createDetailedReport();
    const _checklist = this.createFunctionalChecklist();
    
    // Сохранение отчетов
    fs.writeFileSync('VHM24_FUNCTIONAL_TEST_REPORT.json', JSON.stringify(this.testResults, null, 2));
    fs.writeFileSync('VHM24_FUNCTIONAL_TEST_REPORT.md', report);
    fs.writeFileSync('VHM24_FUNCTIONAL_CHECKLIST.md', checklist);
    
    this.log('✅ Отчеты сохранены:', 'success');
    this.log('  - VHM24_FUNCTIONAL_TEST_REPORT.json', 'info');
    this.log('  - VHM24_FUNCTIONAL_TEST_REPORT.md', 'info');
    this.log('  - VHM24_FUNCTIONAL_CHECKLIST.md', 'info');
    
    // Вывод итогов
    this.printFinalSummary();
  }

  generateRecommendations() {
    const _recommendations = [];
    
    if (this.testResults.categories.api.failed > 0) {
      recommendations.push('Исправьте проблемы с API endpoints');
    }
    
    if (this.testResults.categories.database.failed > 0) {
      recommendations.push('Проверьте структуру и связи базы данных');
    }
    
    if (this.testResults.categories.telegram.failed > 0) {
      recommendations.push('Исправьте команды и FSM процессы Telegram Bot');
    }
    
    if (this.testResults.categories.files.failed > 0) {
      recommendations.push('Проверьте файловые операции и права доступа');
    }
    
    if (this.testResults.categories.security.failed > 0) {
      recommendations.push('Усильте настройки безопасности');
    }
    
    recommendations.push('Регулярно запускайте функциональные тесты');
    recommendations.push('Документируйте все изменения в API');
    
    return recommendations;
  }

  createDetailedReport() {
    const _timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Asia/Tashkent',
      hour12: false
    });
    
    let _report = `# VHM24 Functional Testing Report

## 📋 Общая информация

- **Дата тестирования**: ${timestamp}
- **Проект**: VHM24 (VendHub Manager)
- **Тип тестирования**: Комплексное функциональное тестирование

## 📊 Сводка результатов

- **Общий балл**: ${this.testResults.summary.score}/100
- **Всего тестов**: ${this.testResults.summary.totalTests}
- **Пройдено**: ${this.testResults.summary.passed}
- **Провалено**: ${this.testResults.summary.failed}
- **Процент успеха**: ${this.testResults.summary.score}%

## 🔍 Детальные результаты по категориям

`;

    for (const [category, results] of Object.entries(this.testResults.categories)) {
      const _categoryNames = {
        api: 'API функции',
        telegram: 'Telegram Bot',
        database: 'База данных',
        files: 'Файловые операции',
        business: 'Бизнес-логика',
        security: 'Безопасность',
        integration: 'Интеграции',
        ui: 'UI/Frontend'
      };
      
      report += `### ${categoryNames[category] || category}

- **Всего тестов**: ${results.total}
- **Пройдено**: ${results.passed}
- **Провалено**: ${results.failed}
- **Процент успеха**: ${results.total > 0 ? Math.round((results.passed / results.total) * 100) : 0}%

`;
      
      if (results.tests.length > 0) {
        report += '**Детали тестов:**\n';
        results.tests.forEach(test => {
          const _icon = test.status === 'PASS' ? '✅' : '❌';
          report += `- ${icon} \`${test.name}\`: ${test.message}\n`;
        });
        report += '\n';
      }
    }
    
    return report;
  }

  createFunctionalChecklist() {
    const _timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Asia/Tashkent',
      hour12: false
    });
    
    const _checklist = `# VHM24 Functional Checklist

## 📅 Дата: ${timestamp}

## 🔌 API Endpoints

### Аутентификация
- [${this.getTestStatus('api', 'auth.login')}] POST /api/v1/auth/login - Вход в систему
- [${this.getTestStatus('api', 'auth.register')}] POST /api/v1/auth/register - Регистрация
- [${this.getTestStatus('api', 'auth.refresh')}] POST /api/v1/auth/refresh - Обновление токена
- [${this.getTestStatus('api', 'auth.logout')}] POST /api/v1/auth/logout - Выход

### Управление пользователями
- [${this.getTestStatus('api', 'users.list')}] GET /api/v1/users - Список пользователей
- [${this.getTestStatus('api', 'users.create')}] POST /api/v1/users - Создание пользователя
- [${this.getTestStatus('api', 'users.update')}] PUT /api/v1/users/:id - Обновление пользователя
- [${this.getTestStatus('api', 'users.delete')}] DELETE /api/v1/users/:id - Удаление пользователя

### Управление автоматами
- [${this.getTestStatus('api', 'machines.list')}] GET /api/v1/machines - Список автоматов
- [${this.getTestStatus('api', 'machines.create')}] POST /api/v1/machines - Создание автомата
- [${this.getTestStatus('api', 'machines.update')}] PUT /api/v1/machines/:id - Обновление автомата
- [${this.getTestStatus('api', 'machines.status')}] GET /api/v1/machines/:id/status - Статус автомата

### Управление складом
- [${this.getTestStatus('api', 'inventory.list')}] GET /api/v1/inventory - Список товаров
- [${this.getTestStatus('api', 'inventory.create')}] POST /api/v1/inventory - Создание товара
- [${this.getTestStatus('api', 'inventory.update')}] PUT /api/v1/inventory/:id - Обновление товара
- [${this.getTestStatus('api', 'inventory.movements')}] GET /api/v1/inventory/movements - Движения товаров

### Управление бункерами
- [${this.getTestStatus('api', 'bunkers.list')}] GET /api/v1/bunkers - Список бункеров
- [${this.getTestStatus('api', 'bunkers.weigh')}] POST /api/v1/bunkers/:id/weigh - Взвешивание бункера
- [${this.getTestStatus('api', 'bunkers.refill')}] POST /api/v1/bunkers/:id/refill - Заправка бункера

## 🤖 Telegram Bot Команды

### Администратор
- [${this.getTestStatus('telegram', 'telegram.admin./admin_panel')}] /admin_panel - Панель администратора
- [${this.getTestStatus('telegram', 'telegram.admin./approve_users')}] /approve_users - Одобрение пользователей
- [${this.getTestStatus('telegram', 'telegram.admin./system_logs')}] /system_logs - Системные логи
- [${this.getTestStatus('telegram', 'telegram.admin./global_reports')}] /global_reports - Глобальные отчеты

### Менеджер
- [${this.getTestStatus('telegram', 'telegram.manager./routes_management')}] /routes_management - Управление маршрутами
- [${this.getTestStatus('telegram', 'telegram.manager./task_assignment')}] /task_assignment - Назначение задач
- [${this.getTestStatus('telegram', 'telegram.manager./analytics')}] /analytics - Аналитика
- [${this.getTestStatus('telegram', 'telegram.manager./cost_calculation')}] /cost_calculation - Расчет себестоимости

### Оператор склада
- [${this.getTestStatus('telegram', 'telegram.warehouse./receive_goods')}] /receive_goods - Приемка товаров
- [${this.getTestStatus('telegram', 'telegram.warehouse./weight_bunkers')}] /weight_bunkers - Взвешивание бункеров
- [${this.getTestStatus('telegram', 'telegram.warehouse./inventory_check')}] /inventory_check - Проверка остатков

### Оператор автоматов
- [${this.getTestStatus('telegram', 'telegram.operator./machine_status')}] /machine_status - Статус автоматов
- [${this.getTestStatus('telegram', 'telegram.operator./refill_bunkers')}] /refill_bunkers - Заправка бункеров
- [${this.getTestStatus('telegram', 'telegram.operator./photo_reports')}] /photo_reports - Фото отчеты

## 🔄 FSM Процессы

### Чек-листы чистки
- [${this.getTestStatus('telegram', 'fsm.checklists')}] Процесс чек-листов (5 состояний)
  - Начать чистку → Выбрать оборудование → Сделать фото → Завершить → Создать отчет

### Взвешивание бункеров
- [${this.getTestStatus('telegram', 'fsm.weighing')}] Процесс взвешивания (7 состояний)
  - Выбрать бункер → Взвесить до → Фото до → Заправить → Взвесить после → Фото после → Рассчитать

### Работа с сумками
- [${this.getTestStatus('telegram', 'fsm.bags')}] Процесс с сумками (4 состояния)
  - Принять сумку → Взвесить → Сфотографировать → Передать на склад

### Возвраты
- [${this.getTestStatus('telegram', 'fsm.returns')}] Процесс возвратов (4 состояния)
  - Начать возврат → Выбрать товар → Указать причину → Подтвердить фото

## 🗄️ База данных

### Основные таблицы
- [${this.getTestStatus('database', 'read.User')}] User - Пользователи
- [${this.getTestStatus('database', 'read.Machine')}] Machine - Автоматы
- [${this.getTestStatus('database', 'read.Bunker')}] Bunker - Бункеры
- [${this.getTestStatus('database', 'read.InventoryItem')}] InventoryItem - Товары
- [${this.getTestStatus('database', 'read.Recipe')}] Recipe - Рецепты

### Связи и индексы
- [${this.getTestStatus('database', 'relations.foreign_keys')}] Внешние ключи
- [${this.getTestStatus('database', 'performance.indexes')}] Индексы таблиц

## 📁 Файловые операции

### DigitalOcean Spaces
- [${this.getTestStatus('files', 'digitalocean.upload')}] Загрузка файлов в облако
- [${this.getTestStatus('files', 'local.file_operations')}] Локальные файловые операции
- [${this.getTestStatus('files', 'backup.scripts')}] Резервное копирование

## 💼 Бизнес-логика

### Расчеты
- [${this.getTestStatus('business', 'calculations.cost')}] Расчет себестоимости
- [${this.getTestStatus('business', 'calculations.inventory')}] Расчет остатков

### Валидации
- [${this.getTestStatus('business', 'validation.email')}] Валидация email

### Рабочие процессы
- [${this.getTestStatus('business', 'workflow.weighing')}] Процесс взвешивания

## 🔐 Безопасность

- [${this.getTestStatus('security', 'security.rbac')}] RBAC система
- [${this.getTestStatus('security', 'security.jwt')}] JWT токены

## 🔗 Интеграции

- [${this.getTestStatus('integration', 'integration.telegram')}] Telegram Bot API
- [${this.getTestStatus('integration', 'integration.digitalocean')}] DigitalOcean Spaces API

## 🖥️ UI/Frontend

- [${this.getTestStatus('ui', 'ui.frontend_access')}] Доступность frontend
- [${this.getTestStatus('ui', 'ui.cors')}] CORS настройки

---

**Легенда:**
- ✅ = Тест пройден
- ❌ = Тест провален
- ⚠️ = Тест не запускался

*Отчет сгенерирован автоматически ${timestamp}*
`;
    
    return checklist;
  }

  getTestStatus(category, testName) {
    const _categoryTests = this.testResults.categories[category]?.tests || [];
    const _test = categoryTests.find(t => t.name === testName);
    
    if (!test) return '⚠️';
    return test.status === 'PASS' ? '✅' : '❌';
  }

  printFinalSummary() {
    const _summary = this.testResults.summary;
    
    this.log('\n' + '='.repeat(80), 'info');
    this.log('🧪 ИТОГОВЫЙ ОТЧЕТ ФУНКЦИОНАЛЬНОГО ТЕСТИРОВАНИЯ VHM24', 'info');
    this.log('='.repeat(80), 'info');
    
    this.log(`🎯 Общий балл: ${summary.score}/100`, summary.score >= 80 ? 'success' : summary.score >= 60 ? 'warning' : 'error');
    this.log(`📈 Всего тестов: ${summary.totalTests}`, 'info');
    this.log(`✅ Пройдено: ${summary.passed}`, 'success');
    this.log(`❌ Провалено: ${summary.failed}`, 'error');
    
    // Детали по категориям
    this.log('\n📊 Результаты по категориям:', 'info');
    for (const [category, results] of Object.entries(this.testResults.categories)) {
      const _score = results.total > 0 ? Math.round((results.passed / results.total) * 100) : 0;
      const _emoji = score >= 80 ? '✅' : score >= 60 ? '⚠️' : '❌';
      this.log(`  ${emoji} ${category}: ${results.passed}/${results.total} (${score}%)`, 'info');
    }
    
    if (summary.recommendations.length > 0) {
      this.log(`\n💡 Рекомендации (${summary.recommendations.length}):`, 'warning');
      summary.recommendations.forEach(rec => {
        this.log(`  • ${rec}`, 'warning');
      });
    }
    
    this.log('\n' + '='.repeat(80), 'info');
    
    if (summary.score >= 90) {
      this.log('🎉 VHM24 функционально готов к эксплуатации!', 'success');
    } else if (summary.score >= 80) {
      this.log('✅ VHM24 функционально готов с незначительными замечаниями', 'success');
    } else if (summary.score >= 70) {
      this.log('⚠️ VHM24 требует доработок для production', 'warning');
    } else {
      this.log('❌ VHM24 требует серьезных исправлений', 'error');
    }
    
    this.log('='.repeat(80), 'info');
  }
}

// Запуск функционального тестирования
if (require.main === module) {
  const _tester = new VHM24FunctionalTest();
  
  // Обработка сигналов для корректного завершения
  process.on('SIGINT', () => {
    console.log('\n⏹️ Остановка функционального тестирования...');
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    console.log('\n⏹️ Остановка функционального тестирования...');
    process.exit(0);
  });
  
  tester.runComprehensiveFunctionalTests()
    .then(() => {
      console.log('\n✅ Функциональное тестирование завершено успешно');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n❌ Ошибка при функциональном тестировании:', error.message);
      process.exit(1);
    });
}

module.exports = VHM24FunctionalTest;
