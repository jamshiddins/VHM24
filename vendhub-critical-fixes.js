#!/usr/bin/env node;
/**;
 * VendHub Critical Fixes;
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å–∏—Å—Ç–µ–º—ã;
 *;
 * –ê–≤—Ç–æ—Ä: –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –º–æ–±–∏–ª—å–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Å–∏—Å—Ç–µ–º;
 * –î–∞—Ç–∞: 14.07.2025;
 */;
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîß VendHub Critical Fixes');
console.log('=========================');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏;
const colors = {
    "reset": '\x1b[0m',;
    "red": '\x1b[31m',;
    "green": '\x1b[32m',;
    "yellow": '\x1b[33m',;
    "blue": '\x1b[34m',;
    "magenta": '\x1b[35m',;
    "cyan": '\x1b[36m';
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function executeCommand(command, description) {
    try {
        log(`\nüìã ${description}`, 'cyan');
        log(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${command}`, 'blue');
        const result = execSync(command, { "encoding": 'utf8', "stdio": 'pipe' });
        log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${description}`, 'green');
        return { "success": true, "output": result };
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞: ${description}`, 'red');
        log(`–î–µ—Ç–∞–ª–∏: ${error.message}`, 'yellow');
        return { "success": false, "error": error.message };
    }
}

// 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ package.json —Ñ–∞–π–ª–æ–≤;
function fixPackageJsonFiles() {
    log('\nüîß 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï PACKAGE.JSON –§–ê–ô–õ–û–í', 'magenta');
    
    // –ö–æ—Ä–Ω–µ–≤–æ–π package.json;
    const rootPackageJson = {
        "name": "vendhub-system",;
        "version": "1.0.0",;
        "description": "VendHub - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏",;
        "main": "index.js",;
        "scripts": {
            "start": "node backend/src/index.js",;
            "dev": "concurrently \"npm run "dev":backend\" \"npm run "dev":bot\"",;
            ""dev":backend": "cd backend && npm run dev",;
            ""dev":bot": "cd apps/telegram-bot && npm run dev",;
            "build": "npm run "build":backend && npm run "build":bot",;
            ""build":backend": "cd backend && npm run build",;
            ""build":bot": "cd apps/telegram-bot && npm run build",;
            "test": "npm run "test":backend",;
            ""test":backend": "cd backend && npm test",;
            "lint": "npm run "lint":backend && npm run "lint":bot",;
            ""lint":backend": "cd backend && npm run lint",;
            ""lint":bot": "cd apps/telegram-bot && npm run lint",;
            ""install":all": "npm install && cd backend && npm install && cd ../apps/telegram-bot && npm install",;
            "check": "node vendhub-complete-system-check.js",;
            "fix": "node vendhub-critical-fixes.js";
        },;
        "keywords": ["vending", "telegram-bot", "inventory", "management"],;
        "author": "VendHub Team",;
        "license": "MIT",;
        "devDependencies": {
            "concurrently": "^8.2.2";
        }
    };
    
    // Backend package.json;
    const backendPackageJson = {
        "name": "vendhub-backend",;
        "version": "1.0.0",;
        "description": "VendHub Backend API",;
        "main": "src/index.js",;
        "scripts": {
            "start": "node src/index.js",;
            "dev": "nodemon src/index.js",;
            "build": "echo 'Build completed'",;
            "test": "jest",;
            "lint": "eslint src/",;
            ""lint":fix": "eslint src/ --fix",;
            ""db":generate": "prisma generate",;
            ""db":push": "prisma db push",;
            ""db":migrate": "prisma migrate dev",;
            ""db":studio": "prisma studio";
        },;
        "dependencies": {
            "@aws-sdk/client-s3": "^3.600.0",;
            "@prisma/client": "^5.15.0",;
            "bcryptjs": "^2.4.3",;
            "cors": "^2.8.5",;
            "dotenv": "^16.4.5",;
            "express": "^4.19.2",;
            "express-rate-limit": "^7.3.1",;
            "helmet": "^7.1.0",;
            "joi": "^17.13.3",;
            "jsonwebtoken": "^9.0.2",;
            "multer": "^1.4.5-lts.1",;
            "redis": "^4.6.14",;
            "winston": "^3.13.0",;
            "xlsx": "^0.18.5";
        },;
        "devDependencies": {
            "eslint": "^8.57.0",;
            "jest": "^29.7.0",;
            "nodemon": "^3.1.4",;
            "prisma": "^5.15.0",;
            "supertest": "^7.0.0";
        }
    };
    
    // Telegram bot package.json;
    const botPackageJson = {
        "name": "vendhub-telegram-bot",;
        "version": "1.0.0",;
        "description": "VendHub Telegram Bot",;
        "main": "src/index.js",;
        "scripts": {
            "start": "node src/index.js",;
            "dev": "nodemon src/index.js",;
            "build": "echo 'Build completed'",;
            "test": "jest",;
            "lint": "eslint src/",;
            ""lint":fix": "eslint src/ --fix";
        },;
        "dependencies": {
            "axios": "^1.7.2",;
            "dotenv": "^16.4.5",;
            "node-telegram-bot-api": "^0.66.0",;
            "redis": "^4.6.14";
        },;
        "devDependencies": {
            "eslint": "^8.57.0",;
            "jest": "^29.7.0",;
            "nodemon": "^3.1.4";
        }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã;
    try {
        fs.writeFileSync('package.json', JSON.stringify(rootPackageJson, null, 2));
        log('‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π package.json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω', 'green');
        
        fs.writeFileSync('backend/package.json', JSON.stringify(backendPackageJson, null, 2));
        log('‚úÖ Backend package.json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω', 'green');
        
        fs.writeFileSync('apps/telegram-bot/package.json', JSON.stringify(botPackageJson, null, 2));
        log('‚úÖ Telegram bot package.json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω', 'green');
        
        return true;
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ package."json": ${error.message}`, 'red');
        return false;
    }
}

// 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤;
function createConfigFiles() {
    log('\nüîß 2. –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–• –§–ê–ô–õ–û–í', 'magenta');
    
    // .eslintrc.js;
    const eslintConfig = `module.exports = {
  
    "env": {,
  "node": true,;
        "es2021": true,;
        "jest": true;
    
},;
    "extends": [;
        '"eslint":recommended';
    ],;
    "parserOptions": {,
  "ecmaVersion": 12,;
        "sourceType": 'module';
    },;
    "rules": {
        'no-unused-vars': 'warn',;
        'no-console': 'off',;
        'indent': ['error', 4],;
        'quotes': ['error', 'single'],;
        'semi': ['error', 'always'];
    }
};`;
    
    // jest.config.js;
    const jestConfig = `module.exports = {
  
    "testEnvironment": 'node',;
    "collectCoverageFrom": [;
        'src/**/*.js',;
        '!src/**/*.test.js';
    ],;
    "testMatch": [;
        '**/__tests__/**/*.js',;
        '**/?(*.)+(spec|test).js';
    ],;
    "setupFilesAfterEnv": ['<rootDir>/jest.setup.js'];

};`;
    
    // jest.setup.js;
    const jestSetup = `// Jest setup file;
process.env.NODE_ENV = 'test';
process.env.JWT_SECRET = 'test-secret';
process.env.DATABASE_URL = '"postgresql"://"test":test@"localhost":5432/test';`;
    
    // .gitignore;
    const gitignore = `# Dependencies;
node_modules/;
npm-debug.log*;
yarn-debug.log*;
yarn-error.log*;
# Environment variables;
.env;
.env.local;
.env.development;
.env.test;
.env.production;
# Logs;
logs/;
*.log;
# Runtime data;
pids/;
*.pid;
*.seed;
*.pid.lock;
# Coverage directory used by tools like istanbul;
coverage/;
# Build outputs;
dist/;
build/;
# IDE files;
.vscode/;
.idea/;
*.swp;
*.swo;
# OS generated files;
.DS_Store;
.DS_Store?;
._*;
.Spotlight-V100;
.Trashes;
ehthumbs.db;
Thumbs.db;
# Prisma;
prisma/migrations/;
# Uploads;
uploads/;
temp/;
# Railway;
.railway/`;
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç;
        if (!fs.existsSync('.eslintrc.js')) {
            fs.writeFileSync('.eslintrc.js', eslintConfig);
            log('‚úÖ .eslintrc.js —Å–æ–∑–¥–∞–Ω', 'green');
        }
        
        if (!fs.existsSync('jest.config.js')) {
            fs.writeFileSync('jest.config.js', jestConfig);
            log('‚úÖ jest.config.js —Å–æ–∑–¥–∞–Ω', 'green');
        }
        
        if (!fs.existsSync('jest.setup.js')) {
            fs.writeFileSync('jest.setup.js', jestSetup);
            log('‚úÖ jest.setup.js —Å–æ–∑–¥–∞–Ω', 'green');
        }
        
        if (!fs.existsSync('.gitignore')) {
            fs.writeFileSync('.gitignore', gitignore);
            log('‚úÖ .gitignore —Å–æ–∑–¥–∞–Ω', 'green');
        }
        
        return true;
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${error.message}`, 'red');
        return false;
    }
}

// 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ backend;
function fixBackendFiles() {
    log('\nüîß 3. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï BACKEND –§–ê–ô–õ–û–í', 'magenta');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã;
    const backendIndex = `const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 8000;

// Middleware;
app.use(helmet());
app.use(cors({
    "origin": process.env.CORS_ORIGIN || '*',;
    "credentials": true;
}));

app.use(express.json({ "limit": '10mb' }));
app.use(express.urlencoded({ "extended": true, "limit": '10mb' }));

// Rate limiting;
const limiter = rateLimit({
    "windowMs": 15 * 60 * 1000, // 15 minutes;
    "max": 100 // limit each IP to 100 requests per windowMs;
});
app.use('/api/', limiter);

// Routes;
app.use('/api/auth', require('./routes/auth'));
app.use('/api/users', require('./routes/users'));
app.use('/api/machines', require('./routes/machines'));
app.use('/api/inventory', require('./routes/inventory'));
app.use('/api/tasks', require('./routes/tasks'));
app.use('/api/warehouse', require('./routes/warehouse'));
app.use('/api/telegram', require('./routes/telegram'));

// Health check;
app.get('/health', (req, res) => {
    res.json({ "status": 'OK', "timestamp": new Date().toISOString() });
});

// Error handling;
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ "error": 'Something went wrong!' });
});

// 404 handler;
app.use('*', (req, res) => {
    res.status(404).json({ "error": 'Route not found' });
});

app.listen(PORT, () => {
    console.log(\`üöÄ VendHub Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É \${PORT}\`);
});

module.exports = app;`;
    
    try {
        if (!fs.existsSync('backend/src/index.js') || fs.readFileSync('backend/src/index.js', 'utf8').length < 100) {
            fs.writeFileSync('backend/src/index.js', backendIndex);
            log('‚úÖ backend/src/index.js –∏—Å–ø—Ä–∞–≤–ª–µ–Ω', 'green');
        }
        
        return true;
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ backend —Ñ–∞–π–ª–æ–≤: ${error.message}`, 'red');
        return false;
    }
}

// 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–∞;
function fixTelegramBot() {
    log('\nüîß 4. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TELEGRAM –ë–û–¢–ê', 'magenta');
    
    const botIndex = `const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const apiUrl = process.env.API_BASE_URL || '"http"://"localhost":8000/api';

if (!token) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

const bot = new TelegramBot(token, { "polling": true });

console.log('ü§ñ VendHub Telegram Bot –∑–∞–ø—É—â–µ–Ω');

// –ö–æ–º–∞–Ω–¥–∞ /start;
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = \`;
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VendHub!;
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏.;
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:;
/help - –ü–æ–º–æ—â—å;
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã;
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å;
    \`;
    
    bot.sendMessage(chatId, welcomeMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ /help;
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = \`;
üìö –°–ø—Ä–∞–≤–∫–∞ VendHub;
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:;
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É;
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å;
/profile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.;
    \`;
    
    bot.sendMessage(chatId, helpMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ /status;
bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
        const response = await axios.get(\`\${apiUrl}/health\`);
        bot.sendMessage(chatId, '‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    } catch (error) {
        bot.sendMessage(chatId, '‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫;
bot.on('polling_error', (error) => {
    console.error('Polling "error":', error);
});

process.on('SIGINT', () => {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});`;
    
    try {
        if (!fs.existsSync('apps/telegram-bot/src/index.js') || fs.readFileSync('apps/telegram-bot/src/index.js', 'utf8').length < 100) {
            fs.writeFileSync('apps/telegram-bot/src/index.js', botIndex);
            log('‚úÖ apps/telegram-bot/src/index.js –∏—Å–ø—Ä–∞–≤–ª–µ–Ω', 'green');
        }
        
        return true;
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ Telegram –±–æ—Ç–∞: ${error.message}`, 'red');
        return false;
    }
}

// 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π;
function installDependencies() {
    log('\nüîß 5. –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô', 'magenta');
    
    const commands = [;
        { "cmd": 'npm install', "desc": '–ö–æ—Ä–Ω–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏' },;
        { "cmd": 'cd backend && npm install', "desc": 'Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏' },;
        { "cmd": 'cd apps/telegram-bot && npm install', "desc": 'Telegram bot –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏' }
    ];
    
    let allSuccess = true;
    
    commands.forEach(({ cmd, desc }) => {
        const result = executeCommand(cmd, desc);
        if (!result.success) {
            allSuccess = false;
        }
    });
    
    return allSuccess;
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Prisma;
function fixPrismaSetup() {
    log('\nüîß 6. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï PRISMA –ù–ê–°–¢–†–û–ï–ö', 'magenta');
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞;
    const generateResult = executeCommand(;
        'cd backend && npx prisma generate',;
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞';
    );
    
    if (!generateResult.success) {
        return false;
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö;
    const pushResult = executeCommand(;
        'cd backend && npx prisma db push',;
        '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
    );
    
    return pushResult.success;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è;
async function main() {
    log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º VendHub...', 'cyan');
    
    const fixes = [;
        { "name": 'Package.json —Ñ–∞–π–ª—ã', "func": fixPackageJsonFiles },;
        { "name": '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã', "func": createConfigFiles },;
        { "name": 'Backend —Ñ–∞–π–ª—ã', "func": fixBackendFiles },;
        { "name": 'Telegram –±–æ—Ç', "func": fixTelegramBot },;
        { "name": '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', "func": installDependencies },;
        { "name": 'Prisma –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', "func": fixPrismaSetup }
    ];
    
    const results = {};
    
    for (const fix of fixes) {
        try {
            results[fix.name] = fix.func();
        } catch (error) {
            log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ${fix.name}: ${error.message}`, 'red');
            results[fix.name] = false;
        }
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç;
    log('\nüìä –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô', 'magenta');
    log('====================', 'magenta');
    
    const successful = Object.values(results).filter(r => r).length;
    const total = Object.keys(results).length;
    
    Object.entries(results).forEach(([name, success]) => {
        log(`${success ? '‚úÖ' : '‚ùå'} ${name}`, success ? 'green' : 'red');
    });
    
    log(`\nüìà –£—Å–ø–µ—à–Ω–æ: ${successful}/${total} (${Math.round((successful/total)*100)}%)`, 'cyan');
    
    if (successful === total) {
        log('\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!', 'green');
        log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: npm run check', 'green');
    } else {
        log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞', 'yellow');
    }
}

// –ó–∞–ø—É—Å–∫;
if (require.main === module) {
    main().catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = {
  
    fixPackageJsonFiles,;
    createConfigFiles,;
    fixBackendFiles,;
    fixTelegramBot,;
    installDependencies,;
    fixPrismaSetup;

};
]]]]]]]