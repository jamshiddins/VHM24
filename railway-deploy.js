const logger = require('@vhm24/shared/logger');

#!/usr/bin/env node

/**
 * VHM24 Railway Deployment Script
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è Railway
 */

const path = require('path');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try {
  require('dotenv').config();
} catch (error) {
  logger.info('‚ö†Ô∏è  dotenv not available, using environment variables');
}

logger.info('üöÇ VHM24 Railway Deployment Starting...');
logger.info(`üìç Environment: ${process.env.NODE_ENV || 'production'}`);
logger.info(`üîå Port: ${process.env.PORT || 8000}`);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.NODE_ENV = process.env.NODE_ENV || 'production';
process.env.PORT = process.env.PORT || '8000';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const requiredEnvVars = ['DATABASE_URL'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  logger.error('‚ùå Missing required environment variables:', missingVars.join(', '));
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
async function startService(serviceName, servicePath, port) {
  try {
    logger.info(`üöÄ Starting ${serviceName} service on port ${port}...`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
    process.env[`${serviceName.toUpperCase()}_PORT`] = port;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    require(servicePath);
    
    logger.info(`‚úÖ ${serviceName} service started successfully`);
    return true;
  } catch (error) {
    logger.error(`‚ùå Failed to start ${serviceName} service:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function deployToRailway() {
  try {
    logger.info('üîß Initializing Railway deployment...');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (fs.existsSync('packages/database/prisma/schema.prisma')) {
      logger.info('üîß Checking Prisma client...');
      try {
        const { getAuthClient } = require('./packages/database');
        await getAuthClient().$connect();
        logger.info('‚úÖ Prisma client is ready');
      } catch (error) {
        logger.info('‚ö†Ô∏è  Prisma client needs generation, this is normal on first deploy');
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    const services = [
      { name: 'Auth', path: './services/auth/src/index.js', port: 3001 },
      { name: 'Machines', path: './services/machines/src/index.js', port: 3002 },
      { name: 'Inventory', path: './services/inventory/src/index.js', port: 3003 },
      { name: 'Tasks', path: './services/tasks/src/index.js', port: 3004 },
      { name: 'Bunkers', path: './services/bunkers/src/index.js', port: 3005 },
      { name: 'Notifications', path: './services/notifications/src/index.js', port: 3006 }
    ];

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ —Ñ–æ–Ω–µ
    for (const service of services) {
      if (fs.existsSync(service.path)) {
        setTimeout(() => {
          startService(service.name, service.path, service.port);
        }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
      } else {
        logger.info(`‚ö†Ô∏è  Service ${service.name} not found at ${service.path}`);
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º Telegram Bot –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å
    if (process.env.TELEGRAM_BOT_TOKEN && fs.existsSync('./services/telegram-bot/src/index.js')) {
      setTimeout(() => {
        logger.info('ü§ñ Starting Telegram Bot...');
        require('./services/telegram-bot/src/index.js');
      }, 2000);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º Gateway –ø–æ—Å–ª–µ–¥–Ω–∏–º (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å)
    setTimeout(() => {
      logger.info('üì° Starting Gateway service (main)...');
      require('./services/gateway/src/index.js');
    }, 3000);

    logger.info('üéâ All services initialization started!');
    
  } catch (error) {
    logger.error('‚ùå Railway deployment failed:', error.message);
    logger.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGTERM', () => {
  logger.info('üõë Received SIGTERM, shutting down...');
  process.exit(0);
});

process.on('SIGINT', () => {
  logger.info('üõë Received SIGINT, shutting down...');
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  logger.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Unhandled Rejection:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
deployToRailway();
