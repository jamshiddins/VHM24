#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ Telegram-–±–æ—Ç–∞
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π: npm run setup:webhook
 */

require('dotenv').config();
const axios = require('axios');
const readline = require('readline');

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  let color = colors.white;
  
  switch (type) {
    case 'success':
      color = colors.green;
      break;
    case 'error':
      color = colors.red;
      break;
    case 'warning':
      color = colors.yellow;
      break;
    case 'info':
      color = colors.blue;
      break;
    case 'title':
      color = colors.magenta;
      break;
    default:
      color = colors.white;
  }
  
  console.log(`${color}[${timestamp}] [${type.toUpperCase()}] ${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
async function setupWebhook() {
  log('=== –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–ë–•–£–ö–ê TELEGRAM-–ë–û–¢–ê ===', 'title');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
    let webhookUrl = process.env.WEBHOOK_URL;
    const railwayPublicUrl = process.env.RAILWAY_PUBLIC_URL;
    
    if (!telegramBotToken) {
      log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN', 'error');
      
      // –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await new Promise((resolve) => {
        rl.question('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞: ', (answer) => {
          if (answer.trim()) {
            process.env.TELEGRAM_BOT_TOKEN = answer.trim();
            log(`‚úÖ –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${answer.trim()}`, 'success');
          } else {
            log('‚ùå –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω', 'error');
            process.exit(1);
          }
          
          resolve();
        });
      });
    }
    
    if (!webhookUrl) {
      log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL', 'error');
      
      if (railwayPublicUrl) {
        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –≤–µ–±—Ö—É–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ RAILWAY_PUBLIC_URL
        webhookUrl = `${railwayPublicUrl}/api/telegram/webhook`;
        log(`‚ÑπÔ∏è URL –≤–µ–±—Ö—É–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ RAILWAY_PUBLIC_URL: ${webhookUrl}`, 'info');
      } else {
        // –ó–∞–ø—Ä–æ—Å URL –≤–µ–±—Ö—É–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await new Promise((resolve) => {
          rl.question('–í–≤–µ–¥–∏—Ç–µ URL –≤–µ–±—Ö—É–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://your-app.up.railway.app/api/telegram/webhook): ', (answer) => {
            if (answer.trim()) {
              webhookUrl = answer.trim();
              log(`‚úÖ URL –≤–µ–±—Ö—É–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`, 'success');
            } else {
              log('‚ùå URL –≤–µ–±—Ö—É–∫–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω', 'error');
              process.exit(1);
            }
            
            resolve();
          });
        });
      }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...', 'info');
    
    try {
      const botInfoResponse = await axios.get(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getMe`);
      
      if (botInfoResponse.data.ok) {
        const botInfo = botInfoResponse.data.result;
        log(`‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: ${botInfo.first_name} (@${botInfo.username})`, 'success');
      } else {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: ${botInfoResponse.data.description}`, 'error');
        process.exit(1);
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: ${error.message}`, 'error');
      
      if (error.response) {
        log(`üìù –°—Ç–∞—Ç—É—Å: ${error.response.status}`, 'error');
        log(`üìù –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`, 'error');
      }
      
      process.exit(1);
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    log(`üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ URL: ${webhookUrl}`, 'info');
    
    try {
      const setWebhookResponse = await axios.get(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/setWebhook?url=${encodeURIComponent(webhookUrl)}`);
      
      if (setWebhookResponse.data.ok) {
        log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${setWebhookResponse.data.description}`, 'success');
      } else {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞: ${setWebhookResponse.data.description}`, 'error');
        process.exit(1);
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞: ${error.message}`, 'error');
      
      if (error.response) {
        log(`üìù –°—Ç–∞—Ç—É—Å: ${error.response.status}`, 'error');
        log(`üìù –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`, 'error');
      }
      
      process.exit(1);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –≤–µ–±—Ö—É–∫–µ
    log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –≤–µ–±—Ö—É–∫–µ...', 'info');
    
    try {
      const webhookInfoResponse = await axios.get(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getWebhookInfo`);
      
      if (webhookInfoResponse.data.ok) {
        const webhookInfo = webhookInfoResponse.data.result;
        
        log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ:', 'info');
        log(`üìå URL: ${webhookInfo.url}`, 'info');
        log(`üìå –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookInfo.pending_update_count}`, 'info');
        log(`üìå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhookInfo.last_error_message || '–ù–µ—Ç'}`, 'info');
        log(`üìå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${webhookInfo.max_connections}`, 'info');
        log(`üìå IP-–∞–¥—Ä–µ—Å: ${webhookInfo.ip_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}`, 'info');
        
        if (webhookInfo.url !== webhookUrl) {
          log(`‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞ (${webhookInfo.url}) –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ (${webhookUrl})`, 'warning');
        }
        
        if (webhookInfo.pending_update_count > 0) {
          log(`‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookInfo.pending_update_count}`, 'warning');
        }
        
        if (webhookInfo.last_error_message) {
          log(`‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: ${webhookInfo.last_error_message}`, 'warning');
        }
      } else {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ: ${webhookInfoResponse.data.description}`, 'error');
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ: ${error.message}`, 'error');
      
      if (error.response) {
        log(`üìù –°—Ç–∞—Ç—É—Å: ${error.response.status}`, 'error');
        log(`üìù –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`, 'error');
      }
    }
    
    // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    log('=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===', 'title');
    log('‚úÖ –í–µ–±—Ö—É–∫ Telegram-–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'success');
    log(`üìå URL –≤–µ–±—Ö—É–∫–∞: ${webhookUrl}`, 'success');
    log('üìå –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', 'success');
    
    rl.close();
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    rl.close();
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
setupWebhook().catch(error => {
  log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
  rl.close();
  process.exit(1);
});
