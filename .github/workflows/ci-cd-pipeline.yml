name: VHM24 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: vhm24

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: vhm24_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18.x, 20.x]
        component: [backend, telegram-bot, websocket-server]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json

    - name: Install dependencies
      run: |
        cd ${{ matrix.component }}
        npm ci

    - name: Run linting
      run: |
        cd ${{ matrix.component }}
        npm run lint

    - name: Run type checking
      run: |
        cd ${{ matrix.component }}
        npm run type-check || true

    - name: Setup test environment
      run: |
        cd ${{ matrix.component }}
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:test_password@localhost:5432/vhm24_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test

    - name: Run database migrations (backend only)
      if: matrix.component == 'backend'
      run: |
        cd backend
        npx prisma migrate deploy
        npx prisma generate

    - name: Run tests
      run: |
        cd ${{ matrix.component }}
        npm test -- --coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.component }}/coverage/lcov.info
        flags: ${{ matrix.component }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit
      run: |
        for dir in backend telegram-bot websocket-server mobile-app; do
          echo "Auditing $dir..."
          cd $dir
          npm audit --audit-level moderate
          cd ..
        done

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      with:
        args: --all-projects --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run SAST with CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Run CodeQL analysis
      uses: github/codeql-action/analyze@v2

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        component: [backend, telegram-bot, websocket-server, dashboard]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        file: ./${{ matrix.component }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  mobile-build:
    name: Build Mobile App
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: mobile-app/package-lock.json

    - name: Setup Expo CLI
      run: npm install -g @expo/cli

    - name: Install dependencies
      run: |
        cd mobile-app
        npm ci

    - name: Build for Android
      run: |
        cd mobile-app
        expo build:android --type apk

    - name: Build for iOS
      if: github.ref == 'refs/heads/main'
      run: |
        cd mobile-app
        expo build:ios

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mobile-builds
        path: mobile-app/dist/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name vhm24-staging-cluster

    - name: Deploy to staging
      run: |
        envsubst < k8s/staging/kustomization.yaml | kubectl apply -k -
        kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ github.repository }}/backend:develop
        kubectl set image deployment/websocket websocket=${{ env.REGISTRY }}/${{ github.repository }}/websocket-server:develop
        kubectl set image deployment/telegram-bot telegram-bot=${{ env.REGISTRY }}/${{ github.repository }}/telegram-bot:develop
        
        # Wait for rollout
        kubectl rollout status deployment/backend
        kubectl rollout status deployment/websocket
        kubectl rollout status deployment/telegram-bot

    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Test API endpoints
        API_URL=$(kubectl get service backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        curl -f http://$API_URL/health || exit 1
        
        # Test WebSocket
        WS_URL=$(kubectl get service websocket -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        curl -f http://$WS_URL/health || exit 1

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: "Staging deployment ${{ job.status }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name vhm24-production-cluster

    - name: Create database backup
      run: |
        kubectl create job --from=cronjob/postgres-backup backup-$(date +%Y%m%d-%H%M%S)

    - name: Deploy to production
      run: |
        # Apply blue-green deployment
        envsubst < k8s/production/kustomization.yaml | kubectl apply -k -
        
        # Update images
        kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ github.repository }}/backend:latest
        kubectl set image deployment/websocket websocket=${{ env.REGISTRY }}/${{ github.repository }}/websocket-server:latest
        kubectl set image deployment/telegram-bot telegram-bot=${{ env.REGISTRY }}/${{ github.repository }}/telegram-bot:latest
        kubectl set image deployment/dashboard dashboard=${{ env.REGISTRY }}/${{ github.repository }}/dashboard:latest
        
        # Wait for rollout
        kubectl rollout status deployment/backend --timeout=600s
        kubectl rollout status deployment/websocket --timeout=600s
        kubectl rollout status deployment/telegram-bot --timeout=600s
        kubectl rollout status deployment/dashboard --timeout=600s

    - name: Run production health checks
      run: |
        # Wait for services to stabilize
        sleep 120
        
        # Comprehensive health checks
        ./scripts/production-health-check.sh

    - name: Update monitoring dashboards
      run: |
        # Update Grafana dashboards
        curl -X POST -H "Content-Type: application/json" \
          -d @monitoring/grafana/dashboards/production-dashboard.json \
          ${{ secrets.GRAFANA_API_URL }}/api/dashboards/db

    - name: Notify successful deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "âœ… Production deployment successful! Version: ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## VHM24 Release v${{ github.run_number }}
          
          ### Changes
          ${{ github.event.head_commit.message }}
          
          ### Deployment Info
          - **Commit**: ${{ github.sha }}
          - **Deployed at**: ${{ github.event.head_commit.timestamp }}
          - **Environment**: Production
          
          ### Services Updated
          - Backend API
          - WebSocket Server
          - Telegram Bot
          - Web Dashboard
          
          ### Monitoring
          - [Grafana Dashboard](https://grafana.vhm24.com)
          - [Prometheus Metrics](https://prometheus.vhm24.com)
          - [Application Logs](https://kibana.vhm24.com)

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run load tests
      run: |
        cd tests/performance
        k6 run --out cloud api-load-test.js
        k6 run --out cloud websocket-load-test.js

    - name: Generate performance report
      run: |
        cd tests/performance
        node generate-report.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: tests/performance/reports/

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
    - name: Cleanup old Docker images
      run: |
        # Remove images older than 7 days
        docker image prune -af --filter "until=168h"

    - name: Cleanup staging environment
      if: github.ref == 'refs/heads/main'
      run: |
        # Scale down staging to save costs
        kubectl scale deployment --all --replicas=0 -n staging

    - name: Update deployment metrics
      run: |
        # Send deployment metrics to monitoring
        curl -X POST ${{ secrets.METRICS_ENDPOINT }} \
          -H "Content-Type: application/json" \
          -d '{
            "deployment": {
              "version": "${{ github.sha }}",
              "environment": "${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "success": true
            }
          }'
