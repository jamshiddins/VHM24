name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Проверка кода и тестирование
  test:
    name: Тестирование и проверка кода
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vhm24_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout код
      uses: actions/checkout@v4

    - name: Установка Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Установка зависимостей
      run: |
        npm ci
        cd backend && npm ci

    - name: Проверка переменных окружения
      run: |
        cp .env.example .env
        node check-env.js
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vhm24_test
        JWT_SECRET: test-jwt-secret-key-for-ci-cd-pipeline
        NODE_ENV: test
        REDIS_URL: redis://localhost:6379

    - name: Линтинг кода
      run: npm run lint:check

    - name: Проверка форматирования
      run: |
        npm run format
        git diff --exit-code

    - name: Генерация Prisma клиента
      run: |
        cd backend
        npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vhm24_test

    - name: Миграция базы данных
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vhm24_test

    - name: Запуск тестов
      run: npm run test:coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vhm24_test
        JWT_SECRET: test-jwt-secret-key-for-ci-cd-pipeline
        NODE_ENV: test
        REDIS_URL: redis://localhost:6379

    - name: Загрузка отчета о покрытии
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Сохранение артефактов тестов
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results*.json

  # Сборка приложения
  build:
    name: Сборка приложения
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout код
      uses: actions/checkout@v4

    - name: Установка Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Установка зависимостей
      run: |
        npm ci
        cd backend && npm ci

    - name: Сборка frontend
      run: npm run build

    - name: Сохранение артефактов сборки
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          apps/web-dashboard/dist/
          apps/web-dashboard/.next/

  # Проверка безопасности
  security:
    name: Проверка безопасности
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout код
      uses: actions/checkout@v4

    - name: Установка Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Аудит безопасности npm
      run: |
        npm audit --audit-level moderate
        cd backend && npm audit --audit-level moderate

    - name: Проверка уязвимостей с помощью Snyk
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Деплой на staging (только для develop ветки)
  deploy-staging:
    name: Деплой на Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout код
      uses: actions/checkout@v4

    - name: Деплой на Railway (Staging)
      run: |
        echo "Деплой на staging окружение"
        # Здесь будет команда для деплоя на Railway staging
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}

  # Деплой на production (только для main ветки)
  deploy-production:
    name: Деплой на Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout код
      uses: actions/checkout@v4

    - name: Скачивание артефактов сборки
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts

    - name: Деплой на Railway (Production)
      run: |
        echo "Деплой на production окружение"
        # Здесь будет команда для деплоя на Railway production
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}

    - name: Уведомление об успешном деплое
      if: success()
      run: |
        echo "✅ Деплой на production завершен успешно"
        # Здесь можно добавить отправку уведомлений в Slack/Telegram

    - name: Уведомление об ошибке деплоя
      if: failure()
      run: |
        echo "❌ Ошибка при деплое на production"
        # Здесь можно добавить отправку уведомлений об ошибке

  # Мониторинг после деплоя
  post-deploy-check:
    name: Проверка после деплоя
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Health check
      run: |
        echo "Проверка работоспособности приложения"
        # curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

    - name: Smoke tests
      run: |
        echo "Запуск smoke тестов"
        # Здесь можно добавить базовые проверки API
