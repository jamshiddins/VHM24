#!/usr/bin/env node

/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–µ–ª–∫–∏—Ö –æ—à–∏–±–æ–∫ ESLint
 */

const fs = require('fs');

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ no-unused-vars –≤ —Ä–æ—É—Ç–∞—Ö
const routesToFix = [
  'backend/src/routes/expenses.js',
  'backend/src/routes/incassations.js', 
  'backend/src/routes/reconciliations.js',
  'backend/src/routes/revenues.js',
  'backend/src/routes/syrups.js',
  'backend/src/routes/water.js'
];

console.log('üîß –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–µ–ª–∫–∏—Ö –æ—à–∏–±–æ–∫...\n');

routesToFix.forEach(routePath => {
  if (fs.existsSync(routePath)) {
    let content = fs.readFileSync(routePath, 'utf8');
    
    // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é id –Ω–∞ _id –≤ delete —Ä–æ—É—Ç–∞—Ö
    content = content.replace(
      /router\.delete\('\/:id', async \(req, res\) => \{\s*try \{\s*const \{ id \} = req\.params;/g,
      `router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;`
    );
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å id
    content = content.replace(
      /message: '[^']+' —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'/g,
      "message: `–û–±—ä–µ–∫—Ç —Å ID ${id} —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`"
    );
    
    fs.writeFileSync(routePath, content, 'utf8');
    console.log('‚úÖ ' + routePath);
  }
});

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ no-unreachable –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö  
const servicesToFix = [
  'backend/src/services/bag.service.js',
  'backend/src/services/expense.service.js',
  'backend/src/services/incassation.service.js',
  'backend/src/services/reconciliation.service.js', 
  'backend/src/services/revenue.service.js',
  'backend/src/services/syrupBottle.service.js',
  'backend/src/services/waterBottle.service.js'
];

servicesToFix.forEach(servicePath => {
  if (fs.existsSync(servicePath)) {
    let content = fs.readFileSync(servicePath, 'utf8');
    
    // –£–±–∏—Ä–∞–µ–º return –ø–æ—Å–ª–µ throw
    content = content.replace(
      /throw new Error\([^)]+\);\s*return/g,
      'throw new Error'
    );
    
    fs.writeFileSync(servicePath, content, 'utf8');
    console.log('‚úÖ ' + servicePath);
  }
});

console.log('\nüéâ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
