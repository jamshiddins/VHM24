const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VendHub Schema...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const files = [
  'packages/database/prisma/schema-vendhub.prisma',
  'VENDHUB_ARCHITECTURE.md',
  'VENDHUB_API_SPEC.md',
  'VENDHUB_TELEGRAM_BOT_SPEC.md',
  'VENDHUB_MIGRATION_PLAN.md',
  'VENDHUB_PROJECT_SUMMARY.md'
];

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
let allFilesExist = true;
files.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) allFilesExist = false;
});

if (!allFilesExist) {
  console.error('\n‚ùå –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã!');
  process.exit(1);
}

console.log('\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n');

// –ö–æ–ø–∏—Ä—É–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
const schemaContent = fs.readFileSync('packages/database/prisma/schema-vendhub.prisma', 'utf8');
const testSchemaPath = 'packages/database/prisma/schema-test.prisma';
fs.writeFileSync(testSchemaPath, schemaContent);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ö–µ–º—ã
console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Prisma —Å—Ö–µ–º—ã...');
try {
  execSync(`cd packages/database && npx prisma validate --schema=./prisma/schema-test.prisma`, {
    stdio: 'pipe'
  });
  console.log('‚úÖ –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞!\n');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã:', error.message);
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–∏
  try {
    execSync(`cd packages/database && npx prisma format --schema=./prisma/schema-test.prisma`, {
      stdio: 'pipe'
    });
  } catch (formatError) {
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', formatError.stdout?.toString() || formatError.stderr?.toString());
  }
}

// –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã
console.log('üìä –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
const schemaLines = schemaContent.split('\n');
const models = schemaLines.filter(line => line.startsWith('model ')).map(line => line.split(' ')[1]);
const enums = schemaLines.filter(line => line.startsWith('enum ')).map(line => line.split(' ')[1]);

console.log(`  ‚Ä¢ –ú–æ–¥–µ–ª–µ–π: ${models.length}`);
console.log(`  ‚Ä¢ Enums: ${enums.length}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
const requiredModels = [
  'User', 'Machine', 'Bunker', 'BunkerOperation', 'Syrup', 'WaterBottle',
  'SparePart', 'Supplier', 'Batch', 'Recipe', 'Transaction', 'Revenue'
];

console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:');
requiredModels.forEach(model => {
  const exists = models.includes(model);
  console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${model}`);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π
console.log('\nüîó –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π:');
const relations = schemaLines.filter(line => line.includes('@relation')).length;
console.log(`  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π: ${relations}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
const indexes = schemaLines.filter(line => line.includes('@@index')).length;
console.log(`  ‚Ä¢ –ò–Ω–¥–µ–∫—Å–æ–≤: ${indexes}`);

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
console.log('\nüìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:');
files.slice(1).forEach(file => {
  const content = fs.readFileSync(file, 'utf8');
  const lines = content.split('\n').length;
  const words = content.split(/\s+/).length;
  console.log(`  ‚Ä¢ ${path.basename(file)}: ${lines} —Å—Ç—Ä–æ–∫, ~${Math.round(words/250)} —Å—Ç—Ä–∞–Ω–∏—Ü`);
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
console.log('\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API...');
const apiExample = `
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VendHub API

const VendHubAPI = require('./vendhub-api');
const api = new VendHubAPI('https://api.vendhub.uz');

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
await api.auth.login({
  phoneNumber: '+998901234567',
  code: '1234'
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
const machines = await api.machines.list({
  status: 'ACTIVE',
  groupName: '–¶–µ–Ω—Ç—Ä'
});

// –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–Ω–∫–µ—Ä–∞
const bunkerOperation = await api.bunkers.fill({
  bunkerCode: 'SET-005-1CO',
  emptyWeight: 450,
  fullWeight: 1450,
  batchCode: 'PARTY-2024-COFF-10',
  photos: ['photo1.jpg', 'photo2.jpg']
});

// –°–±–æ—Ä –≤—ã—Ä—É—á–∫–∏
const revenue = await api.revenue.collect({
  machineCode: 'VM-015-TASH-WEST',
  cashAmount: 45000,
  qrAmount: 125000, // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  photos: ['z-report.jpg']
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
const report = await api.reports.getPnL({
  period: 'month',
  groupBy: 'machine'
});

console.log('–ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü:', report.summary.netProfit);
`;

fs.writeFileSync('vendhub-api-example.js', apiExample);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª vendhub-api-example.js');

// –ü—Ä–∏–º–µ—Ä Telegram –±–æ—Ç–∞
const botExample = `
// –ü—Ä–∏–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π Telegram –±–æ—Ç–∞

const { Telegraf, Scenes } = require('telegraf');
const LocalSession = require('telegraf-session-local');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–Ω–∫–µ—Ä–∞
const fillBunkerScene = new Scenes.WizardScene(
  'FILL_BUNKER',
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –±—É–Ω–∫–µ—Ä–∞
  async (ctx) => {
    await ctx.reply('üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –±—É–Ω–∫–µ—Ä –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞', {
      reply_markup: {
        inline_keyboard: [
          [{text: 'SET-005-1CO (–ö–æ—Ñ–µ)', callback_data: 'bunker:SET-005-1CO'}],
          [{text: 'SET-005-2CR (–°–ª–∏–≤–∫–∏)', callback_data: 'bunker:SET-005-2CR'}],
          [{text: 'üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR', callback_data: 'scan_qr'}]
        ]
      }
    });
    return ctx.wizard.next();
  },
  
  // –®–∞–≥ 2: –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ
  async (ctx) => {
    ctx.wizard.state.bunkerCode = ctx.callbackQuery?.data.split(':')[1];
    await ctx.reply('‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—É—Å—Ç–æ–≥–æ –±—É–Ω–∫–µ—Ä–∞ (–≥):');
    return ctx.wizard.next();
  },
  
  // –®–∞–≥ 3: –í—ã–±–æ—Ä –ø–∞—Ä—Ç–∏–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
  async (ctx) => {
    ctx.wizard.state.emptyWeight = parseInt(ctx.message.text);
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏
  }
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);
const stage = new Scenes.Stage([fillBunkerScene]);

bot.use(new LocalSession().middleware());
bot.use(stage.middleware());

bot.command('fill_bunker', (ctx) => ctx.scene.enter('FILL_BUNKER'));

bot.launch();
`;

fs.writeFileSync('vendhub-bot-example.js', botExample);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª vendhub-bot-example.js');

// –û—á–∏—Å—Ç–∫–∞
console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
if (fs.existsSync(testSchemaPath)) {
  fs.unlinkSync(testSchemaPath);
}

console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
console.log('\nüìã –†–µ–∑—é–º–µ:');
console.log('  ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ 6 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
console.log('  ‚Ä¢ –°—Ö–µ–º–∞ –ë–î —Å–æ–¥–µ—Ä–∂–∏—Ç 35+ —Ç–∞–±–ª–∏—Ü');
console.log('  ‚Ä¢ API —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Å 50+ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏');
console.log('  ‚Ä¢ Telegram –±–æ—Ç —Å FSM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π');
console.log('  ‚Ä¢ –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ 20 –Ω–µ–¥–µ–ª—å');
console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ VendHub –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏!');
