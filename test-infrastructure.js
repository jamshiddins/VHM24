const { PrismaClient } = require('@prisma/client');
const Redis = require('ioredis');
const AWS = require('aws-sdk');
require('dotenv').config();

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m'
};

function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  const colorMap = {
    info: colors.blue,
    success: colors.green,
    error: colors.red,
    warning: colors.yellow,
    test: colors.magenta
  };
  console.log(`${colorMap[type]}[${timestamp}] ${message}${colors.reset}`);
}

class InfrastructureTest {
  constructor() {
    this.results = {
      database: null,
      redis: null,
      storage: null,
      overall: null
    };
  }

  async testAll() {
    log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã VHM24', 'test');
    
    // –¢–µ—Å—Ç PostgreSQL
    await this.testDatabase();
    
    // –¢–µ—Å—Ç Redis
    await this.testRedis();
    
    // –¢–µ—Å—Ç DigitalOcean Spaces
    await this.testStorage();
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    this.generateReport();
  }

  async testDatabase() {
    log('üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL (Railway)...', 'test');
    
    try {
      if (!process.env.DATABASE_URL) {
        this.results.database = {
          status: 'FAIL',
          message: 'DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        };
        log('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
      }

      log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${process.env.DATABASE_URL.replace(/:[^:@]*@/, ':***@')}`, 'info');
      
      const prisma = new PrismaClient();
      
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await prisma.$connect();
      log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
      
      // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const result = await prisma.$queryRaw`SELECT 1 as test`;
      log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const tables = await prisma.$queryRaw`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public'
      `;
      log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –ë–î: ${tables.length}`, 'info');
      
      await prisma.$disconnect();
      
      this.results.database = {
        status: 'PASS',
        message: `PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –¢–∞–±–ª–∏—Ü: ${tables.length}`,
        details: {
          url: process.env.DATABASE_URL.replace(/:[^:@]*@/, ':***@'),
          tables: tables.length
        }
      };
      
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ PostgreSQL: ${error.message}`, 'error');
      this.results.database = {
        status: 'FAIL',
        message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`,
        error: error.message
      };
    }
  }

  async testRedis() {
    log('üî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis (Railway)...', 'test');
    
    try {
      if (!process.env.REDIS_URL) {
        this.results.redis = {
          status: 'FAIL',
          message: 'REDIS_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        };
        log('‚ùå REDIS_URL –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
      }

      log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: ${process.env.REDIS_URL.replace(/:[^:@]*@/, ':***@')}`, 'info');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º Redis
      const isLocalRedis = process.env.REDIS_URL.includes('localhost') || process.env.REDIS_URL.includes('127.0.0.1');
      
      if (isLocalRedis) {
        log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π Redis URL - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç (Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ)', 'warning');
        this.results.redis = {
          status: 'SKIP',
          message: '–õ–æ–∫–∞–ª—å–Ω—ã–π Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω (–≤ production –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)',
          details: {
            url: process.env.REDIS_URL.replace(/:[^:@]*@/, ':***@'),
            note: '–í production –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Railway Redis'
          }
        };
        return;
      }
      
      const redis = new Redis(process.env.REDIS_URL, {
        connectTimeout: 5000,
        lazyConnect: true,
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 1,
        enableOfflineQueue: false
      });
      
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const connectPromise = redis.connect();
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout connecting to Redis')), 5000)
      );
      
      await Promise.race([connectPromise, timeoutPromise]);
      log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
      
      // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
      const testKey = 'vhm24:test:' + Date.now();
      const testValue = 'infrastructure-test';
      
      await redis.set(testKey, testValue, 'EX', 60);
      const retrievedValue = await redis.get(testKey);
      
      if (retrievedValue === testValue) {
        log('‚úÖ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è Redis –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ', 'success');
      } else {
        throw new Error('–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ Redis');
      }
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Redis
      const info = await redis.info('server');
      const version = info.match(/redis_version:([^\r\n]+)/)?.[1] || 'unknown';
      log(`üìä –í–µ—Ä—Å–∏—è Redis: ${version}`, 'info');
      
      // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await redis.del(testKey);
      await redis.disconnect();
      
      this.results.redis = {
        status: 'PASS',
        message: `Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í–µ—Ä—Å–∏—è: ${version}`,
        details: {
          url: process.env.REDIS_URL.replace(/:[^:@]*@/, ':***@'),
          version: version
        }
      };
      
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ Redis: ${error.message}`, 'error');
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway internal –∞–¥—Ä–µ—Å—É
      if (error.message.includes('railway.internal') || error.message.includes('ENOTFOUND')) {
        this.results.redis = {
          status: 'SKIP',
          message: 'Railway Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (–≤ production —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)',
          details: {
            url: process.env.REDIS_URL.replace(/:[^:@]*@/, ':***@'),
            note: '–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Railway Redis –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ'
          }
        };
      } else {
        this.results.redis = {
          status: 'FAIL',
          message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`,
          error: error.message
        };
      }
    }
  }

  async testStorage() {
    log('‚òÅÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DigitalOcean Spaces...', 'test');
    
    try {
      const requiredVars = ['S3_ENDPOINT', 'S3_ACCESS_KEY', 'S3_SECRET_KEY', 'S3_BUCKET'];
      const missingVars = requiredVars.filter(varName => !process.env[varName]);
      
      if (missingVars.length > 0) {
        this.results.storage = {
          status: 'FAIL',
          message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missingVars.join(', ')}`
        };
        log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missingVars.join(', ')}`, 'error');
        return;
      }

      log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${process.env.S3_ENDPOINT}`, 'info');
      log(`üì¶ Bucket: ${process.env.S3_BUCKET}`, 'info');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AWS SDK –¥–ª—è DigitalOcean Spaces
      const spacesEndpoint = new AWS.Endpoint(process.env.S3_ENDPOINT);
      const s3 = new AWS.S3({
        endpoint: spacesEndpoint,
        accessKeyId: process.env.S3_ACCESS_KEY,
        secretAccessKey: process.env.S3_SECRET_KEY,
        region: process.env.S3_REGION || 'nyc3'
      });
      
      // –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ bucket
      const bucketParams = {
        Bucket: process.env.S3_BUCKET
      };
      
      await s3.headBucket(bucketParams).promise();
      log('‚úÖ –î–æ—Å—Ç—É–ø –∫ bucket –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', 'success');
      
      // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
      const testKey = `test/infrastructure-test-${Date.now()}.txt`;
      const testContent = 'VHM24 Infrastructure Test';
      
      const uploadParams = {
        Bucket: process.env.S3_BUCKET,
        Key: testKey,
        Body: testContent,
        ContentType: 'text/plain',
        ACL: 'private'
      };
      
      await s3.upload(uploadParams).promise();
      log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
      
      // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
      const downloadParams = {
        Bucket: process.env.S3_BUCKET,
        Key: testKey
      };
      
      const downloadResult = await s3.getObject(downloadParams).promise();
      const downloadedContent = downloadResult.Body.toString();
      
      if (downloadedContent === testContent) {
        log('‚úÖ –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ', 'success');
      } else {
        throw new Error('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
      }
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ bucket
      const objects = await s3.listObjectsV2({
        Bucket: process.env.S3_BUCKET,
        MaxKeys: 10
      }).promise();
      
      log(`üìä –û–±—ä–µ–∫—Ç–æ–≤ –≤ bucket: ${objects.KeyCount}`, 'info');
      
      // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
      await s3.deleteObject({
        Bucket: process.env.S3_BUCKET,
        Key: testKey
      }).promise();
      log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω', 'info');
      
      this.results.storage = {
        status: 'PASS',
        message: `DigitalOcean Spaces —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –û–±—ä–µ–∫—Ç–æ–≤: ${objects.KeyCount}`,
        details: {
          endpoint: process.env.S3_ENDPOINT,
          bucket: process.env.S3_BUCKET,
          region: process.env.S3_REGION || 'nyc3',
          objects: objects.KeyCount
        }
      };
      
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ DigitalOcean Spaces: ${error.message}`, 'error');
      this.results.storage = {
        status: 'FAIL',
        message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`,
        error: error.message
      };
    }
  }

  generateReport() {
    log('üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...', 'test');
    
    console.log('\n' + '='.repeat(80));
    log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´', 'test');
    console.log('='.repeat(80));
    
    const components = [
      { name: 'PostgreSQL (Railway)', result: this.results.database },
      { name: 'Redis (Railway)', result: this.results.redis },
      { name: 'DigitalOcean Spaces', result: this.results.storage }
    ];
    
    let passCount = 0;
    let failCount = 0;
    
    components.forEach(component => {
      const status = component.result?.status || 'UNKNOWN';
      const message = component.result?.message || '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è';
      
      if (status === 'PASS') {
        passCount++;
        log(`‚úÖ ${component.name}: ${message}`, 'success');
      } else {
        failCount++;
        log(`‚ùå ${component.name}: ${message}`, 'error');
      }
      
      if (component.result?.details) {
        Object.entries(component.result.details).forEach(([key, value]) => {
          log(`   ${key}: ${value}`, 'info');
        });
      }
    });
    
    console.log('\n' + '-'.repeat(80));
    
    const totalComponents = components.length;
    const successRate = ((passCount / totalComponents) * 100).toFixed(1);
    
    log(`–í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${totalComponents}`, 'info');
    log(`–†–∞–±–æ—Ç–∞—é—Ç: ${passCount}`, 'success');
    log(`–ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç: ${failCount}`, failCount > 0 ? 'error' : 'info');
    log(`–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${successRate}%`, successRate >= 80 ? 'success' : 'error');
    
    this.results.overall = {
      total: totalComponents,
      passed: passCount,
      failed: failCount,
      successRate: parseFloat(successRate)
    };
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const report = {
      timestamp: new Date().toISOString(),
      summary: this.results.overall,
      components: {
        database: this.results.database,
        redis: this.results.redis,
        storage: this.results.storage
      }
    };
    
    require('fs').writeFileSync('infrastructure-test-report.json', JSON.stringify(report, null, 2));
    
    console.log('\n' + '='.repeat(80));
    log('–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ infrastructure-test-report.json', 'info');
    
    if (successRate >= 80) {
      log('üéâ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê –ì–û–¢–û–í–ê –ö PRODUCTION!', 'success');
    } else {
      log('‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´', 'warning');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  const test = new InfrastructureTest();
  test.testAll().catch(console.error);
}

module.exports = InfrastructureTest;
