# –î–µ–ø–ª–æ–π VHM24 –≤ Railway

Write-Host "üöÄ –î–µ–ø–ª–æ–π VHM24 –≤ Railway..."

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
$envPath = ".env"

if (!(Test-Path $envPath)) {
    Write-Error "‚ùå –§–∞–π–ª $envPath –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞."
    exit 1
}

# 2. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏—é
Write-Host "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ $envPath..."
Get-Content $envPath | ForEach-Object {
    if ($_ -match "^\s*([A-Z0-9_]+)\s*=\s*(.+?)\s*$") {
        [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
    }
}

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway
Write-Host "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway..."
try {
    $railwayStatus = railway status
    if ($railwayStatus -match "Error") {
        Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'railway login'."
        exit 1
    }
    Write-Host "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway —É—Å–ø–µ—à–Ω–æ."
} catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã 'railway status'. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Railway CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    exit 1
}

# 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway
Write-Host "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway..."
try {
    & "$PSScriptRoot\update-railway-env.ps1"
    Write-Host "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
} catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway: $_"
    exit 1
}

# 5. –î–µ–ø–ª–æ–π –ø—Ä–æ–µ–∫—Ç–∞ –≤ Railway
Write-Host "üöÄ –î–µ–ø–ª–æ–π –ø—Ä–æ–µ–∫—Ç–∞ –≤ Railway..."
try {
    railway up
    Write-Host "‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω –≤ Railway."
} catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Railway: $_"
    exit 1
}

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è..."
try {
    $deployStatus = railway status
    Write-Host "‚úÖ –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è: $deployStatus"
} catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è: $_"
    exit 1
}

# 7. –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–æ–µ–∫—Ç–∞
Write-Host "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–æ–µ–∫—Ç–∞..."
try {
    $projectUrl = [System.Environment]::GetEnvironmentVariable("RAILWAY_PUBLIC_URL")
    if ($projectUrl) {
        Write-Host "‚úÖ URL –ø—Ä–æ–µ–∫—Ç–∞: $projectUrl"
    } else {
        Write-Host "‚ö†Ô∏è URL –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."
    }
} catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –ø—Ä–æ–µ–∫—Ç–∞: $_"
    exit 1
}

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API..."
$apiUrl = [System.Environment]::GetEnvironmentVariable("API_URL")
$baseUrl = $apiUrl -replace "/api/v1$", ""
$healthUrls = @(
    "$baseUrl/health",
    "$baseUrl/api/health",
    "$apiUrl/health"
)

$healthCheckSuccess = $false
foreach ($url in $healthUrls) {
    Write-Host "–ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ URL: $url"
    try {
        $health = Invoke-WebRequest $url -UseBasicParsing -TimeoutSec 10
        if ($health.StatusCode -eq 200) {
            Write-Host "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL: $url"
            Write-Host "–û—Ç–≤–µ—Ç: $($health.Content)"
            $healthCheckSuccess = $true
            break
        }
    } catch {
        Write-Host "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL: $url"
    }
}

if (-not $healthCheckSuccess) {
    Write-Host "‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –≤—Å–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º URL. –í–æ–∑–º–æ–∂–Ω–æ, –¥–µ–ø–ª–æ–π –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API."
} else {
    Write-Host "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
}

# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Webhook
Write-Host "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Webhook..."
$webhookUrl = [System.Environment]::GetEnvironmentVariable("WEBHOOK_URL")
$botToken = [System.Environment]::GetEnvironmentVariable("TELEGRAM_BOT_TOKEN")

try {
    $check = Invoke-WebRequest -Uri "https://api.telegram.org/bot$botToken/getWebhookInfo" -UseBasicParsing
    Write-Host "‚úÖ Telegram Webhook –ø–æ–¥–∫–ª—é—á–µ–Ω."
    Write-Host "–û—Ç–≤–µ—Ç: $($check.Content)"
} catch {
    Write-Host "‚ùå Telegram Webhook –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ URL."
}

# 10. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
Write-Host "`nüéâ –î–µ–ø–ª–æ–π VHM24 –≤ Railway –∑–∞–≤–µ—Ä—à–µ–Ω!"
Write-Host "üìä API: $apiUrl"
Write-Host "ü§ñ Telegram Bot: @$([System.Environment]::GetEnvironmentVariable('TELEGRAM_BOT_TOKEN').Split(':')[0])"
Write-Host "‚òÅÔ∏è DigitalOcean Spaces: $([System.Environment]::GetEnvironmentVariable('S3_BUCKET_NAME')).$([System.Environment]::GetEnvironmentVariable('S3_REGION')).digitaloceanspaces.com"
Write-Host "`nüìù –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'railway status'"
