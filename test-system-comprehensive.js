const path = require('path');
const fs = require('fs');

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è Prisma
process.env.DATABASE_URL = process.env.DATABASE_URL || 'postgresql://postgres:tcaqejEXLSdaUdMQXFqEDGBQvavWVbGy@metro.proxy.rlwy.net:36258/railway';

async function testSystemComponents() {
  console.log('üîç VHM24 –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´\n');
  
  const results = {
    environment: false,
    database: false,
    redis: false,
    s3: false,
    backend: false,
    prisma: false,
    telegram: false,
    overall: false
  };
  
  // Test 1: Environment Variables
  console.log('1. üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  require('dotenv').config();
  
  const envVars = [
    'DATABASE_URL',
    'REDIS_URL', 
    'S3_BUCKET_NAME',
    'S3_ACCESS_KEY',
    'S3_SECRET_KEY',
    'JWT_SECRET',
    'TELEGRAM_BOT_TOKEN'
  ];
  
  let envCount = 0;
  envVars.forEach(varName => {
    const isSet = !!process.env[varName];
    const status = isSet ? '‚úÖ' : '‚ùå';
    console.log(`   ${status} ${varName}: ${isSet ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
    if (isSet) envCount++;
  });
  
  results.environment = envCount >= 6;
  console.log(`   üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${envCount}/${envVars.length} (${Math.round(envCount/envVars.length*100)}%)\n`);
  
  // Test 2: Database Connection
  console.log('2. üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ Prisma –∫–ª–∏–µ–Ω—Ç—É
    const { PrismaClient } = require('./backend/node_modules/@prisma/client');
    const prisma = new PrismaClient({
      log: ['error'],
      errorFormat: 'minimal'
    });
    
    await Promise.race([
      prisma.$connect(),
      new Promise((_, reject) => setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')), 15000))
    ]);
    
    console.log('   ‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    results.database = true;
    
    // –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
    try {
      const userCount = await prisma.user.count();
      const machineCount = await prisma.machine.count();
      const itemCount = await prisma.inventoryItem.count();
      
      console.log(`   üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount}`);
      console.log(`   üìä –ê–≤—Ç–æ–º–∞—Ç—ã: ${machineCount}`);
      console.log(`   üìä –¢–æ–≤–∞—Ä—ã: ${itemCount}`);
      
      results.prisma = true;
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º: ${error.message}`);
    }
    
    await prisma.$disconnect();
  } catch (error) {
    console.log(`   ‚ùå PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ: ${error.message}`);
    results.database = false;
  }
  
  console.log('');
  
  // Test 3: Redis Connection
  console.log('3. üî¥ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:');
  try {
    const Redis = require('ioredis');
    const redis = new Redis(process.env.REDIS_URL, {
      connectTimeout: 5000,
      lazyConnect: true,
      maxRetriesPerRequest: 1,
      retryDelayOnFailover: 100,
      showFriendlyErrorStack: false
    });
    
    await Promise.race([
      redis.ping(),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Redis —Ç–∞–π–º–∞—É—Ç')), 5000))
    ]);
    
    console.log('   ‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    results.redis = true;
    await redis.disconnect();
  } catch (error) {
    console.log(`   ‚ùå Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ: ${error.message}`);
    console.log('   üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: redis-server');
    results.redis = false;
  }
  
  console.log('');
  
  // Test 4: S3 Connection
  console.log('4. üìÅ S3/DigitalOcean Spaces:');
  try {
    const { S3Service } = require('./backend/src/utils/s3');
    const result = await S3Service.testConnection();
    console.log(`   ${result ? '‚úÖ' : '‚ùå'} S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ${result ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ—É–¥–∞—á–Ω–æ'}`);
    results.s3 = result;
  } catch (error) {
    console.log(`   ‚ùå S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ: ${error.message}`);
    results.s3 = false;
  }
  
  console.log('');
  
  // Test 5: Backend Server Files
  console.log('5. üåê Backend —Ñ–∞–π–ª—ã:');
  const backendFiles = [
    'backend/src/index.js',
    'backend/src/routes',
    'backend/src/middleware',
    'backend/src/utils',
    'backend/prisma/schema.prisma'
  ];
  
  let backendCount = 0;
  backendFiles.forEach(file => {
    const exists = fs.existsSync(file);
    const status = exists ? '‚úÖ' : '‚ùå';
    console.log(`   ${status} ${file}: ${exists ? '–°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    if (exists) backendCount++;
  });
  
  results.backend = backendCount === backendFiles.length;
  console.log(`   üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${backendCount}/${backendFiles.length} (${Math.round(backendCount/backendFiles.length*100)}%)\n`);
  
  // Test 6: Telegram Bot
  console.log('6. ü§ñ Telegram Bot:');
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
    const tokenParts = token.split(':');
    if (tokenParts.length !== 2 || tokenParts[0].length < 8) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
    }
    
    console.log('   ‚úÖ –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
    console.log(`   üìä Bot ID: ${tokenParts[0]}`);
    results.telegram = true;
  } catch (error) {
    console.log(`   ‚ùå Telegram –±–æ—Ç: ${error.message}`);
    results.telegram = false;
  }
  
  console.log('');
  
  // Overall Results
  console.log('üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('=' .repeat(50));
  
  const components = [
    { name: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è', status: results.environment, critical: true },
    { name: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL', status: results.database, critical: true },
    { name: 'Prisma ORM', status: results.prisma, critical: true },
    { name: 'Redis –∫–µ—à', status: results.redis, critical: false },
    { name: 'S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ', status: results.s3, critical: false },
    { name: 'Backend —Ñ–∞–π–ª—ã', status: results.backend, critical: true },
    { name: 'Telegram Bot', status: results.telegram, critical: true }
  ];
  
  let totalScore = 0;
  let criticalScore = 0;
  let criticalTotal = 0;
  
  components.forEach(comp => {
    const status = comp.status ? '‚úÖ' : '‚ùå';
    const priority = comp.critical ? '[–ö–†–ò–¢–ò–ß–ù–û]' : '[–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û]';
    console.log(`${status} ${comp.name} ${priority}`);
    
    if (comp.status) totalScore++;
    if (comp.critical) {
      criticalTotal++;
      if (comp.status) criticalScore++;
    }
  });
  
  const overallPercentage = Math.round((totalScore / components.length) * 100);
  const criticalPercentage = Math.round((criticalScore / criticalTotal) * 100);
  
  console.log('=' .repeat(50));
  console.log(`üìä –û–ë–©–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨: ${totalScore}/${components.length} (${overallPercentage}%)`);
  console.log(`üî• –ö–†–ò–¢–ò–ß–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´: ${criticalScore}/${criticalTotal} (${criticalPercentage}%)`);
  
  results.overall = criticalScore >= criticalTotal;
  
  if (results.overall) {
    console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£!');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    console.log('   cd backend && npm start  # –ó–∞–ø—É—Å–∫ backend');
    console.log('   cd apps/telegram-bot && npm start  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞');
  } else {
    console.log('\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£');
    console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
    
    components.forEach(comp => {
      if (comp.critical && !comp.status) {
        console.log(`   ‚ùå ${comp.name}`);
      }
    });
  }
  
  console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  if (!results.redis) {
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å Redis: redis-server (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Railway Redis)');
  }
  if (!results.database) {
    console.log('   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å DATABASE_URL –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
  if (!results.telegram) {
    console.log('   3. –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather');
  }
  
  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testSystemComponents()
    .then(results => {
      process.exit(results.overall ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      process.exit(1);
    });
}

module.exports = { testSystemComponents };
