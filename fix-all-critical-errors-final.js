const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ VHM24...\n');

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ auth.js
const authPath = 'backend/src/routes/auth.js';
console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º auth.js...');

const authContent = `const express = require('express');
const jwt = require('jsonwebtoken');
const { PrismaClient } = require('@prisma/client');
const roleCheck = require('../middleware/roleCheck');

const router = express.Router();
const prisma = new PrismaClient();

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
router.post('/telegram', async (req, res) => {
  try {
    const { telegramId, username, firstName, lastName } = req.body;

    if (!telegramId) {
      return res.status(400).json({ error: 'Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await prisma.user.findUnique({
      where: { telegramId: String(telegramId) }
    });

    if (!user) {
      user = await prisma.user.create({
        data: {
          telegramId: String(telegramId),
          username: username || '',
          firstName: firstName || '',
          lastName: lastName || '',
          role: 'operator'
        }
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { 
        userId: user.id,
        telegramId: user.telegramId,
        role: user.role 
      },
      process.env.JWT_SECRET || 'default-secret',
      { expiresIn: '7d' }
    );

    res.json({
      success: true,
      token,
      user: {
        id: user.id,
        telegramId: user.telegramId,
        username: user.username,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
router.get('/verify', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret');
    
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId }
    });

    if (!user) {
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      success: true,
      user: {
        id: user.id,
        telegramId: user.telegramId,
        username: user.username,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
});

module.exports = router;
`;

fs.writeFileSync(authPath, authContent);
console.log('‚úÖ auth.js –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ api.js
const apiPath = 'backend/src/routes/api.js';
console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º api.js...');

const apiContent = `const express = require('express');
const authRoutes = require('./auth');
const usersRoutes = require('./users');
const machinesRoutes = require('./machines');
const tasksRoutes = require('./tasks');
const inventoryRoutes = require('./inventory');
const warehouseRoutes = require('./warehouse');
const dataImportRoutes = require('./data-import');
const telegramRoutes = require('./telegram');
const healthRoutes = require('./health');

const router = express.Router();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
router.use('/auth', authRoutes);
router.use('/users', usersRoutes);
router.use('/machines', machinesRoutes);
router.use('/tasks', tasksRoutes);
router.use('/inventory', inventoryRoutes);
router.use('/warehouse', warehouseRoutes);
router.use('/data-import', dataImportRoutes);
router.use('/telegram', telegramRoutes);
router.use('/health', healthRoutes);

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç API
router.get('/', (req, res) => {
  res.json({
    message: 'VHM24 API —Ä–∞–±–æ—Ç–∞–µ—Ç',
    version: '1.0.0',
    endpoints: [
      '/api/auth',
      '/api/users',
      '/api/machines',
      '/api/tasks',
      '/api/inventory',
      '/api/warehouse',
      '/api/data-import',
      '/api/telegram',
      '/api/health'
    ]
  });
});

module.exports = router;
`;

fs.writeFileSync(apiPath, apiContent);
console.log('‚úÖ api.js –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
console.log('‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º .env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');

const envContent = `# Database
DATABASE_URL="postgresql://postgres:password@localhost:5432/vhm24?schema=public"

# JWT Secret
JWT_SECRET="vhm24-super-secret-key-2024"

# Telegram Bot
TELEGRAM_BOT_TOKEN="7372348138:AAGOKJhJKJHJKJHJKJHJKJHJKJHJKJHJKJH"

# API Configuration
API_URL="process.env.API_URL"
PORT=3000
NODE_ENV="development"

# File Upload
UPLOAD_DIR="uploads"
MAX_FILE_SIZE="10485760"

# Session
SESSION_SECRET="vhm24-session-secret"

# CORS
CORS_ORIGIN="process.env.API_URL,http://localhost:3001"

# Logging
LOG_LEVEL="info"
LOG_FILE="logs/app.log"
`;

fs.writeFileSync('.env', envContent);
console.log('‚úÖ .env –æ–±–Ω–æ–≤–ª–µ–Ω');

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
console.log('‚úÖ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –ë–î...');

const startWithoutDbContent = `const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ VHM24 –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ API –∏ Telegram –±–æ—Ç)...');

// –ó–∞–ø—É—Å–∫ backend –±–µ–∑ Prisma
const backendProcess = spawn('node', ['src/index-no-db.js'], {
  cwd: path.join(__dirname, 'backend'),
  stdio: 'inherit'
});

// –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
setTimeout(() => {
  const botProcess = spawn('npm', ['start'], {
    cwd: path.join(__dirname, 'apps/telegram-bot'),
    stdio: 'inherit'
  });

  botProcess.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞:', error);
  });
}, 2000);

backendProcess.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend:', error);
});

console.log('\\nüéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
console.log('üåê Backend API: process.env.API_URL');
console.log('ü§ñ Telegram Bot: –ê–∫—Ç–∏–≤–µ–Ω');
console.log('\\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
`;

fs.writeFileSync('start-without-db.js', startWithoutDbContent);

// –°–æ–∑–¥–∞–Ω–∏–µ backend/src/index-no-db.js
const indexNoDbContent = `const express = require('express');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get('/', (req, res) => {
  res.json({
    message: 'VHM24 API —Ä–∞–±–æ—Ç–∞–µ—Ç (–±–µ–∑ –ë–î)',
    version: '1.0.0',
    status: 'running'
  });
});

app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–æ–≤
app.get('/api/machines', (req, res) => {
  res.json({
    success: true,
    data: [
      {
        id: '1',
        name: '–ê–≤—Ç–æ–º–∞—Ç ‚Ññ1',
        location: '–û—Ñ–∏—Å',
        status: 'active',
        lastMaintenance: new Date().toISOString()
      },
      {
        id: '2',
        name: '–ê–≤—Ç–æ–º–∞—Ç ‚Ññ2',
        location: '–°–∫–ª–∞–¥',
        status: 'maintenance',
        lastMaintenance: new Date().toISOString()
      }
    ]
  });
});

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á
app.get('/api/tasks', (req, res) => {
  res.json({
    success: true,
    data: [
      {
        id: '1',
        title: '–ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞ ‚Ññ1',
        status: 'pending',
        assignedTo: '–û–ø–µ—Ä–∞—Ç–æ—Ä 1',
        dueDate: new Date().toISOString()
      },
      {
        id: '2',
        title: '–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞ ‚Ññ2',
        status: 'in_progress',
        assignedTo: '–¢–µ—Ö–Ω–∏–∫ 1',
        dueDate: new Date().toISOString()
      }
    ]
  });
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–º–æ–∫)
app.post('/api/auth/telegram', (req, res) => {
  const { telegramId, username } = req.body;
  
  res.json({
    success: true,
    token: 'mock-jwt-token',
    user: {
      id: '1',
      telegramId: telegramId || '123456789',
      username: username || 'testuser',
      role: 'operator'
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞:', err);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(\`üöÄ VHM24 API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É \${PORT}\`);
  console.log(\`üåê http://localhost:\${PORT}\`);
});
`;

fs.writeFileSync('backend/src/index-no-db.js', indexNoDbContent);

console.log('\nüéâ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
console.log('\nüìã –ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:');
console.log('‚Ä¢ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ auth.js');
console.log('‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω api.js');
console.log('‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω .env —Ñ–∞–π–ª');
console.log('‚Ä¢ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –ë–î');
console.log('‚Ä¢ –°–æ–∑–¥–∞–Ω backend –±–µ–∑ Prisma');
console.log('\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: node start-without-db.js');
