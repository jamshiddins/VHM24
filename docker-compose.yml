version: '3.8'

services:
  # API сервер
  api:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - PORT=3000
      - HOST=0.0.0.0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - JWT_SECRET=${JWT_SECRET}
      - RAILWAY_PUBLIC_URL=${RAILWAY_PUBLIC_URL}
      - WEBHOOK_URL=${WEBHOOK_URL}
    restart: always
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Worker для фоновых задач
  worker:
    build: .
    command: npm run start:worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    restart: always
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads

  # Scheduler для планирования задач
  scheduler:
    build: .
    command: npm run start:scheduler
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    restart: always
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs

  # Telegram бот
  telegram-bot:
    build: .
    command: npm run start:bot
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - API_BASE_URL=http://api:3000/api
      - WEBHOOK_URL=${WEBHOOK_URL}
    restart: always
    depends_on:
      - api
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads

  # Внешняя база данных PostgreSQL используется из DATABASE_URL

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis_data:
