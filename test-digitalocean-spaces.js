const AWS = require('aws-sdk');
require('dotenv').config();

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m'
};

function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  const colorMap = {
    info: colors.blue,
    success: colors.green,
    error: colors.red,
    warning: colors.yellow
  };
  console.log(`${colorMap[type]}[${timestamp}] ${message}${colors.reset}`);
}

async function testDigitalOceanSpaces() {
  log('‚òÅÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DigitalOcean Spaces...', 'info');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const requiredVars = ['S3_ENDPOINT', 'S3_ACCESS_KEY', 'S3_SECRET_KEY', 'S3_BUCKET'];
    const missingVars = requiredVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
      log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missingVars.join(', ')}`, 'error');
      return false;
    }

    log(`üì° Endpoint: ${process.env.S3_ENDPOINT}`, 'info');
    log(`üì¶ Bucket: ${process.env.S3_BUCKET}`, 'info');
    log(`üîë Access Key: ${process.env.S3_ACCESS_KEY.substring(0, 8)}...`, 'info');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AWS SDK –¥–ª—è DigitalOcean Spaces
    const spacesEndpoint = new AWS.Endpoint(process.env.S3_ENDPOINT);
    const s3 = new AWS.S3({
      endpoint: spacesEndpoint,
      accessKeyId: process.env.S3_ACCESS_KEY,
      secretAccessKey: process.env.S3_SECRET_KEY,
      region: process.env.S3_REGION || 'nyc3',
      s3ForcePathStyle: false,
      signatureVersion: 'v4'
    });
    
    log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket...', 'info');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è bucket
    try {
      await s3.headBucket({ Bucket: process.env.S3_BUCKET }).promise();
      log('‚úÖ Bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω', 'success');
    } catch (error) {
      if (error.statusCode === 404) {
        log('‚ö†Ô∏è Bucket –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è...', 'warning');
        try {
          await s3.createBucket({ 
            Bucket: process.env.S3_BUCKET,
            CreateBucketConfiguration: {
              LocationConstraint: process.env.S3_REGION || 'nyc3'
            }
          }).promise();
          log('‚úÖ Bucket —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', 'success');
        } catch (createError) {
          if (createError.message.includes('Bucket already exists')) {
            log('‚ö†Ô∏è Bucket —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É', 'warning');
            log('üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è bucket', 'warning');
            return false;
          } else {
            log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket: ${createError.message}`, 'error');
            return false;
          }
        }
      } else if (error.statusCode === 403) {
        log('‚ö†Ô∏è Bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞', 'warning');
        log('üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è API –∫–ª—é—á–µ–π', 'warning');
        return false;
      } else {
        throw error;
      }
    }
    
    // –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    log('üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...', 'info');
    const testKey = `test/infrastructure-test-${Date.now()}.txt`;
    const testContent = 'VHM24 Infrastructure Test - DigitalOcean Spaces';
    
    const uploadParams = {
      Bucket: process.env.S3_BUCKET,
      Key: testKey,
      Body: testContent,
      ContentType: 'text/plain',
      ACL: 'private'
    };
    
    const uploadResult = await s3.upload(uploadParams).promise();
    log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', 'success');
    log(`üìç URL: ${uploadResult.Location}`, 'info');
    
    // –¢–µ—Å—Ç 3: –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    log('üì• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞...', 'info');
    const downloadParams = {
      Bucket: process.env.S3_BUCKET,
      Key: testKey
    };
    
    const downloadResult = await s3.getObject(downloadParams).promise();
    const downloadedContent = downloadResult.Body.toString();
    
    if (downloadedContent === testContent) {
      log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω', 'success');
    } else {
      log('‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç', 'error');
      return false;
    }
    
    // –¢–µ—Å—Ç 4: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤...', 'info');
    const listParams = {
      Bucket: process.env.S3_BUCKET,
      MaxKeys: 10
    };
    
    const listResult = await s3.listObjectsV2(listParams).promise();
    log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${listResult.KeyCount}`, 'info');
    
    // –¢–µ—Å—Ç 5: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...', 'info');
    await s3.deleteObject({
      Bucket: process.env.S3_BUCKET,
      Key: testKey
    }).promise();
    log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω', 'success');
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n' + '='.repeat(60));
    log('üéâ DigitalOcean Spaces —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!', 'success');
    log(`üì¶ Bucket: ${process.env.S3_BUCKET}`, 'info');
    log(`üåç Region: ${process.env.S3_REGION || 'nyc3'}`, 'info');
    log(`üìä –û–±—ä–µ–∫—Ç–æ–≤ –≤ bucket: ${listResult.KeyCount}`, 'info');
    console.log('='.repeat(60));
    
    return true;
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ DigitalOcean Spaces: ${error.message}`, 'error');
    
    if (error.code === 'InvalidAccessKeyId') {
      log('üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å S3_ACCESS_KEY', 'warning');
    } else if (error.code === 'SignatureDoesNotMatch') {
      log('üîê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å S3_SECRET_KEY', 'warning');
    } else if (error.code === 'NoSuchBucket') {
      log('üì¶ Bucket –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ', 'warning');
    }
    
    console.log('\n' + '='.repeat(60));
    log('‚ùå DigitalOcean Spaces —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'error');
    console.log('='.repeat(60));
    
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testDigitalOceanSpaces().then(success => {
    process.exit(success ? 0 : 1);
  }).catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = testDigitalOceanSpaces;
