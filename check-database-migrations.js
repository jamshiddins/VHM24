/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const dotenvExpand = require('dotenv-expand');
const { Client } = require('pg');

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env.development —Ñ–∞–π–ª –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const devEnv = dotenv.config({ path: '.env.development' });
dotenvExpand.expand(devEnv);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π .env —Ñ–∞–π–ª
const mainEnv = dotenv.config();
dotenvExpand.expand(mainEnv);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function executeCommand(command, options = {}) {
  try {
    console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${command}`);
    const result = execSync(command, { encoding: 'utf8', ...options });
    return result.trim();
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
    if (error.stdout) console.error(`–í—ã–≤–æ–¥ stdout: ${error.stdout}`);
    if (error.stderr) console.error(`–í—ã–≤–æ–¥ stderr: ${error.stderr}`);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseMigrations() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ô –ë–ê–ó–´ –î–ê–ù–ù–´–• ===');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
  const migrationsDir = path.join(__dirname, 'backend', 'prisma', 'migrations');
  
  if (!fs.existsSync(migrationsDir)) {
    console.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return false;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π
  const migrations = fs.readdirSync(migrationsDir)
    .filter(dir => dir !== 'migration_lock.toml' && fs.statSync(path.join(migrationsDir, dir)).isDirectory())
    .sort();
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${migrations.length} –º–∏–≥—Ä–∞—Ü–∏–π:`);
  
  // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π
  for (const migration of migrations) {
    console.log(`  - ${migration}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationDir = path.join(migrationsDir, migration);
    const migrationFiles = fs.readdirSync(migrationDir);
    
    console.log(`    –§–∞–π–ª—ã (${migrationFiles.length}):`);
    
    for (const file of migrationFiles) {
      console.log(`      - ${file}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ migration.sql
    const migrationSqlPath = path.join(migrationDir, 'migration.sql');
    
    if (fs.existsSync(migrationSqlPath)) {
      const migrationSql = fs.readFileSync(migrationSqlPath, 'utf8');
      const sqlLines = migrationSql.split('\n').filter(line => line.trim() !== '');
      
      console.log(`    SQL-–∑–∞–ø—Ä–æ—Å—ã: ${sqlLines.length} —Å—Ç—Ä–æ–∫`);
    } else {
      console.warn('‚ö†Ô∏è –§–∞–π–ª migration.sql –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç PostgreSQL
  const client = new Client({
    connectionString: process.env.DATABASE_URL
  });
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await client.connect();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã _prisma_migrations
    const tableResult = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = '_prisma_migrations'
      ) as exists
    `);
    
    if (!tableResult.rows[0].exists) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ _prisma_migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return false;
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ _prisma_migrations –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    const appliedMigrationsResult = await client.query(`
      SELECT id, checksum, finished_at, migration_name, logs, rolled_back_at, started_at, applied_steps_count
      FROM _prisma_migrations
      ORDER BY started_at
    `);
    
    const appliedMigrations = appliedMigrationsResult.rows;
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${appliedMigrations.length} –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`);
    
    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    for (const migration of appliedMigrations) {
      const status = migration.rolled_back_at ? '‚ùå –û—Ç–∫–∞—á–µ–Ω–∞' : (migration.finished_at ? '‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞' : '‚ö†Ô∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ');
      console.log(`  - ${migration.migration_name} (${status})`);
      console.log(`    ID: ${migration.id}`);
      console.log(`    –ù–∞—á–∞–ª–æ: ${migration.started_at}`);
      console.log(`    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${migration.finished_at || 'N/A'}`);
      console.log(`    –®–∞–≥–∏: ${migration.applied_steps_count}`);
      
      if (migration.rolled_back_at) {
        console.log(`    –û—Ç–∫–∞—Ç: ${migration.rolled_back_at}`);
      }
      
      console.log('');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    
    const appliedMigrationNames = appliedMigrations.map(m => m.migration_name);
    const missingMigrations = migrations.filter(m => !appliedMigrationNames.includes(m));
    const extraMigrations = appliedMigrationNames.filter(m => !migrations.includes(m));
    
    if (missingMigrations.length > 0) {
      console.warn(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${missingMigrations.join(', ')}`);
    } else {
      console.log('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    if (extraMigrations.length > 0) {
      console.warn(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: ${extraMigrations.join(', ')}`);
    } else {
      console.log('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    const tables = tablesResult.rows.map(row => row.table_name);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tables.length} —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`);
    
    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    for (const table of tables) {
      console.log(`  - ${table}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ Prisma –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const prismaSchemaPath = path.join(__dirname, 'backend', 'prisma', 'schema.prisma');
    
    if (fs.existsSync(prismaSchemaPath)) {
      const prismaSchema = fs.readFileSync(prismaSchemaPath, 'utf8');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ —Å—Ö–µ–º—ã Prisma
      const modelRegex = /model\s+(\w+)\s+{[^}]+@@map\("([^"]+)"\)/g;
      const prismaModels = [];
      let match;
      
      while ((match = modelRegex.exec(prismaSchema)) !== null) {
        prismaModels.push({
          name: match[1],
          tableName: match[2]
        });
      }
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${prismaModels.length} –º–æ–¥–µ–ª–µ–π –≤ —Å—Ö–µ–º–µ Prisma:`);
      
      // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
      for (const model of prismaModels) {
        const existsInDb = tables.includes(model.tableName);
        console.log(`  - ${model.name} (—Ç–∞–±–ª–∏—Ü–∞: ${model.tableName}) - ${existsInDb ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î'}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ —Å—Ö–µ–º—ã Prisma –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const missingTables = prismaModels.filter(model => !tables.includes(model.tableName));
      
      if (missingTables.length > 0) {
        console.warn(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏ –≤ —Å—Ö–µ–º–µ Prisma, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${missingTables.map(m => m.name).join(', ')}`);
      } else {
        console.log('‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Å—Ö–µ–º—ã Prisma –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
    } else {
      console.warn('‚ö†Ô∏è –§–∞–π–ª schema.prisma –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===');
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–π: ${error.message}`);
    console.error(error.stack);
    return false;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await client.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkDatabaseMigrations().catch(error => {
  console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  process.exit(1);
});
