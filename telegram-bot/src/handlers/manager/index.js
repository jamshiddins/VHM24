const { Markup } = require('telegraf');
const { BOT_STATES } = require('../../fsm/states');
const apiService = require('../../services/api');
const logger = require('../../utils/logger');

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–æ–ª–∏ MANAGER
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Function} requireRole - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
 */
const register = (bot, requireRole) => {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  bot.action('manager_analytics', requireRole(['MANAGER', 'ADMIN']), async (ctx) => {
    try {
      await viewAnalyticsHandler(ctx);
    } catch (error) {
      logger.error('Error in manager_analytics action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  bot.action('manager_create_task', requireRole(['MANAGER', 'ADMIN']), async (ctx) => {
    try {
      await createTaskHandler(ctx);
    } catch (error) {
      logger.error('Error in manager_create_task action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
  bot.action(/^task_type_(\w+)$/, requireRole(['MANAGER', 'ADMIN']), async (ctx) => {
    try {
      await selectTaskTypeHandler(ctx);
    } catch (error) {
      logger.error('Error in task_type action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
  bot.action('manager_routes', requireRole(['MANAGER', 'ADMIN']), async (ctx) => {
    try {
      await manageRoutesHandler(ctx);
    } catch (error) {
      logger.error('Error in manager_routes action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
  bot.action('manager_schedule', requireRole(['MANAGER', 'ADMIN']), async (ctx) => {
    try {
      await scheduleTasksHandler(ctx);
    } catch (error) {
      logger.error('Error in manager_schedule action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  bot.action('detailed_analytics', requireRole(['MANAGER', 'ADMIN']), async (ctx) => {
    try {
      await detailedAnalyticsHandler(ctx);
    } catch (error) {
      logger.error('Error in detailed_analytics action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞
  bot.action('export_report', requireRole(['MANAGER', 'ADMIN']), async (ctx) => {
    try {
      await exportReportHandler(ctx);
    } catch (error) {
      logger.error('Error in export_report action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
  bot.action(/^task_machine_(\d+)$/, requireRole(['MANAGER', 'ADMIN']), async (ctx) => {
    try {
      const machineId = ctx.match[1];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–≤—Ç–æ–º–∞—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
      if (ctx.session) {
        ctx.session.taskMachineId = machineId;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Å–µ—Å—Å–∏–∏
      const operators = ctx.session?.operators || [
        { id: '1', name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤' },
        { id: '2', name: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤' },
        { id: '3', name: '–°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤' }
      ];
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
      const keyboard = operators.map(operator => [
        Markup.button.callback(operator.name, `task_operator_${operator.id}`)
      ]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
      keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'create_task')]);
      
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–¥–∞—á–∏:', Markup.inlineKeyboard(keyboard));
      
      logger.info(`User ${ctx.from.id} selected machine ${machineId} for task`);
    } catch (error) {
      logger.error('Error in task_machine action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞—á–∏
  bot.action('create_task', requireRole(['MANAGER', 'ADMIN']), async (ctx) => {
    try {
      await createTaskHandler(ctx);
    } catch (error) {
      logger.error('Error in create_task action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  logger.info('Manager handlers registered');
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
const viewAnalyticsHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const analytics = {
      sales: {
        today: 1250,
        week: 8750,
        month: 32500
      },
      machines: {
        total: 15,
        active: 12,
        inactive: 3
      },
      products: {
        mostPopular: '–ö–∞–ø—É—á–∏–Ω–æ',
        leastPopular: '–ê–º–µ—Ä–∏–∫–∞–Ω–æ'
      },
      tasks: {
        completed: 25,
        pending: 8,
        overdue: 2
      }
    };
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    let message = 'üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*\n\n';
    
    message += '*–ü—Ä–æ–¥–∞–∂–∏:*\n';
    message += `üìÖ –°–µ–≥–æ–¥–Ω—è: ${analytics.sales.today} —Ä—É–±.\n`;
    message += `üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é: ${analytics.sales.week} —Ä—É–±.\n`;
    message += `üìÜ –ó–∞ –º–µ—Å—è—Ü: ${analytics.sales.month} —Ä—É–±.\n\n`;
    
    message += '*–ê–≤—Ç–æ–º–∞—Ç—ã:*\n';
    message += `üìä –í—Å–µ–≥–æ: ${analytics.machines.total}\n`;
    message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${analytics.machines.active}\n`;
    message += `‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${analytics.machines.inactive}\n\n`;
    
    message += '*–ü—Ä–æ–¥—É–∫—Ç—ã:*\n';
    message += `üîù –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π: ${analytics.products.mostPopular}\n`;
    message += `‚¨áÔ∏è –ù–∞–∏–º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π: ${analytics.products.leastPopular}\n\n`;
    
    message += '*–ó–∞–¥–∞—á–∏:*\n';
    message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${analytics.tasks.completed}\n`;
    message += `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${analytics.tasks.pending}\n`;
    message += `‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${analytics.tasks.overdue}\n`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    const keyboard = [
      [
        Markup.button.callback('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'detailed_analytics'),
        Markup.button.callback('üìà –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞', 'export_report')
      ],
      [
        Markup.button.callback('üìÖ –ü–æ –¥–Ω—è–º', 'analytics_by_day'),
        Markup.button.callback('üìÜ –ü–æ –Ω–µ–¥–µ–ª—è–º', 'analytics_by_week'),
        Markup.button.callback('üìÜ –ü–æ –º–µ—Å—è—Ü–∞–º', 'analytics_by_month')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.MANAGER_ANALYTICS);
    }
    
    logger.info(`User ${ctx.from.id} viewed analytics`);
  } catch (error) {
    logger.error('Error in view analytics handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
const createTaskHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    const operators = [
      { id: '1', name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤' },
      { id: '2', name: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤' },
      { id: '3', name: '–°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤' }
    ];
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
    const machines = [
      { id: '101', name: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #101' },
      { id: '102', name: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #102' },
      { id: '103', name: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #103' }
    ];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
    if (ctx.session) {
      ctx.session.operators = operators;
      ctx.session.machines = machines;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    const keyboard = [
      [Markup.button.callback('üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', 'task_type_maintenance')],
      [Markup.button.callback('üßπ –ß–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞', 'task_type_cleaning')],
      [Markup.button.callback('üì¶ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤', 'task_type_refill')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:', Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.MANAGER_CREATE_TASK);
    }
    
    logger.info(`User ${ctx.from.id} is creating a task`);
  } catch (error) {
    logger.error('Error in create task handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
const selectTaskTypeHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    const taskType = ctx.callbackQuery.data.split('_')[2];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –≤ —Å–µ—Å—Å–∏–∏
    if (ctx.session) {
      ctx.session.taskType = taskType;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –∏–∑ —Å–µ—Å—Å–∏–∏
    const machines = ctx.session?.machines || [
      { id: '101', name: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #101' },
      { id: '102', name: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #102' },
      { id: '103', name: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #103' }
    ];
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞
    const keyboard = machines.map(machine => [
      Markup.button.callback(machine.name, `task_machine_${machine.id}`)
    ]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'create_task')]);
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:', Markup.inlineKeyboard(keyboard));
    
    logger.info(`User ${ctx.from.id} selected task type: ${taskType}`);
  } catch (error) {
    logger.error('Error in select task type handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
const manageRoutesHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const routes = [
      { id: '1', name: '–ú–∞—Ä—à—Ä—É—Ç #1', operator: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', machines: ['101', '102', '103'], status: 'ACTIVE' },
      { id: '2', name: '–ú–∞—Ä—à—Ä—É—Ç #2', operator: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', machines: ['104', '105'], status: 'ACTIVE' },
      { id: '3', name: '–ú–∞—Ä—à—Ä—É—Ç #3', operator: '–°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤', machines: ['106', '107', '108', '109'], status: 'INACTIVE' }
    ];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—Ä—à—Ä—É—Ç–æ–≤
    let message = 'üöó *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏:*\n\n';
    
    routes.forEach((route, index) => {
      const status = getRouteStatusText(route.status);
      
      message += `*${index + 1}. ${route.name}*\n`;
      message += `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: ${route.operator}\n`;
      message += `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–∞—Ç–æ–≤: ${route.machines.length}\n`;
      message += `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
    const keyboard = [
      [
        Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç', 'create_route'),
        Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç', 'edit_route')
      ],
      [
        Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç', 'delete_route'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤', 'route_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.MANAGER_ROUTES);
    }
    
    logger.info(`User ${ctx.from.id} viewed routes management`);
  } catch (error) {
    logger.error('Error in manage routes handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
const scheduleTasksHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const scheduledTasks = [
      { id: '1', type: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', machine: '–ê–≤—Ç–æ–º–∞—Ç #101', operator: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', scheduledDate: '2025-07-20', status: 'PENDING' },
      { id: '2', type: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤', machine: '–ê–≤—Ç–æ–º–∞—Ç #102', operator: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', scheduledDate: '2025-07-18', status: 'PENDING' },
      { id: '3', type: '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è', machine: '–ê–≤—Ç–æ–º–∞—Ç #103', operator: '–°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤', scheduledDate: '2025-07-25', status: 'PENDING' }
    ];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    let message = 'üìÖ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á:*\n\n';
    
    scheduledTasks.forEach((task, index) => {
      const status = getTaskStatusText(task.status);
      
      message += `*${index + 1}. ${task.type}*\n`;
      message += `üìç –ê–≤—Ç–æ–º–∞—Ç: ${task.machine}\n`;
      message += `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: ${task.operator}\n`;
      message += `üìÖ –î–∞—Ç–∞: ${task.scheduledDate}\n`;
      message += `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
    const keyboard = [
      [
        Markup.button.callback('‚ûï –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É', 'schedule_task'),
        Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É', 'edit_scheduled_task')
      ],
      [
        Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', 'delete_scheduled_task'),
        Markup.button.callback('üìä –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á', 'task_calendar')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.MANAGER_SCHEDULE);
    }
    
    logger.info(`User ${ctx.from.id} viewed task scheduling`);
  } catch (error) {
    logger.error('Error in schedule tasks handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
const detailedAnalyticsHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const detailedAnalytics = {
      sales: {
        byProduct: [
          { name: '–ö–∞–ø—É—á–∏–Ω–æ', count: 250, amount: 12500 },
          { name: '–õ–∞—Ç—Ç–µ', count: 200, amount: 10000 },
          { name: '–ê–º–µ—Ä–∏–∫–∞–Ω–æ', count: 150, amount: 6000 },
          { name: '–≠—Å–ø—Ä–µ—Å—Å–æ', count: 100, amount: 4000 }
        ],
        byMachine: [
          { id: '101', name: '–ê–≤—Ç–æ–º–∞—Ç #101', count: 300, amount: 15000 },
          { id: '102', name: '–ê–≤—Ç–æ–º–∞—Ç #102', count: 250, amount: 12500 },
          { id: '103', name: '–ê–≤—Ç–æ–º–∞—Ç #103', count: 150, amount: 7500 }
        ]
      },
      tasks: {
        byType: [
          { type: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', count: 10 },
          { type: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤', count: 15 },
          { type: '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è', count: 5 }
        ],
        byStatus: [
          { status: 'COMPLETED', count: 20 },
          { status: 'IN_PROGRESS', count: 5 },
          { status: 'PENDING', count: 5 }
        ]
      }
    };
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    let message = 'üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:*\n\n';
    
    message += '*–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º:*\n';
    detailedAnalytics.sales.byProduct.forEach(product => {
      message += `‚Ä¢ ${product.name}: ${product.count} —à—Ç. (${product.amount} —Ä—É–±.)\n`;
    });
    
    message += '\n*–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º:*\n';
    detailedAnalytics.sales.byMachine.forEach(machine => {
      message += `‚Ä¢ ${machine.name}: ${machine.count} —à—Ç. (${machine.amount} —Ä—É–±.)\n`;
    });
    
    message += '\n*–ó–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø–∞–º:*\n';
    detailedAnalytics.tasks.byType.forEach(task => {
      message += `‚Ä¢ ${task.type}: ${task.count} —à—Ç.\n`;
    });
    
    message += '\n*–ó–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n';
    detailedAnalytics.tasks.byStatus.forEach(task => {
      message += `‚Ä¢ ${getTaskStatusText(task.status)}: ${task.count} —à—Ç.\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    const keyboard = [
      [
        Markup.button.callback('üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞', 'export_report'),
        Markup.button.callback('üìà –ì—Ä–∞—Ñ–∏–∫–∏', 'analytics_charts')
      ],
      [
        Markup.button.callback('üìÖ –ü–æ –¥–Ω—è–º', 'analytics_by_day'),
        Markup.button.callback('üìÜ –ü–æ –Ω–µ–¥–µ–ª—è–º', 'analytics_by_week'),
        Markup.button.callback('üìÜ –ü–æ –º–µ—Å—è—Ü–∞–º', 'analytics_by_month')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ', 'manager_analytics')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    logger.info(`User ${ctx.from.id} viewed detailed analytics`);
  } catch (error) {
    logger.error('Error in detailed analytics handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
const exportReportHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
    const keyboard = [
      [
        Markup.button.callback('üìä Excel', 'export_excel'),
        Markup.button.callback('üìÑ PDF', 'export_pdf'),
        Markup.button.callback('üìù CSV', 'export_csv')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ', 'manager_analytics')]
    ];
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:', Markup.inlineKeyboard(keyboard));
    
    logger.info(`User ${ctx.from.id} is exporting report`);
  } catch (error) {
    logger.error('Error in export report handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∞
const getRouteStatusText = (status) => {
  const statusMap = {
    'ACTIVE': '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
    'INACTIVE': '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
    'PAUSED': '‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
  };
  
  return statusMap[status] || status;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
const getTaskStatusText = (status) => {
  const statusMap = {
    'PENDING': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
    'IN_PROGRESS': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    'COMPLETED': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
    'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
  };
  
  return statusMap[status] || status;
};

module.exports = {
  viewAnalyticsHandler,
  createTaskHandler,
  selectTaskTypeHandler,
  manageRoutesHandler,
  scheduleTasksHandler,
  detailedAnalyticsHandler,
  exportReportHandler,
  register
};
