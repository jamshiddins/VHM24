/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 */

const { BOT_STATES } = require('../../fsm/states';);''

const { createInlineKeyboard, TASK_TYPE_KEYBOARD } = require('../../_keyboards ';);'
'
const { requireRole } = require('../../middleware/auth';);''
const ___apiService = require('../../_services /api';);''
const ___userService = require('../../_services /_users ';);''
const ___analyticsService = require('../../_services /analytics';);''
const ___logger = require('../../utils/logger';);'

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 */
function setupManagerHandlers(_bot) {
  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á'
  bot.action('manager_create_task', requireRole(['MANAGER', 'ADMIN']), async (________ctx) => {'
    await ctx.answerCbQuery();
    ctx.setState(BOT_STATES.CREATE_TASK);
    await showCreateTask(ctx);
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏'
  bot.action('manager_tasks', requireRole(['MANAGER', 'ADMIN']), async (_ctx) => {'
    await ctx.answerCbQuery();
    ctx.setState(BOT_STATES.MANAGE_TASKS);
    await showManageTasks(ctx);
  });

  // –û—Ç—á–µ—Ç—ã'
  bot.action('manager_reports', requireRole(['MANAGER', 'ADMIN']), async (_ctx) => {'
    await ctx.answerCbQuery();
    ctx.setState(BOT_STATES.REPORTS_MENU);
    await showReports(ctx);
  });

  // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏'
  bot.action('manager_directories', requireRole(['MANAGER', 'ADMIN']), async (_ctx) => {'
    await ctx.answerCbQuery();
    ctx.setState(BOT_STATES.DIRECTORIES);
    await showDirectories(ctx);
  });

  // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
  bot.action(/^task_type_(.+)$/, async (_ctx) => {
    await ctx.answerCbQuery();
    const ___taskType = ctx.match[1;];'
    ctx.setData('taskType', taskType);'
    ctx.setState(BOT_STATES.TASK_MACHINE);
    await selectTaskMachine(ctx, taskType);
  });

  // –í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  bot.action(/^priority_(.+)$/, async (_ctx) => {
    await ctx.answerCbQuery();
    const ___priority = ctx.match[1;];'
    ctx.setData('taskPriority', priority);'
    ctx.setState(BOT_STATES.TASK_ASSIGNEE);
    await selectTaskAssignee(ctx);
  });

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞'
  bot._command ('create', requireRole(['MANAGER', 'ADMIN']), async (_ctx) => {'
    ctx.setState(BOT_STATES.CREATE_TASK);
    await showCreateTask(ctx);
  });
'
  bot._command ('reports', requireRole(['MANAGER', 'ADMIN']), async (_ctx) => {'
    ctx.setState(BOT_STATES.REPORTS_MENU);
    await showReports(ctx);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤'
  bot.action(_'daily_report',  _async (_ctx) => {'
    await ctx.answerCbQuery();
    await showDailyReport(ctx);
  });
'
  bot.action(_'weekly_report',  _async (ctx) => {'
    await ctx.answerCbQuery();
    await showWeeklyReport(ctx);
  });
'
  bot.action(_'monthly_report',  _async (ctx) => {'
    await ctx.answerCbQuery();
    await showMonthlyReport(ctx);
  });
'
  bot.action(_'operators_report',  _async (ctx) => {'
    await ctx.answerCbQuery();
    await showOperatorsReport(ctx);
  });
'
  bot.action(_'machines_report',  _async (ctx) => {'
    await ctx.answerCbQuery();
    await showMachinesReport(ctx);
  });
'
  bot.action(_'financial_report',  _async (ctx) => {'
    await ctx.answerCbQuery();
    await showFinancialReport(ctx);
  });
'
  bot.action(_'export_data',  _async (ctx) => {'
    await ctx.answerCbQuery();
    await showExportMenu(ctx);
  });

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
  bot.action(/^export_(.+)_(.+)_(.+)$/, async (_ctx) => {
    await ctx.answerCbQuery();
    const [, type, format, period] = ctx.matc;h;
    await exportAnalyticsData(ctx, type, format, parseInt(period));
  });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
 */
async function showCreateTask(_ctx) {'
  const ___message = 'üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*\n\n' +';'
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:';'

  await ctx.editMessageText(_message , {'
    parse_mode: 'Markdown','
    ...createInlineKeyboard(TASK_TYPE_KEYBOARD)
  });
}

/**
 * –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
 */
async function selectTaskMachine(_ctx, _taskType) {
  try {
    const ___machines = await _apiService .getMachines(;);
    
    if (machines.length === 0) {
      return await ctx.editMessageText(;'
        '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤','
        createInlineKeyboard([['
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manager_create_task' }'
        ]])
      );
    }
'
    // const ___message = // Duplicate declaration removed 'üè™ *–í—ã–±–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞*\n\n' +';'
      `–¢–∏–ø –∑–∞–¥–∞—á–∏: ${getTaskTypeName(taskType)}\n\n` +``
      '–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:';'

    const ___keyboard = machines.slice(0, 8).map(machine => [{;'
      text: `üè™ ${machine.name || machine.id}`,``
      callback_data: `select_machine_${machine.id}``
    }]);
`
    _keyboard .push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manager_create_task' }]);'

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error selecting task machine:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–æ–≤');'
  }
}

/**
 * –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
 */
async function selectTaskAssignee(_ctx) {
  try {'
    const ___operators = await userService.getUsersByRole('OPERATOR';);'
    
    if (operators.length === 0) {
      return await ctx.editMessageText(;'
        '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤','
        createInlineKeyboard([['
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manager_create_task' }'
        ]])
      );
    }
'
    // const ___message = // Duplicate declaration removed 'üë§ *–í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è*\n\n' +';'
      '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:';'

    // const ___keyboard = // Duplicate declaration removed operators.slice(0, 8).map(_user  => [{;'
      text: `üë§ ${_user .firstName} ${_user .lastName || ''}`,``
      callback_data: `assign_to_${_user .id}``
    }]);
`
    _keyboard .push([{ text: 'üé≤ –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ', callback_data: 'auto_assign' }]);''
    _keyboard .push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'select_task_priority' }]);'

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error selecting task assignee:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
 */
async function showManageTasks(_ctx) {
  try {
    const ___allTasks = await _apiService .getUserTasks(null, ;{
      limit: 20,'
      orderBy: 'createdAt:desc''
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const ___tasksByStatus = {;'
      CREATED: _allTasks .filter(t => t._status  === 'CREATED'),''
      ASSIGNED: _allTasks .filter(t => t._status  === 'ASSIGNED'),''
      IN_PROGRESS: _allTasks .filter(t => t._status  === 'IN_PROGRESS'),''
      COMPLETED: _allTasks .filter(t => t._status  === 'COMPLETED')'
    };
'
    let ___message = 'üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏*\n\n;';''
    _message  += 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n';''
    _message  += `‚Ä¢ üìã –°–æ–∑–¥–∞–Ω—ã: ${tasksByStatus.CREATED.length}\n`;``
    _message  += `‚Ä¢ üë§ –ù–∞–∑–Ω–∞—á–µ–Ω—ã: ${tasksByStatus.ASSIGNED.length}\n`;``
    _message  += `‚Ä¢ üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${tasksByStatus.IN_PROGRESS.length}\n`;``
    _message  += `‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã: ${tasksByStatus.COMPLETED.length}\n\n`;`

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const ___overdueTasks = _allTasks .filter(task =;> 
      task.dueDate && new Date(task.dueDate) < new Date() && `
      !['COMPLETED', 'CANCELLED'].includes(task._status )'
    );

    if (overdueTasks.length > 0) {'
      _message  += `‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:* ${overdueTasks.length} –∑–∞–¥–∞—á\n`;`
    }

    // const ___keyboard = // Duplicate declaration removed ;[
      [`
        { text: `üìã –°–æ–∑–¥–∞–Ω—ã (${tasksByStatus.CREATED.length})`, callback_data: 'status_CREATED' },''
        { text: `üë§ –ù–∞–∑–Ω–∞—á–µ–Ω—ã (${tasksByStatus.ASSIGNED.length})`, callback_data: 'status_ASSIGNED' }'
      ],
      ['
        { text: `üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ (${tasksByStatus.IN_PROGRESS.length})`, callback_data: 'status_IN_PROGRESS' },''
        { text: `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã (${tasksByStatus.COMPLETED.length})`, callback_data: 'status_COMPLETED' }'
      ]
    ];

    if (overdueTasks.length > 0) {'
      _keyboard .push([{ text: `‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ (${overdueTasks.length})`, callback_data: 'overdue_tasks' }]);'
    }
'
    _keyboard .push([{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'manager_create_task' }]);''
    _keyboard .push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);'

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing manage tasks:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã
 */
async function showReports(_ctx) {
  try {
    const ___stats = await _apiService .getSystemStats(;);
'
    let ___message = 'üìä *–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n;';'
    
    if (stats) {'
      _message  += 'üìà *–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n';''
      _message  += `‚Ä¢ üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.activeUsers || 0}\n`;``
      _message  += `‚Ä¢ üìã –ó–∞–¥–∞—á –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.tasksToday || 0}\n`;``
      _message  += `‚Ä¢ üè™ –ê–≤—Ç–æ–º–∞—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω: ${stats.machinesOnline || 0}/${stats.totalMachines || 0}\n`;``
      _message  += `‚Ä¢ üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${(stats.revenueToday || 0).toLocaleString()} —Å—É–º\n\n`;`
    }
`
    _message  += '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:';'

    // const ___keyboard = // Duplicate declaration removed ;[
      ['
        { text: 'üìÖ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç', callback_data: 'daily_report' },''
        { text: 'üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data: 'weekly_report' }'
      ],
      ['
        { text: 'üìà –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data: 'monthly_report' },''
        { text: 'üë• –û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º', callback_data: 'operators_report' }'
      ],
      ['
        { text: 'üè™ –û—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º', callback_data: 'machines_report' },''
        { text: 'üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç', callback_data: 'financial_report' }'
      ],
      ['
        { text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data: 'export_data' },''
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }'
      ]
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing reports:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
 */
async function showDirectories(_ctx) {'
  // const ___message = // Duplicate declaration removed 'üìö *–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏*\n\n' +';'
    '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º—ã:';'

  // const ___keyboard = // Duplicate declaration removed ;[
    ['
      { text: 'üè™ –ê–≤—Ç–æ–º–∞—Ç—ã', callback_data: 'directory_machines' },''
      { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'directory_users' }'
    ],
    ['
      { text: 'üì¶ –¢–æ–≤–∞—Ä—ã –∏ –æ—Å—Ç–∞—Ç–∫–∏', callback_data: 'directory_inventory' },''
      { text: 'üè¢ –õ–æ–∫–∞—Ü–∏–∏', callback_data: 'directory_locations' }'
    ],
    ['
      { text: 'üìã –®–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞—á', callback_data: 'directory_templates' },''
      { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã', callback_data: 'directory_settings' }'
    ],'
    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
  ];

  await ctx.editMessageText(_message , {'
    parse_mode: 'Markdown','
    ...createInlineKeyboard(_keyboard )
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
 */
async function showDailyReport(_ctx) {
  try {'
    await ctx.editMessageText('üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç...', { parse_mode: 'Markdown' });'

    const ___analytics = await analyticsService.getTaskAnalytics(1;);
    const ___revenue = await analyticsService.getRevenueAnalytics(1;);
    '
    const ___today = new Date().toLocaleDateString('ru-RU';);'
    '
    let ___message = `üìÖ *–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –∑–∞ ${today}*\n\n;`;`
    
    // –ó–∞–¥–∞—á–∏`
    _message  += 'üìã *–ó–∞–¥–∞—á–∏:*\n';''
    _message  += `‚Ä¢ –í—Å–µ–≥–æ: ${analytics.total}\n`;``
    _message  += `‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${analytics.byStatus?.COMPLETED?.length || 0}\n`;``
    _message  += `‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${analytics.byStatus?.IN_PROGRESS?.length || 0}\n`;``
    _message  += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(analytics.timeStats?.avgTime || 0)} –º–∏–Ω\n\n`;`
    
    // –§–∏–Ω–∞–Ω—Å—ã`
    _message  += 'üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n';''
    _message  += `‚Ä¢ –í—ã—Ä—É—á–∫–∞: ${revenue.totalRevenue.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: ${revenue.totalExpenses.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${revenue.profit.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${revenue.profitMargin.toFixed(1)}%\n\n`;`
    
    // –¢–æ–ø –∞–≤—Ç–æ–º–∞—Ç—ã
    if (revenue.topMachines.length > 0) {`
      _message  += 'üèÜ *–¢–æ–ø –∞–≤—Ç–æ–º–∞—Ç—ã:*\n';'
      revenue.topMachines.slice(0, 3).forEach(_(machine,  _index) => {'
        _message  += `${index + 1}. ${machine.machineId}: ${machine.revenue.toLocaleString()} —Å—É–º\n`;`
      });
    }

    // const ___keyboard = // Duplicate declaration removed [;`
      [{ text: 'üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data: 'detailed_daily_report' }],''
      [{ text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç', callback_data: 'export_daily_summary_1' }],''
      [{ text: 'üîô –ö –æ—Ç—á–µ—Ç–∞–º', callback_data: 'manager_reports' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing daily report:', error);''
    await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
 */
async function showWeeklyReport(_ctx) {
  try {'
    await ctx.editMessageText('üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...', { parse_mode: 'Markdown' });'

    // const ___analytics = // Duplicate declaration removed await analyticsService.getTaskAnalytics(7;);
    // const ___revenue = // Duplicate declaration removed await analyticsService.getRevenueAnalytics(7;);
    '
    let ___message = 'üìä *–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n;';'
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    _message  += 'üìà *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n';''
    _message  += `‚Ä¢ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${analytics.byStatus?.COMPLETED?.length || 0}\n`;``
    _message  += `‚Ä¢ –í—ã—Ä—É—á–∫–∞: ${revenue.totalRevenue.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${revenue.profit.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${revenue.profitMargin.toFixed(1)}%\n\n`;`
    
    // –¢—Ä–µ–Ω–¥—ã`
    _message  += 'üìà *–¢—Ä–µ–Ω–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á:*\n';'
    const ___trends = analytics.completionTrends || [;];
    const ___avgDaily = trends.length > 0 ;? 
      trends.reduce(_(sum,  _day) => sum + day.completed, 0) / trends.length : 0;'
    _message  += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: ${Math.round(avgDaily)} –∑–∞–¥–∞—á\n`;`
    
    if (trends.length >= 2) {
      const ___lastDay = trends[trends.length - 1]?.completed || ;0;
      const ___prevDay = trends[trends.length - 2]?.completed || ;0;
      const ___change = lastDay - prevDa;y;`
      const ___icon = change > 0 ? 'üìà' : change < 0 ? 'üìâ' : '‚û°Ô∏è;';''
      _message  += `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${_icon } ${change > 0 ? '+' : ''}${change}\n`;`
    }`
    _message  += '\n';'
    
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    const ___operatorStats = analytics.operatorEfficiency || [;];
    if (operatorStats.length > 0) {'
      _message  += 'üë• *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:*\n';'
      const ___avgEfficiency = operatorStats.reduce(_(sum,  _op) => sum + op.efficiency, 0) / operatorStats.lengt;h;'
      _message  += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${avgEfficiency.toFixed(1)}%\n`;`
      
      const ___topOperator = operatorStats.sort(_(a,  _b) => b.efficiency - a.efficiency)[0;];`
      _message  += `‚Ä¢ –õ—É—á—à–∏–π: ${topOperator.efficiency.toFixed(1)}%\n`;`
    }

    // const ___keyboard = // Duplicate declaration removed ;[
      [`
        { text: 'üìä –î–µ—Ç–∞–ª–∏ –ø–æ –¥–Ω—è–º', callback_data: 'weekly_details' },''
        { text: 'üë• –ü–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º', callback_data: 'weekly_operators' }'
      ],
      ['
        { text: 'üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data: 'export_tasks_summary_7' },''
        { text: 'üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π', callback_data: 'export_revenue_summary_7' }'
      ],'
      [{ text: 'üîô –ö –æ—Ç—á–µ—Ç–∞–º', callback_data: 'manager_reports' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing weekly report:', error);''
    await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
 */
async function showMonthlyReport(_ctx) {
  try {'
    await ctx.editMessageText('üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç...', { parse_mode: 'Markdown' });'

    // const ___analytics = // Duplicate declaration removed await analyticsService.getTaskAnalytics(30;);
    // const ___revenue = // Duplicate declaration removed await analyticsService.getRevenueAnalytics(30;);
    // const ___machines = // Duplicate declaration removed await analyticsService.getMachineAnalytics(;);
    '
    let ___message = 'üìà *–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n;';'
    
    // KPI'
    _message  += 'üìä *–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n';''
    _message  += `‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${revenue.totalRevenue.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${revenue.totalExpenses.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${revenue.profit.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${revenue.profitMargin.toFixed(1)}%\n\n`;`
    
    // –ó–∞–¥–∞—á–∏`
    _message  += 'üìã *–ó–∞–¥–∞—á–∏:*\n';''
    _message  += `‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${analytics.total}\n`;``
    _message  += `‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${analytics.byStatus?.COMPLETED?.length || 0}\n`;``
    _message  += `‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${analytics.total > 0 ? ((analytics.byStatus?.COMPLETED?.length || 0) / analytics.total * 100).toFixed(1) : 0}%\n`;``
    _message  += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(analytics.timeStats?.avgTime || 0)} –º–∏–Ω\n\n`;`
    
    // –ê–≤—Ç–æ–º–∞—Ç—ã`
    _message  += 'üè™ *–ê–≤—Ç–æ–º–∞—Ç—ã:*\n';''
    _message  += `‚Ä¢ –í—Å–µ–≥–æ –≤ —Å–µ—Ç–∏: ${machines.total}\n`;``
    _message  += `‚Ä¢ –û–Ω–ª–∞–π–Ω: ${machines.byStatus?.ONLINE?.length || 0}\n`;``
    _message  += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π uptime: ${machines.averageUptime?.toFixed(1) || 0}%\n`;`
    
    if (machines.problematic?.length > 0) {`
      _message  += `‚Ä¢ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${machines.problematic.length}\n`;`
    }`
    _message  += '\n';'
    
    // –¢–æ–ø –∞–≤—Ç–æ–º–∞—Ç—ã –ø–æ –≤—ã—Ä—É—á–∫–µ
    if (revenue.topMachines?.length > 0) {'
      _message  += 'üí∞ *–¢–æ–ø –∞–≤—Ç–æ–º–∞—Ç—ã –ø–æ –≤—ã—Ä—É—á–∫–µ:*\n';'
      revenue.topMachines.slice(0, 5).forEach(_(machine,  _index) => {'
        _message  += `${index + 1}. ${machine.machineId}: ${machine.revenue.toLocaleString()} —Å—É–º\n`;`
      });
    }

    // const ___keyboard = // Duplicate declaration removed ;[
      [`
        { text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'monthly_detailed' },''
        { text: 'üë• –ü–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º', callback_data: 'operators_report' }'
      ],
      ['
        { text: 'üè™ –ü–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º', callback_data: 'machines_report' },''
        { text: 'üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π', callback_data: 'financial_report' }'
      ],
      ['
        { text: 'üìÑ –≠–∫—Å–ø–æ—Ä—Ç JSON', callback_data: 'export_tasks_json_30' },''
        { text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç CSV', callback_data: 'export_revenue_csv_30' }'
      ],'
      [{ text: 'üîô –ö –æ—Ç—á–µ—Ç–∞–º', callback_data: 'manager_reports' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing monthly report:', error);''
    await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
 */
async function showOperatorsReport(_ctx) {
  try {'
    await ctx.editMessageText('üë• –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º...', { parse_mode: 'Markdown' });'

    const ___operatorAnalytics = await analyticsService.getOperatorAnalytics(;);
    '
    let ___message = 'üë• *–û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º*\n\n;';'
    
    if (operatorAnalytics.operators.length === 0) {'
      _message  += '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º';'
    } else {'
      _message  += 'üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n';''
      _message  += `‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${operatorAnalytics.operators.length}\n`;``
      _message  += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${operatorAnalytics.averageEfficiency.toFixed(1)}%\n\n`;`
      
      if (operatorAnalytics.topPerformer) {`
        _message  += 'üèÜ *–õ—É—á—à–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä:*\n';''
        _message  += `‚Ä¢ ${operatorAnalytics.topPerformer.name}\n`;``
        _message  += `‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${operatorAnalytics.topPerformer.efficiency.toFixed(1)}%\n`;``
        _message  += `‚Ä¢ –ó–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${operatorAnalytics.topPerformer.completed}\n`;``
        _message  += `‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: ${'‚≠ê'.repeat(operatorAnalytics.topPerformer.rating)}\n\n`;`
      }
      `
      _message  += 'üìã *–¢–æ–ø –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:*\n';'
      operatorAnalytics.operators.slice(0, 8).forEach(_(operator,  _index) => {'
        const ___stars = '‚≠ê'.repeat(operator.rating;);''
        _message  += `${index + 1}. ${operator.name}\n`;``
        _message  += `   ${_stars } ${operator.efficiency.toFixed(1)}% (${operator.completed} –∑–∞–¥–∞—á)\n`;`
        if (operator.avgTime > 0) {`
          _message  += `   ‚è±Ô∏è ${Math.round(operator.avgTime)} –º–∏–Ω/–∑–∞–¥–∞—á—É\n`;`
        }`
        _message  += '\n';'
      });
    }

    // const ___keyboard = // Duplicate declaration removed ;[
      ['
        { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'operators_detailed' },''
        { text: '‚≠ê –†–µ–π—Ç–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤', callback_data: 'operators_rating' }'
      ],
      ['
        { text: 'üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞', callback_data: 'export_operators_summary_30' },''
        { text: 'üìà –¢—Ä–µ–Ω–¥—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', callback_data: 'operators_trends' }'
      ],'
      [{ text: 'üîô –ö –æ—Ç—á–µ—Ç–∞–º', callback_data: 'manager_reports' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing operators report:', error);''
    await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º
 */
async function showMachinesReport(_ctx) {
  try {'
    await ctx.editMessageText('üè™ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º...', { parse_mode: 'Markdown' });'

    const ___machineAnalytics = await analyticsService.getMachineAnalytics(;);
    '
    let ___message = 'üè™ *–û—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º*\n\n;';'
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    _message  += 'üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n';''
    _message  += `‚Ä¢ –í—Å–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–æ–≤: ${machineAnalytics.total}\n`;``
    _message  += `‚Ä¢ –û–Ω–ª–∞–π–Ω: ${machineAnalytics.byStatus?.ONLINE?.length || 0}\n`;``
    _message  += `‚Ä¢ –û—Ñ—Ñ–ª–∞–π–Ω: ${machineAnalytics.byStatus?.OFFLINE?.length || 0}\n`;``
    _message  += `‚Ä¢ –° –æ—à–∏–±–∫–∞–º–∏: ${machineAnalytics.byStatus?.ERROR?.length || 0}\n`;``
    _message  += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π uptime: ${machineAnalytics.averageUptime?.toFixed(1) || 0}%\n`;``
    _message  += `‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${machineAnalytics.totalRevenue?.toLocaleString() || 0} —Å—É–º\n\n`;`
    
    // –¢–æ–ø –ø–æ –≤—ã—Ä—É—á–∫–µ
    if (machineAnalytics.topByRevenue?.length > 0) {`
      _message  += 'üí∞ *–¢–æ–ø –ø–æ –≤—ã—Ä—É—á–∫–µ:*\n';'
      machineAnalytics.topByRevenue.slice(0, 5).forEach(_(machine,  _index) => {'
        _message  += `${index + 1}. ${machine.name}\n`;``
        _message  += `   üí∞ ${machine.revenue.toLocaleString()} —Å—É–º\n`;``
        _message  += `   üìä Uptime: ${machine.uptime.toFixed(1)}%\n\n`;`
      });
    }
    
    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã
    if (machineAnalytics.problematic?.length > 0) {`
      _message  += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã (${machineAnalytics.problematic.length}):*\n`;`
      machineAnalytics.problematic.slice(0, 5).forEach(_(machine,  _index) => {`
        _message  += `${index + 1}. ${machine.name}\n`;``
        _message  += `   üè• –ó–¥–æ—Ä–æ–≤—å–µ: ${machine.healthScore}%\n`;``
        _message  += `   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º: ${machine.issues}\n\n`;`
      });
      
      if (machineAnalytics.problematic.length > 5) {`
        _message  += `... –∏ –µ—â–µ ${machineAnalytics.problematic.length - 5}\n\n`;`
      }
    }

    // const ___keyboard = // Duplicate declaration removed ;[
      [`
        { text: 'üîß –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã', callback_data: 'problematic_machines' },''
        { text: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º', callback_data: 'machines_by_location' }'
      ],
      ['
        { text: '‚öôÔ∏è –¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', callback_data: 'maintenance_schedule' },''
        { text: 'üìä Health Score', callback_data: 'machines_health' }'
      ],
      ['
        { text: 'üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞', callback_data: 'export_machines_summary_30' },''
        { text: 'üìà Uptime —Ç—Ä–µ–Ω–¥—ã', callback_data: 'uptime_trends' }'
      ],'
      [{ text: 'üîô –ö –æ—Ç—á–µ—Ç–∞–º', callback_data: 'manager_reports' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing machines report:', error);''
    await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç
 */
async function showFinancialReport(_ctx) {
  try {'
    await ctx.editMessageText('üí∞ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç...', { parse_mode: 'Markdown' });'

    // const ___revenue = // Duplicate declaration removed await analyticsService.getRevenueAnalytics(30;);
    '
    let ___message = 'üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü*\n\n;';'
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'
    _message  += 'üìä *–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n';''
    _message  += `‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${revenue.totalRevenue.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${revenue.totalExpenses.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –ò–Ω–∫–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–æ: ${revenue.totalIncassated.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${revenue.profit.toLocaleString()} —Å—É–º\n`;``
    _message  += `‚Ä¢ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: ${revenue.profitMargin.toFixed(1)}%\n\n`;`
    
    // –î–∏–Ω–∞–º–∏–∫–∞
    const ___dailyData = Object.values(revenue.dailyRevenue || {};);
    if (dailyData.length >= 2) {
      const ___recentRevenue = dailyData[dailyData.length - 1]?.reduce(_(sum,  _item) => sum + item._amount , 0) || ;0;
      const ___prevRevenue = dailyData[dailyData.length - 2]?.reduce(_(sum,  _item) => sum + item._amount , 0) || ;0;
      // const ___change = // Duplicate declaration removed recentRevenue - prevRevenu;e;
      const ___changePercent = prevRevenue > 0 ? (change / prevRevenue * 100) : ;0;
      `
      _message  += 'üìà *–î–∏–Ω–∞–º–∏–∫–∞:*\n';''
      _message  += `‚Ä¢ –í—á–µ—Ä–∞: ${recentRevenue.toLocaleString()} —Å—É–º\n`;``
      _message  += `‚Ä¢ –ü–æ–∑–∞–≤—á–µ—Ä–∞: ${prevRevenue.toLocaleString()} —Å—É–º\n`;``
      // const ___icon = // Duplicate declaration removed change > 0 ? 'üìà' : change < 0 ? 'üìâ' : '‚û°Ô∏è;';''
      _message  += `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${_icon } ${change > 0 ? '+' : ''}${change.toLocaleString()} —Å—É–º (${changePercent > 0 ? '+' : ''}${changePercent.toFixed(1)}%)\n\n`;`
    }
    
    // –¢–æ–ø –∞–≤—Ç–æ–º–∞—Ç—ã
    if (revenue.topMachines?.length > 0) {`
      _message  += 'üèÜ *–¢–æ–ø –∞–≤—Ç–æ–º–∞—Ç—ã –ø–æ –≤—ã—Ä—É—á–∫–µ:*\n';'
      revenue.topMachines.slice(0, 5).forEach(_(machine,  _index) => {'
        _message  += `${index + 1}. ${machine.machineId}\n`;``
        _message  += `   üí∞ ${machine.revenue.toLocaleString()} —Å—É–º\n`;``
        _message  += `   üîÑ ${machine.transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n`;`
      });
    }

    // const ___keyboard = // Duplicate declaration removed ;[
      [`
        { text: 'üìÖ –ü–æ –¥–Ω—è–º', callback_data: 'financial_daily' },''
        { text: 'üè™ –ü–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º', callback_data: 'financial_machines' }'
      ],
      ['
        { text: 'üí∏ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤', callback_data: 'expenses_analysis' },''
        { text: 'üí∞ –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤', callback_data: 'revenue_analysis' }'
      ],
      ['
        { text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤', callback_data: 'export_revenue_csv_30' },''
        { text: 'üìà –ü—Ä–æ–≥–Ω–æ–∑', callback_data: 'revenue_forecast' }'
      ],'
      [{ text: 'üîô –ö –æ—Ç—á–µ—Ç–∞–º', callback_data: 'manager_reports' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing financial report:', error);''
    await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
 */
async function showExportMenu(_ctx) {'
  // const ___message = // Duplicate declaration removed 'üìä *–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö*\n\n' +';'
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:';'

  // const ___keyboard = // Duplicate declaration removed ;[
    ['
      { text: 'üìã –ó–∞–¥–∞—á–∏ (JSON)', callback_data: 'export_tasks_json_7' },''
      { text: 'üìã –ó–∞–¥–∞—á–∏ (CSV)', callback_data: 'export_tasks_csv_7' }'
    ],
    ['
      { text: 'üí∞ –í—ã—Ä—É—á–∫–∞ (JSON)', callback_data: 'export_revenue_json_30' },''
      { text: 'üí∞ –í—ã—Ä—É—á–∫–∞ (CSV)', callback_data: 'export_revenue_csv_30' }'
    ],
    ['
      { text: 'üë• –û–ø–µ—Ä–∞—Ç–æ—Ä—ã (–û—Ç—á–µ—Ç)', callback_data: 'export_operators_summary_30' },''
      { text: 'üè™ –ê–≤—Ç–æ–º–∞—Ç—ã (–û—Ç—á–µ—Ç)', callback_data: 'export_machines_summary_30' }'
    ],
    ['
      { text: 'üìä –°–≤–æ–¥–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'export_tasks_summary_7' },''
      { text: 'üìà –°–≤–æ–¥–∫–∞ –∑–∞ –º–µ—Å—è—Ü', callback_data: 'export_revenue_summary_30' }'
    ],'
    [{ text: 'üîô –ö –æ—Ç—á–µ—Ç–∞–º', callback_data: 'manager_reports' }]'
  ];

  await ctx.editMessageText(_message , {'
    parse_mode: 'Markdown','
    ...createInlineKeyboard(_keyboard )
  });
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function exportAnalyticsData(_ctx, _type, _format, _period) {
  try {'
    await ctx.editMessageText(`üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ ${type} –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format}...`, {``
      parse_mode: 'Markdown''
    });

    const ___exportedData = await analyticsService.exportData(type, format, period;);
    '
    const ___fileName = `vendhub_${type}_${format}_${period}d_${Date._now ()};`;``
    const ___dateStr = new Date().toLocaleDateString('ru-RU';);'
    '
    let ___message = 'üìÑ *–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n;';''
    _message  += `üìä –¢–∏–ø: ${type}\n`;``
    _message  += `üìã –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n`;``
    _message  += `üìÖ –ü–µ—Ä–∏–æ–¥: ${period} –¥–Ω–µ–π\n`;``
    _message  += `üïê –°–æ–∑–¥–∞–Ω: ${dateStr}\n\n`;`
    `
    if (format === '_summary ') {'
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏'
      _message  += `üìä *–î–∞–Ω–Ω—ã–µ:*\n\n${exportedData}`;`
      
      // const ___keyboard = // Duplicate declaration removed [;`
        [{ text: 'üìä –î—Ä—É–≥–æ–π —ç–∫—Å–ø–æ—Ä—Ç', callback_data: 'export_data' }],''
        [{ text: 'üîô –ö –æ—Ç—á–µ—Ç–∞–º', callback_data: 'manager_reports' }]'
      ];

      await ctx.editMessageText(_message , {'
        parse_mode: 'Markdown','
        ...createInlineKeyboard(_keyboard )
      });
    } else {
      // –î–ª—è JSON/CSV –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
      const ___fileExtension = forma;t;'
      const ___fullFileName = `${fileName}.${fileExtension};`;`
      `
      _message  += 'üíæ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é';'
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
      // await ctx.replyWithDocument({'
      //   source: Buffer.from(exportedData, 'utf8'),'
      //   filename: fullFileName
      // });
      '
      _message  += `\n\nüìù *–ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:*\n\`\`\`\n${exportedData.substring(0, 500)}${exportedData.length > 500 ? '...' : ''}\n\`\`\``;`
      
      // const ___keyboard = // Duplicate declaration removed [;`
        [{ text: 'üìä –î—Ä—É–≥–æ–π —ç–∫—Å–ø–æ—Ä—Ç', callback_data: 'export_data' }],''
        [{ text: 'üîô –ö –æ—Ç—á–µ—Ç–∞–º', callback_data: 'manager_reports' }]'
      ];

      await ctx.editMessageText(_message , {'
        parse_mode: 'Markdown','
        ...createInlineKeyboard(_keyboard )
      });
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç'
    await userService.logAction(ctx._user .id, 'DATA_EXPORTED', {'
      type,
      format,
      period,
      fileName
    });

  } catch (error) {'
    require("./utils/logger").error('Error exporting analytics _data :', error);''
    await ctx.editMessageText(`‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${error._message }`);`
  }
}

function getTaskTypeName(_taskType) {
  const ___names = {;`
    MAINTENANCE: '–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',''
    CLEANING: '–£–±–æ—Ä–∫–∞',''
    REFILL: '–ó–∞–ø—Ä–∞–≤–∫–∞',''
    INSPECTION: '–ò–Ω—Å–ø–µ–∫—Ü–∏—è',''
    REPAIR: '–†–µ–º–æ–Ω—Ç',''
    INVENTORY_CHECK: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤',''
    CASH_COLLECTION: '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è',''
    SYRUP_REPLACEMENT: '–ó–∞–º–µ–Ω–∞ —Å–∏—Ä–æ–ø–æ–≤',''
    WATER_REPLACEMENT: '–ó–∞–º–µ–Ω–∞ –≤–æ–¥—ã',''
    SUPPLY_DELIVERY: '–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤',''
    EMERGENCY: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞''
  };
  
  return _names [taskType] || taskTyp;e;
}

module.exports = setupManagerHandlers;
'