const { Markup } = require('telegraf');
const { BOT_STATES } = require('../../fsm/states');
const apiService = require('../../services/api');
const logger = require('../../utils/logger');

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–æ–ª–∏ WAREHOUSE
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Function} requireRole - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
 */
const register = (bot, requireRole) => {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∞—Å–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
  bot.action('warehouse_inventory', requireRole(['WAREHOUSE', 'ADMIN']), async (ctx) => {
    try {
      await viewInventoryHandler(ctx);
    } catch (error) {
      logger.error('Error in warehouse_inventory action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤
  bot.action('update_inventory', requireRole(['WAREHOUSE', 'ADMIN']), async (ctx) => {
    try {
      await updateInventoryHandler(ctx);
    } catch (error) {
      logger.error('Error in update_inventory action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤–æ–∫
  bot.action('order_supplies', requireRole(['WAREHOUSE', 'ADMIN']), async (ctx) => {
    try {
      await orderSuppliesHandler(ctx);
    } catch (error) {
      logger.error('Error in order_supplies action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É–º–∫–∞–º–∏
  bot.action('warehouse_bags', requireRole(['WAREHOUSE', 'ADMIN']), async (ctx) => {
    try {
      await manageBagsHandler(ctx);
    } catch (error) {
      logger.error('Error in warehouse_bags action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–π–∫–∏ –±—É–Ω–∫–µ—Ä–æ–≤
  bot.action('warehouse_wash', requireRole(['WAREHOUSE', 'ADMIN']), async (ctx) => {
    try {
      await washBunkersHandler(ctx);
    } catch (error) {
      logger.error('Error in warehouse_wash action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  bot.action(/^update_item_(\d+)$/, requireRole(['WAREHOUSE', 'ADMIN']), async (ctx) => {
    try {
      const itemId = ctx.match[1];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
      if (ctx.session) {
        ctx.session.updateItemId = itemId;
      }
      
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
      if (ctx.scene && ctx.scene.enter) {
        await ctx.scene.enter(BOT_STATES.WAREHOUSE_UPDATE_ITEM);
      }
      
      logger.info(`User ${ctx.from.id} is updating item ${itemId}`);
    } catch (error) {
      logger.error('Error in update_item action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  bot.action(/^order_item_(\d+)$/, requireRole(['WAREHOUSE', 'ADMIN']), async (ctx) => {
    try {
      const itemId = ctx.match[1];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
      if (ctx.session) {
        ctx.session.orderItemId = itemId;
      }
      
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞:');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
      if (ctx.scene && ctx.scene.enter) {
        await ctx.scene.enter(BOT_STATES.WAREHOUSE_ORDER_ITEM);
      }
      
      logger.info(`User ${ctx.from.id} is ordering item ${itemId}`);
    } catch (error) {
      logger.error('Error in order_item action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø–∞—Å–æ–≤
  bot.action('view_inventory', requireRole(['WAREHOUSE', 'ADMIN']), async (ctx) => {
    try {
      await viewInventoryHandler(ctx);
    } catch (error) {
      logger.error('Error in view_inventory action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  logger.info('Warehouse handlers registered');
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∞—Å–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
const viewInventoryHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const inventory = [
      { id: '1', name: '–ö–æ—Ñ–µ –≤ –∑–µ—Ä–Ω–∞—Ö', quantity: 25, unit: '–∫–≥', status: 'IN_STOCK' },
      { id: '2', name: '–ú–æ–ª–æ–∫–æ', quantity: 15, unit: '–ª', status: 'LOW_STOCK' },
      { id: '3', name: '–°–∞—Ö–∞—Ä', quantity: 30, unit: '–∫–≥', status: 'IN_STOCK' },
      { id: '4', name: '–°—Ç–∞–∫–∞–Ω—á–∏–∫–∏', quantity: 500, unit: '—à—Ç', status: 'IN_STOCK' },
      { id: '5', name: '–ö—Ä—ã—à–∫–∏', quantity: 5, unit: '—É–ø', status: 'CRITICAL_STOCK' }
    ];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∞—Å–æ–≤
    let message = 'üì¶ *–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã –Ω–∞ —Å–∫–ª–∞–¥–µ:*\n\n';
    
    inventory.forEach((item, index) => {
      const status = getStatusText(item.status);
      
      message += `*${index + 1}. ${item.name}*\n`;
      message += `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} ${item.unit}\n`;
      message += `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞–º–∏
    const keyboard = [
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∞—Å—ã', 'update_inventory'),
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'add_inventory')
      ],
      [
        Markup.button.callback('üìã –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É', 'order_supplies'),
        Markup.button.callback('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–∞', 'inventory_analytics')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.WAREHOUSE_INVENTORY);
    }
    
    logger.info(`User ${ctx.from.id} viewed inventory`);
  } catch (error) {
    logger.error('Error in view inventory handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∞—Å–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤
const updateInventoryHandler = async (ctx) => {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const inventory = [
      { id: '1', name: '–ö–æ—Ñ–µ –≤ –∑–µ—Ä–Ω–∞—Ö' },
      { id: '2', name: '–ú–æ–ª–æ–∫–æ' },
      { id: '3', name: '–°–∞—Ö–∞—Ä' },
      { id: '4', name: '–°—Ç–∞–∫–∞–Ω—á–∏–∫–∏' },
      { id: '5', name: '–ö—Ä—ã—à–∫–∏' }
    ];
    
    const keyboard = inventory.map(item => [
      Markup.button.callback(`${item.name}`, `update_item_${item.id}`)
    ]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'view_inventory')]);
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', Markup.inlineKeyboard(keyboard));
    
    logger.info(`User ${ctx.from.id} is updating inventory`);
  } catch (error) {
    logger.error('Error in update inventory handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤–∫–∏
const orderSuppliesHandler = async (ctx) => {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
    const inventory = [
      { id: '1', name: '–ö–æ—Ñ–µ –≤ –∑–µ—Ä–Ω–∞—Ö' },
      { id: '2', name: '–ú–æ–ª–æ–∫–æ' },
      { id: '3', name: '–°–∞—Ö–∞—Ä' },
      { id: '4', name: '–°—Ç–∞–∫–∞–Ω—á–∏–∫–∏' },
      { id: '5', name: '–ö—Ä—ã—à–∫–∏' }
    ];
    
    const keyboard = inventory.map(item => [
      Markup.button.callback(`${item.name}`, `order_item_${item.id}`)
    ]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'view_inventory')]);
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤–∫–∏:', Markup.inlineKeyboard(keyboard));
    
    logger.info(`User ${ctx.from.id} is ordering supplies`);
  } catch (error) {
    logger.error('Error in order supplies handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
const getStatusText = (status) => {
  const statusMap = {
    'IN_STOCK': '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏',
    'LOW_STOCK': '‚ö†Ô∏è –ú–∞–ª–æ',
    'CRITICAL_STOCK': '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ',
    'OUT_OF_STOCK': '‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
  };
  
  return statusMap[status] || status;
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É–º–∫–∞–º–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
const manageBagsHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const bags = [
      { id: '1', code: 'BAG001', status: 'IN_USE', location: '–ê–≤—Ç–æ–º–∞—Ç #101', lastChecked: '2025-07-10' },
      { id: '2', code: 'BAG002', status: 'AVAILABLE', location: '–°–∫–ª–∞–¥', lastChecked: '2025-07-12' },
      { id: '3', code: 'BAG003', status: 'MAINTENANCE', location: '–†–µ–º–æ–Ω—Ç', lastChecked: '2025-07-08' },
      { id: '4', code: 'BAG004', status: 'IN_USE', location: '–ê–≤—Ç–æ–º–∞—Ç #102', lastChecked: '2025-07-11' },
      { id: '5', code: 'BAG005', status: 'AVAILABLE', location: '–°–∫–ª–∞–¥', lastChecked: '2025-07-13' }
    ];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—É–º–æ–∫
    let message = 'üëú *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–∫–∞–º–∏:*\n\n';
    
    bags.forEach((bag, index) => {
      const status = getBagStatusText(bag.status);
      
      message += `*${index + 1}. ${bag.code}*\n`;
      message += `üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${bag.location}\n`;
      message += `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n`;
      message += `üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${bag.lastChecked}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É–º–∫–∞–º–∏
    const keyboard = [
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', 'update_bag_status'),
        Markup.button.callback('üìã –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è', 'inventory_bags')
      ],
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—É–º–∫—É', 'add_bag'),
        Markup.button.callback('üîç –ù–∞–π—Ç–∏ –ø–æ QR', 'scan_bag_qr')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.WAREHOUSE_BAGS);
    }
    
    logger.info(`User ${ctx.from.id} viewed bags management`);
  } catch (error) {
    logger.error('Error in manage bags handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å—É–º–∫–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–π–∫–∏ –±—É–Ω–∫–µ—Ä–æ–≤
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
const washBunkersHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const bunkers = [
      { id: '1', code: 'BNK001', type: '–ö–æ—Ñ–µ', lastWashed: '2025-07-05', status: 'NEEDS_WASHING' },
      { id: '2', code: 'BNK002', type: '–ú–æ–ª–æ–∫–æ', lastWashed: '2025-07-10', status: 'CLEAN' },
      { id: '3', code: 'BNK003', type: '–°–∞—Ö–∞—Ä', lastWashed: '2025-07-08', status: 'CLEAN' },
      { id: '4', code: 'BNK004', type: '–®–æ–∫–æ–ª–∞–¥', lastWashed: '2025-07-01', status: 'NEEDS_WASHING' },
      { id: '5', code: 'BNK005', type: '–ß–∞–π', lastWashed: '2025-07-12', status: 'CLEAN' }
    ];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –±—É–Ω–∫–µ—Ä–æ–≤
    let message = 'üßº *–ú–æ–π–∫–∞ –±—É–Ω–∫–µ—Ä–æ–≤:*\n\n';
    
    bunkers.forEach((bunker, index) => {
      const status = getBunkerStatusText(bunker.status);
      
      message += `*${index + 1}. ${bunker.code} (${bunker.type})*\n`;
      message += `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n`;
      message += `üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–π–∫–∞: ${bunker.lastWashed}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–π–∫–æ–π –±—É–Ω–∫–µ—Ä–æ–≤
    const keyboard = [
      [
        Markup.button.callback('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–º—ã—Ç—ã–π', 'mark_bunker_washed'),
        Markup.button.callback('üìã –ß–µ–∫-–ª–∏—Å—Ç –º–æ–π–∫–∏', 'bunker_wash_checklist')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–π–∫–∏', 'bunker_wash_stats'),
        Markup.button.callback('üìù –ñ—É—Ä–Ω–∞–ª –º–æ–π–∫–∏', 'bunker_wash_log')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.WAREHOUSE_WASH);
    }
    
    logger.info(`User ${ctx.from.id} viewed bunker washing`);
  } catch (error) {
    logger.error('Error in wash bunkers handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±—É–Ω–∫–µ—Ä–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—É–º–∫–∏
const getBagStatusText = (status) => {
  const statusMap = {
    'IN_USE': 'üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è',
    'AVAILABLE': '‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞',
    'MAINTENANCE': 'üîß –ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏',
    'LOST': '‚ùì –£—Ç–µ—Ä—è–Ω–∞',
    'DAMAGED': '‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∞'
  };
  
  return statusMap[status] || status;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±—É–Ω–∫–µ—Ä–∞
const getBunkerStatusText = (status) => {
  const statusMap = {
    'CLEAN': '‚úÖ –ß–∏—Å—Ç—ã–π',
    'NEEDS_WASHING': 'üßº –¢—Ä–µ–±—É–µ—Ç –º–æ–π–∫–∏',
    'IN_WASHING': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–π–∫–∏',
    'DAMAGED': '‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω'
  };
  
  return statusMap[status] || status;
};

module.exports = {
  viewInventoryHandler,
  updateInventoryHandler,
  orderSuppliesHandler,
  manageBagsHandler,
  washBunkersHandler,
  register
};
