const { Markup } = require('telegraf');
const { BOT_STATES } = require('../../fsm/states');
const apiService = require('../../services/api');
const logger = require('../../utils/logger');

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Function} requireRole - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
 */
const register = (bot, requireRole) => {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
  bot.action('view_media', requireRole(['ADMIN', 'MANAGER']), async (ctx) => {
    try {
      await viewMediaHandler(ctx);
    } catch (error) {
      logger.error('Error in view_media action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –º–µ–¥–∏–∞
  bot.action(/^media_item_(\d+)$/, requireRole(['ADMIN', 'MANAGER']), async (ctx) => {
    try {
      await viewMediaDetailsHandler(ctx);
    } catch (error) {
      logger.error('Error in media_item details action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
  bot.action('add_media', requireRole(['ADMIN', 'MANAGER']), async (ctx) => {
    try {
      await addMediaHandler(ctx);
    } catch (error) {
      logger.error('Error in add_media action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–µ–¥–∏–∞
  bot.action(/^media_activate_(\d+)$/, requireRole(['ADMIN', 'MANAGER']), async (ctx) => {
    try {
      const mediaId = ctx.match[1];
      
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await ctx.reply('‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –º–µ–¥–∏–∞
      await viewMediaDetailsHandler({
        ...ctx,
        callbackQuery: {
          ...ctx.callbackQuery,
          data: `media_item_${mediaId}`
        }
      });
      
      logger.info(`User ${ctx.from.id} activated media ${mediaId}`);
    } catch (error) {
      logger.error('Error in media_activate action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–µ–¥–∏–∞
  bot.action(/^media_deactivate_(\d+)$/, requireRole(['ADMIN', 'MANAGER']), async (ctx) => {
    try {
      const mediaId = ctx.match[1];
      
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await ctx.reply('‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –º–µ–¥–∏–∞
      await viewMediaDetailsHandler({
        ...ctx,
        callbackQuery: {
          ...ctx.callbackQuery,
          data: `media_item_${mediaId}`
        }
      });
      
      logger.info(`User ${ctx.from.id} deactivated media ${mediaId}`);
    } catch (error) {
      logger.error('Error in media_deactivate action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
  bot.action(/^media_edit_(\d+)$/, requireRole(['ADMIN', 'MANAGER']), async (ctx) => {
    try {
      const mediaId = ctx.match[1];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–µ–¥–∏–∞ –≤ —Å–µ—Å—Å–∏–∏
      if (ctx.session) {
        ctx.session.editMediaId = mediaId;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const keyboard = [
        [
          Markup.button.callback('–ù–∞–∑–≤–∞–Ω–∏–µ', `edit_media_title_${mediaId}`),
          Markup.button.callback('–û–ø–∏—Å–∞–Ω–∏–µ', `edit_media_description_${mediaId}`)
        ],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `media_item_${mediaId}`)]
      ];
      
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', Markup.inlineKeyboard(keyboard));
      
      logger.info(`User ${ctx.from.id} is editing media ${mediaId}`);
    } catch (error) {
      logger.error('Error in media_edit action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
  bot.action(/^media_delete_(\d+)$/, requireRole(['ADMIN', 'MANAGER']), async (ctx) => {
    try {
      const mediaId = ctx.match[1];
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
      const keyboard = [
        [
          Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_media_${mediaId}`),
          Markup.button.callback('‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', `media_item_${mediaId}`)
        ]
      ];
      
      await ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ–¥–∏–∞?', Markup.inlineKeyboard(keyboard));
      
      logger.info(`User ${ctx.from.id} is attempting to delete media ${mediaId}`);
    } catch (error) {
      logger.error('Error in media_delete action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  logger.info('Media handlers registered');
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
const viewMediaHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const mediaItems = [
      { id: '1', type: 'image', title: '–†–µ–∫–ª–∞–º–Ω—ã–π –±–∞–Ω–Ω–µ—Ä 1', url: 'https://example.com/banner1.jpg', status: 'ACTIVE' },
      { id: '2', type: 'video', title: '–ü—Ä–æ–º–æ-—Ä–æ–ª–∏–∫', url: 'https://example.com/promo.mp4', status: 'ACTIVE' },
      { id: '3', type: 'image', title: '–ê–∫—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', url: 'https://example.com/offer.jpg', status: 'INACTIVE' }
    ];
    
    if (!mediaItems || mediaItems.length === 0) {
      await ctx.reply('üìã –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ–¥–∏–∞
    let message = 'üìã *–î–æ—Å—Ç—É–ø–Ω—ã–π –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç:*\n\n';
    
    mediaItems.forEach((item, index) => {
      const status = getStatusText(item.status);
      
      message += `*${index + 1}. ${item.title}*\n`;
      message += `üìç –¢–∏–ø: ${getMediaTypeText(item.type)}\n`;
      message += `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ–¥–∏–∞
    const keyboard = mediaItems.map((item, index) => [
      Markup.button.callback(`${index + 1}. ${item.title}`, `media_item_${item.id}`)
    ]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ–¥–∏–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard.push([
      Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞', 'add_media')
    ]);
    keyboard.push([
      Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')
    ]);
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.MEDIA_LIST);
    }
    
    logger.info(`User ${ctx.from.id} viewed media list`);
  } catch (error) {
    logger.error('Error in view media handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ–¥–∏–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –º–µ–¥–∏–∞
const viewMediaDetailsHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –º–µ–¥–∏–∞ –∏–∑ callback_data
    const mediaId = ctx.callbackQuery.data.split('_')[2];
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const mediaItems = [
      { id: '1', type: 'image', title: '–†–µ–∫–ª–∞–º–Ω—ã–π –±–∞–Ω–Ω–µ—Ä 1', url: 'https://example.com/banner1.jpg', status: 'ACTIVE', description: '–ë–∞–Ω–Ω–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞', dimensions: '1920x1080', createdAt: '2025-07-01' },
      { id: '2', type: 'video', title: '–ü—Ä–æ–º–æ-—Ä–æ–ª–∏–∫', url: 'https://example.com/promo.mp4', status: 'ACTIVE', description: '–í–∏–¥–µ–æ—Ä–æ–ª–∏–∫ –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö', duration: '00:30', createdAt: '2025-07-05' },
      { id: '3', type: 'image', title: '–ê–∫—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', url: 'https://example.com/offer.jpg', status: 'INACTIVE', description: '–ë–∞–Ω–Ω–µ—Ä –¥–ª—è –∞–∫—Ü–∏–∏', dimensions: '1200x800', createdAt: '2025-07-10' }
    ];
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω–æ–µ –º–µ–¥–∏–∞
    const media = mediaItems.find(m => m.id === mediaId);
    
    if (!media) {
      await ctx.reply('‚ùå –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–µ–¥–∏–∞
    let message = `üìã *–î–µ—Ç–∞–ª–∏ –º–µ–¥–∏–∞ #${media.id}*\n\n`;
    message += `*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${media.title}\n`;
    message += `*–¢–∏–ø:* ${getMediaTypeText(media.type)}\n`;
    message += `*–°—Ç–∞—Ç—É—Å:* ${getStatusText(media.status)}\n`;
    message += `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${media.description}\n`;
    message += `*URL:* ${media.url}\n`;
    
    if (media.type === 'image') {
      message += `*–†–∞–∑–º–µ—Ä—ã:* ${media.dimensions}\n`;
    } else if (media.type === 'video') {
      message += `*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${media.duration}\n`;
    }
    
    message += `*–°–æ–∑–¥–∞–Ω–æ:* ${new Date(media.createdAt).toLocaleDateString('ru-RU')}\n`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const keyboard = [
      [
        Markup.button.callback('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', `media_activate_${media.id}`),
        Markup.button.callback('‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', `media_deactivate_${media.id}`)
      ],
      [
        Markup.button.callback('üñä –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `media_edit_${media.id}`),
        Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å', `media_delete_${media.id}`)
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'view_media')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    logger.info(`User ${ctx.from.id} viewed media details for media ${mediaId}`);
  } catch (error) {
    logger.error('Error in view media details handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–µ–¥–∏–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞
const getMediaTypeText = (type) => {
  const typeMap = {
    'image': 'üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    'video': 'üé¨ –í–∏–¥–µ–æ',
    'audio': 'üîä –ê—É–¥–∏–æ'
  };
  
  return typeMap[type] || type;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
const getStatusText = (status) => {
  const statusMap = {
    'ACTIVE': '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ',
    'INACTIVE': '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ',
    'PENDING': '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏'
  };
  
  return statusMap[status] || status;
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
const addMediaHandler = async (ctx) => {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
    const keyboard = [
      [
        Markup.button.callback('üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'add_media_image'),
        Markup.button.callback('üé¨ –í–∏–¥–µ–æ', 'add_media_video')
      ],
      [
        Markup.button.callback('üîä –ê—É–¥–∏–æ', 'add_media_audio'),
        Markup.button.callback('üìÑ –î–æ–∫—É–º–µ–Ω—Ç', 'add_media_document')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'view_media')]
    ];
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.MEDIA_ADD);
    }
    
    logger.info(`User ${ctx.from.id} is adding media`);
  } catch (error) {
    logger.error('Error in add media handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

module.exports = {
  viewMediaHandler,
  viewMediaDetailsHandler,
  addMediaHandler,
  register
};
