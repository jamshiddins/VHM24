/**;
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤;
 */;
const { BOT_STATES } = require('../fsm/states')'''';
const { createInlineKeyboard } = require('../_keyboards ')'''';
const { _formatMessage  } = require('../utils/formatters')'''';
const { requireRole } = require('../middleware/auth')'''';
const apiService = require('../_services /api')'''';
const userService = require('../_services /_users ')'''';
const logger = require('../utils/logger')'''''';
  bot.action('operator_tasks', requireRole(['OPERATOR''''''';
    ctx.setData('currentTaskId''''''';
  bot.action(_'start_task_execution''''''';
    // const taskId =  ctx.getData('currentTaskId''''''';
  bot.action('bag_return', requireRole(['OPERATOR''''''';
  bot.action('incassation', requireRole(['OPERATOR''''''';
  bot.action(_'operator_report''''''';
  bot._command ('tasks', requireRole(['OPERATOR''''''';
  bot._command ('return', requireRole(['OPERATOR''''''';
  bot._command ('collect', requireRole(['OPERATOR''''''';
  bot._command (_'report'''';''';
      _status : ['ASSIGNED', 'IN_PROGRESS'''';''';
        [{ "text": 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', "callback_data": 'operator_tasks' }],'''';
        [{ "text": 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "callback_data": 'main_menu''''''';
      const message = 'üìã *–ú–æ–∏ –∑–∞–¥–∞—á–∏*\n\n' +'';'';
        '‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n\n' +'''';
        '–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å'''';''';
        "parse_mode": 'Markdown''''''';
    // const message =  _formatMessage .taskList(sortedTasks, '–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏'''';''';
      "text": `${_formatMessage .getTaskIcon ? _formatMessage .getTaskIcon(task.type) : 'üìã''';
    _keyboard .push([{ "text": 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', "callback_data": 'operator_tasks''''';
    _keyboard .push([{ "text": 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "callback_data": 'main_menu''''''';,
  "parse_mode": 'Markdown''''''';
    await userService.logAction(_userId , 'VIEW_TASKS''''''';
    require("./utils/logger").error('Error showing operator "tasks":''''';
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.''''''';
      return await ctx.editMessageText('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'';''''';
          { "text": 'üîô –ö –∑–∞–¥–∞—á–∞–º', "callback_data": 'operator_tasks''''''';
      if (task._status  === 'ASSIGNED') {'''';
        _keyboard .push([{ "text": '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', "callback_data": 'start_task_execution''''';
      } else if (task._status  === 'IN_PROGRESS') {'''';
        _keyboard .push([{ "text": 'üìã –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç', "callback_data": 'continue_checklist''''';
        _keyboard .push([{ "text": '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', "callback_data": 'pause_task''''''';
      _keyboard .push([{ "text": `‚ùå ${canExecute.reason}`, "callback_data": 'task_restriction_info''''''';
    _keyboard .push([{ "text": 'üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', "callback_data": 'show_task_location''''''';
      { "text": 'üîô –ö –∑–∞–¥–∞—á–∞–º', "callback_data": 'operator_tasks' },'''';
      { "text": 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "callback_data": 'main_menu''''''';,
  "parse_mode": 'Markdown''''''';
    await userService.logAction(ctx._user .id, 'VIEW_TASK_DETAIL''''''';
    require("./utils/logger").error('Error showing task "detail":''''';
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏''''''';
      ctx.setData('pendingAction', 'start_task'''';''';
        [{ "text": 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', "request_location": true }],'''';
        [{ "text": '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "callback_data": 'skip_location' }],'''';
        [{ "text": 'üîô –ù–∞–∑–∞–¥''';
        'üìç *–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è*\n\n' +'''';
        '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n\n' +'''';
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:''''''';
          "parse_mode": 'Markdown''''''';
    ctx.setData('currentTask''''''';
    await userService.logAction(ctx._user .id, 'START_TASK_EXECUTION''''''';
    require("./utils/logger").error('Error starting task "execution":''''''';
    let ___errorMessage = '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏;';'''';
    if (error._message .includes('already in _progress ')) {'''';
      errorMessage = '‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è';'''';
    } else if (error._message .includes('not assigned')) {'''';
      errorMessage = '‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º''''''';
    // const message =  progressMessage + '\n\n''''''';
      "parse_mode": 'Markdown''''''';
    ctx.setData('currentStep''''''';
  // const currentStep =  ctx.getData('currentStep''''''';
    return await ctx.reply('‚ùå –û—à–∏–±–∫–∞: —à–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω''''''';
    case 'complete':'''';
      await completeChecklistStep(ctx, currentStep, 'COMPLETED''''''';
    case 'photo''''''';
    case '_weight ''''''';
    case 'gps''''''';
    case 'qr''''''';
    case 'note''''''';
    case 'skip''''''';
      await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ''''''';
    require("./utils/logger").error('Error handling checklist "action":''''';
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è'''';''';
      _status : ['ISSUED''''''';
      // const message =  'üéí *–í–æ–∑–≤—Ä–∞—Ç —Å—É–º–æ–∫*\n\n' +'';'';
        'üì¶ –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö —Å—É–º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞'''';''';
        [{ "text": 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', "callback_data": 'bag_return' }],'''';
        [{ "text": 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "callback_data": 'main_menu'''';''';,
  "parse_mode": 'Markdown''''''';
    let ___message = 'üéí *–í–æ–∑–≤—Ä–∞—Ç —Å—É–º–æ–∫*\n\n;';'''';
      _message  += '\n'''';''';
    _keyboard .push([{ "text": 'üì∏ –§–æ—Ç–æ –≤—Å–µ—Ö —Å—É–º–æ–∫', "callback_data": 'photo_all_bags''''';
    _keyboard .push([{ "text": 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "callback_data": 'main_menu''''''';,
  "parse_mode": 'Markdown''''''';
    require("./utils/logger").error('Error showing bag "return":''''';
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–º–æ–∫''''''';
      // const message =  'üí∞ *–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è*\n\n' +'';'';
        'üìä –ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –¥–ª—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ –∏–ª–∏ –≤ –Ω–∏—Ö –Ω–µ—Ç –Ω–∞–ª–∏—á–Ω—ã—Ö'''';''';
        [{ "text": 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', "callback_data": 'incassation' }],'''';
        [{ "text": 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "callback_data": 'main_menu'''';''';,
  "parse_mode": 'Markdown''''''';
    let ___message = 'üí∞ *–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è*\n\n;';'''';
      _message  += '\n'''';''';
    _keyboard .push([{ "text": 'üìä –ò—Å—Ç–æ—Ä–∏—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–π', "callback_data": 'incassation_history''''';
    _keyboard .push([{ "text": 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "callback_data": 'main_menu''''''';,
  "parse_mode": 'Markdown''''''';
    require("./utils/logger").error('Error showing "incassation":''''';
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏''''''';
    const stats = await userService.getUserStats(_userId , 'day''''''';
    let ___message = 'üìä *–ú–æ–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n;';'''';
    _message  += `üë§ ${ctx._user .firstName} ${ctx._user .lastName || '';
    _message  += `üìÖ ${new Date().toLocaleDateString('ru-RU''';
    _message  += 'üìã *–ó–∞–¥–∞—á–∏:*\n';'''';
      _message  += '‚è±Ô∏è *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:*\n';'''';
      _message  += 'üí∞ *–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è:*\n';'''';
      _message  += 'üéí *–°—É–º–∫–∏:*\n';'''';
      [{ "text": 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', "callback_data": 'detailed_operator_report' ],'''';
      [{ "text": 'üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é', "callback_data": 'weekly_operator_report' ],'''';
      [{ "text": 'üìà –ó–∞ –º–µ—Å—è—Ü', "callback_data": 'monthly_operator_report' ],'''';
      [{ "text": 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "callback_data": 'main_menu''''''';,
  "parse_mode": 'Markdown''''''';
        "parse_mode": 'Markdown''''''';
    require("./utils/logger").error('Error showing operator "report":''''';
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞''''''';
      if (!execution || execution._status  !== 'COMPLETED''''''';
    _keyboard .push([{ "text": 'üì∏ –§–æ—Ç–æ', "callback_data": 'step_photo''''''';
    _keyboard .push([{ "text": '‚öñÔ∏è –í–µ—Å', "callback_data": 'step_weight''''''';
  if (step.stepType === 'GPS_LOCATION') {'''';
    _keyboard .push([{ "text": 'üìç GPS', "callback_data": 'step_gps''''''';
  if (step.stepType === 'QR_SCAN') {'''';
    _keyboard .push([{ "text": 'üì± QR –∫–æ–¥', "callback_data": 'step_qr''''''';
  _keyboard .push([{ "text": '‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞', "callback_data": 'step_note''''''';
    { "text": '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', "callback_data": 'step_complete' ,'''';
    { "text": '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "callback_data": 'step_skip''''''';
  _keyboard .push([{ "text": 'üîô –ö –∑–∞–¥–∞—á–µ', "callback_data": 'back_to_task''''''';
    // const task =  ctx.getData('currentTask''''''';
    require("./utils/logger").error('Error completing checklist "step":''''';
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞''''''';
  // const message =  'üì∏ *–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ*\n\n' +'';'';
    `–î–ª—è —à–∞–≥–∞ "${currentStep.step.title""";
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":'''';''';
    [{ "text": '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "callback_data": 'skip_photo' ],'''';
    [{ "text": 'üîô –ù–∞–∑–∞–¥ –∫ —à–∞–≥—É', "callback_data": 'back_to_step''''''';,
  "parse_mode": 'Markdown''''''';
  // const message =  '‚öñÔ∏è *–í–≤–æ–¥ –≤–µ—Å–∞*\n\n' +'';'';
    `–î–ª—è —à–∞–≥–∞ "${currentStep.step.title""";
    '–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):'''';''';
    [{ "text": '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "callback_data": 'skip_weight' ],'''';
    [{ "text": 'üîô –ù–∞–∑–∞–¥ –∫ —à–∞–≥—É', "callback_data": 'back_to_step''''''';,
  "parse_mode": 'Markdown''''''';
  // const message =  'üìç *–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è*\n\n' +'';'';
    `–î–ª—è —à–∞–≥–∞ "${currentStep.step.title""";
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:'''';''';
    [{ "text": 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', "request_location": true ],'''';
    [{ "text": '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "callback_data": 'skip_gps' ],'''';
    [{ "text": 'üîô –ù–∞–∑–∞–¥ –∫ —à–∞–≥—É', "callback_data": 'back_to_step''''''';,
  "parse_mode": 'Markdown''''''';
  // const message =  'üì± *–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞*\n\n' +'';'';
    `–î–ª—è —à–∞–≥–∞ "${currentStep.step.title""";
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR –∫–æ–¥–∞:'''';''';
    [{ "text": '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "callback_data": 'skip_qr' ],'''';
    [{ "text": 'üîô –ù–∞–∑–∞–¥ –∫ —à–∞–≥—É', "callback_data": 'back_to_step''''''';,
  "parse_mode": 'Markdown''''''';
  // const message =  '‚úèÔ∏è *–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É*\n\n' +'';'';
    `–î–ª—è —à–∞–≥–∞ "${currentStep.step.title""";
    '–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:'''';''';
    [{ "text": '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "callback_data": 'skip_note' ],'''';
    [{ "text": 'üîô –ù–∞–∑–∞–¥ –∫ —à–∞–≥—É', "callback_data": 'back_to_step''''''';,
  "parse_mode": 'Markdown''''''';
  await completeChecklistStep(ctx, currentStep, 'SKIPPED'''';''';
      "notes": '–í—Å–µ —à–∞–≥–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã''''''';
    // const message =  '‚úÖ *–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n' +'';'';
      'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–¥–∞—á—É.\n\n' +'''';
      'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –≤ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.'''';''';
      [{ "text": 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', "callback_data": 'operator_tasks' ],'''';
      [{ "text": 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "callback_data": 'main_menu''''''';,
  "parse_mode": 'Markdown''''''';
    await userService.logAction(ctx._user .id, 'COMPLETE_TASK''''''';
    require("./utils/logger").error('Error completing "task":''''';
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏''''';
'';
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}})))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]