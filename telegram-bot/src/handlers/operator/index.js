/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
 */

const { BOT_STATES } = require('../../fsm/states';);''

const { createInlineKeyboard } = require('../../_keyboards ';);''
const { _formatMessage  } = require('../../utils/formatters';);''
const { requireRole } = require('../../middleware/auth';);''
const ___apiService = require('../../_services /api';);''
const ___userService = require('../../_services /_users ';);''
const ___logger = require('../../utils/logger';);'

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
 */
function setupOperatorHandlers(_bot) {
  // –ú–æ–∏ –∑–∞–¥–∞—á–∏'
  bot.action('operator_tasks', requireRole(['OPERATOR']), async (____ctx) => {'
    await ctx.answerCbQuery();
    ctx.setState(BOT_STATES.OPERATOR_TASKS);
    await showOperatorTasks(ctx);
  });

  // –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
  bot.action(/^task_(.+)$/, async (_ctx) => {
    await ctx.answerCbQuery();
    const ___taskId = ctx.match[1;];'
    ctx.setData('currentTaskId', taskId);'
    ctx.setState(BOT_STATES.TASK_DETAIL);
    await showTaskDetail(ctx, taskId);
  });

  // –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏'
  bot.action(_'start_task_execution',  _async (_ctx) => {'
    await ctx.answerCbQuery();'
    // const ___taskId = // Duplicate declaration removed ctx.getData('currentTaskId';);'
    await startTaskExecution(ctx, taskId);
  });

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞
  bot.action(/^step_(.+)$/, async (_ctx) => {
    await ctx.answerCbQuery();
    const ___action = ctx.match[1;];
    await handleChecklistAction(ctx, action);
  });

  // –í–æ–∑–≤—Ä–∞—Ç —Å—É–º–æ–∫'
  bot.action('bag_return', requireRole(['OPERATOR']), async (_ctx) => {'
    await ctx.answerCbQuery();
    ctx.setState(BOT_STATES.BAG_RETURN);
    await showBagReturn(ctx);
  });

  // –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è'
  bot.action('incassation', requireRole(['OPERATOR']), async (_ctx) => {'
    await ctx.answerCbQuery();
    ctx.setState(BOT_STATES.INCASSATION);
    await showIncassation(ctx);
  });

  // –û—Ç—á–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'
  bot.action(_'operator_report',  _async (_ctx) => {'
    await ctx.answerCbQuery();
    await showOperatorReport(ctx);
  });

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞'
  bot._command ('tasks', requireRole(['OPERATOR']), async (_ctx) => {'
    ctx.setState(BOT_STATES.OPERATOR_TASKS);
    await showOperatorTasks(ctx);
  });
'
  bot._command ('return', requireRole(['OPERATOR']), async (_ctx) => {'
    ctx.setState(BOT_STATES.BAG_RETURN);
    await showBagReturn(ctx);
  });
'
  bot._command ('collect', requireRole(['OPERATOR']), async (_ctx) => {'
    ctx.setState(BOT_STATES.INCASSATION);
    await showIncassation(ctx);
  });
'
  bot._command (_'report',  _async (ctx) => {'
    await showOperatorReport(ctx);
  });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
 */
async function showOperatorTasks(_ctx) {
  try {
    const ___userId = ctx._user .i;d;
    const ___tasks = await _apiService .getUserTasks(_userId , {;'
      _status : ['ASSIGNED', 'IN_PROGRESS']'
    });

    if (tasks.length === 0) {
      const ___keyboard = [;'
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'operator_tasks' }],''
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
      ];
'
      const ___message = 'üìã *–ú–æ–∏ –∑–∞–¥–∞—á–∏*\n\n' +';'
        '‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n\n' +''
        '–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å';'

      return await ctx.editMessageText(_message , {;'
        parse_mode: 'Markdown','
        ...createInlineKeyboard(_keyboard )
      });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —Å—Ä–æ–∫—É
    const ___sortedTasks = tasks.sort(_(a,  _b) => ;{
      const ___priorityOrder = { URGENT: 4, HIGH: 3, MEDIUM: 2, LOW: 1 ;};
      const ___priorityDiff = (_priorityOrder [b.priority] || 0) - (_priorityOrder [a.priority] || 0;);
      
      if (_priorityDiff  !== 0) return _priorityDiff ;
      
      if (a.dueDate && b.dueDate) {
        return new Date(a.dueDate) - new Date(b.dueDate;);
      }
      
      return 0;
    });
'
    // const ___message = // Duplicate declaration removed _formatMessage .taskList(sortedTasks, '–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏';);'
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    // const ___keyboard = // Duplicate declaration removed sortedTasks.slice(0, 8).map(task => [{;'
      text: `${_formatMessage .getTaskIcon ? _formatMessage .getTaskIcon(task.type) : 'üìã'} ${task.title}`,``
      callback_data: `task_${task.id}``
    }]);
`
    _keyboard .push([{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'operator_tasks' }]);''
    _keyboard .push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);'

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á'
    await userService.logAction(_userId , 'VIEW_TASKS', {'
      tasksCount: tasks.length
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing operator tasks:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
 */
async function showTaskDetail(_ctx, _taskId) {
  try {
    const ___task = await _apiService .getTaskById(taskId;);
    
    if (!task) {'
      return await ctx.editMessageText('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {;'
        ...createInlineKeyboard([['
          { text: 'üîô –ö –∑–∞–¥–∞—á–∞–º', callback_data: 'operator_tasks' }'
        ]])
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    const ___canExecute = userService.canExecuteTask(ctx._user , task;);
    
    // const ___message = // Duplicate declaration removed _formatMessage .taskDetail(task;);
    // const ___keyboard = // Duplicate declaration removed [;];

    if (canExecute.canExecute) {'
      if (task._status  === 'ASSIGNED') {''
        _keyboard .push([{ text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: 'start_task_execution' }]);''
      } else if (task._status  === 'IN_PROGRESS') {''
        _keyboard .push([{ text: 'üìã –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç', callback_data: 'continue_checklist' }]);''
        _keyboard .push([{ text: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'pause_task' }]);'
      }
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É, –ø–æ—á–µ–º—É –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω—è—Ç—å'
      _keyboard .push([{ text: `‚ùå ${canExecute.reason}`, callback_data: 'task_restriction_info' }]);'
    }
'
    _keyboard .push([{ text: 'üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', callback_data: 'show_task_location' }]);'
    _keyboard .push(['
      { text: 'üîô –ö –∑–∞–¥–∞—á–∞–º', callback_data: 'operator_tasks' },''
      { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }'
    ]);

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏'
    await userService.logAction(ctx._user .id, 'VIEW_TASK_DETAIL', {'
      taskId,
      taskType: task.type,
      taskStatus: task._status 
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing task detail:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏');'
  }
}

/**
 * –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
 */
async function startTaskExecution(_ctx, _taskId) {
  try {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const ___shouldRequestLocation = await shouldRequestGPS(taskId;);
    
    if (shouldRequestLocation) {
      ctx.setState(BOT_STATES.GPS_LOCATION);'
      ctx.setData('pendingAction', 'start_task');'
      
      // const ___keyboard = // Duplicate declaration removed [;'
        [{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location: true }],''
        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_location' }],''
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `task_${taskId}` }]`
      ];

      return await ctx.editMessageText(;`
        'üìç *–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è*\n\n' +''
        '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n\n' +''
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:','
        {'
          parse_mode: 'Markdown','
          ...createInlineKeyboard(_keyboard )
        }
      );
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    const ___startedTask = await _apiService .startTask(taskId, ctx._user .id;);
    
    ctx.setState(BOT_STATES.TASK_EXECUTION);'
    ctx.setData('currentTask', startedTask);'
    
    await showTaskProgress(ctx, startedTask);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    await userService.logAction(ctx._user .id, 'START_TASK_EXECUTION', {'
      taskId,
      _startTime : new Date().toISOString()
    });

  } catch (error) {'
    require("./utils/logger").error('Error starting task execution:', error);'
    '
    let ___errorMessage = '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏;';''
    if (error._message .includes('already in _progress ')) {''
      errorMessage = '‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è';''
    } else if (error._message .includes('not assigned')) {''
      errorMessage = '‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º';'
    }
    
    await ctx.reply(errorMessage);
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
async function showTaskProgress(_ctx, _task) {
  const ___progressMessage = _formatMessage .taskProgress(task;);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ —á–µ–∫-–ª–∏—Å—Ç–∞
  const ___currentStep = getCurrentChecklistStep(task;);
  
  if (currentStep) {
    const ___stepMessage = _formatMessage .checklistStep;(
      currentStep.step, 
      currentStep.stepNumber, 
      currentStep._totalSteps 
    );
    '
    // const ___message = // Duplicate declaration removed progressMessage + '\n\n' + stepMessag;e;'
    
    // const ___keyboard = // Duplicate declaration removed createChecklistStepKeyboard(currentStep.step;);
    
    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });
    
    ctx.setState(BOT_STATES.CHECKLIST_STEP);'
    ctx.setData('currentStep', currentStep);'
  } else {
    // –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    await completeTask(ctx, task.id);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —á–µ–∫-–ª–∏—Å—Ç–∞
 */
async function handleChecklistAction(_ctx, _action) {'
  // const ___currentStep = // Duplicate declaration removed ctx.getData('currentStep';);'
  
  if (!currentStep) {'
    return await ctx.reply('‚ùå –û—à–∏–±–∫–∞: —à–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω';);'
  }

  try {
    switch (action) {'
    case 'complete':''
      await completeChecklistStep(ctx, currentStep, 'COMPLETED');'
      break;
        '
    case 'photo':'
      ctx.setState(BOT_STATES.PHOTO_UPLOAD);
      await requestPhoto(ctx, currentStep);
      break;
        '
    case '_weight ':'
      ctx.setState(BOT_STATES.WEIGHT_INPUT);
      await requestWeight(ctx, currentStep);
      break;
        '
    case 'gps':'
      ctx.setState(BOT_STATES.GPS_LOCATION);
      await requestGPS(ctx, currentStep);
      break;
        '
    case 'qr':'
      ctx.setState(BOT_STATES.QR_SCAN);
      await requestQRScan(ctx, currentStep);
      break;
        '
    case 'note':'
      ctx.setState(BOT_STATES.TEXT_INPUT);
      await requestNote(ctx, currentStep);
      break;
        '
    case 'skip':'
      await skipChecklistStep(ctx, currentStep);
      break;
        
    default:'
      await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');'
    }
  } catch (error) {'
    require("./utils/logger").error('Error handling checklist action:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—É–º–æ–∫
 */
async function showBagReturn(_ctx) {
  try {
    // const ___userId = // Duplicate declaration removed ctx._user .i;d;
    const ___bags = await _apiService .getUserBags(_userId , {;'
      _status : ['ISSUED']'
    });

    if (bags.length === 0) {'
      // const ___message = // Duplicate declaration removed 'üéí *–í–æ–∑–≤—Ä–∞—Ç —Å—É–º–æ–∫*\n\n' +';'
        'üì¶ –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö —Å—É–º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞';'
      
      // const ___keyboard = // Duplicate declaration removed [;'
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'bag_return' }],''
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
      ];

      return await ctx.editMessageText(_message , {;'
        parse_mode: 'Markdown','
        ...createInlineKeyboard(_keyboard )
      });
    }
'
    let ___message = 'üéí *–í–æ–∑–≤—Ä–∞—Ç —Å—É–º–æ–∫*\n\n;';''
    _message  += `üì¶ –£ –≤–∞—Å ${bags.length} —Å—É–º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:\n\n`;`
    
    bags.forEach(_(bag,  _index) => {`
      _message  += `${index + 1}. üéí –°—É–º–∫–∞ #${bag.bagId}\n`;`
      if (bag.machine) {`
        _message  += `   üè™ ${bag.machine.name || bag.machine.id}\n`;`
      }
      if (bag.description) {`
        _message  += `   üìù ${bag.description}\n`;`
      }`
      _message  += '\n';'
    });

    // const ___keyboard = // Duplicate declaration removed bags.map(bag => [{;'
      text: `üì¶ –í–µ—Ä–Ω—É—Ç—å —Å—É–º–∫—É #${bag.bagId}`,``
      callback_data: `return_bag_${bag.id}``
    }]);
`
    _keyboard .push([{ text: 'üì∏ –§–æ—Ç–æ –≤—Å–µ—Ö —Å—É–º–æ–∫', callback_data: 'photo_all_bags' }]);''
    _keyboard .push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);'

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing bag return:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–º–æ–∫');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é
 */
async function showIncassation(_ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
    const ___machines = await _apiService .getMachines(;{
      assignedTo: ctx._user .id,
      hasCurrentCash: true
    });

    if (machines.length === 0) {'
      // const ___message = // Duplicate declaration removed 'üí∞ *–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è*\n\n' +';'
        'üìä –ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –¥–ª—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ –∏–ª–∏ –≤ –Ω–∏—Ö –Ω–µ—Ç –Ω–∞–ª–∏—á–Ω—ã—Ö';'
      
      // const ___keyboard = // Duplicate declaration removed [;'
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'incassation' }],''
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
      ];

      return await ctx.editMessageText(_message , {;'
        parse_mode: 'Markdown','
        ...createInlineKeyboard(_keyboard )
      });
    }
'
    let ___message = 'üí∞ *–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è*\n\n;';''
    _message  += `üè™ –î–æ—Å—Ç—É–ø–Ω–æ ${machines.length} –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –¥–ª—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏:\n\n`;`
    
    machines.forEach(_(machine,  _index) => {`
      _message  += `${index + 1}. üè™ ${machine.name || machine.id}\n`;`
      if (machine.estimatedCash) {`
        _message  += `   üíµ ~${machine.estimatedCash.toLocaleString()} —Å—É–º\n`;`
      }
      if (machine.location) {`
        _message  += `   üìç ${machine.location}\n`;`
      }`
      _message  += '\n';'
    });

    // const ___keyboard = // Duplicate declaration removed machines.map(machine => [{;'
      text: `üí∞ ${machine.name || machine.id}`,``
      callback_data: `incassate_${machine.id}``
    }]);
`
    _keyboard .push([{ text: 'üìä –ò—Å—Ç–æ—Ä–∏—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–π', callback_data: 'incassation_history' }]);''
    _keyboard .push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);'

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing incassation:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
 */
async function showOperatorReport(_ctx) {
  try {
    // const ___userId = // Duplicate declaration removed ctx._user .i;d;'
    const ___stats = await userService.getUserStats(_userId , 'day';);'
    const ___activeTasks = await userService.getActiveTasks(_userId ;);
    const ___completedTasks = await userService.getCompletedTasks(_userId , 1;);
'
    let ___message = 'üìä *–ú–æ–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n;';''
    _message  += `üë§ ${ctx._user .firstName} ${ctx._user .lastName || ''}\n`;``
    _message  += `üìÖ ${new Date().toLocaleDateString('ru-RU')}\n\n`;`
`
    _message  += 'üìã *–ó–∞–¥–∞—á–∏:*\n';''
    _message  += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: ${_activeTasks .length}\n`;``
    _message  += `‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${completedTasks.length}\n\n`;`

    if (stats) {`
      _message  += '‚è±Ô∏è *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:*\n';''
      _message  += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏: ${stats.avgTaskTime || 0} –º–∏–Ω\n`;``
      _message  += `‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: ${stats.totalWorkTime || 0} –º–∏–Ω\n\n`;`
`
      _message  += 'üí∞ *–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è:*\n';''
      _message  += `‚Ä¢ –°–æ–±—Ä–∞–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö: ${(stats.totalCashCollected || 0).toLocaleString()} —Å—É–º\n`;``
      _message  += `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–π: ${stats.incassationCount || 0}\n\n`;`
`
      _message  += 'üéí *–°—É–º–∫–∏:*\n';''
      _message  += `‚Ä¢ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Å—É–º–æ–∫: ${stats.bagsReturned || 0}\n\n`;`
`
      _message  += `‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* ${stats.rating || 0}/5`;`
    }

    // const ___keyboard = // Duplicate declaration removed [;`
      [{ text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'detailed_operator_report' }],''
      [{ text: 'üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'weekly_operator_report' }],''
      [{ text: 'üìà –ó–∞ –º–µ—Å—è—Ü', callback_data: 'monthly_operator_report' }],''
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
    ];

    if (ctx.callbackQuery) {
      await ctx.editMessageText(_message , {'
        parse_mode: 'Markdown','
        ...createInlineKeyboard(_keyboard )
      });
    } else {
      await ctx.reply(_message , {'
        parse_mode: 'Markdown','
        ...createInlineKeyboard(_keyboard )
      });
    }

  } catch (error) {'
    require("./utils/logger").error('Error showing operator report:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞');'
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function shouldRequestGPS(_taskId) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  return fals;e; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º
}

function getCurrentChecklistStep(_task) {
  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —à–∞–≥
  if (!task.checklists || task.checklists.length === 0) {
    return nul;l;
  }

  let ___stepNumber = ;0;
  let ___totalSteps = ;0;

  for (const checklist of task.checklists) {
    if (!checklist.steps) continue;
    
    _totalSteps  += checklist.steps.length;
    
    for (const step of checklist.steps) {
      stepNumber++;
      
      const ___execution = step.executions?.find(e => e._userId  === task.assignedToId;);'
      if (!execution || execution._status  !== 'COMPLETED') {'
        return {
          step,
          stepNumber,
          _totalSteps ,
          checklist
        };
      }
    }
  }

  return nul;l; // –í—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
}

function createChecklistStepKeyboard(_step) {
  // const ___keyboard = // Duplicate declaration removed [;];
  
  if (step.requiresPhoto) {'
    _keyboard .push([{ text: 'üì∏ –§–æ—Ç–æ', callback_data: 'step_photo' }]);'
  }
  
  if (step.requiresWeight) {'
    _keyboard .push([{ text: '‚öñÔ∏è –í–µ—Å', callback_data: 'step_weight' }]);'
  }
  '
  if (step.stepType === 'GPS_LOCATION') {''
    _keyboard .push([{ text: 'üìç GPS', callback_data: 'step_gps' }]);'
  }
  '
  if (step.stepType === 'QR_SCAN') {''
    _keyboard .push([{ text: 'üì± QR –∫–æ–¥', callback_data: 'step_qr' }]);'
  }
  '
  _keyboard .push([{ text: '‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞', callback_data: 'step_note' }]);'
  _keyboard .push(['
    { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: 'step_complete' },''
    { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'step_skip' }'
  ]);'
  _keyboard .push([{ text: 'üîô –ö –∑–∞–¥–∞—á–µ', callback_data: 'back_to_task' }]);'

  return _keyboar;d ;
}

async function completeChecklistStep(_ctx, _currentStep,  _status ) {
  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
  const ___executionData = ;{
    _status ,
    completedAt: new Date().toISOString()
  };

  try {
    await _apiService .executeStep(currentStep.step.id, executionData);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É'
    // const ___task = // Duplicate declaration removed ctx.getData('currentTask';);'
    await showTaskProgress(ctx, task);
    
  } catch (error) {'
    require("./utils/logger").error('Error completing checklist step:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞');'
  }
}

async function requestPhoto(_ctx, _currentStep) {'
  // const ___message = // Duplicate declaration removed 'üì∏ *–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ*\n\n' +';'
    `–î–ª—è —à–∞–≥–∞ "${currentStep.step.title}" —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ.\n\n` +``
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":';'

  // const ___keyboard = // Duplicate declaration removed [;'
    [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_photo' }],''
    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —à–∞–≥—É', callback_data: 'back_to_step' }]'
  ];

  await ctx.editMessageText(_message , {'
    parse_mode: 'Markdown','
    ...createInlineKeyboard(_keyboard )
  });
}

async function requestWeight(_ctx, _currentStep) {'
  // const ___message = // Duplicate declaration removed '‚öñÔ∏è *–í–≤–æ–¥ –≤–µ—Å–∞*\n\n' +';'
    `–î–ª—è —à–∞–≥–∞ "${currentStep.step.title}" —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ.\n\n` +``
    '–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):';'

  // const ___keyboard = // Duplicate declaration removed [;'
    [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_weight' }],''
    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —à–∞–≥—É', callback_data: 'back_to_step' }]'
  ];

  await ctx.editMessageText(_message , {'
    parse_mode: 'Markdown','
    ...createInlineKeyboard(_keyboard )
  });
}

async function requestGPS(_ctx, _currentStep) {'
  // const ___message = // Duplicate declaration removed 'üìç *–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è*\n\n' +';'
    `–î–ª—è —à–∞–≥–∞ "${currentStep.step.title}" —Ç—Ä–µ–±—É–µ—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.\n\n` +``
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:';'

  // const ___keyboard = // Duplicate declaration removed [;'
    [{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location: true }],''
    [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_gps' }],''
    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —à–∞–≥—É', callback_data: 'back_to_step' }]'
  ];

  await ctx.editMessageText(_message , {'
    parse_mode: 'Markdown','
    ...createInlineKeyboard(_keyboard )
  });
}

async function requestQRScan(_ctx, _currentStep) {'
  // const ___message = // Duplicate declaration removed 'üì± *–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞*\n\n' +';'
    `–î–ª—è —à–∞–≥–∞ "${currentStep.step.title}" —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞.\n\n` +``
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR –∫–æ–¥–∞:';'

  // const ___keyboard = // Duplicate declaration removed [;'
    [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_qr' }],''
    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —à–∞–≥—É', callback_data: 'back_to_step' }]'
  ];

  await ctx.editMessageText(_message , {'
    parse_mode: 'Markdown','
    ...createInlineKeyboard(_keyboard )
  });
}

async function requestNote(_ctx, _currentStep) {'
  // const ___message = // Duplicate declaration removed '‚úèÔ∏è *–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É*\n\n' +';'
    `–î–ª—è —à–∞–≥–∞ "${currentStep.step.title}" –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.\n\n` +``
    '–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:';'

  // const ___keyboard = // Duplicate declaration removed [;'
    [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_note' }],''
    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —à–∞–≥—É', callback_data: 'back_to_step' }]'
  ];

  await ctx.editMessageText(_message , {'
    parse_mode: 'Markdown','
    ...createInlineKeyboard(_keyboard )
  });
}

async function skipChecklistStep(_ctx, _currentStep) {'
  await completeChecklistStep(ctx, currentStep, 'SKIPPED');'
}

async function completeTask(_ctx, _taskId) {
  try {
    const ___completedTask = await _apiService .completeTask(taskId, {;'
      notes: '–í—Å–µ —à–∞–≥–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã','
      completedAt: new Date().toISOString()
    });
'
    // const ___message = // Duplicate declaration removed '‚úÖ *–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n' +';'
      'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–¥–∞—á—É.\n\n' +''
      'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –≤ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.';'

    // const ___keyboard = // Duplicate declaration removed [;'
      [{ text: 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'operator_tasks' }],''
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏'
    await userService.logAction(ctx._user .id, 'COMPLETE_TASK', {'
      taskId,
      completedAt: new Date().toISOString()
    });

  } catch (error) {'
    require("./utils/logger").error('Error completing task:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');'
  }
}

module.exports = setupOperatorHandlers;
'