const { Markup } = require('telegraf');
const { BOT_STATES } = require('../../fsm/states');
const apiService = require('../../services/api');
const logger = require('../../utils/logger');

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–æ–ª–∏ OPERATOR
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Function} requireRole - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
 */
const register = (bot, requireRole) => {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  bot.action('operator_tasks', requireRole(['OPERATOR', 'ADMIN']), async (ctx) => {
    try {
      await viewTasksHandler(ctx);
    } catch (error) {
      logger.error('Error in operator_tasks action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
  bot.action(/^task_(\d+)$/, requireRole(['OPERATOR', 'ADMIN']), async (ctx) => {
    try {
      await viewTaskDetailsHandler(ctx);
    } catch (error) {
      logger.error('Error in task details action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  bot.action(/^update_status_(\d+)$/, requireRole(['OPERATOR', 'ADMIN']), async (ctx) => {
    try {
      await updateTaskStatusHandler(ctx);
    } catch (error) {
      logger.error('Error in update task status action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  bot.action(/^set_status_(\d+)_(\w+)$/, requireRole(['OPERATOR', 'ADMIN']), async (ctx) => {
    try {
      await setTaskStatusHandler(ctx);
    } catch (error) {
      logger.error('Error in set task status action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏
  bot.action(/^accept_task_(\d+)$/, requireRole(['OPERATOR', 'ADMIN']), async (ctx) => {
    try {
      const taskId = ctx.match[1];
      const result = await apiService.updateTaskStatus(taskId, 'IN_PROGRESS');
      
      if (result.success) {
        await ctx.reply('‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–¥–∞—á–∏
        await viewTaskDetailsHandler({
          ...ctx,
          callbackQuery: {
            ...ctx.callbackQuery,
            data: `task_${taskId}`
          }
        });
      } else {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      logger.info(`User ${ctx.from.id} accepted task ${taskId}`);
    } catch (error) {
      logger.error('Error in accept task action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  bot.action(/^reject_task_(\d+)$/, requireRole(['OPERATOR', 'ADMIN']), async (ctx) => {
    try {
      const taskId = ctx.match[1];
      const result = await apiService.updateTaskStatus(taskId, 'REJECTED', {
        reason: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'
      });
      
      if (result.success) {
        await ctx.reply('‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await viewTasksHandler(ctx);
      } else {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      logger.info(`User ${ctx.from.id} rejected task ${taskId}`);
    } catch (error) {
      logger.error('Error in reject task action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ
  bot.action(/^add_comment_(\d+)$/, requireRole(['OPERATOR', 'ADMIN']), async (ctx) => {
    try {
      const taskId = ctx.match[1];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–µ—Å—Å–∏–∏
      if (ctx.session) {
        ctx.session.commentTaskId = taskId;
      }
      
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ:');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
      if (ctx.scene && ctx.scene.enter) {
        await ctx.scene.enter(BOT_STATES.OPERATOR_TASK_COMMENT);
      }
      
      logger.info(`User ${ctx.from.id} is adding comment to task ${taskId}`);
    } catch (error) {
      logger.error('Error in add comment action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
  bot.action('view_tasks', requireRole(['OPERATOR', 'ADMIN']), async (ctx) => {
    try {
      await viewTasksHandler(ctx);
    } catch (error) {
      logger.error('Error in view tasks action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  logger.info('Operator handlers registered');
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
const viewTasksHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const tasks = await apiService.getUserTasks(userId);
    
    if (!tasks || tasks.length === 0) {
      await ctx.reply('üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    let message = 'üìã *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:*\n\n';
    
    tasks.forEach((task, index) => {
      const deadline = new Date(task.deadline).toLocaleDateString('ru-RU');
      const status = getStatusText(task.status);
      
      message += `*${index + 1}. ${task.type}*\n`;
      message += `üìç –ê–≤—Ç–æ–º–∞—Ç: ${task.machineName}\n`;
      message += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}\n`;
      message += `‚è± –°—Ä–æ–∫: ${deadline}\n`;
      message += `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
    const keyboard = tasks.map((task, index) => [
      Markup.button.callback(`–ó–∞–¥–∞—á–∞ #${index + 1}: ${task.type}`, `task_${task.id}`)
    ]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]);
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.OPERATOR_TASKS);
    }
    
    logger.info(`User ${ctx.from.id} viewed tasks`);
  } catch (error) {
    logger.error('Error in view tasks handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
const viewTaskDetailsHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    const taskId = ctx.callbackQuery.data.split('_')[1];
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    const tasks = await apiService.getUserTasks(userId);
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –∑–∞–¥–∞—á—É
    const task = tasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
    const deadline = new Date(task.deadline).toLocaleDateString('ru-RU');
    const status = getStatusText(task.status);
    
    let message = `üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ #${task.id}*\n\n`;
    message += `*–¢–∏–ø:* ${task.type}\n`;
    message += `*–ê–≤—Ç–æ–º–∞—Ç:* ${task.machineName}\n`;
    message += `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.description}\n`;
    message += `*–°—Ä–æ–∫:* ${deadline}\n`;
    message += `*–°—Ç–∞—Ç—É—Å:* ${status}\n`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const keyboard = [
      [
        Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É', `accept_task_${task.id}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É', `reject_task_${task.id}`)
      ],
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `update_status_${task.id}`),
        Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', `add_comment_${task.id}`)
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á', 'view_tasks')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    logger.info(`User ${ctx.from.id} viewed task details for task ${taskId}`);
  } catch (error) {
    logger.error('Error in view task details handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
const updateTaskStatusHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    const taskId = ctx.callbackQuery.data.split('_')[2];
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    const keyboard = [
      [
        Markup.button.callback('üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ', `set_status_${taskId}_IN_PROGRESS`),
        Markup.button.callback('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', `set_status_${taskId}_COMPLETED`)
      ],
      [
        Markup.button.callback('‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', `set_status_${taskId}_PAUSED`),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ', `set_status_${taskId}_CANCELLED`)
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `task_${taskId}`)]
    ];
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:', Markup.inlineKeyboard(keyboard));
    
    logger.info(`User ${ctx.from.id} is updating status for task ${taskId}`);
  } catch (error) {
    logger.error('Error in update task status handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
const setTaskStatusHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
    const parts = ctx.callbackQuery.data.split('_');
    const taskId = parts[2];
    const newStatus = parts[3];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    const result = await apiService.updateTaskStatus(taskId, newStatus);
    
    if (result.success) {
      await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${getStatusText(newStatus)}"`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–¥–∞—á–∏
      await viewTaskDetailsHandler({
        ...ctx,
        callbackQuery: {
          ...ctx.callbackQuery,
          data: `task_${taskId}`
        }
      });
    } else {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    logger.info(`User ${ctx.from.id} set status for task ${taskId} to ${newStatus}`);
  } catch (error) {
    logger.error('Error in set task status handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
const getStatusText = (status) => {
  const statusMap = {
    'ASSIGNED': 'üìù –ù–∞–∑–Ω–∞—á–µ–Ω–æ',
    'IN_PROGRESS': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    'COMPLETED': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
    'PAUSED': '‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
    'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
  };
  
  return statusMap[status] || status;
};

module.exports = {
  viewTasksHandler,
  viewTaskDetailsHandler,
  updateTaskStatusHandler,
  setTaskStatusHandler,
  register
};
