const { Markup } = require('telegraf');
const { BOT_STATES } = require('../../fsm/states');
const apiService = require('../../services/api');
const logger = require('../../utils/logger');

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–æ–ª–∏ TECHNICIAN
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Function} requireRole - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
 */
const register = (bot, requireRole) => {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á —Ç–µ—Ö–Ω–∏–∫–∞
  bot.action('technician_tasks', requireRole(['TECHNICIAN', 'ADMIN']), async (ctx) => {
    try {
      await viewTechnicianTasksHandler(ctx);
    } catch (error) {
      logger.error('Error in technician_tasks action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏ —Ç–µ—Ö–Ω–∏–∫–∞
  bot.action(/^tech_task_(\d+)$/, requireRole(['TECHNICIAN', 'ADMIN']), async (ctx) => {
    try {
      await viewTechnicianTaskDetailsHandler(ctx);
    } catch (error) {
      logger.error('Error in tech_task details action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —Ç–µ—Ö–Ω–∏–∫–∞
  bot.action(/^tech_update_status_(\d+)$/, requireRole(['TECHNICIAN', 'ADMIN']), async (ctx) => {
    try {
      await updateTechnicianTaskStatusHandler(ctx);
    } catch (error) {
      logger.error('Error in tech_update_status action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —Ç–µ—Ö–Ω–∏–∫–∞
  bot.action(/^tech_set_status_(\d+)_(\w+)$/, requireRole(['TECHNICIAN', 'ADMIN']), async (ctx) => {
    try {
      const parts = ctx.callbackQuery.data.split('_');
      const taskId = parts[3];
      const newStatus = parts[4];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      const result = await apiService.updateTaskStatus(taskId, newStatus);
      
      if (result.success) {
        await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${getStatusText(newStatus)}"`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–¥–∞—á–∏
        await viewTechnicianTaskDetailsHandler({
          ...ctx,
          callbackQuery: {
            ...ctx.callbackQuery,
            data: `tech_task_${taskId}`
          }
        });
      } else {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      logger.info(`User ${ctx.from.id} set status for technician task ${taskId} to ${newStatus}`);
    } catch (error) {
      logger.error('Error in tech_set_status action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ —Ç–µ—Ö–Ω–∏–∫–∞
  bot.action(/^tech_accept_(\d+)$/, requireRole(['TECHNICIAN', 'ADMIN']), async (ctx) => {
    try {
      const taskId = ctx.match[1];
      const result = await apiService.updateTaskStatus(taskId, 'IN_PROGRESS');
      
      if (result.success) {
        await ctx.reply('‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–¥–∞—á–∏
        await viewTechnicianTaskDetailsHandler({
          ...ctx,
          callbackQuery: {
            ...ctx.callbackQuery,
            data: `tech_task_${taskId}`
          }
        });
      } else {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      logger.info(`User ${ctx.from.id} accepted technician task ${taskId}`);
    } catch (error) {
      logger.error('Error in tech_accept action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ç–µ—Ö–Ω–∏–∫–∞
  bot.action(/^tech_reject_(\d+)$/, requireRole(['TECHNICIAN', 'ADMIN']), async (ctx) => {
    try {
      const taskId = ctx.match[1];
      const result = await apiService.updateTaskStatus(taskId, 'REJECTED', {
        reason: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ç–µ—Ö–Ω–∏–∫–æ–º'
      });
      
      if (result.success) {
        await ctx.reply('‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await viewTechnicianTasksHandler(ctx);
      } else {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      logger.info(`User ${ctx.from.id} rejected technician task ${taskId}`);
    } catch (error) {
      logger.error('Error in tech_reject action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
  bot.action('technician_diagnostics', requireRole(['TECHNICIAN', 'ADMIN']), async (ctx) => {
    try {
      await diagnosticsMachinesHandler(ctx);
    } catch (error) {
      logger.error('Error in technician_diagnostics action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤
  bot.action('technician_repair_history', requireRole(['TECHNICIAN', 'ADMIN']), async (ctx) => {
    try {
      await repairHistoryHandler(ctx);
    } catch (error) {
      logger.error('Error in technician_repair_history action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
  bot.action('technician_checklists', requireRole(['TECHNICIAN', 'ADMIN']), async (ctx) => {
    try {
      await maintenanceChecklistsHandler(ctx);
    } catch (error) {
      logger.error('Error in technician_checklists action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á —Ç–µ—Ö–Ω–∏–∫–∞
  bot.action('view_technician_tasks', requireRole(['TECHNICIAN', 'ADMIN']), async (ctx) => {
    try {
      await viewTechnicianTasksHandler(ctx);
    } catch (error) {
      logger.error('Error in view_technician_tasks action handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  logger.info('Technician handlers registered');
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏–∫–∞
const viewTechnicianTasksHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const tasks = [
      { id: '1', type: '–†–µ–º–æ–Ω—Ç', machineName: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #101', description: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫', status: 'ASSIGNED', deadline: '2025-07-20' },
      { id: '2', type: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', machineName: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #102', description: '–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û', status: 'IN_PROGRESS', deadline: '2025-07-18' },
      { id: '3', type: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', machineName: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #103', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏', status: 'COMPLETED', deadline: '2025-07-15' }
    ];
    
    if (!tasks || tasks.length === 0) {
      await ctx.reply('üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    let message = 'üìã *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:*\n\n';
    
    tasks.forEach((task, index) => {
      const deadline = new Date(task.deadline).toLocaleDateString('ru-RU');
      const status = getStatusText(task.status);
      
      message += `*${index + 1}. ${task.type}*\n`;
      message += `üìç –ê–≤—Ç–æ–º–∞—Ç: ${task.machineName}\n`;
      message += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}\n`;
      message += `‚è± –°—Ä–æ–∫: ${deadline}\n`;
      message += `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
    const keyboard = tasks.map((task, index) => [
      Markup.button.callback(`–ó–∞–¥–∞—á–∞ #${index + 1}: ${task.type}`, `tech_task_${task.id}`)
    ]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]);
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.TECHNICIAN_TASKS);
    }
    
    logger.info(`User ${ctx.from.id} viewed technician tasks`);
  } catch (error) {
    logger.error('Error in view technician tasks handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏ —Ç–µ—Ö–Ω–∏–∫–∞
const viewTechnicianTaskDetailsHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    const taskId = ctx.callbackQuery.data.split('_')[2];
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const tasks = [
      { id: '1', type: '–†–µ–º–æ–Ω—Ç', machineName: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #101', description: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫', status: 'ASSIGNED', deadline: '2025-07-20' },
      { id: '2', type: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', machineName: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #102', description: '–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û', status: 'IN_PROGRESS', deadline: '2025-07-18' },
      { id: '3', type: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', machineName: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #103', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏', status: 'COMPLETED', deadline: '2025-07-15' }
    ];
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –∑–∞–¥–∞—á—É
    const task = tasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
    const deadline = new Date(task.deadline).toLocaleDateString('ru-RU');
    const status = getStatusText(task.status);
    
    let message = `üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ #${task.id}*\n\n`;
    message += `*–¢–∏–ø:* ${task.type}\n`;
    message += `*–ê–≤—Ç–æ–º–∞—Ç:* ${task.machineName}\n`;
    message += `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.description}\n`;
    message += `*–°—Ä–æ–∫:* ${deadline}\n`;
    message += `*–°—Ç–∞—Ç—É—Å:* ${status}\n`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const keyboard = [
      [
        Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É', `tech_accept_${task.id}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É', `tech_reject_${task.id}`)
      ],
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `tech_update_status_${task.id}`),
        Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', `tech_add_comment_${task.id}`)
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á', 'view_technician_tasks')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    logger.info(`User ${ctx.from.id} viewed technician task details for task ${taskId}`);
  } catch (error) {
    logger.error('Error in view technician task details handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —Ç–µ—Ö–Ω–∏–∫–∞
const updateTechnicianTaskStatusHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    const taskId = ctx.callbackQuery.data.split('_')[3];
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    const keyboard = [
      [
        Markup.button.callback('üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ', `tech_set_status_${taskId}_IN_PROGRESS`),
        Markup.button.callback('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', `tech_set_status_${taskId}_COMPLETED`)
      ],
      [
        Markup.button.callback('‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', `tech_set_status_${taskId}_PAUSED`),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ', `tech_set_status_${taskId}_CANCELLED`)
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `tech_task_${taskId}`)]
    ];
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:', Markup.inlineKeyboard(keyboard));
    
    logger.info(`User ${ctx.from.id} is updating status for technician task ${taskId}`);
  } catch (error) {
    logger.error('Error in update technician task status handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
const getStatusText = (status) => {
  const statusMap = {
    'ASSIGNED': 'üìù –ù–∞–∑–Ω–∞—á–µ–Ω–æ',
    'IN_PROGRESS': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    'COMPLETED': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
    'PAUSED': '‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
    'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
  };
  
  return statusMap[status] || status;
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
const diagnosticsMachinesHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const machines = [
      { id: '101', name: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #101', status: 'OPERATIONAL', lastDiagnostics: '2025-07-10', issues: [] },
      { id: '102', name: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #102', status: 'WARNING', lastDiagnostics: '2025-07-05', issues: ['–ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã'] },
      { id: '103', name: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #103', status: 'ERROR', lastDiagnostics: '2025-07-01', issues: ['–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω –∫—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫', '–û—à–∏–±–∫–∞ –¥–æ–∑–∞—Ç–æ—Ä–∞'] },
      { id: '104', name: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #104', status: 'OPERATIONAL', lastDiagnostics: '2025-07-12', issues: [] },
      { id: '105', name: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #105', status: 'MAINTENANCE', lastDiagnostics: '2025-07-08', issues: ['–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'] }
    ];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–≤—Ç–æ–º–∞—Ç–æ–≤
    let message = 'üîß *–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–æ–≤:*\n\n';
    
    machines.forEach((machine, index) => {
      const status = getMachineStatusText(machine.status);
      
      message += `*${index + 1}. ${machine.name}*\n`;
      message += `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n`;
      message += `üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: ${machine.lastDiagnostics}\n`;
      
      if (machine.issues.length > 0) {
        message += `‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: ${machine.issues.join(', ')}\n`;
      } else {
        message += `‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n`;
      }
      
      message += '\n';
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
    const keyboard = [
      [
        Markup.button.callback('üîç –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É', 'run_diagnostics'),
        Markup.button.callback('üìã –ß–µ–∫-–ª–∏—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏', 'diagnostics_checklist')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫', 'error_statistics'),
        Markup.button.callback('üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥', 'scan_machine_qr')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.TECHNICIAN_DIAGNOSTICS);
    }
    
    logger.info(`User ${ctx.from.id} viewed machine diagnostics`);
  } catch (error) {
    logger.error('Error in diagnostics machines handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∞–≤—Ç–æ–º–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
const repairHistoryHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const repairs = [
      { id: '1', machine: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #101', date: '2025-07-01', type: '–ó–∞–º–µ–Ω–∞ –∫—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞', technician: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', status: 'COMPLETED' },
      { id: '2', machine: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #102', date: '2025-07-05', type: '–†–µ–º–æ–Ω—Ç –¥–æ–∑–∞—Ç–æ—Ä–∞', technician: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', status: 'COMPLETED' },
      { id: '3', machine: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #103', date: '2025-07-10', type: '–ó–∞–º–µ–Ω–∞ –ø–æ–º–ø—ã', technician: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', status: 'IN_PROGRESS' },
      { id: '4', machine: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #101', date: '2025-07-15', type: '–ß–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã', technician: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', status: 'SCHEDULED' }
    ];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–º–æ–Ω—Ç–æ–≤
    let message = 'üîß *–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:*\n\n';
    
    repairs.forEach((repair, index) => {
      const status = getRepairStatusText(repair.status);
      
      message += `*${index + 1}. ${repair.machine} (${repair.date})*\n`;
      message += `üîß –¢–∏–ø: ${repair.type}\n`;
      message += `üë®‚Äçüîß –¢–µ—Ö–Ω–∏–∫: ${repair.technician}\n`;
      message += `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤
    const keyboard = [
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–º–æ–Ω—Ç', 'add_repair'),
        Markup.button.callback('üîç –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ–º–∞—Ç—É', 'search_repairs_by_machine')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤', 'repair_statistics'),
        Markup.button.callback('üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ', 'filter_repairs_by_date')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.TECHNICIAN_REPAIR_HISTORY);
    }
    
    logger.info(`User ${ctx.from.id} viewed repair history`);
  } catch (error) {
    logger.error('Error in repair history handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
const maintenanceChecklistsHandler = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.user?.id || '1';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const checklists = [
      { id: '1', name: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', items: 5, completed: 0, machine: '–í—Å–µ –∞–≤—Ç–æ–º–∞—Ç—ã' },
      { id: '2', name: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', items: 10, completed: 0, machine: '–í—Å–µ –∞–≤—Ç–æ–º–∞—Ç—ã' },
      { id: '3', name: '–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', items: 15, completed: 0, machine: '–í—Å–µ –∞–≤—Ç–æ–º–∞—Ç—ã' },
      { id: '4', name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', items: 20, completed: 0, machine: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç #101' }
    ];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —á–µ–∫-–ª–∏—Å—Ç–æ–≤
    let message = 'üìã *–ß–µ–∫-–ª–∏—Å—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:*\n\n';
    
    checklists.forEach((checklist, index) => {
      const progress = checklist.completed > 0 ? `${checklist.completed}/${checklist.items}` : '0%';
      
      message += `*${index + 1}. ${checklist.name}*\n`;
      message += `üìç –ê–≤—Ç–æ–º–∞—Ç: ${checklist.machine}\n`;
      message += `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    const keyboard = [
      [
        Markup.button.callback('‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç', 'complete_checklist'),
        Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç', 'create_checklist')
      ],
      [
        Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', 'checklist_history'),
        Markup.button.callback('üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥', 'scan_checklist_qr')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if (ctx.scene && ctx.scene.enter) {
      await ctx.scene.enter(BOT_STATES.TECHNICIAN_CHECKLISTS);
    }
    
    logger.info(`User ${ctx.from.id} viewed maintenance checklists`);
  } catch (error) {
    logger.error('Error in maintenance checklists handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∞
const getMachineStatusText = (status) => {
  const statusMap = {
    'OPERATIONAL': '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç',
    'WARNING': '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
    'ERROR': '‚ùå –û—à–∏–±–∫–∞',
    'MAINTENANCE': 'üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
    'OFFLINE': '‚ö´ –ù–µ –≤ —Å–µ—Ç–∏'
  };
  
  return statusMap[status] || status;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–º–æ–Ω—Ç–∞
const getRepairStatusText = (status) => {
  const statusMap = {
    'SCHEDULED': 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
    'IN_PROGRESS': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    'COMPLETED': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω',
    'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
  };
  
  return statusMap[status] || status;
};

module.exports = {
  viewTechnicianTasksHandler,
  viewTechnicianTaskDetailsHandler,
  updateTechnicianTaskStatusHandler,
  diagnosticsMachinesHandler,
  repairHistoryHandler,
  maintenanceChecklistsHandler,
  register
};
