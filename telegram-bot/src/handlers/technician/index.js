/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–æ–≤ VHM24
 */

const { BOT_STATES } = require('../../fsm/states';);''

const { createInlineKeyboard } = require('../../_keyboards ';);''
const { requireRole } = require('../../middleware/auth';);''
const ___apiService = require('../../_services /api';);''
const ___userService = require('../../_services /_users ';);''
const ___logger = require('../../utils/logger';);'

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–æ–≤
 */
function setupTechnicianHandlers(_bot) {
  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏'
  bot.action('tech_tasks', requireRole(['TECHNICIAN', 'ADMIN']), async (_ctx) => {'
    await ctx.answerCbQuery();
    ctx.setState(BOT_STATES.TECH_TASKS);
    await showTechTasks(ctx);
  });

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
  bot.action('tech_diagnostics', requireRole(['TECHNICIAN', 'ADMIN']), async (_ctx) => {'
    await ctx.answerCbQuery();
    ctx.setState(BOT_STATES.DIAGNOSTICS);
    await showDiagnostics(ctx);
  });

  // –§–æ—Ç–æ –æ—Ç—á–µ—Ç—ã'
  bot.action('tech_photo_reports', requireRole(['TECHNICIAN', 'ADMIN']), async (_ctx) => {'
    await ctx.answerCbQuery();
    ctx.setState(BOT_STATES.PHOTO_REPORTS);
    await showPhotoReports(ctx);
  });

  // –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤'
  bot.action('tech_history', requireRole(['TECHNICIAN', 'ADMIN']), async (_ctx) => {'
    await ctx.answerCbQuery();
    ctx.setState(BOT_STATES.REPAIR_HISTORY);
    await showRepairHistory(ctx);
  });

  // –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∞
  bot.action(/^diagnose_(.+)$/, async (_ctx) => {
    await ctx.answerCbQuery();
    const ___machineId = ctx.match[1;];'
    ctx.setData('selectedMachineId', machineId);'
    ctx.setState(BOT_STATES.MACHINE_DIAGNOSTICS);
    await startMachineDiagnostics(ctx, machineId);
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–º–æ–Ω—Ç–µ
  bot.action(/^repair_report_(.+)$/, async (_ctx) => {
    await ctx.answerCbQuery();
    const ___taskId = ctx.match[1;];'
    ctx.setData('selectedTaskId', taskId);'
    ctx.setState(BOT_STATES.REPAIR_REPORT);
    await startRepairReport(ctx, taskId);
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  bot.action(/^detailed_diagnostic_(.+)$/, async (_ctx) => {
    await ctx.answerCbQuery();
    // const ___machineId = // Duplicate declaration removed ctx.match[1;];
    await showDetailedDiagnostic(ctx, machineId);
  });

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞'
  bot._command ('diagnostics', requireRole(['TECHNICIAN', 'ADMIN']), async (_ctx) => {'
    ctx.setState(BOT_STATES.DIAGNOSTICS);
    await showDiagnostics(ctx);
  });
'
  bot._command ('repair', requireRole(['TECHNICIAN', 'ADMIN']), async (_ctx) => {'
    ctx.setState(BOT_STATES.TECH_TASKS);
    await showTechTasks(ctx);
  });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
 */
async function showTechTasks(_ctx) {
  try {
    const ___techTasks = await _apiService .getUserTasks(ctx._user .id, {;'
      type: ['REPAIR', 'MAINTENANCE', 'INSPECTION', 'EMERGENCY'],''
      _status : ['ASSIGNED', 'IN_PROGRESS'],'
      limit: 10
    });
'
    let ___message = 'üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏*\n\n;';'
    
    if (techTasks.length === 0) {'
      _message  += '‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á';'
      
      const ___keyboard = [;'
        [{ text: 'üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'tech_diagnostics' }],''
        [{ text: 'üì∏ –§–æ—Ç–æ –æ—Ç—á–µ—Ç—ã', callback_data: 'tech_photo_reports' }],''
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'tech_tasks' }],''
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
      ];

      return await ctx.editMessageText(_message , {;'
        parse_mode: 'Markdown','
        ...createInlineKeyboard(_keyboard )
      });
    }
'
    _message  += `üìã –£ –≤–∞—Å ${techTasks.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n`;`
    
    techTasks.forEach(_(task,  _index) => {`
      const ___urgencyIcon = task.priority === 'URGENT' ? 'üö®' : task.priority === 'HIGH' ? 'üî¥' : 'üü°;';''
      _message  += `${index + 1}. ${urgencyIcon} ${getTaskIcon(task.type)} *${task.title}*\n`;``
      _message  += `   üè™ ${task.machine?.name || task.machine?.id}\n`;`
      
      if (task.dueDate) {
        const ___timeLeft = getTimeRemaining(task.dueDate;);`
        _message  += `   ‚è∞ ${timeLeft}\n`;`
      }
      
      if (task.lastError) {`
        _message  += `   ‚ùå –û—à–∏–±–∫–∞: ${task.lastError}\n`;`
      }`
      _message  += '\n';'
    });

    // const ___keyboard = // Duplicate declaration removed techTasks.slice(0, 6).map(task => [{;'
      text: `${getTaskIcon(task.type)} ${task.machine?.name || task.machine?.id}`,``
      callback_data: `tech_task_${task.id}``
    }]);

    _keyboard .push([`
      { text: 'üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'tech_diagnostics' },''
      { text: 'üì∏ –§–æ—Ç–æ –æ—Ç—á–µ—Ç—ã', callback_data: 'tech_photo_reports' }'
    ]);'
    _keyboard .push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);'

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing tech tasks:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
 */
async function showDiagnostics(_ctx) {
  try {
    const ___machines = await _apiService .getMachines(;{
      hasIssues: true,
      includeOffline: true
    });
'
    let ___message = 'üìä *–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–æ–≤*\n\n;';'
    
    if (machines.length === 0) {'
      _message  += '‚úÖ –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —à—Ç–∞—Ç–Ω–æ';'
      
      // const ___keyboard = // Duplicate declaration removed [;'
        [{ text: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏', callback_data: 'tech_tasks' }],''
        [{ text: 'üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'system_stats' }],''
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'tech_diagnostics' }],''
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
      ];

      return await ctx.editMessageText(_message , {;'
        parse_mode: 'Markdown','
        ...createInlineKeyboard(_keyboard )
      });
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É'
    const ___offline = machines.filter(m => m._status  === 'OFFLINE';);''
    const ___errors = machines.filter(m => m._status  === 'ERROR';);''
    const ___warnings = machines.filter(m => m._status  === 'WARNING';);'
'
    _message  += `üî¥ *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ:* ${offline.length + errors.length}\n`;``
    _message  += `üü° *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:* ${warnings.length}\n\n`;`

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (offline.length > 0) {`
      _message  += `üìµ *–û—Ñ—Ñ–ª–∞–π–Ω (${offline.length}):*\n`;`
      offline.slice(0, 3).forEach(_(___machine) => {`
        _message  += `‚Ä¢ ${machine.name || machine.id} - ${getDowntime(machine.lastSeen)}\n`;`
      });`
      if (offline.length > 3) _message  += `... –∏ –µ—â–µ ${offline.length - 3}\n`;``
      _message  += '\n';'
    }

    if (errors.length > 0) {'
      _message  += `‚ùå *–û—à–∏–±–∫–∏ (${errors.length}):*\n`;`
      errors.slice(0, 3).forEach(_(machine) => {`
        _message  += `‚Ä¢ ${machine.name || machine.id} - ${machine.lastError}\n`;`
      });`
      if (errors.length > 3) _message  += `... –∏ –µ—â–µ ${errors.length - 3}\n`;``
      _message  += '\n';'
    }

    if (warnings.length > 0) {'
      _message  += `‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (${warnings.length}):*\n`;`
      warnings.slice(0, 2).forEach(_(machine) => {`
        _message  += `‚Ä¢ ${machine.name || machine.id} - ${machine.warning}\n`;`
      });`
      if (warnings.length > 2) _message  += `... –∏ –µ—â–µ ${warnings.length - 2}\n`;`
    }

    const ___problemMachines = [...offline, ...errors, ...warnings;];
    // const ___keyboard = // Duplicate declaration removed problemMachines.slice(0, 5).map(machine => [{;`
      text: `${getStatusIcon(machine._status )} ${machine.name || machine.id}`,``
      callback_data: `diagnose_${machine.id}``
    }]);

    _keyboard .push([`
      { text: 'üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'detailed_diagnostics' },''
      { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã', callback_data: 'system_stats' }'
    ]);'
    _keyboard .push([{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'tech_diagnostics' }]);''
    _keyboard .push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);'

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing diagnostics:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç—á–µ—Ç—ã
 */
async function showPhotoReports(_ctx) {
  try {
    const ___recentReports = await _apiService .getPhotoReports(;{
      technicianId: ctx._user .id,
      days: 7,
      limit: 10
    });
'
    let ___message = 'üì∏ *–§–æ—Ç–æ –æ—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é*\n\n;';'
    
    if (recentReports.length === 0) {'
      _message  += 'üìÅ –ù–µ—Ç —Ñ–æ—Ç–æ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π';'
      
      // const ___keyboard = // Duplicate declaration removed [;'
        [{ text: 'üìã –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç', callback_data: 'create_photo_report' }],''
        [{ text: 'üìä –ê—Ä—Ö–∏–≤ –æ—Ç—á–µ—Ç–æ–≤', callback_data: 'photo_reports_archive' }],''
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
      ];

      return await ctx.editMessageText(_message , {;'
        parse_mode: 'Markdown','
        ...createInlineKeyboard(_keyboard )
      });
    }
'
    _message  += `üìä –°–æ–∑–¥–∞–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${recentReports.length}\n\n`;`
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    const ___reportsByType = recentReports.reduce(_(acc,  __report) => {;`
      const ___type = report.type || 'OTHER;';'
      if (!acc[type]) acc[type] = [];
      acc[type].push(report);
      return ac;c;
    }, {});

    Object.keys(reportsByType).forEach(_(_type) => {
      const ___typeName = getReportTypeName(type;);
      const ___reports = reportsByType[type;];'
      _message  += `${getReportTypeIcon(type)} *${typeName}:* ${reports.length}\n`;`
      
      reports.slice(0, 2).forEach(_(report) => {`
        _message  += `  ‚Ä¢ ${report.machine?.name || report.machine?.id} - ${formatDate(report.createdAt)}\n`;`
      });
      
      if (reports.length > 2) {`
        _message  += `  ... –∏ –µ—â–µ ${reports.length - 2}\n`;`
      }`
      _message  += '\n';'
    });

    // const ___keyboard = // Duplicate declaration removed ;[
      ['
        { text: 'üìã –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç', callback_data: 'create_photo_report' },''
        { text: 'üìä –ê—Ä—Ö–∏–≤ –æ—Ç—á–µ—Ç–æ–≤', callback_data: 'photo_reports_archive' }'
      ],
      ['
        { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤', callback_data: 'reports_stats' },''
        { text: 'üîç –ü–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤', callback_data: 'search_reports' }'
      ],'
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing photo reports:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –æ—Ç—á–µ—Ç–æ–≤');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–º–æ–Ω—Ç–æ–≤
 */
async function showRepairHistory(_ctx) {
  try {
    const ___repairs = await _apiService .getRepairHistory(;{
      technicianId: ctx._user .id,
      limit: 15,
      includeStats: true
    });
'
    let ___message = 'üìã *–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤*\n\n;';'
    
    if (repairs.items.length === 0) {'
      _message  += 'üìÅ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞';'
      
      // const ___keyboard = // Duplicate declaration removed [;'
        [{ text: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏', callback_data: 'tech_tasks' }],''
        [{ text: 'üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'tech_diagnostics' }],''
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
      ];

      return await ctx.editMessageText(_message , {;'
        parse_mode: 'Markdown','
        ...createInlineKeyboard(_keyboard )
      });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (repairs.stats) {'
      _message  += 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:*\n';''
      _message  += `‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–µ–º–æ–Ω—Ç–æ–≤: ${repairs.stats.totalRepairs}\n`;``
      _message  += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${repairs.stats.avgRepairTime} –º–∏–Ω\n`;``
      _message  += `‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${repairs.stats.successRate}%\n\n`;`
    }
`
    _message  += 'üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç—ã:*\n\n';'
    
    repairs.items.slice(0, 8).forEach(_(repair,  _index) => {'
      const ___statusIcon = repair._status  === 'COMPLETED' ? '‚úÖ' : repair._status  === 'FAILED' ? '‚ùå' : 'üîÑ;';''
      _message  += `${index + 1}. ${_statusIcon } ${repair.machine?.name || repair.machine?.id}\n`;``
      _message  += `   üîß ${repair.issue}\n`;``
      _message  += `   üìÖ ${formatDate(repair.completedAt || repair.createdAt)}\n`;`
      
      if (repair.duration) {`
        _message  += `   ‚è±Ô∏è ${Math.round(repair.duration / 60)} –º–∏–Ω\n`;`
      }`
      _message  += '\n';'
    });

    if (repairs.items.length > 8) {'
      _message  += `... –∏ –µ—â–µ ${repairs.items.length - 8} —Ä–µ–º–æ–Ω—Ç–æ–≤\n`;`
    }

    // const ___keyboard = // Duplicate declaration removed ;[
      [`
        { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'repair_detailed_stats' },''
        { text: 'üîç –ü–æ–∏—Å–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤', callback_data: 'search_repairs' }'
      ],
      ['
        { text: 'üìà –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞', callback_data: 'export_repair_history' },''
        { text: 'üîß –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏', callback_data: 'tech_tasks' }'
      ],'
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing repair history:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤');'
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∞
 */
async function startMachineDiagnostics(_ctx, _machineId) {
  try {'
    await ctx.editMessageText('üîç –ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∞...', {''
      parse_mode: 'Markdown''
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ API
    const ___diagnostic = await _apiService .runMachineDiagnostic(machineId, ;{
      technicianId: ctx._user .id,
      fullCheck: true
    });

    const ___machine = await _apiService .getMachineById(machineId;);
    '
    let ___message = `üîç *–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: ${machine.name || machine.id}*\n\n;`;``
    _message  += `üìä *–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:* ${getStatusIcon(diagnostic._status )} ${getStatusName(diagnostic._status )}\n`;``
    _message  += `üìÖ –ó–∞–ø—É—â–µ–Ω–∞: ${formatDate(diagnostic.startedAt)}\n`;``
    _message  += `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${diagnostic.duration || 0} —Å–µ–∫\n\n`;`

    if (diagnostic.results) {`
      _message  += 'üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:*\n\n';'
      
      Object.keys(diagnostic.results).forEach(_(__component) => {
        const ___result = diagnostic.results[component;];'
        const ___icon = result._status  === 'OK' ? '‚úÖ' : result._status  === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå;';''
        _message  += `${_icon } *${getComponentName(component)}*\n`;`
        
        if (result.value !== undefined) {`
          _message  += `   –ó–Ω–∞—á–µ–Ω–∏–µ: ${result.value} ${result.unit || ''}\n`;`
        }
        
        if (result._message ) {`
          _message  += `   ${result._message }\n`;`
        }`
        _message  += '\n';'
      });
    }

    if (diagnostic.recommendations && diagnostic.recommendations.length > 0) {'
      _message  += 'üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n';'
      diagnostic.recommendations.forEach(_(rec,  _index) => {'
        _message  += `${index + 1}. ${rec}\n`;`
      });
    }

    // const ___keyboard = // Duplicate declaration removed [;`
      [{ text: 'üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data: `detailed_diagnostic_${machineId}` }],``
      [{ text: 'üîß –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Ä–µ–º–æ–Ω—Ç–∞', callback_data: `create_repair_${machineId}` }],``
      [{ text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É', callback_data: `diagnose_${machineId}` }],``
      [{ text: 'üîô –ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ', callback_data: 'tech_diagnostics' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É'
    await userService.logAction(ctx._user .id, 'DIAGNOSTIC_COMPLETED', {'
      machineId,
      _status : diagnostic._status ,
      duration: diagnostic.duration
    });

  } catch (error) {'
    require("./utils/logger").error('Error running machine diagnostics:', error);''
    await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');'
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
 */
async function showDetailedDiagnostic(_ctx, _machineId) {
  try {
    // const ___diagnostic = // Duplicate declaration removed await _apiService .getDetailedDiagnostic(machineId;);
    '
    let ___message = 'üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞*\n\n;';''
    _message  += `üè™ –ê–≤—Ç–æ–º–∞—Ç: ${diagnostic.machine?.name || diagnostic.machine?.id}\n`;``
    _message  += `üìç –õ–æ–∫–∞—Ü–∏—è: ${diagnostic.machine?.location || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;``
    _message  += `üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${formatDate(diagnostic.lastCheck)}\n\n`;`

    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if (diagnostic.system) {`
      _message  += 'üñ•Ô∏è *–°–∏—Å—Ç–µ–º–∞:*\n';''
      _message  += `‚Ä¢ CPU: ${diagnostic.system.cpu}%\n`;``
      _message  += `‚Ä¢ RAM: ${diagnostic.system.memory}%\n`;``
      _message  += `‚Ä¢ –î–∏—Å–∫: ${diagnostic.system.storage}%\n`;``
      _message  += `‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${diagnostic.system.temperature}¬∞C\n\n`;`
    }

    // –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if (diagnostic.hardware) {`
      _message  += '‚öôÔ∏è *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:*\n';'
      Object.keys(diagnostic.hardware).forEach(_(component) => {
        const ___hw = diagnostic.hardware[component;];'
        // const ___icon = // Duplicate declaration removed hw._status  === 'OK' ? '‚úÖ' : hw._status  === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå;';''
        _message  += `${_icon } ${getComponentName(component)}: ${hw.value || hw._status }\n`;`
      });`
      _message  += '\n';'
    }

    // –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
    if (diagnostic.supplies) {'
      _message  += 'üì¶ *–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏:*\n';'
      Object.keys(diagnostic.supplies).forEach(_(_supply) => {
        const ___s = diagnostic.supplies[supply;];
        const ___level = s._level  || ;0;'
        // const ___icon = // Duplicate declaration removed _level  > 50 ? 'üü¢' : _level  > 20 ? 'üü°' : 'üî¥;';''
        _message  += `${_icon } ${supply}: ${_level }%\n`;`
      });
    }

    // const ___keyboard = // Duplicate declaration removed [;`
      [{ text: 'üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞', callback_data: `export_diagnostic_${machineId}` }],``
      [{ text: 'üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `photo_diagnostic_${machineId}` }],``
      [{ text: 'üîô –ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ', callback_data: 'tech_diagnostics' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

  } catch (error) {'
    require("./utils/logger").error('Error showing detailed diagnostic:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');'
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function getTaskIcon(_type) {
  const ___icons = {;'
    REPAIR: 'üîß',''
    MAINTENANCE: '‚öôÔ∏è',''
    INSPECTION: 'üîç',''
    EMERGENCY: 'üö®',''
    CLEANING: 'üßπ',''
    REFILL: '‚õΩ''
  };'
  return icons[type] || 'üìã;';'
}

function getStatusIcon(_status ) {
  // const ___icons = // Duplicate declaration removed {;'
    ONLINE: 'üü¢',''
    OFFLINE: 'üî¥',''
    ERROR: '‚ùå',''
    WARNING: '‚ö†Ô∏è',''
    MAINTENANCE: 'üîß''
  };'
  return icons[_status ] || '‚ö™;';'
}

function getStatusName(_status ) {
  const ___names = {;'
    ONLINE: '–í —Å–µ—Ç–∏',''
    OFFLINE: '–ù–µ –≤ —Å–µ—Ç–∏',''
    ERROR: '–û—à–∏–±–∫–∞',''
    WARNING: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',''
    MAINTENANCE: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ''
  };
  return _names [_status ] || _statu;s ;
}

function getComponentName(_component) {
  // const ___names = // Duplicate declaration removed {;'
    pump: '–ù–∞—Å–æ—Å',''
    valve: '–ö–ª–∞–ø–∞–Ω',''
    sensor: '–î–∞—Ç—á–∏–∫',''
    display: '–î–∏—Å–ø–ª–µ–π',''
    payment: '–û–ø–ª–∞—Ç–∞',''
    dispenser: '–î–æ–∑–∞—Ç–æ—Ä',''
    cooling: '–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ',''
    heating: '–ù–∞–≥—Ä–µ–≤''
  };
  return _names [component] || componen;t;
}

function getReportTypeName(_type) {
  // const ___names = // Duplicate declaration removed {;'
    REPAIR: '–†–µ–º–æ–Ω—Ç',''
    MAINTENANCE: '–¢–û',''
    INSPECTION: '–û—Å–º–æ—Ç—Ä',''
    ISSUE: '–ü—Ä–æ–±–ª–µ–º–∞',''
    OTHER: '–ü—Ä–æ—á–µ–µ''
  };
  return _names [type] || typ;e;
}

function getReportTypeIcon(_type) {
  // const ___icons = // Duplicate declaration removed {;'
    REPAIR: 'üîß',''
    MAINTENANCE: '‚öôÔ∏è',''
    INSPECTION: 'üîç',''
    ISSUE: '‚ö†Ô∏è',''
    OTHER: 'üìÑ''
  };'
  return icons[type] || 'üìÑ;';'
}

function getTimeRemaining(_dueDate) {
  const ___now = new Date(;);
  const ___due = new Date(dueDate;);
  const ___diff = _due  - _no;w ;
  
  if (diff < 0) {'
    return 'üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞;';'
  } else if (diff < 3600000) { // < 1 —á–∞—Å
    const ___minutes = Math.floor(diff / 60000;);'
    return `üü° ${minutes} –º–∏–Ω;`;`
  } else if (diff < 86400000) { // < 1 –¥–µ–Ω—å
    const ___hours = Math.floor(diff / 3600000;);`
    return `üü¢ ${hours} —á;`;`
  } else {
    const ___days = Math.floor(diff / 86400000;);`
    return `üü¢ ${days} –¥–Ω;`;`
  }
}

function getDowntime(_lastSeen) {`
  if (!lastSeen) return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';'
  
  // const ___now = // Duplicate declaration removed new Date(;);
  const ___last = new Date(lastSeen;);
  // const ___diff = // Duplicate declaration removed _now  - las;t;
  
  if (diff < 3600000) {
    // const ___minutes = // Duplicate declaration removed Math.floor(diff / 60000;);'
    return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥;`;`
  } else if (diff < 86400000) {
    // const ___hours = // Duplicate declaration removed Math.floor(diff / 3600000;);`
    return `${hours} —á –Ω–∞–∑–∞–¥;`;`
  } else {
    // const ___days = // Duplicate declaration removed Math.floor(diff / 86400000;);`
    return `${days} –¥–Ω –Ω–∞–∑–∞–¥;`;`
  }
}

/**
 * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–º–æ–Ω—Ç–µ
 */
async function startRepairReport(_ctx, _taskId) {
  try {
    const ___task = await _apiService .getTaskById(taskId;);
    `
    let ___message = 'üîß *–û—Ç—á–µ—Ç –æ —Ä–µ–º–æ–Ω—Ç–µ*\n\n;';''
    _message  += `üìã –ó–∞–¥–∞—á–∞: ${task.title}\n`;``
    _message  += `üè™ –ê–≤—Ç–æ–º–∞—Ç: ${task.machine?.name || task.machine?.id}\n`;``
    _message  += `üìÖ –î–∞—Ç–∞: ${formatDate(new Date())}\n\n`;``
    _message  += 'üìù –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:';'

    // const ___keyboard = // Duplicate declaration removed [;'
      [{ text: 'üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `add_photo_${taskId}` }],``
      [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç', callback_data: `complete_report_${taskId}` }],``
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'tech_tasks' }]'
    ];

    await ctx.editMessageText(_message , {'
      parse_mode: 'Markdown','
      ...createInlineKeyboard(_keyboard )
    });

    // –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.setState(BOT_STATES.REPAIR_REPORT_INPUT);

  } catch (error) {'
    require("./utils/logger").error('Error starting repair report:', error);''
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–º–æ–Ω—Ç–µ');'
  }
}

function formatDate(_date) {'
  if (!date) return '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';'
  const ___d = new Date(date;);'
  return d.toLocaleDateString('ru-RU', {';'
    day: '2-digit',''
    month: '2-digit',''
    _hour : '2-digit',''
    minute: '2-digit''
  });
}

module.exports = setupTechnicianHandlers;
'