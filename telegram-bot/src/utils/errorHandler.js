/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è Telegram-–±–æ—Ç–∞
 * @module utils/errorHandler
 */

const logger = require('./logger');
const notificationService = require('../services/notifications');

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
 * @param {Error} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ –æ—à–∏–±–∫–∏ (–º–æ–¥—É–ª—å, —Ñ—É–Ω–∫—Ü–∏—è)
 * @param {Object} additionalData - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<void>}
 */
const handleError = async (error, ctx = null, source = 'unknown', additionalData = {}) => {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    const errorDetails = {
      message: error.message,
      stack: error.stack,
      source,
      timestamp: new Date().toISOString(),
      user: ctx?.from ? {
        id: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name
      } : null,
      chat: ctx?.chat ? {
        id: ctx.chat.id,
        type: ctx.chat.type,
        title: ctx.chat.title
      } : null,
      additionalData
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logger.error(`Error in ${source}:`, {
      error: error.message,
      stack: error.stack,
      ...additionalData
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
    const isCritical = isCriticalError(error);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    if (isCritical) {
      await notifyAdminsAboutError(errorDetails);
    }

    // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (ctx && ctx.reply) {
      await replyToUser(ctx, isCritical);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    await saveErrorToDatabase(errorDetails);

  } catch (handlerError) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫
    logger.error('Error in error handler:', handlerError);
  }
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
 * @param {Error} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 * @returns {boolean} - true, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
 */
const isCriticalError = (error) => {
  // –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
  const criticalErrors = [
    'ETELEGRAM',
    'EFATAL',
    'ECONNREFUSED',
    'ETIMEDOUT',
    'ENOTFOUND',
    'ECONNRESET',
    'ECONNABORTED',
    'EPROTO',
    'EACCES',
    'EPERM'
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  return criticalErrors.some(criticalError => 
    error.message?.includes(criticalError) || 
    error.code === criticalError
  );
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
 * @param {Object} errorDetails - –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
 * @returns {Promise<void>}
 */
const notifyAdminsAboutError = async (errorDetails) => {
  try {
    const message = `üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê*\n\n` +
      `*–ò—Å—Ç–æ—á–Ω–∏–∫:* ${errorDetails.source}\n` +
      `*–í—Ä–µ–º—è:* ${new Date(errorDetails.timestamp).toLocaleString('ru-RU')}\n` +
      `*–°–æ–æ–±—â–µ–Ω–∏–µ:* ${errorDetails.message}\n\n` +
      `*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${errorDetails.user ? `${errorDetails.user.firstName} ${errorDetails.user.lastName} (@${errorDetails.user.username})` : '–ù/–î'}\n` +
      `*–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:*\n\`\`\`\n${errorDetails.stack ? errorDetails.stack.substring(0, 300) + '...' : '–ù/–î'}\n\`\`\``;

    await notificationService.notifyAdmins(message);
  } catch (error) {
    logger.error('Failed to notify admins about error:', error);
  }
};

/**
 * –û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param {boolean} isCritical - –§–ª–∞–≥ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
 * @returns {Promise<void>}
 */
const replyToUser = async (ctx, isCritical) => {
  try {
    if (isCritical) {
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } else {
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
  } catch (error) {
    logger.error('Failed to reply to user about error:', error);
  }
};

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} errorDetails - –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
 * @returns {Promise<void>}
 */
const saveErrorToDatabase = async (errorDetails) => {
  try {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    logger.debug('Error details for database:', errorDetails);
  } catch (error) {
    logger.error('Failed to save error to database:', error);
  }
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è middleware Telegraf
 * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ –æ—à–∏–±–∫–∏
 * @returns {Function} - Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
const createErrorHandler = (source) => {
  return async (err, ctx, next) => {
    await handleError(err, ctx, source);
  };
};

module.exports = {
  handleError,
  createErrorHandler
};
