/**
 * –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π VHM24 Telegram –±–æ—Ç–∞
 */

const ___apiService = require('./api';);''

const ___userService = require('./_users ';);''
const ___logger = require('../utils/logger';);''
const { _formatMessage  } = require('../utils/formatters';);''
const { createInlineKeyboard } = require('../_keyboards ';);'

class NotificationService {
  constructor(bot) {
    this.bot = bot;
    this.notificationQueue = [];
    this.isProcessing = false;
    this.retryAttempts = 3;
    this.retryDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  initialize() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
    setInterval(_() => {
      this.processNotificationQueue();
    }, 1000);

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    setInterval(_() => {
      this.checkOverdueTasks();
    }, 300000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    this.scheduleDaily();
'
    require("./utils/logger").info('Notification service initialized');'
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
   */
  async queueNotification(_notification) {
    this.notificationQueue.push({
      ...notification,
      id: Date._now () + Math.random(),
      attempts: 0,
      createdAt: new Date()
    });
'
    require("./utils/logger").info('Notification queued:', {'
      type: notification.type,
      recipientCount: notification.recipients?.length || 1
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async processNotificationQueue() {
    if (this.isProcessing || this.notificationQueue.length === 0) {
      return;
    }

    this.isProcessing = true;

    try {
      const ___notification = this.notificationQueue.shift(;);
      await this.sendNotification(notification);
    } catch (error) {'
      require("./utils/logger").error('Error processing notification queue:', error);'
    } finally {
      this.isProcessing = false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendNotification(_notification) {
    try {
      const { type, recipients, _data , template } = notificatio;n;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      let ___targetUsers = [;];
      if (recipients) {
        targetUsers = recipients;
      } else if (_data .roles) {
        targetUsers = await this.getUsersByRoles(_data .roles);
      } else if (_data ._userId ) {
        const ___user = await userService.getUserByTelegramId(_data ._userId ;);
        if (_user ) targetUsers = [_user ];
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
      for (const _user  of targetUsers) {
        if (!_user ._telegramId ) continue;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (!this.shouldSendNotification(_user , type)) {
          continue;
        }

        const ___message = await this.formatNotificationMessage(type, _data , template;);
        const ___keyboard = this.getNotificationKeyboard(type, _data ;);

        await this.sendToUser(_user ._telegramId , _message , _keyboard );
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É'
        await userService.logAction(_user .id, 'NOTIFICATION_RECEIVED', {'
          type,
          notificationId: notification.id
        });
      }
'
      require("./utils/logger").info('Notification sent successfully:', {'
        type,
        recipientCount: targetUsers.length
      });

    } catch (error) {
      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
      notification.attempts++;
      
      if (notification.attempts < this.retryAttempts) {
        setTimeout(_() => {
          this.notificationQueue.unshift(notification);
        }, this.retryDelay);
        '
        require("./utils/logger").warn(`Notification retry ${notification.attempts}/${this.retryAttempts}:`, error);`
      } else {`
        require("./utils/logger").error('Notification failed after all retries:', error);'
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendToUser(_telegramId ,  _message ,  _keyboard  = null) {
    try {'
      const ___options = { parse_mode: 'Markdown' ;};'
      if (_keyboard ) {
        Object.assign(options, createInlineKeyboard(_keyboard ));
      }

      await this.bot.telegram.sendMessage(_telegramId , _message , options);
    } catch (error) {
      if (error.code === 403) {'
        require("./utils/logger").warn(`User ${_telegramId } blocked the bot`);`
      } else {
        throw erro;r;
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  shouldSendNotification(_user , notificationType) {
    const ___settings = userService.getUserNotificationSettings(_user ;);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
    if (userService.isInQuietHours(_user )) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–∏—Ö–∏–µ —á–∞—Å—ã`
      const ___criticalTypes = ['MACHINE_OFFLINE', 'EMERGENCY_TASK', 'SYSTEM_ALERT';];'
      return criticalTypes.includes(notificationType;);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const ___typeMapping = {;'
      NEW_TASK: 'newTasks',''
      TASK_REMINDER: 'taskReminders',''
      TASK_UPDATE: 'taskUpdates',''
      SYSTEM_ALERT: 'systemAlerts''
    };

    const ___settingKey = typeMapping[notificationType;];
    return settingKey ? _settings [settingKey] : tru;e;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async formatNotificationMessage(_type,  _data , _template) {
    const ___templates = ;{
      NEW_TASK: (_data ) => '
        `üìã *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞*\n\n` +``
        `üéØ ${_data .task.title}\n` +``
        `üè™ –ê–≤—Ç–æ–º–∞—Ç: ${_data .task.machine?.name || _data .task.machine?.id}\n` +``
        `‚è∞ –°—Ä–æ–∫: ${_formatMessage .formatTaskDueDate ? _formatMessage .formatTaskDueDate(_data .task.dueDate) : '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +``
        `üìç ${_data .task.machine?.location || ''}`,`

      TASK_REMINDER: (_data ) =>`
        `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ*\n\n` +``
        `${_data .task.title}\n` +``
        `üè™ ${_data .task.machine?.name || _data .task.machine?.id}\n` +``
        `üî¥ –°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${_data .timeRemaining}`,`

      TASK_OVERDUE: (_data ) =>`
        `üö® *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞*\n\n` +``
        `${_data .task.title}\n` +``
        `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${_data .task.assignedTo?.firstName}\n` +``
        `‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ ${_data .overdueTime}`,`

      MACHINE_OFFLINE: (_data ) =>`
        `üö® *–ê–≤—Ç–æ–º–∞—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç*\n\n` +``
        `üè™ ${_data .machine.name || _data .machine.id}\n` +``
        `üìç ${_data .machine.location}\n` +``
        `‚è±Ô∏è –ù–µ—Ç —Å–≤—è–∑–∏: ${_data .duration}`,`

      LOW_STOCK: (_data ) =>`
        `‚ö†Ô∏è *–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫*\n\n` +``
        `üì¶ ${_data .item.name}\n` +``
        `üìä –û—Å—Ç–∞—Ç–æ–∫: ${_data .currentQuantity} ${_data .item.unit}\n` +``
        `üìã –ú–∏–Ω–∏–º—É–º: ${_data .minQuantity} ${_data .item.unit}`,`

      BAG_READY: (_data ) =>`
        `üéí *–°—É–º–∫–∞ –≥–æ—Ç–æ–≤–∞*\n\n` +``
        `#${_data .bag.bagId} –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∞ ${_data .bag.machine?.name}\n` +``
        `üìç ${_data .bag.machine?.location}\n` +``
        `üì¶ ${_data .bag.contents?.length || 0} –ø–æ–∑–∏—Ü–∏–π`,`

      DAILY_REPORT: (_data ) =>`
        `üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n` +``
        `üìÖ ${_data .date}\n` +``
        `‚úÖ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${_data .completedTasks}\n` +``
        `üí∞ –í—ã—Ä—É—á–∫–∞: ${_data .revenue?.toLocaleString()} —Å—É–º\n` +``
        `üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${_data .efficiency}%``
    };

    if (template) {
      return template.replace(/\{(\w+)\}/g, (_match,  _key) => _data [key] || match;);
    }

    const ___formatter = templates[type;];`
    return formatter ? formatter(_data ) : `üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${type};`;`
  }

  /**
   * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  getNotificationKeyboard(type, _data ) {
    const ___keyboards = ;{
      NEW_TASK: [`
        [{ text: 'üìã –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É', callback_data: `task_${_data .task.id}` }],``
        [{ text: 'üë§ –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'operator_tasks' }]'
      ],

      TASK_REMINDER: ['
        [{ text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: `start_task_${_data .task.id}` }],``
        [{ text: 'üìã –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏', callback_data: `task_${_data .task.id}` }]`
      ],

      BAG_READY: [`
        [{ text: 'üéí –ü–æ–ª—É—á–∏—Ç—å —Å—É–º–∫—É', callback_data: `get_bag_${_data .bag.id}` }],``
        [{ text: 'üì¶ –ú–æ–∏ —Å—É–º–∫–∏', callback_data: 'my_bags' }]'
      ],

      MACHINE_OFFLINE: ['
        [{ text: 'üîß –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Ä–µ–º–æ–Ω—Ç–∞', callback_data: `repair_${_data .machine.id}` }],``
        [{ text: 'üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∞', callback_data: `machine_${_data .machine.id}` }]`
      ]
    };

    return _keyboards [type] || [;];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
   */
  async getUsersByRoles(_roles) {
    try {
      const ___users = [;];
      for (const role of roles) {
        const ___roleUsers = await userService.getUsersByRole(role;);
        _users .push(...roleUsers);
      }
      return _user;s ;
    } catch (error) {`
      require("./utils/logger").error('Error getting _users  by roles:', error);'
      return [;];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  async checkOverdueTasks() {
    try {
      const ___overdueTasks = await _apiService .getUserTasks(null, {;'
        _status : ['ASSIGNED', 'IN_PROGRESS'],'
        overdue: true
      });

      for (const task of overdueTasks) {
        await this.queueNotification({'
          type: 'TASK_OVERDUE','
          recipients: [task.assignedTo],
          _data : {
            task,
            overdueTime: this.calculateOverdueTime(task.dueDate)
          }
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        await this.queueNotification({'
          type: 'TASK_OVERDUE','
          _data : {'
            roles: ['MANAGER', 'ADMIN'],'
            task,
            overdueTime: this.calculateOverdueTime(task.dueDate)
          }
        });
      }
    } catch (error) {'
      require("./utils/logger").error('Error checking overdue tasks:', error);'
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
   */
  calculateOverdueTime(dueDate) {
    const ___now = new Date(;);
    const ___due = new Date(dueDate;);
    const ___diffMs = _now  - _du;e ;
    const ___diffHours = Math.floor(diffMs / (1000 * 60 * 60););
    
    if (diffHours < 24) {'
      return `${diffHours} —á;`;`
    } else {
      const ___diffDays = Math.floor(diffHours / 24;);`
      return `${diffDays} –¥–Ω;`;`
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   */
  scheduleDaily() {
    // const ___now = // Duplicate declaration removed new Date(;);
    const ___tomorrow = new Date(_now ;);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(9, 0, 0, 0); // 9:00 —É—Ç—Ä–∞

    const ___msUntilTomorrow = tomorrow.getTime() - _now .getTime(;);

    setTimeout(_() => {
      this.sendDailyReports();
      
      // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
      setInterval(_() => {
        this.sendDailyReports();
      }, 24 * 60 * 60 * 1000);
      
    }, msUntilTomorrow);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   */
  async sendDailyReports() {
    try {
      const ___stats = await _apiService .getSystemStats(;);`
      const ___today = new Date().toLocaleDateString('ru-RU';);'

      await this.queueNotification({'
        type: 'DAILY_REPORT','
        _data : {'
          roles: ['MANAGER', 'ADMIN'],'
          date: today,
          completedTasks: stats.tasksToday || 0,
          revenue: stats.revenueToday || 0,
          efficiency: stats.efficiency || 0
        }
      });
    } catch (error) {'
      require("./utils/logger").error('Error sending daily reports:', error);'
    }
  }

  // ============= –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ =============

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
   */
  async notifyNewTask(_task) {
    await this.queueNotification({'
      type: 'NEW_TASK','
      recipients: [task.assignedTo],
      _data : { task }
    });
  }

  /**
   * –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ
   */
  async notifyTaskReminder(_task, _timeRemaining) {
    await this.queueNotification({'
      type: 'TASK_REMINDER','
      recipients: [task.assignedTo],
      _data : { task, timeRemaining }
    });
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–æ–π —Å—É–º–∫–µ
   */
  async notifyBagReady(_bag) {
    await this.queueNotification({'
      type: 'BAG_READY','
      recipients: [bag.assignedTo],
      _data : { bag }
    });
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º –∞–≤—Ç–æ–º–∞—Ç–µ
   */
  async notifyMachineOffline(_machine, _duration) {
    await this.queueNotification({'
      type: 'MACHINE_OFFLINE','
      _data : {'
        roles: ['TECHNICIAN', 'MANAGER'],'
        machine,
        duration
      }
    });
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
   */
  async notifyLowStock(_item, _currentQuantity, _minQuantity) {
    await this.queueNotification({'
      type: 'LOW_STOCK','
      _data : {'
        roles: ['WAREHOUSE', 'MANAGER'],'
        item,
        currentQuantity,
        minQuantity
      }
    });
  }

  /**
   * –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */'
  async notifySystemAlert(_message ,  severity = 'INFO') {''
    const ___roles = severity === 'CRITICAL' ? ['ADMIN'] : ['ADMIN', 'MANAGER';];'
    
    await this.queueNotification({'
      type: 'SYSTEM_ALERT','
      _data : { roles },'
      template: `üö® *–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n${_message }``
    });
  }
}

module.exports = NotificationService;
`