/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª VendHub Telegram –±–æ—Ç–∞
 */

const { Telegraf } = require('telegraf');
const Redis = require('redis');
const config = require('./config/bot');
const { BOT_STATES } = require('./fsm/states');
const { createInlineKeyboard, ROLE_KEYBOARDS } = require('./keyboards');

// Middleware
const authMiddleware = require('./middleware/auth');
const sessionMiddleware = require('./middleware/session');
const loggingMiddleware = require('./middleware/logging');

// Handlers
const commonHandlers = require('./handlers/common');
const operatorHandlers = require('./handlers/operator');
const warehouseHandlers = require('./handlers/warehouse');
const managerHandlers = require('./handlers/manager');
const technicianHandlers = require('./handlers/technician');
const mediaHandlers = require('./handlers/media');

// Services
const NotificationService = require('./services/notifications');
const apiService = require('./services/api');
const userService = require('./services/users');

// Utils
const logger = require('./utils/logger');
const { formatMessage } = require('./utils/formatters');

class VendHubBot {
  constructor() {
    this.bot = new Telegraf(config.telegram.token, config.telegram.options);
    this.redis = null;
    this.isRunning = false;
    this.notificationService = null;
    
    this.setupMiddleware();
    this.setupHandlers();
    this.setupErrorHandling();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
   */
  setupMiddleware() {
    // Redis —Å–µ—Å—Å–∏–∏
    this.bot.use(sessionMiddleware());
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.bot.use(loggingMiddleware());
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.bot.use(authMiddleware());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.bot.use(async (ctx, next) => {
      if (!ctx.session.state) {
        ctx.session.state = BOT_STATES.IDLE;
        ctx.session.data = {};
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–∏–ª–∏—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      ctx.setState = (newState) => {
        logger.info(`User ${ctx.from.id} transition: ${ctx.session.state} -> ${newState}`);
        ctx.session.state = newState;
      };
      
      ctx.setData = (key, value) => {
        ctx.session.data[key] = value;
      };
      
      ctx.getData = (key) => {
        return ctx.session.data[key];
      };
      
      ctx.clearData = () => {
        ctx.session.data = {};
      };
      
      return next();
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
   */
  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      logger.info(`Bot started by user: ${ctx.from.id} (@${ctx.from.username})`);
      
      try {
        if (!ctx.user) {
          return await this.handleUnauthorizedUser(ctx);
        }
        
        await this.showMainMenu(ctx);
      } catch (_error) {
        logger.error('Error in start command:', _error);
        await this.handleError(ctx, _error);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help(async (ctx) => {
      const helpText = this.getHelpText(ctx.user?.role);
      await ctx.reply(helpText, createInlineKeyboard([[
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]]));
    });

    // –ö–æ–º–∞–Ω–¥–∞ /profile
    this.bot.command('profile', async (ctx) => {
      if (!ctx.user) {
        return await this.handleUnauthorizedUser(ctx);
      }
      
      await this.showProfile(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /status
    this.bot.command('status', async (ctx) => {
      if (!ctx.user) {
        return await this.handleUnauthorizedUser(ctx);
      }
      
      await this.showUserStatus(ctx);
    });

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ —Ä–æ–ª—è–º
    commonHandlers(this.bot);
    operatorHandlers(this.bot);
    warehouseHandlers(this.bot);
    managerHandlers(this.bot);
    technicianHandlers(this.bot);
    mediaHandlers(this.bot);

    // Callback query –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.setupCallbackHandlers();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', (ctx) => this.handleTextMessage(ctx));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('photo', (ctx) => this.handlePhotoMessage(ctx));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    this.bot.on('location', (ctx) => this.handleLocationMessage(ctx));
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
   */
  setupCallbackHandlers() {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    this.bot.action('main_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainMenu(ctx);
    });

    // –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Ä–æ–ª—è–º
    this.bot.action(/^(operator|warehouse|manager|technician)_menu$/, async (ctx) => {
      await ctx.answerCbQuery();
      const role = ctx.match[1].toUpperCase();
      
      if (ctx.user.role !== role && ctx.user.role !== 'ADMIN') {
        return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É');
      }
      
      ctx.setState(`${role}_MENU`);
      await this.showRoleMenu(ctx, role);
    });

    // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.bot.action('profile', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showProfile(ctx);
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    this.bot.action('settings', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showSettings(ctx);
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
   */
  async showMainMenu(ctx) {
    if (!ctx.user) {
      return await this.handleUnauthorizedUser(ctx);
    }

    ctx.setState(BOT_STATES.MAIN_MENU);
    
    const userRole = ctx.user.role;
    const keyboard = ROLE_KEYBOARDS[userRole] || ROLE_KEYBOARDS.OPERATOR;
    
    const welcomeMessage = formatMessage.welcome(ctx.user);
    
    try {
      if (ctx.callbackQuery) {
        await ctx.editMessageText(welcomeMessage, createInlineKeyboard(keyboard));
      } else {
        await ctx.reply(welcomeMessage, createInlineKeyboard(keyboard));
      }
    } catch (_error) {
      // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(welcomeMessage, createInlineKeyboard(keyboard));
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏
   */
  async showRoleMenu(ctx, role) {
    const keyboard = ROLE_KEYBOARDS[role];
    const menuMessage = this.getRoleMenuMessage(role, ctx.user);
    
    try {
      await ctx.editMessageText(menuMessage, createInlineKeyboard(keyboard));
    } catch (_error) {
      await ctx.reply(menuMessage, createInlineKeyboard(keyboard));
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async showProfile(ctx) {
    const user = ctx.user;
    const profileText = formatMessage.userProfile(user);
    
    const keyboard = [
      [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
    ];
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(profileText, createInlineKeyboard(keyboard));
    } else {
      await ctx.reply(profileText, createInlineKeyboard(keyboard));
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  async showSettings(ctx) {
    const settingsText = '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n' +
      '‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã\n' +
      '‚Ä¢ üåç –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n' +
      '‚Ä¢ üîä –ó–≤—É–∫–∏: –≤–∫–ª—é—á–µ–Ω—ã\n' +
      '‚Ä¢ üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: —Ä–∞–∑—Ä–µ—à–µ–Ω–∞';
    
    const keyboard = [
      [{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'settings_notifications' }],
      [{ text: 'üåç –Ø–∑—ã–∫', callback_data: 'settings_language' }],
      [{ text: 'üîä –ó–≤—É–∫–∏', callback_data: 'settings_sounds' }],
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
    ];
    
    await ctx.editMessageText(settingsText, {
      parse_mode: 'Markdown',
      ...createInlineKeyboard(keyboard)
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async showUserStatus(ctx) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const tasks = await apiService.getUserTasks(ctx.user.id);
      const statusMessage = formatMessage.userStatus(ctx.user, tasks);
      
      await ctx.reply(statusMessage, {
        parse_mode: 'Markdown',
        ...createInlineKeyboard([[
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]])
      });
    } catch (_error) {
      logger.error('Error getting user status:', _error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleUnauthorizedUser(ctx) {
    const message = 'üîê *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VendHub!*\n\n' +
      '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n' +
      '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.\n\n' +
      `üë§ –í–∞—à Telegram ID: \`${ctx.from.id}\`\n` +
      `üì± Username: @${ctx.from.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`;
    
    await ctx.reply(message, { parse_mode: 'Markdown' });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await this.notifyAdminsAboutNewUser(ctx.from);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handleTextMessage(ctx) {
    const state = ctx.session.state;
    const text = ctx.message.text;
    
    logger.info(`Text message in state ${state}: ${text}`);
    
    // FSM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    switch (state) {
      case BOT_STATES.WEIGHT_INPUT:
        await this.handleWeightInput(ctx, text);
        break;
        
      case BOT_STATES.TEXT_INPUT:
        await this.handleTextInput(ctx, text);
        break;
        
      case BOT_STATES.NUMBER_INPUT:
        await this.handleNumberInput(ctx, text);
        break;
        
      case BOT_STATES.TASK_TITLE:
        await this.handleTaskTitleInput(ctx, text);
        break;
        
      case BOT_STATES.TASK_DESCRIPTION:
        await this.handleTaskDescriptionInput(ctx, text);
        break;
        
      default:
        // –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if (text === '/menu' || text === '–ú–µ–Ω—é') {
          await this.showMainMenu(ctx);
        } else {
          await ctx.reply('ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
        }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handlePhotoMessage(ctx) {
    const state = ctx.session.state;
    
    if (state === BOT_STATES.PHOTO_UPLOAD) {
      await this.handlePhotoUpload(ctx);
    } else {
      await ctx.reply('üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
   */
  async handleLocationMessage(ctx) {
    const state = ctx.session.state;
    
    if (state === BOT_STATES.GPS_LOCATION) {
      await this.handleGPSLocation(ctx);
    } else {
      await ctx.reply('üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏
   */
  getRoleMenuMessage(role, user) {
    const messages = {
      OPERATOR: `üë§ *–û–ø–µ—Ä–∞—Ç–æ—Ä ${user.firstName}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      WAREHOUSE: `üì¶ *–°–∫–ª–∞–¥ - ${user.firstName}*\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏:`,
      MANAGER: `üëî *–ú–µ–Ω–µ–¥–∂–µ—Ä ${user.firstName}*\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å:`,
      TECHNICIAN: `üîß *–¢–µ—Ö–Ω–∏–∫ ${user.firstName}*\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:`,
      ADMIN: `‚ö° *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${user.firstName}*\n\n–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ:`
    };
    
    return messages[role] || messages.OPERATOR;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ä–æ–ª–∏
   */
  getHelpText(role) {
    const helpTexts = {
      OPERATOR: 'üìã *–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*\n\n' +
        '‚Ä¢ /tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏\n' +
        '‚Ä¢ /return - –≤–æ–∑–≤—Ä–∞—Ç —Å—É–º–æ–∫\n' +
        '‚Ä¢ /collect - –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è\n' +
        '‚Ä¢ /report - –æ—Ç—á–µ—Ç –∑–∞ —Å–º–µ–Ω—É\n' +
        '‚Ä¢ /status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n' +
        '‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞',
        
      WAREHOUSE: 'üì¶ *–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è —Å–∫–ª–∞–¥–∞*\n\n' +
        '‚Ä¢ /bags - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–∫–∞–º–∏\n' +
        '‚Ä¢ /inventory - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤\n' +
        '‚Ä¢ /receive - –ø—Ä–∏–µ–º –≤–æ–∑–≤—Ä–∞—Ç–æ–≤\n' +
        '‚Ä¢ /wash - –º–æ–π–∫–∞ –±—É–Ω–∫–µ—Ä–æ–≤\n' +
        '‚Ä¢ /status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n' +
        '‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞',
        
      MANAGER: 'üëî *–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞*\n\n' +
        '‚Ä¢ /create - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n' +
        '‚Ä¢ /assign - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É\n' +
        '‚Ä¢ /analytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n' +
        '‚Ä¢ /reports - –æ—Ç—á–µ—Ç—ã\n' +
        '‚Ä¢ /alerts - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n' +
        '‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞'
    };
    
    return helpTexts[role] || helpTexts.OPERATOR;
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  setupErrorHandling() {
    this.bot.catch(async (err, ctx) => {
      logger.error('Bot error:', err);
      await this.handleError(ctx, err);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
    });

    process.on('uncaughtException', (error) => {
      logger.error('Uncaught Exception:', error);
      this.gracefulShutdown();
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
   */
  async handleError(ctx, _error) {
    try {
      if (ctx && ctx.reply) {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      }
    } catch (replyError) {
      logger.error('Error sending error message:', replyError);
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  async notifyAdminsAboutNewUser(telegramUser) {
    try {
      const adminUsers = await userService.getAdminUsers();
      const message = 'üÜï *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*\n\n' +
        `üë§ –ò–º—è: ${telegramUser.first_name} ${telegramUser.last_name || ''}\n` +
        `üì± Username: @${telegramUser.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üÜî Telegram ID: \`${telegramUser.id}\`\n\n` +
        '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ.';

      for (const admin of adminUsers) {
        if (admin.telegramId) {
          try {
            await this.bot.telegram.sendMessage(admin.telegramId, message, {
              parse_mode: 'Markdown'
            });
          } catch (_error) {
            logger.error(`Failed to notify admin ${admin.id}:`, _error);
          }
        }
      }
    } catch (_error) {
      logger.error('Error notifying admins about new user:', _error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  async start() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
      if (config.redis.url) {
        this.redis = Redis.createClient({
          url: config.redis.url,
          password: config.redis.password
        });
        
        await this.redis.connect();
        logger.info('Redis connected successfully');
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      this.notificationService = new NotificationService(this.bot);
      this.notificationService.initialize();
      logger.info('Notification service initialized');

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –∏–ª–∏ polling
      if (config.telegram.webhookUrl) {
        await this.bot.telegram.setWebhook(config.telegram.webhookUrl);
        logger.info(`Webhook set to: ${config.telegram.webhookUrl}`);
      } else {
        await this.bot.launch();
        logger.info('Bot started with polling');
      }

      this.isRunning = true;
      logger.info('VendHub Manager (VHM24) Telegram Bot started successfully');

      // Graceful shutdown
      process.once('SIGINT', () => this.gracefulShutdown());
      process.once('SIGTERM', () => this.gracefulShutdown());

    } catch (_error) {
      logger.error('Failed to start bot:', _error);
      process.exit(1);
    }
  }

  /**
   * Graceful –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  async gracefulShutdown() {
    if (!this.isRunning) return;
    
    logger.info('Shutting down VendHub Bot...');
    this.isRunning = false;

    try {
      if (this.bot) {
        this.bot.stop('SIGTERM');
      }
      
      if (this.redis) {
        await this.redis.quit();
      }
      
      logger.info('VendHub Bot stopped gracefully');
      process.exit(0);
    } catch (_error) {
      logger.error('Error during shutdown:', _error);
      process.exit(1);
    }
  }

  // Placeholder –º–µ—Ç–æ–¥—ã –¥–ª—è FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö)
  async handleWeightInput(_ctx, _text) { /* –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ handlers */ }
  async handleTextInput(_ctx, _text) { /* –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ handlers */ }
  async handleNumberInput(_ctx, _text) { /* –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ handlers */ }
  async handleTaskTitleInput(_ctx, _text) { /* –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ handlers */ }
  async handleTaskDescriptionInput(_ctx, _text) { /* –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ handlers */ }
  async handlePhotoUpload(_ctx) { /* –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ handlers */ }
  async handleGPSLocation(_ctx) { /* –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ handlers */ }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
const bot = new VendHubBot();

if (require.main === module) {
  bot.start().catch(console.error);
}

module.exports = bot;
