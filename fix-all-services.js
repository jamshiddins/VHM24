#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö...\n');

const fixes = [
  {
    service: 'gateway',
    file: 'src/index.js',
    line: 9,
    issue: 'missing ) after argument list',
    fix: async content => {
      // –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
      const lines = content.split('\n');
      // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å try-catch –±–ª–æ–∫–æ–º
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('} catch (error) {') && i > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
          if (
            !lines[i - 1].trim().endsWith(');') &&
            !lines[i - 1].trim().endsWith(')')
          ) {
            lines[i - 1] = lines[i - 1] + ')';
          }
        }
      }
      return lines.join('\n');
    }
  },
  {
    service: 'machines',
    file: 'src/index.js',
    line: 9,
    issue: 'missing ) after argument list',
    fix: async content => {
      const lines = content.split('\n');
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('} catch (error) {') && i > 0) {
          if (
            !lines[i - 1].trim().endsWith(');') &&
            !lines[i - 1].trim().endsWith(')')
          ) {
            lines[i - 1] = lines[i - 1] + ')';
          }
        }
      }
      return lines.join('\n');
    }
  },
  {
    service: 'inventory',
    file: 'src/index.js',
    line: 8,
    issue: 'missing ) after argument list',
    fix: async content => {
      const lines = content.split('\n');
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('} catch (error) {') && i > 0) {
          if (
            !lines[i - 1].trim().endsWith(');') &&
            !lines[i - 1].trim().endsWith(')')
          ) {
            lines[i - 1] = lines[i - 1] + ')';
          }
        }
      }
      return lines.join('\n');
    }
  },
  {
    service: 'tasks',
    file: 'src/index.js',
    line: 8,
    issue: 'missing ) after argument list',
    fix: async content => {
      const lines = content.split('\n');
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('} catch (error) {') && i > 0) {
          if (
            !lines[i - 1].trim().endsWith(');') &&
            !lines[i - 1].trim().endsWith(')')
          ) {
            lines[i - 1] = lines[i - 1] + ')';
          }
        }
      }
      return lines.join('\n');
    }
  },
  {
    service: 'routes',
    file: 'src/index.js',
    line: 233,
    issue: 'Missing initializer in const declaration',
    fix: async content => {
      // –ò—Å–ø—Ä–∞–≤–∏—Ç—å const patchroutes:idSchema = {
      return content.replace(
        /const patchroutes:idSchema = {/g,
        'const patchRoutesIdSchema = {'
      );
    }
  },
  {
    service: 'warehouse',
    file: 'src/index.js',
    line: 8,
    issue: 'missing ) after argument list',
    fix: async content => {
      const lines = content.split('\n');
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('} catch (error) {') && i > 0) {
          if (
            !lines[i - 1].trim().endsWith(');') &&
            !lines[i - 1].trim().endsWith(')')
          ) {
            lines[i - 1] = lines[i - 1] + ')';
          }
        }
      }
      return lines.join('\n');
    }
  },
  {
    service: 'data-import',
    file: 'src/index.js',
    line: 10,
    issue: 'missing ) after argument list',
    fix: async content => {
      const lines = content.split('\n');
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('} catch (error) {') && i > 0) {
          if (
            !lines[i - 1].trim().endsWith(');') &&
            !lines[i - 1].trim().endsWith(')')
          ) {
            lines[i - 1] = lines[i - 1] + ')';
          }
        }
      }
      return lines.join('\n');
    }
  },
  {
    service: 'recipes',
    file: 'src/index.js',
    issue: 'logger.info is not a function',
    fix: async content => {
      // –î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ logger –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!content.includes('const logger = require')) {
        const lines = content.split('\n');
        let insertIndex = 0;

        // –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ require statements
        for (let i = 0; i < lines.length; i++) {
          if (
            lines[i].includes('require(') ||
            lines[i].includes('const fastify')
          ) {
            insertIndex = i + 1;
          } else if (lines[i].trim() !== '' && !lines[i].startsWith('//')) {
            break;
          }
        }

        lines.splice(insertIndex, 0, 'const logger = console;');
        return lines.join('\n');
      }
      return content
        .replace(/logger\.info/g, 'console.log')
        .replace(/logger\.error/g, 'console.error');
    }
  },
  {
    service: 'notifications',
    file: 'src/index.js',
    issue: 'logger is not defined',
    fix: async content => {
      if (!content.includes('const logger = require')) {
        const lines = content.split('\n');
        let insertIndex = 0;

        for (let i = 0; i < lines.length; i++) {
          if (
            lines[i].includes('require(') ||
            lines[i].includes('const fastify')
          ) {
            insertIndex = i + 1;
          } else if (lines[i].trim() !== '' && !lines[i].startsWith('//')) {
            break;
          }
        }

        lines.splice(insertIndex, 0, 'const logger = console;');
        return lines.join('\n');
      }
      return content;
    }
  },
  {
    service: 'audit',
    file: 'src/index.js',
    issue: 'logger is not defined',
    fix: async content => {
      if (!content.includes('const logger = require')) {
        const lines = content.split('\n');
        let insertIndex = 0;

        for (let i = 0; i < lines.length; i++) {
          if (
            lines[i].includes('require(') ||
            lines[i].includes('const fastify')
          ) {
            insertIndex = i + 1;
          } else if (lines[i].trim() !== '' && !lines[i].startsWith('//')) {
            break;
          }
        }

        lines.splice(insertIndex, 0, 'const logger = console;');
        return lines.join('\n');
      }
      return content;
    }
  },
  {
    service: 'monitoring',
    file: 'src/index.js',
    issue: 'logger is not defined',
    fix: async content => {
      if (!content.includes('const logger = require')) {
        const lines = content.split('\n');
        let insertIndex = 0;

        for (let i = 0; i < lines.length; i++) {
          if (
            lines[i].includes('require(') ||
            lines[i].includes('const fastify')
          ) {
            insertIndex = i + 1;
          } else if (lines[i].trim() !== '' && !lines[i].startsWith('//')) {
            break;
          }
        }

        lines.splice(insertIndex, 0, 'const logger = console;');
        return lines.join('\n');
      }
      return content;
    }
  },
  {
    service: 'backup',
    file: 'src/index.js',
    issue: 'logger is not defined',
    fix: async content => {
      if (!content.includes('const logger = require')) {
        const lines = content.split('\n');
        let insertIndex = 0;

        for (let i = 0; i < lines.length; i++) {
          if (
            lines[i].includes('require(') ||
            lines[i].includes('const fastify')
          ) {
            insertIndex = i + 1;
          } else if (lines[i].trim() !== '' && !lines[i].startsWith('//')) {
            break;
          }
        }

        lines.splice(insertIndex, 0, 'const logger = console;');
        return lines.join('\n');
      }
      return content;
    }
  },
  {
    service: 'auth',
    file: 'src/index.js',
    issue: 'logger.error is not a function',
    fix: async content => {
      // –ó–∞–º–µ–Ω–∏—Ç—å logger.error –Ω–∞ console.error
      return content
        .replace(/logger\.error/g, 'console.error')
        .replace(/logger\.info/g, 'console.log');
    }
  }
];

async function fixService(fix) {
  try {
    const filePath = path.join(__dirname, 'services', fix.service, fix.file);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    try {
      await fs.access(filePath);
    } catch {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return;
    }

    // –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    let content = await fs.readFile(filePath, 'utf8');

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    const fixedContent = await fix.fix(content);

    // –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    await fs.writeFile(filePath, fixedContent, 'utf8');

    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ${fix.service}/${fix.file} - ${fix.issue}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${fix.service}: ${error.message}`);
  }
}

async function fixAllServices() {
  console.log('üîç –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...\n');

  // –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
  for (const fix of fixes) {
    await fixService(fix);
  }

  console.log('\n‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
  console.log('\nüìù –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –∫–æ–º–∞–Ω–¥–æ–π:');
  console.log('   node start-all-services-with-audit.js');
}

// –ó–∞–ø—É—Å–∫
fixAllServices().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
