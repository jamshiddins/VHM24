/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

require('dotenv').config();
const path = require('path');
const fs = require('fs');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.NODE_ENV = process.env.NODE_ENV || 'development';
process.env.TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZ';
process.env.DATABASE_URL = process.env.DATABASE_URL || 'file:./dev.db';
process.env.SKIP_DATABASE = 'true';
process.env.API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const logDir = path.join(__dirname, 'logs');
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true });
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const logFile = path.join(logDir, `telegram-bot-${new Date().toISOString().replace(/:/g, '-')}.log`);
const logStream = fs.createWriteStream(logFile, { flags: 'a' });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message) {
  const timestamp = new Date().toISOString();
  const formattedMessage = `[${timestamp}] ${message}`;
  
  console.log(formattedMessage);
  logStream.write(formattedMessage + '\n');
}

log('üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
log(`üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:`);
log(`   NODE_ENV: ${process.env.NODE_ENV}`);
log(`   TELEGRAM_BOT_TOKEN: ${process.env.TELEGRAM_BOT_TOKEN.substring(0, 10)}...`);
log(`   API_BASE_URL: ${process.env.API_BASE_URL}`);
log(`   SKIP_DATABASE: ${process.env.SKIP_DATABASE}`);

// –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª—å @prisma/client
const mockPrismaClient = {
  $connect: () => {
    log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–º–æ–∫)');
    return Promise.resolve();
  },
  $disconnect: () => {
    log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–º–æ–∫)');
    return Promise.resolve();
  },
  $transaction: (callback) => {
    log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (–º–æ–∫)');
    return callback(mockPrismaClient);
  },
  user: {
    findUnique: (args) => {
      log(`üìä user.findUnique: ${JSON.stringify(args)}`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (args.where && args.where.telegramId === '123456789') {
        return Promise.resolve({
          id: 'admin-id',
          telegramId: '123456789',
          name: 'Admin User',
          role: 'ADMIN',
          createdAt: new Date(),
          updatedAt: new Date()
        });
      }
      return Promise.resolve(null);
    },
    findMany: () => {
      log('üìä user.findMany');
      return Promise.resolve([
        {
          id: 'admin-id',
          telegramId: '123456789',
          name: 'Admin User',
          role: 'ADMIN',
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          id: 'operator-id',
          telegramId: '987654321',
          name: 'Operator User',
          role: 'OPERATOR',
          createdAt: new Date(),
          updatedAt: new Date()
        }
      ]);
    },
    create: (data) => {
      log(`üìä user.create: ${JSON.stringify(data)}`);
      return Promise.resolve({ id: 'new-user-id', ...data.data });
    },
    update: (data) => {
      log(`üìä user.update: ${JSON.stringify(data)}`);
      return Promise.resolve({ id: data.where.id, ...data.data });
    },
    delete: (data) => {
      log(`üìä user.delete: ${JSON.stringify(data)}`);
      return Promise.resolve({ id: data.where.id });
    },
  },
  machine: {
    findUnique: (args) => {
      log(`üìä machine.findUnique: ${JSON.stringify(args)}`);
      return Promise.resolve(null);
    },
    findMany: () => {
      log('üìä machine.findMany');
      return Promise.resolve([
        {
          id: 'machine-1',
          internalCode: 'M001',
          name: '–ê–≤—Ç–æ–º–∞—Ç 1',
          location: '–û—Ñ–∏—Å 1',
          status: 'ACTIVE',
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          id: 'machine-2',
          internalCode: 'M002',
          name: '–ê–≤—Ç–æ–º–∞—Ç 2',
          location: '–û—Ñ–∏—Å 2',
          status: 'MAINTENANCE',
          createdAt: new Date(),
          updatedAt: new Date()
        }
      ]);
    },
    create: (data) => {
      log(`üìä machine.create: ${JSON.stringify(data)}`);
      return Promise.resolve({ id: 'new-machine-id', ...data.data });
    },
    update: (data) => {
      log(`üìä machine.update: ${JSON.stringify(data)}`);
      return Promise.resolve({ id: data.where.id, ...data.data });
    },
    delete: (data) => {
      log(`üìä machine.delete: ${JSON.stringify(data)}`);
      return Promise.resolve({ id: data.where.id });
    },
  },
  task: {
    findUnique: (args) => {
      log(`üìä task.findUnique: ${JSON.stringify(args)}`);
      return Promise.resolve(null);
    },
    findMany: () => {
      log('üìä task.findMany');
      return Promise.resolve([
        {
          id: 'task-1',
          type: 'INGREDIENTS',
          status: 'PENDING',
          machineId: 'machine-1',
          assignedToId: 'operator-id',
          createdById: 'admin-id',
          deadline: new Date(Date.now() + 24 * 60 * 60 * 1000),
          description: '–ó–∞–º–µ–Ω–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',
          createdAt: new Date(),
          updatedAt: new Date(),
          machine: {
            id: 'machine-1',
            internalCode: 'M001',
            name: '–ê–≤—Ç–æ–º–∞—Ç 1',
            location: '–û—Ñ–∏—Å 1'
          }
        }
      ]);
    },
    create: (data) => {
      log(`üìä task.create: ${JSON.stringify(data)}`);
      return Promise.resolve({ id: 'new-task-id', ...data.data });
    },
    update: (data) => {
      log(`üìä task.update: ${JSON.stringify(data)}`);
      return Promise.resolve({ id: data.where.id, ...data.data });
    },
    delete: (data) => {
      log(`üìä task.delete: ${JSON.stringify(data)}`);
      return Promise.resolve({ id: data.where.id });
    },
  },
  importRecord: {
    create: (data) => {
      log(`üìä importRecord.create: ${JSON.stringify(data)}`);
      return Promise.resolve({ id: 'mock-id', ...data.data });
    },
  },
  ingredient: {
    findMany: () => {
      log('üìä ingredient.findMany');
      return Promise.resolve([
        { id: 'ing-1', name: '–ö–æ—Ñ–µ', unit: '–≥', inStock: 1000 },
        { id: 'ing-2', name: '–°–∞—Ö–∞—Ä', unit: '–≥', inStock: 2000 },
        { id: 'ing-3', name: '–ú–æ–ª–æ–∫–æ', unit: '–º–ª', inStock: 3000 }
      ]);
    },
    findFirst: () => {
      log('üìä ingredient.findFirst');
      return Promise.resolve({ id: 'ing-1', name: '–ö–æ—Ñ–µ', unit: '–≥', inStock: 1000 });
    }
  },
  checklist: {
    findMany: () => {
      log('üìä checklist.findMany');
      return Promise.resolve([
        { 
          id: 'cl-1', 
          name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç', 
          items: [
            { id: 'cli-1', text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤', order: 1 },
            { id: 'cli-2', text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∞', order: 2 },
            { id: 'cli-3', text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã', order: 3 }
          ]
        }
      ]);
    }
  }
};

// –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª—å @prisma/client
require.cache[require.resolve('@prisma/client')] = {
  exports: {
    PrismaClient: function() {
      log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ PrismaClient (–º–æ–∫)');
      return mockPrismaClient;
    }
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  logStream.end();
  process.exit(0);
});

process.on('SIGTERM', () => {
  log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  logStream.end();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
log('üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...');
require('./apps/telegram-bot/src/index');
