const fs = require('fs');
const path = require('path');
const http = require('http');
const https = require('https');
const { spawn, execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
};

class VHM24FunctionalTester {
    constructor() {
        this.testResults = {
            timestamp: new Date().toISOString(),
            projectName: 'VHM24',
            tests: {},
            summary: {
                total: 0,
                passed: 0,
                failed: 0,
                skipped: 0,
                score: 0
            },
            issues: [],
            recommendations: []
        };
        
        this.runningProcesses = [];
        this.testTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    }

    log(message, color = 'white') {
        console.log(`${colors[color]}${message}${colors.reset}`);
    }

    logSection(title) {
        this.log(`\n${'='.repeat(80)}`, 'cyan');
        this.log(`${title}`, 'cyan');
        this.log(`${'='.repeat(80)}`, 'cyan');
    }

    logSubSection(title) {
        this.log(`\n${'‚îÄ'.repeat(60)}`, 'yellow');
        this.log(`${title}`, 'yellow');
        this.log(`${'‚îÄ'.repeat(60)}`, 'yellow');
    }

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    makeRequest(url, options = {}) {
        return new Promise((resolve, reject) => {
            const client = url.startsWith('https') ? https : http;
            const requestOptions = {
                timeout: 5000,
                ...options
            };
            
            const req = client.request(url, requestOptions, (res) => {
                let data = '';
                res.on('data', (chunk) => data += chunk);
                res.on('end', () => {
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        body: data
                    });
                });
            });
            
            req.on('error', reject);
            req.on('timeout', () => {
                req.destroy();
                reject(new Error('Request timeout'));
            });
            
            req.end();
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    async testConfigurationFiles() {
        this.logSubSection('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
        
        const configTest = {
            name: 'Configuration Files',
            status: 'PASS',
            details: {},
            issues: []
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤
        const envFiles = ['.env', '.env.example', '.env.production'];
        for (const envFile of envFiles) {
            try {
                if (fs.existsSync(envFile)) {
                    const content = fs.readFileSync(envFile, 'utf8');
                    const lines = content.split('\n').filter(line => line.trim() && !line.startsWith('#'));
                    
                    configTest.details[envFile] = {
                        exists: true,
                        variableCount: lines.length,
                        valid: true
                    };
                    
                    this.log(`‚úÖ ${envFile}: ${lines.length} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö`, 'green');
                } else {
                    configTest.details[envFile] = {
                        exists: false,
                        valid: false
                    };
                    
                    if (envFile === '.env.example') {
                        configTest.status = 'WARNING';
                        configTest.issues.push(`${envFile} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                        this.log(`‚ö†Ô∏è ${envFile} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                    } else {
                        this.log(`‚ö†Ô∏è ${envFile} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                    }
                }
            } catch (error) {
                configTest.details[envFile] = {
                    exists: true,
                    valid: false,
                    error: error.message
                };
                configTest.status = 'FAIL';
                configTest.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ${envFile}: ${error.message}`);
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ${envFile}: ${error.message}`, 'red');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        const serviceDirs = ['backend', 'apps/telegram-bot', 'apps/web-dashboard'];
        for (const serviceDir of serviceDirs) {
            const packageJsonPath = path.join(serviceDir, 'package.json');
            try {
                if (fs.existsSync(packageJsonPath)) {
                    const packageData = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                    configTest.details[`${serviceDir}/package.json`] = {
                        exists: true,
                        valid: true,
                        name: packageData.name,
                        version: packageData.version,
                        hasScripts: !!packageData.scripts,
                        hasDependencies: !!packageData.dependencies
                    };
                    
                    this.log(`‚úÖ ${serviceDir}/package.json: ${packageData.name}@${packageData.version}`, 'green');
                } else {
                    configTest.details[`${serviceDir}/package.json`] = {
                        exists: false,
                        valid: false
                    };
                    configTest.status = 'WARNING';
                    configTest.issues.push(`${serviceDir}/package.json –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    this.log(`‚ö†Ô∏è ${serviceDir}/package.json –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                }
            } catch (error) {
                configTest.details[`${serviceDir}/package.json`] = {
                    exists: true,
                    valid: false,
                    error: error.message
                };
                configTest.status = 'FAIL';
                configTest.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ${serviceDir}/package.json: ${error.message}`);
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ${serviceDir}/package.json: ${error.message}`, 'red');
            }
        }

        this.testResults.tests.configurationFiles = configTest;
        return configTest;
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    async testProjectStructure() {
        this.logSubSection('üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞');
        
        const structureTest = {
            name: 'Project Structure',
            status: 'PASS',
            details: {},
            issues: []
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        const requiredDirs = [
            'backend',
            'apps',
            'services',
            'backend/src',
            'apps/telegram-bot',
            'apps/web-dashboard'
        ];

        for (const dir of requiredDirs) {
            try {
                if (fs.existsSync(dir)) {
                    const stats = fs.statSync(dir);
                    if (stats.isDirectory()) {
                        const contents = fs.readdirSync(dir);
                        structureTest.details[dir] = {
                            exists: true,
                            isDirectory: true,
                            fileCount: contents.length
                        };
                        this.log(`‚úÖ ${dir}/: ${contents.length} —Ñ–∞–π–ª–æ–≤`, 'green');
                    } else {
                        structureTest.details[dir] = {
                            exists: true,
                            isDirectory: false
                        };
                        structureTest.status = 'FAIL';
                        structureTest.issues.push(`${dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è`);
                        this.log(`‚ùå ${dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è`, 'red');
                    }
                } else {
                    structureTest.details[dir] = {
                        exists: false,
                        isDirectory: false
                    };
                    structureTest.status = 'WARNING';
                    structureTest.issues.push(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                    this.log(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, 'yellow');
                }
            } catch (error) {
                structureTest.details[dir] = {
                    exists: false,
                    error: error.message
                };
                structureTest.status = 'FAIL';
                structureTest.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${dir}: ${error.message}`);
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${dir}: ${error.message}`, 'red');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        const requiredFiles = [
            'README.md',
            'docker-compose.yml',
            'Dockerfile',
            'backend/src/app.js',
            'backend/src/server.js'
        ];

        for (const file of requiredFiles) {
            try {
                if (fs.existsSync(file)) {
                    const stats = fs.statSync(file);
                    structureTest.details[file] = {
                        exists: true,
                        size: stats.size,
                        lastModified: stats.mtime
                    };
                    this.log(`‚úÖ ${file}: ${stats.size} –±–∞–π—Ç`, 'green');
                } else {
                    structureTest.details[file] = {
                        exists: false
                    };
                    if (file.includes('app.js') || file.includes('server.js')) {
                        structureTest.status = 'WARNING';
                        structureTest.issues.push(`–§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                        this.log(`‚ö†Ô∏è –§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                    } else {
                        this.log(`‚ö†Ô∏è –§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                    }
                }
            } catch (error) {
                structureTest.details[file] = {
                    exists: false,
                    error: error.message
                };
                structureTest.status = 'FAIL';
                structureTest.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${file}: ${error.message}`);
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${file}: ${error.message}`, 'red');
            }
        }

        this.testResults.tests.projectStructure = structureTest;
        return structureTest;
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    async testDependencies() {
        this.logSubSection('üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
        
        const dependencyTest = {
            name: 'Dependencies',
            status: 'PASS',
            details: {},
            issues: []
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        const mainDependencies = [
            'express',
            'cors',
            'helmet',
            'dotenv',
            'jsonwebtoken',
            'bcryptjs',
            'pg',
            'sequelize',
            'winston',
            'joi',
            'multer',
            'redis'
        ];

        try {
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const allDependencies = {
                ...packageJson.dependencies,
                ...packageJson.devDependencies
            };

            dependencyTest.details.totalDependencies = Object.keys(allDependencies).length;
            dependencyTest.details.foundDependencies = 0;
            dependencyTest.details.missingDependencies = [];

            for (const dep of mainDependencies) {
                if (allDependencies[dep]) {
                    dependencyTest.details.foundDependencies++;
                    this.log(`‚úÖ ${dep}: ${allDependencies[dep]}`, 'green');
                } else {
                    dependencyTest.details.missingDependencies.push(dep);
                    this.log(`‚ö†Ô∏è ${dep}: –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                }
            }

            if (dependencyTest.details.missingDependencies.length > 0) {
                dependencyTest.status = 'WARNING';
                dependencyTest.issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${dependencyTest.details.missingDependencies.join(', ')}`);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ node_modules
            if (fs.existsSync('node_modules')) {
                const nodeModulesContents = fs.readdirSync('node_modules');
                dependencyTest.details.nodeModulesCount = nodeModulesContents.length;
                this.log(`‚úÖ node_modules: ${nodeModulesContents.length} –ø–∞–∫–µ—Ç–æ–≤`, 'green');
            } else {
                dependencyTest.status = 'FAIL';
                dependencyTest.issues.push('node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω');
                this.log(`‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'red');
            }

        } catch (error) {
            dependencyTest.status = 'FAIL';
            dependencyTest.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${error.message}`);
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${error.message}`, 'red');
        }

        this.testResults.tests.dependencies = dependencyTest;
        return dependencyTest;
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript —Ñ–∞–π–ª–æ–≤
    async testJavaScriptSyntax() {
        this.logSubSection('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript');
        
        const syntaxTest = {
            name: 'JavaScript Syntax',
            status: 'PASS',
            details: {},
            issues: []
        };

        // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö JS —Ñ–∞–π–ª–æ–≤
        const findJSFiles = (dir, files = []) => {
            try {
                const entries = fs.readdirSync(dir);
                for (const entry of entries) {
                    const fullPath = path.join(dir, entry);
                    const stat = fs.statSync(fullPath);
                    
                    if (stat.isDirectory() && !entry.startsWith('.') && entry !== 'node_modules') {
                        findJSFiles(fullPath, files);
                    } else if (stat.isFile() && entry.endsWith('.js')) {
                        files.push(fullPath);
                    }
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
            }
            return files;
        };

        const jsFiles = findJSFiles('.');
        syntaxTest.details.totalFiles = jsFiles.length;
        syntaxTest.details.validFiles = 0;
        syntaxTest.details.invalidFiles = [];

        this.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${jsFiles.length} JavaScript —Ñ–∞–π–ª–æ–≤`, 'blue');

        for (const file of jsFiles) {
            try {
                const content = fs.readFileSync(file, 'utf8');
                
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                new Function(content);
                
                syntaxTest.details.validFiles++;
                this.log(`‚úÖ ${file}: —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`, 'green');
                
            } catch (error) {
                syntaxTest.details.invalidFiles.push({
                    file: file,
                    error: error.message
                });
                syntaxTest.status = 'FAIL';
                syntaxTest.issues.push(`–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ${file}: ${error.message}`);
                this.log(`‚ùå ${file}: ${error.message}`, 'red');
            }
        }

        this.testResults.tests.javaScriptSyntax = syntaxTest;
        return syntaxTest;
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    async testDockerConfiguration() {
        this.logSubSection('üê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        
        const dockerTest = {
            name: 'Docker Configuration',
            status: 'PASS',
            details: {},
            issues: []
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile
        try {
            if (fs.existsSync('Dockerfile')) {
                const dockerfileContent = fs.readFileSync('Dockerfile', 'utf8');
                const lines = dockerfileContent.split('\n');
                
                dockerTest.details.dockerfile = {
                    exists: true,
                    lineCount: lines.length,
                    hasFrom: lines.some(line => line.trim().startsWith('FROM')),
                    hasExpose: lines.some(line => line.trim().startsWith('EXPOSE')),
                    hasCmd: lines.some(line => line.trim().startsWith('CMD'))
                };
                
                if (dockerTest.details.dockerfile.hasFrom) {
                    this.log(`‚úÖ Dockerfile: –Ω–∞–π–¥–µ–Ω –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑`, 'green');
                } else {
                    dockerTest.status = 'WARNING';
                    dockerTest.issues.push('Dockerfile –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç FROM –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é');
                    this.log(`‚ö†Ô∏è Dockerfile –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç FROM –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é`, 'yellow');
                }
                
                if (dockerTest.details.dockerfile.hasExpose) {
                    this.log(`‚úÖ Dockerfile: –Ω–∞–π–¥–µ–Ω EXPOSE`, 'green');
                } else {
                    this.log(`‚ö†Ô∏è Dockerfile –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç EXPOSE –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é`, 'yellow');
                }
                
                if (dockerTest.details.dockerfile.hasCmd) {
                    this.log(`‚úÖ Dockerfile: –Ω–∞–π–¥–µ–Ω CMD`, 'green');
                } else {
                    dockerTest.status = 'WARNING';
                    dockerTest.issues.push('Dockerfile –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç CMD –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é');
                    this.log(`‚ö†Ô∏è Dockerfile –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç CMD –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é`, 'yellow');
                }
                
            } else {
                dockerTest.details.dockerfile = { exists: false };
                dockerTest.status = 'WARNING';
                dockerTest.issues.push('Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω');
                this.log(`‚ö†Ô∏è Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
            }
        } catch (error) {
            dockerTest.details.dockerfile = {
                exists: true,
                error: error.message
            };
            dockerTest.status = 'FAIL';
            dockerTest.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Dockerfile: ${error.message}`);
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Dockerfile: ${error.message}`, 'red');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml
        try {
            if (fs.existsSync('docker-compose.yml')) {
                const composeContent = fs.readFileSync('docker-compose.yml', 'utf8');
                
                dockerTest.details.dockerCompose = {
                    exists: true,
                    hasServices: composeContent.includes('services:'),
                    hasVolumes: composeContent.includes('volumes:'),
                    hasNetworks: composeContent.includes('networks:')
                };
                
                if (dockerTest.details.dockerCompose.hasServices) {
                    this.log(`‚úÖ docker-compose.yml: –Ω–∞–π–¥–µ–Ω—ã —Å–µ—Ä–≤–∏—Å—ã`, 'green');
                } else {
                    dockerTest.status = 'FAIL';
                    dockerTest.issues.push('docker-compose.yml –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ—Ä–≤–∏—Å–æ–≤');
                    this.log(`‚ùå docker-compose.yml –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ—Ä–≤–∏—Å–æ–≤`, 'red');
                }
                
                if (dockerTest.details.dockerCompose.hasVolumes) {
                    this.log(`‚úÖ docker-compose.yml: –Ω–∞–π–¥–µ–Ω—ã volumes`, 'green');
                } else {
                    this.log(`‚ö†Ô∏è docker-compose.yml –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç volumes`, 'yellow');
                }
                
                if (dockerTest.details.dockerCompose.hasNetworks) {
                    this.log(`‚úÖ docker-compose.yml: –Ω–∞–π–¥–µ–Ω—ã networks`, 'green');
                } else {
                    this.log(`‚ö†Ô∏è docker-compose.yml –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç networks`, 'yellow');
                }
                
            } else {
                dockerTest.details.dockerCompose = { exists: false };
                dockerTest.status = 'WARNING';
                dockerTest.issues.push('docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω');
                this.log(`‚ö†Ô∏è docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
            }
        } catch (error) {
            dockerTest.details.dockerCompose = {
                exists: true,
                error: error.message
            };
            dockerTest.status = 'FAIL';
            dockerTest.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ docker-compose.yml: ${error.message}`);
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ docker-compose.yml: ${error.message}`, 'red');
        }

        this.testResults.tests.dockerConfiguration = dockerTest;
        return dockerTest;
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞
    async testStartupScripts() {
        this.logSubSection('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞');
        
        const startupTest = {
            name: 'Startup Scripts',
            status: 'PASS',
            details: {},
            issues: []
        };

        try {
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const scripts = packageJson.scripts || {};
            
            startupTest.details.scripts = scripts;
            startupTest.details.hasStart = !!scripts.start;
            startupTest.details.hasDev = !!scripts.dev;
            startupTest.details.hasBuild = !!scripts.build;
            startupTest.details.hasTest = !!scripts.test;
            
            if (startupTest.details.hasStart) {
                this.log(`‚úÖ npm start: ${scripts.start}`, 'green');
            } else {
                startupTest.status = 'WARNING';
                startupTest.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç npm start script');
                this.log(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç npm start script`, 'yellow');
            }
            
            if (startupTest.details.hasDev) {
                this.log(`‚úÖ npm run dev: ${scripts.dev}`, 'green');
            } else {
                startupTest.status = 'WARNING';
                startupTest.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç npm run dev script');
                this.log(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç npm run dev script`, 'yellow');
            }
            
            if (startupTest.details.hasBuild) {
                this.log(`‚úÖ npm run build: ${scripts.build}`, 'green');
            } else {
                this.log(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç npm run build script`, 'yellow');
            }
            
            if (startupTest.details.hasTest) {
                this.log(`‚úÖ npm test: ${scripts.test}`, 'green');
            } else {
                this.log(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç npm test script`, 'yellow');
            }
            
        } catch (error) {
            startupTest.status = 'FAIL';
            startupTest.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ package.json: ${error.message}`);
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ package.json: ${error.message}`, 'red');
        }

        this.testResults.tests.startupScripts = startupTest;
        return startupTest;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    generateSummary() {
        const tests = this.testResults.tests;
        let totalTests = 0;
        let passedTests = 0;
        let failedTests = 0;
        let skippedTests = 0;
        
        Object.keys(tests).forEach(testName => {
            const test = tests[testName];
            totalTests++;
            
            if (test.status === 'PASS') {
                passedTests++;
            } else if (test.status === 'FAIL') {
                failedTests++;
            } else if (test.status === 'WARNING') {
                passedTests++; // Warnings —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–∞–∫ passed, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
            } else {
                skippedTests++;
            }
        });
        
        const score = totalTests > 0 ? Math.round((passedTests / totalTests) * 100) : 0;
        
        this.testResults.summary = {
            total: totalTests,
            passed: passedTests,
            failed: failedTests,
            skipped: skippedTests,
            score: score
        };
        
        // –°–±–æ—Ä –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
        Object.keys(tests).forEach(testName => {
            const test = tests[testName];
            if (test.issues && test.issues.length > 0) {
                test.issues.forEach(issue => {
                    this.testResults.issues.push(`[${testName}] ${issue}`);
                });
            }
        });
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if (failedTests > 0) {
            this.testResults.recommendations.push('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ production');
        }
        
        if (this.testResults.issues.length > 0) {
            this.testResults.recommendations.push('–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏');
        }
        
        this.testResults.recommendations.push('–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ runtime –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
        this.testResults.recommendations.push('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è production');
    }

    // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    printFinalReport() {
        this.logSection('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        
        const summary = this.testResults.summary;
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        let overallStatus = 'EXCELLENT';
        if (summary.score >= 90) {
            overallStatus = 'EXCELLENT';
        } else if (summary.score >= 80) {
            overallStatus = 'GOOD';
        } else if (summary.score >= 70) {
            overallStatus = 'FAIR';
        } else if (summary.score >= 60) {
            overallStatus = 'POOR';
        } else {
            overallStatus = 'CRITICAL';
        }
        
        const statusColors = {
            'EXCELLENT': 'green',
            'GOOD': 'green',
            'FAIR': 'yellow',
            'POOR': 'red',
            'CRITICAL': 'red'
        };
        
        this.log(`\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: ${overallStatus}`, statusColors[overallStatus]);
        this.log(`üìà –ë–ê–õ–õ: ${summary.score}/100`, summary.score >= 80 ? 'green' : summary.score >= 60 ? 'yellow' : 'red');
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
        this.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í:`, 'blue');
        this.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${summary.passed}/${summary.total}`, 'green');
        this.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${summary.failed}/${summary.total}`, 'red');
        this.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${summary.skipped}/${summary.total}`, 'yellow');
        
        // –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤
        this.log(`\nüìã –î–ï–¢–ê–õ–ò –¢–ï–°–¢–û–í:`, 'blue');
        Object.keys(this.testResults.tests).forEach(testName => {
            const test = this.testResults.tests[testName];
            const statusEmoji = test.status === 'PASS' ? '‚úÖ' : test.status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
            const color = test.status === 'PASS' ? 'green' : test.status === 'FAIL' ? 'red' : 'yellow';
            this.log(`   ${statusEmoji} ${test.name}: ${test.status}`, color);
        });
        
        // –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if (this.testResults.issues.length > 0) {
            this.log(`\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:`, 'red');
            this.testResults.issues.forEach(issue => {
                this.log(`   ‚Ä¢ ${issue}`, 'red');
            });
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (this.testResults.recommendations.length > 0) {
            this.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`, 'yellow');
            this.testResults.recommendations.forEach(rec => {
                this.log(`   ‚Ä¢ ${rec}`, 'yellow');
            });
        }
        
        // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        this.log(`\nüìÑ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:`, 'cyan');
        
        if (overallStatus === 'EXCELLENT' || overallStatus === 'GOOD') {
            this.log('   ‚úÖ –ü—Ä–æ–µ–∫—Ç –ø—Ä–æ—à–µ–ª —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ', 'green');
            this.log('   ‚úÖ –ì–æ—Ç–æ–≤ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –¥–µ–ø–ª–æ—é', 'green');
        } else if (overallStatus === 'FAIR') {
            this.log('   ‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π', 'yellow');
            this.log('   ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'yellow');
        } else {
            this.log('   ‚ùå –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π', 'red');
            this.log('   ‚ùå –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –∑–∞–ø—É—Å–∫—É –≤ production', 'red');
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    async runAllTests() {
        this.logSection('üß™ –ó–ê–ü–£–°–ö –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø VHM24');
        
        try {
            // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
            await this.testConfigurationFiles();
            await this.testProjectStructure();
            await this.testDependencies();
            await this.testJavaScriptSyntax();
            await this.testDockerConfiguration();
            await this.testStartupScripts();
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            this.generateSummary();
            
            // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            this.printFinalReport();
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
            const reportPath = 'VHM24_FUNCTIONAL_TEST_REPORT.json';
            fs.writeFileSync(reportPath, JSON.stringify(this.testResults, null, 2));
            this.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`, 'green');
            
            return this.testResults;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'red');
            throw error;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    cleanup() {
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        this.runningProcesses.forEach(process => {
            try {
                process.kill();
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            }
        });
        
        this.runningProcesses = [];
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const tester = new VHM24FunctionalTester();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
        console.log('\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        tester.cleanup();
        process.exit(0);
    });
    
    process.on('SIGTERM', () => {
        console.log('\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        tester.cleanup();
        process.exit(0);
    });
    
    tester.runAllTests()
        .then(results => {
            console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        })
        .catch(error => {
            console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
            tester.cleanup();
            process.exit(1);
        });
}

module.exports = VHM24FunctionalTester;
