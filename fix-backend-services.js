#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backend —Å–µ—Ä–≤–∏—Å–æ–≤ VHM24...\n');

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const services = [
  'gateway',
  'auth',
  'machines',
  'inventory',
  'tasks',
  'routes',
  'warehouse',
  'recipes',
  'notifications',
  'audit',
  'monitoring',
  'backup',
  'data-import'
];

// 1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å bcrypt
async function fixBcrypt() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ bcrypt...');
  try {
    // –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ bcrypt —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π
    await exec('npm uninstall bcrypt');
    await exec('npm install bcrypt@5.1.1');
    console.log('‚úÖ bcrypt —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (error) {
    console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ bcrypt:', error.message);
  }
}

// 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
async function generatePrismaForAllServices() {
  console.log('\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...\n');

  for (const service of services) {
    console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${service}...`);

    try {
      // –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ö–µ–º—É Prisma
      const servicePath = path.join(__dirname, 'services', service);
      const prismaPath = path.join(servicePath, 'prisma');
      const schemaPath = path.join(prismaPath, 'schema.prisma');
      const originalSchemaPath = path.join(
        __dirname,
        'packages/database/prisma/schema.prisma'
      );

      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É prisma –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      try {
        await fs.mkdir(prismaPath, { recursive: true });
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }

      // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ö–µ–º—É
      try {
        await fs.copyFile(originalSchemaPath, schemaPath);
        console.log(`  ‚úÖ –°—Ö–µ–º–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${service}`);
      } catch (e) {
        console.log(`  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –¥–ª—è ${service}`);
        continue;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
      try {
        await exec(`npx prisma generate --schema=${schemaPath}`, {
          cwd: servicePath
        });
        console.log(`  ‚úÖ Prisma –∫–ª–∏–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${service}`);
      } catch (e) {
        console.log(`  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Prisma –¥–ª—è ${service}`);
      }
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${service}:`, error.message);
    }
  }
}

// 3. –°–æ–∑–¥–∞—Ç—å package.json —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
async function updateServicePackageJson() {
  console.log('\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤...\n');

  for (const service of services) {
    const packagePath = path.join(
      __dirname,
      'services',
      service,
      'package.json'
    );

    try {
      const packageJson = JSON.parse(await fs.readFile(packagePath, 'utf8'));

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      if (!packageJson.dependencies) {
        packageJson.dependencies = {};
      }

      // –î–æ–±–∞–≤–ª—è–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
      packageJson.dependencies['@prisma/client'] = '^6.11.1';

      // –î–æ–±–∞–≤–ª—è–µ–º bcrypt –¥–ª—è auth —Å–µ—Ä–≤–∏—Å–∞
      if (service === 'auth') {
        packageJson.dependencies['bcrypt'] = '^5.1.1';
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma
      if (!packageJson.scripts) {
        packageJson.scripts = {};
      }
      packageJson.scripts['prisma:generate'] = 'prisma generate';

      await fs.writeFile(packagePath, JSON.stringify(packageJson, null, 2));
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω package.json –¥–ª—è ${service}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å package.json –¥–ª—è ${service}`);
    }
  }
}

// 4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
async function installServiceDependencies() {
  console.log('\nüîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤...\n');

  for (const service of [
    'auth',
    'gateway',
    'recipes',
    'notifications',
    'audit',
    'monitoring'
  ]) {
    console.log(`üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è ${service}...`);

    try {
      const servicePath = path.join(__dirname, 'services', service);
      await exec('npm install', { cwd: servicePath });
      console.log(`‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${service}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è ${service}:`, error.message);
    }
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backend —Å–µ—Ä–≤–∏—Å–æ–≤...\n');

    // 1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å bcrypt
    await fixBcrypt();

    // 2. –û–±–Ω–æ–≤–∏—Ç—å package.json
    await updateServicePackageJson();

    // 3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    await installServiceDependencies();

    // 4. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Prisma
    await generatePrismaForAllServices();

    console.log('\n‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!');
    console.log('\nüìã –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç:');
    console.log('   node start-with-railway.js');
    console.log('\nüéâ Backend —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
