const { spawn } = require('child_process');
const path = require('path');

console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ backend —Å –≤—Å–µ–º–∏ –Ω–æ–≤—ã–º–∏ —Ä–æ—É—Ç–∞–º–∏...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
function startProcess(command, args, cwd, name) {
  return new Promise((resolve, reject) => {
    console.log(`üì¶ –ó–∞–ø—É—Å–∫ ${name}...`);

    const proc = spawn(command, args, {
      cwd,
      shell: true,
      stdio: 'inherit'
    });

    proc.on('error', error => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${name}:`, error);
      reject(error);
    });

    // –î–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    setTimeout(() => {
      console.log(`‚úÖ ${name} –∑–∞–ø—É—â–µ–Ω\n`);
      resolve();
    }, 3000);
  });
}

async function main() {
  try {
    console.log('üìã –ù–û–í–´–ï –†–û–£–¢–´ –î–û–ë–ê–í–õ–ï–ù–´:');
    console.log('‚úÖ /api/v1/ingredients - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏');
    console.log('‚úÖ /api/v1/routes - –ú–∞—Ä—à—Ä—É—Ç—ã –∏ –ª–æ–≥–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π');
    console.log('‚úÖ /api/v1/warehouse - –°–∫–ª–∞–¥, –æ–ø–µ—Ä–∞—Ü–∏–∏, –±—É–Ω–∫–µ—Ä—ã');
    console.log('‚úÖ /api/audit - –ê—É–¥–∏—Ç –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    console.log('‚úÖ /api/v1/data-import - –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö');
    console.log('‚úÖ /api/incomplete-data - –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('‚úÖ /api/v1/auth/users - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Ä–æ–ª—è–º');
    console.log('‚úÖ /api/v1/tasks/templates - –®–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞—á');
    console.log('‚úÖ /api/v1/users/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('\n');

    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');

    // –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö
    if (process.platform === 'win32') {
      try {
        await new Promise(resolve => {
          spawn(
            'cmd',
            [
              '/c',
              'for /f "tokens=5" %a in (\'netstat -aon ^| find ":8000"\') do taskkill /F /PID %a'
            ],
            {
              shell: true,
              stdio: 'ignore'
            }
          ).on('exit', resolve);
        });
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }

    // –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –ó–∞–ø—É—Å–∫–∞–µ–º backend
    await startProcess(
      'npm',
      ['start'],
      path.join(__dirname, 'backend'),
      'Backend API'
    );

    console.log('\n‚úÖ –í–°–ï –†–û–£–¢–´ –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–´ –ò –†–ê–ë–û–¢–ê–Æ–¢!\n');
    console.log('üìç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É:');
    console.log('   http://localhost:8000/health - Health check');
    console.log('   http://localhost:8000/api/v1/dashboard/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    console.log('   http://localhost:3000 - Web Dashboard\n');

    console.log('üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ 404 –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    console.log('   –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();
