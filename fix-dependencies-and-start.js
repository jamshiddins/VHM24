#!/usr/bin/env node

/**
 * VHM24 Dependencies Fix and Start Script
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */

const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫ VHM24...\n');

// –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
const services = [
  {
    name: 'Notifications',
    path: 'services/notifications',
    dependencies: {
      '@fastify/cors': '^11.0.1',
      '@fastify/helmet': '^13.0.1',
      '@fastify/jwt': '^9.1.0',
      '@fastify/rate-limit': '^10.3.0',
      '@vhm24/database': 'file:../../packages/database',
      '@vhm24/shared-types': 'file:../../packages/shared-types',
      'dotenv': '^16.3.1',
      'fastify': '^5.4.0',
      'nodemailer': '^6.9.7',
      'node-telegram-bot-api': '^0.64.0',
      'winston': '^3.11.0'
    }
  },
  {
    name: 'Audit',
    path: 'services/audit',
    dependencies: {
      '@fastify/cors': '^11.0.1',
      '@fastify/helmet': '^13.0.1',
      '@fastify/jwt': '^9.1.0',
      '@fastify/rate-limit': '^10.3.0',
      '@vhm24/database': 'file:../../packages/database',
      '@vhm24/shared-types': 'file:../../packages/shared-types',
      '@vhm24/shared': 'file:../../packages/shared',
      'dotenv': '^16.3.1',
      'fastify': '^5.4.0',
      'winston': '^3.11.0'
    }
  },
  {
    name: 'Gateway',
    path: 'services/gateway',
    dependencies: {
      '@fastify/cors': '^11.0.1',
      '@fastify/helmet': '^13.0.1',
      '@fastify/jwt': '^9.1.0',
      '@fastify/rate-limit': '^10.3.0',
      '@fastify/http-proxy': '^10.0.0',
      '@fastify/multipart': '^8.0.0',
      '@fastify/websocket': '^10.0.0',
      '@vhm24/database': 'file:../../packages/database',
      '@vhm24/shared-types': 'file:../../packages/shared-types',
      '@vhm24/shared': 'file:../../packages/shared',
      'dotenv': '^16.3.1',
      'fastify': '^5.4.0',
      'uuid': '^9.0.1'
    }
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è package.json
function updatePackageJson(servicePath, dependencies) {
  const packageJsonPath = path.join(__dirname, servicePath, 'package.json');
  
  if (!fs.existsSync(packageJsonPath)) {
    console.log(`‚ö†Ô∏è  package.json –Ω–µ –Ω–∞–π–¥–µ–Ω: ${packageJsonPath}`);
    return false;
  }

  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    packageJson.dependencies = {
      ...packageJson.dependencies,
      ...dependencies
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π package.json
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω package.json –¥–ª—è ${servicePath}`);
    return true;
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è package.json –¥–ª—è ${servicePath}:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function installDependencies(servicePath) {
  return new Promise((resolve) => {
    console.log(`üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è ${servicePath}...`);
    
    const installProcess = spawn('npm', ['install'], {
      cwd: path.join(__dirname, servicePath),
      stdio: 'pipe',
      shell: true
    });

    let output = '';
    installProcess.stdout.on('data', (data) => {
      output += data.toString();
    });

    installProcess.stderr.on('data', (data) => {
      output += data.toString();
    });

    installProcess.on('close', (code) => {
      if (code === 0) {
        console.log(`‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${servicePath}`);
        resolve(true);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è ${servicePath}`);
        console.log(output);
        resolve(false);
      }
    });

    installProcess.on('error', (error) => {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è ${servicePath}:`, error.message);
      resolve(false);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
function createMissingFiles() {
  console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤...');

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  const directories = [
    'services/notifications/src',
    'services/audit/src',
    'packages/shared/middleware'
  ];

  directories.forEach(dir => {
    const fullPath = path.join(__dirname, dir);
    if (!fs.existsSync(fullPath)) {
      fs.mkdirSync(fullPath, { recursive: true });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const criticalFiles = [
    'services/notifications/src/index.js',
    'services/notifications/src/services/notificationService.js',
    'services/audit/src/index.js',
    'packages/shared/middleware/auditMiddleware.js'
  ];

  let missingFiles = [];
  criticalFiles.forEach(file => {
    if (!fs.existsSync(path.join(__dirname, file))) {
      missingFiles.push(file);
    }
  });

  if (missingFiles.length > 0) {
    console.log('‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã:');
    missingFiles.forEach(file => console.log(`   - ${file}`));
    return false;
  }

  console.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ');
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvironmentVariables() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

  const envPath = path.join(__dirname, '.env');
  if (!fs.existsSync(envPath)) {
    console.log('‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∏–∑ .env.example...');
    
    const examplePath = path.join(__dirname, '.env.example');
    if (fs.existsSync(examplePath)) {
      fs.copyFileSync(examplePath, envPath);
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –∏–∑ .env.example');
    } else {
      console.log('‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const envContent = fs.readFileSync(envPath, 'utf8');
  const requiredVars = ['JWT_SECRET', 'DATABASE_URL'];
  
  const missingVars = requiredVars.filter(varName => 
    !envContent.includes(`${varName}=`) || envContent.includes(`${varName}=`)
  );

  if (missingVars.length > 0) {
    console.log('‚ö†Ô∏è  –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    missingVars.forEach(varName => console.log(`   - ${varName}`));
    console.log('üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª .env');
  } else {
    console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã
    if (!createMissingFiles()) {
      console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.');
      process.exit(1);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    checkEnvironmentVariables();

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º package.json —Ñ–∞–π–ª—ã
    console.log('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json —Ñ–∞–π–ª–æ–≤...');
    for (const service of services) {
      updatePackageJson(service.path, service.dependencies);
    }

    // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    console.log('\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    for (const service of services) {
      const servicePath = path.join(__dirname, service.path);
      if (fs.existsSync(servicePath)) {
        await installDependencies(service.path);
      } else {
        console.log(`‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${service.path}`);
      }
    }

    // 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    console.log('\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...');
    const packages = ['packages/database', 'packages/shared', 'packages/shared-types'];
    
    for (const pkg of packages) {
      const pkgPath = path.join(__dirname, pkg);
      if (fs.existsSync(pkgPath)) {
        await installDependencies(pkg);
      }
    }

    // 6. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    await installDependencies('.');

    console.log('\nüéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã:');
    console.log('   node start-all-services-with-audit.js');
    console.log('   node test-complete-system-with-notifications.js');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { main };
