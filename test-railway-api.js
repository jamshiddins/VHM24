const logger = require('@vhm24/shared/logger');

#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VHM24 API –Ω–∞ Railway
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-railway-api.js
 */

const https = require('https');

const API_URL = 'https://vhm24-production.up.railway.app';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(path, options = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, API_URL);
    
    const req = https.request(url, {
      method: options.method || 'GET',
      headers: options.headers || {},
      ...options
    }, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const json = JSON.parse(data);
          resolve({ status: res.statusCode, data: json });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });
    
    req.on('error', reject);
    
    if (options.body) {
      req.write(JSON.stringify(options.body));
    }
    
    req.end();
  });
}

// –¢–µ—Å—Ç—ã
async function runTests() {
  logger.info(`${colors.blue}üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VHM24 API –Ω–∞ Railway${colors.reset}\n`);
  logger.info(`URL: ${API_URL}\n`);
  
  const tests = [
    {
      name: 'Health Check',
      path: '/health',
      check: (res) => res.status === 200 && res.data.status === 'ok'
    },
    {
      name: 'Database Connection',
      path: '/api/v1/test-db',
      check: (res) => res.status === 200 && res.data.success === true
    },
    {
      name: 'Auth Service',
      path: '/api/v1/auth/health',
      check: (res) => res.status === 200
    },
    {
      name: 'Machines Service',
      path: '/api/v1/machines',
      check: (res) => res.status === 200 || res.status === 401 // 401 –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    },
    {
      name: 'Inventory Service',
      path: '/api/v1/inventory',
      check: (res) => res.status === 200 || res.status === 401
    },
    {
      name: 'Tasks Service',
      path: '/api/v1/tasks',
      check: (res) => res.status === 200 || res.status === 401
    }
  ];
  
  let passed = 0;
  let failed = 0;
  
  for (const test of tests) {
    try {
      logger.info(`Testing: ${test.name}...`);
      const result = await makeRequest(test.path);
      
      if (test.check(result)) {
        logger.info(`${colors.green}‚úÖ ${test.name} - PASSED${colors.reset}`);
        if (result.data) {
          logger.info(`   Response: ${JSON.stringify(result.data, null, 2).split('\n').join('\n   ')}`);
        }
        passed++;
      } else {
        logger.info(`${colors.red}‚ùå ${test.name} - FAILED${colors.reset}`);
        logger.info(`   Status: ${result.status}`);
        logger.info(`   Response: ${JSON.stringify(result.data, null, 2).split('\n').join('\n   ')}`);
        failed++;
      }
    } catch (error) {
      logger.info(`${colors.red}‚ùå ${test.name} - ERROR${colors.reset}`);
      logger.info(`   Error: ${error.message}`);
      failed++;
    }
    
    logger.info('');
  }
  
  // –ò—Ç–æ–≥–∏
  logger.info(`${colors.blue}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${colors.reset}`);
  logger.info(`${colors.green}Passed: ${passed}${colors.reset}`);
  logger.info(`${colors.red}Failed: ${failed}${colors.reset}`);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (failed > 0) {
    logger.info(`\n${colors.yellow}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${colors.reset}`);
    
    const healthResult = await makeRequest('/health').catch(() => null);
    if (healthResult && healthResult.data) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ë–î
      if (healthResult.data.dbStatus !== 'connected') {
        logger.info('1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ Railway Variables');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
      const offlineServices = Object.entries(healthResult.data.services || {})
        .filter(([_, status]) => status !== 'ok')
        .map(([name]) => name);
        
      if (offlineServices.length > 0) {
        logger.info(`2. –°–µ—Ä–≤–∏—Å—ã offline: ${offlineServices.join(', ')}`);
        logger.info('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: railway logs');
      }
    } else {
      logger.info('1. API Gateway –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–ø–ª–æ–π –∏ –ª–æ–≥–∏');
    }
    
    logger.info('\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: railway logs -f');
  } else {
    logger.info(`\n${colors.green}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${colors.reset}`);
    logger.info('API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
  logger.error(`${colors.red}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:${colors.reset}`, error);
  process.exit(1);
});
