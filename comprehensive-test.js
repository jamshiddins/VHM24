const fs = require('fs');
const path = require('path');
const { execSync, spawn } = require('child_process');
const axios = require('axios');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

class ComprehensiveTestSuite {
  constructor() {
    this.results = {
      functionality: [],
      performance: [],
      stability: [],
      compatibility: [],
      errors: [],
      warnings: []
    };
    this.serverProcess = null;
    this.baseUrl = 'http://localhost:8000';
  }

  log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    const colorMap = {
      info: colors.blue,
      success: colors.green,
      error: colors.red,
      warning: colors.yellow,
      test: colors.magenta
    };
    console.log(`${colorMap[type]}[${timestamp}] ${message}${colors.reset}`);
  }

  async runAllTests() {
    this.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VHM24', 'test');
    
    try {
      // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      await this.testCompatibility();
      
      // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
      await this.testFunctionality();
      
      // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await this.testPerformance();
      
      // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      await this.testStability();
      
      // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      await this.generateReport();
      
    } catch (error) {
      this.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'error');
      this.results.errors.push({
        test: 'General',
        error: error.message,
        stack: error.stack
      });
    } finally {
      await this.cleanup();
    }
  }

  async testCompatibility() {
    this.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...', 'test');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –≤–µ—Ä—Å–∏–∏
    try {
      const nodeVersion = process.version;
      this.log(`Node.js –≤–µ—Ä—Å–∏—è: ${nodeVersion}`, 'info');
      
      if (parseInt(nodeVersion.slice(1)) < 16) {
        this.results.compatibility.push({
          test: 'Node.js Version',
          status: 'FAIL',
          message: `–¢—Ä–µ–±—É–µ—Ç—Å—è Node.js >= 16, –Ω–∞–π–¥–µ–Ω–∞ ${nodeVersion}`
        });
      } else {
        this.results.compatibility.push({
          test: 'Node.js Version',
          status: 'PASS',
          message: `Node.js ${nodeVersion} —Å–æ–≤–º–µ—Å—Ç–∏–º`
        });
      }
    } catch (error) {
      this.results.errors.push({
        test: 'Node.js Version Check',
        error: error.message
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try {
      this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', 'info');
      execSync('npm ls --depth=0', { stdio: 'pipe' });
      this.results.compatibility.push({
        test: 'Dependencies Check',
        status: 'PASS',
        message: '–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
      });
    } catch (error) {
      this.results.compatibility.push({
        test: 'Dependencies Check',
        status: 'FAIL',
        message: '–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try {
      this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...', 'info');
      execSync('npm run check-env', { stdio: 'pipe' });
      this.results.compatibility.push({
        test: 'Environment Variables',
        status: 'PASS',
        message: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
      });
    } catch (error) {
      this.results.compatibility.push({
        test: 'Environment Variables',
        status: 'WARN',
        message: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    try {
      this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤...', 'info');
      const net = require('net');
      const checkPort = (port) => {
        return new Promise((resolve) => {
          const server = net.createServer();
          server.listen(port, () => {
            server.close(() => resolve(true));
          });
          server.on('error', () => resolve(false));
        });
      };

      const port8000Available = await checkPort(8000);
      const port3000Available = await checkPort(3000);

      this.results.compatibility.push({
        test: 'Port Availability',
        status: port8000Available && port3000Available ? 'PASS' : 'WARN',
        message: `–ü–æ—Ä—Ç 8000: ${port8000Available ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–∑–∞–Ω—è—Ç'}, –ü–æ—Ä—Ç 3000: ${port3000Available ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–∑–∞–Ω—è—Ç'}`
      });
    } catch (error) {
      this.results.errors.push({
        test: 'Port Check',
        error: error.message
      });
    }
  }

  async testFunctionality() {
    this.log('‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...', 'test');
    
    // –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞
    try {
      await this.startBackendServer();
      await this.sleep(3000); // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      
      // –¢–µ—Å—Ç health check
      await this.testHealthCheck();
      
      // –¢–µ—Å—Ç API endpoints
      await this.testApiEndpoints();
      
      // –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.testDatabase();
      
      // –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      await this.testLogging();
      
    } catch (error) {
      this.results.errors.push({
        test: 'Functionality Tests',
        error: error.message
      });
    }
  }

  async startBackendServer() {
    this.log('–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...', 'info');
    
    return new Promise((resolve, reject) => {
      this.serverProcess = spawn('node', ['backend/src/index.js'], {
        stdio: 'pipe',
        env: { ...process.env, NODE_ENV: 'test' }
      });

      let output = '';
      this.serverProcess.stdout.on('data', (data) => {
        output += data.toString();
        if (output.includes('–∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É')) {
          resolve();
        }
      });

      this.serverProcess.stderr.on('data', (data) => {
        this.log(`Backend stderr: ${data}`, 'warning');
      });

      this.serverProcess.on('error', (error) => {
        reject(error);
      });

      // –¢–∞–π–º–∞—É—Ç –Ω–∞ –∑–∞–ø—É—Å–∫
      setTimeout(() => {
        reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ backend —Å–µ—Ä–≤–µ—Ä–∞'));
      }, 10000);
    });
  }

  async testHealthCheck() {
    try {
      this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...', 'info');
      const response = await axios.get(`${this.baseUrl}/health`, {
        timeout: 5000
      });
      
      if (response.status === 200 && response.data.status === 'ok') {
        this.results.functionality.push({
          test: 'Health Check',
          status: 'PASS',
          message: 'Health check —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
          responseTime: response.headers['x-response-time'] || 'N/A'
        });
      } else {
        this.results.functionality.push({
          test: 'Health Check',
          status: 'FAIL',
          message: 'Health check –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç'
        });
      }
    } catch (error) {
      this.results.functionality.push({
        test: 'Health Check',
        status: 'FAIL',
        message: `Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`
      });
    }
  }

  async testApiEndpoints() {
    this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...', 'info');
    
    const endpoints = [
      { path: '/api/v1/auth', method: 'GET', expectedStatus: [404, 405] },
      { path: '/api/v1/users', method: 'GET', expectedStatus: [401, 403, 200] },
      { path: '/api/v1/machines', method: 'GET', expectedStatus: [401, 403, 200] },
      { path: '/api/v1/tasks', method: 'GET', expectedStatus: [401, 403, 200] },
      { path: '/api/v1/inventory', method: 'GET', expectedStatus: [401, 403, 200] },
      { path: '/api/v1/recipes', method: 'GET', expectedStatus: [401, 403, 200] },
      { path: '/api/v1/dashboard', method: 'GET', expectedStatus: [401, 403, 200] },
      { path: '/api/v1/warehouse', method: 'GET', expectedStatus: [401, 403, 200] },
      { path: '/api/v1/audit', method: 'GET', expectedStatus: [401, 403, 200] },
      { path: '/api/v1/data-import', method: 'GET', expectedStatus: [401, 403, 200] }
    ];

    for (const endpoint of endpoints) {
      try {
        const response = await axios({
          method: endpoint.method,
          url: `${this.baseUrl}${endpoint.path}`,
          timeout: 5000,
          validateStatus: () => true // –ù–µ –±—Ä–æ—Å–∞—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
        });

        const isExpectedStatus = endpoint.expectedStatus.includes(response.status);
        
        this.results.functionality.push({
          test: `API Endpoint ${endpoint.path}`,
          status: isExpectedStatus ? 'PASS' : 'WARN',
          message: `${endpoint.method} ${endpoint.path} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`,
          responseTime: response.headers['x-response-time'] || 'N/A'
        });
      } catch (error) {
        this.results.functionality.push({
          test: `API Endpoint ${endpoint.path}`,
          status: 'FAIL',
          message: `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`
        });
      }
    }
  }

  async testDatabase() {
    this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...', 'info');
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
      require('dotenv').config();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
      if (!process.env.DATABASE_URL) {
        this.results.functionality.push({
          test: 'Database Connection',
          status: 'SKIP',
          message: 'DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        });
        return;
      }

      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ Prisma
      const { PrismaClient } = require('@prisma/client');
      const prisma = new PrismaClient();
      
      await prisma.$connect();
      await prisma.$disconnect();
      
      this.results.functionality.push({
        test: 'Database Connection',
        status: 'PASS',
        message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ'
      });
    } catch (error) {
      this.results.functionality.push({
        test: 'Database Connection',
        status: 'FAIL',
        message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`
      });
    }
  }

  async testLogging() {
    this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...', 'info');
    
    try {
      const logger = require('./backend/src/utils/logger');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ logger —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
      if (typeof logger.info === 'function' && typeof logger.error === 'function') {
        this.results.functionality.push({
          test: 'Logging System',
          status: 'PASS',
          message: '–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
        });
      } else {
        this.results.functionality.push({
          test: 'Logging System',
          status: 'FAIL',
          message: 'Logger –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã'
        });
      }
    } catch (error) {
      this.results.functionality.push({
        test: 'Logging System',
        status: 'FAIL',
        message: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ logger: ${error.message}`
      });
    }
  }

  async testPerformance() {
    this.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...', 'test');
    
    // –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ health check
    await this.testResponseTime();
    
    // –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
    await this.testLoadCapacity();
    
    // –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
    await this.testMemoryUsage();
  }

  async testResponseTime() {
    this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞...', 'info');
    
    try {
      const iterations = 10;
      const times = [];
      
      for (let i = 0; i < iterations; i++) {
        const start = Date.now();
        await axios.get(`${this.baseUrl}/health`, { timeout: 5000 });
        const end = Date.now();
        times.push(end - start);
      }
      
      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
      const maxTime = Math.max(...times);
      const minTime = Math.min(...times);
      
      this.results.performance.push({
        test: 'Response Time',
        status: avgTime < 100 ? 'PASS' : avgTime < 500 ? 'WARN' : 'FAIL',
        message: `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${avgTime.toFixed(2)}ms (–º–∏–Ω: ${minTime}ms, –º–∞–∫—Å: ${maxTime}ms)`,
        metrics: { avg: avgTime, min: minTime, max: maxTime }
      });
    } catch (error) {
      this.results.performance.push({
        test: 'Response Time',
        status: 'FAIL',
        message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞: ${error.message}`
      });
    }
  }

  async testLoadCapacity() {
    this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏...', 'info');
    
    try {
      const concurrentRequests = 20;
      const promises = [];
      
      const start = Date.now();
      
      for (let i = 0; i < concurrentRequests; i++) {
        promises.push(
          axios.get(`${this.baseUrl}/health`, { timeout: 10000 })
            .catch(error => ({ error: error.message }))
        );
      }
      
      const results = await Promise.all(promises);
      const end = Date.now();
      
      const successful = results.filter(r => !r.error).length;
      const failed = results.filter(r => r.error).length;
      const totalTime = end - start;
      
      this.results.performance.push({
        test: 'Load Capacity',
        status: successful >= concurrentRequests * 0.9 ? 'PASS' : 'WARN',
        message: `${successful}/${concurrentRequests} –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞ ${totalTime}ms`,
        metrics: { successful, failed, totalTime, concurrentRequests }
      });
    } catch (error) {
      this.results.performance.push({
        test: 'Load Capacity',
        status: 'FAIL',
        message: `–û—à–∏–±–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`
      });
    }
  }

  async testMemoryUsage() {
    this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...', 'info');
    
    try {
      const memUsage = process.memoryUsage();
      const heapUsedMB = (memUsage.heapUsed / 1024 / 1024).toFixed(2);
      const heapTotalMB = (memUsage.heapTotal / 1024 / 1024).toFixed(2);
      const rssMB = (memUsage.rss / 1024 / 1024).toFixed(2);
      
      this.results.performance.push({
        test: 'Memory Usage',
        status: heapUsedMB < 100 ? 'PASS' : heapUsedMB < 200 ? 'WARN' : 'FAIL',
        message: `Heap: ${heapUsedMB}MB/${heapTotalMB}MB, RSS: ${rssMB}MB`,
        metrics: { heapUsed: heapUsedMB, heapTotal: heapTotalMB, rss: rssMB }
      });
    } catch (error) {
      this.results.performance.push({
        test: 'Memory Usage',
        status: 'FAIL',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏: ${error.message}`
      });
    }
  }

  async testStability() {
    this.log('üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏...', 'test');
    
    // –¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º
    await this.testErrorHandling();
    
    // –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    await this.testRecovery();
    
    // –¢–µ—Å—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    await this.testLongRunning();
  }

  async testErrorHandling() {
    this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...', 'info');
    
    try {
      // –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ endpoint
      const response = await axios.get(`${this.baseUrl}/nonexistent`, {
        timeout: 5000,
        validateStatus: () => true
      });
      
      if (response.status === 404) {
        this.results.stability.push({
          test: 'Error Handling - 404',
          status: 'PASS',
          message: '404 –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
        });
      } else {
        this.results.stability.push({
          test: 'Error Handling - 404',
          status: 'FAIL',
          message: `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 404, –ø–æ–ª—É—á–µ–Ω ${response.status}`
        });
      }
    } catch (error) {
      this.results.stability.push({
        test: 'Error Handling - 404',
        status: 'FAIL',
        message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 404: ${error.message}`
      });
    }

    try {
      // –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON
      const response = await axios.post(`${this.baseUrl}/api/v1/auth`, 'invalid json', {
        headers: { 'Content-Type': 'application/json' },
        timeout: 5000,
        validateStatus: () => true
      });
      
      if (response.status >= 400 && response.status < 500) {
        this.results.stability.push({
          test: 'Error Handling - Invalid JSON',
          status: 'PASS',
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
        });
      } else {
        this.results.stability.push({
          test: 'Error Handling - Invalid JSON',
          status: 'WARN',
          message: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON: ${response.status}`
        });
      }
    } catch (error) {
      this.results.stability.push({
        test: 'Error Handling - Invalid JSON',
        status: 'FAIL',
        message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON: ${error.message}`
      });
    }
  }

  async testRecovery() {
    this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...', 'info');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤—Å–µ –µ—â–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
      const response = await axios.get(`${this.baseUrl}/health`, { timeout: 5000 });
      
      if (response.status === 200) {
        this.results.stability.push({
          test: 'Recovery Test',
          status: 'PASS',
          message: '–°–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏'
        });
      } else {
        this.results.stability.push({
          test: 'Recovery Test',
          status: 'FAIL',
          message: '–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
        });
      }
    } catch (error) {
      this.results.stability.push({
        test: 'Recovery Test',
        status: 'FAIL',
        message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`
      });
    }
  }

  async testLongRunning() {
    this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã...', 'info');
    
    try {
      // –°–µ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
      const duration = 30000; // 30 —Å–µ–∫—É–Ω–¥
      const interval = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
      const start = Date.now();
      let successCount = 0;
      let errorCount = 0;
      
      while (Date.now() - start < duration) {
        try {
          await axios.get(`${this.baseUrl}/health`, { timeout: 2000 });
          successCount++;
        } catch (error) {
          errorCount++;
        }
        await this.sleep(interval);
      }
      
      const successRate = (successCount / (successCount + errorCount)) * 100;
      
      this.results.stability.push({
        test: 'Long Running Test',
        status: successRate >= 95 ? 'PASS' : successRate >= 80 ? 'WARN' : 'FAIL',
        message: `–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞ 30 —Å–µ–∫: ${successRate.toFixed(1)}% (${successCount}/${successCount + errorCount})`,
        metrics: { successCount, errorCount, successRate, duration }
      });
    } catch (error) {
      this.results.stability.push({
        test: 'Long Running Test',
        status: 'FAIL',
        message: `–û—à–∏–±–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`
      });
    }
  }

  async generateReport() {
    this.log('üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...', 'test');
    
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        total: 0,
        passed: 0,
        failed: 0,
        warnings: 0,
        skipped: 0
      },
      results: this.results
    };

    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const allTests = [
      ...this.results.compatibility,
      ...this.results.functionality,
      ...this.results.performance,
      ...this.results.stability
    ];

    allTests.forEach(test => {
      report.summary.total++;
      switch (test.status) {
        case 'PASS':
          report.summary.passed++;
          break;
        case 'FAIL':
          report.summary.failed++;
          break;
        case 'WARN':
          report.summary.warnings++;
          break;
        case 'SKIP':
          report.summary.skipped++;
          break;
      }
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    fs.writeFileSync('comprehensive-test-report.json', JSON.stringify(report, null, 2));
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.printResults(report);
  }

  printResults(report) {
    console.log('\n' + '='.repeat(80));
    this.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'test');
    console.log('='.repeat(80));
    
    this.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${report.summary.total}`, 'info');
    this.log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${report.summary.passed}`, 'success');
    this.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${report.summary.failed}`, 'error');
    this.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${report.summary.warnings}`, 'warning');
    this.log(`–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${report.summary.skipped}`, 'info');
    
    const successRate = ((report.summary.passed / report.summary.total) * 100).toFixed(1);
    this.log(`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, successRate >= 80 ? 'success' : 'error');
    
    console.log('\n' + '-'.repeat(80));
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = [
      { name: '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', tests: this.results.compatibility },
      { name: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', tests: this.results.functionality },
      { name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', tests: this.results.performance },
      { name: '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', tests: this.results.stability }
    ];
    
    categories.forEach(category => {
      if (category.tests.length > 0) {
        this.log(`\n${category.name}:`, 'test');
        category.tests.forEach(test => {
          const statusColor = {
            'PASS': 'success',
            'FAIL': 'error',
            'WARN': 'warning',
            'SKIP': 'info'
          }[test.status];
          this.log(`  ${test.status}: ${test.test} - ${test.message}`, statusColor);
        });
      }
    });
    
    // –û—à–∏–±–∫–∏
    if (this.results.errors.length > 0) {
      this.log('\n–û—à–∏–±–∫–∏:', 'error');
      this.results.errors.forEach(error => {
        this.log(`  ${error.test}: ${error.error}`, 'error');
      });
    }
    
    console.log('\n' + '='.repeat(80));
    this.log('–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ comprehensive-test-report.json', 'info');
  }

  async cleanup() {
    this.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...', 'info');
    
    if (this.serverProcess) {
      this.serverProcess.kill('SIGTERM');
      await this.sleep(2000);
      if (!this.serverProcess.killed) {
        this.serverProcess.kill('SIGKILL');
      }
    }
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  const testSuite = new ComprehensiveTestSuite();
  testSuite.runAllTests().catch(console.error);
}

module.exports = ComprehensiveTestSuite;
