/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ VHM24 API —Å–µ—Ä–≤–µ—Ä–∞
 */
const dotenv = require('dotenv');
const dotenvExpand = require('dotenv-expand');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π .env —Ñ–∞–π–ª
const mainEnv = dotenv.config();
dotenvExpand.expand(mainEnv);

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env.api —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏ –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞
const apiEnv = dotenv.config({ path: '.env.api' });
dotenvExpand.expand(apiEnv);
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const { PrismaClient } = require('@prisma/client');
const routes = require('../backend/src/routes/index');
const logger = require('../backend/src/utils/logger');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// –í—ã–±–æ—Ä URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
// –ï—Å–ª–∏ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –≤ Railway, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π URL
// –ï—Å–ª–∏ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –ª–æ–∫–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π URL
let databaseUrl = process.env.DATABASE_URL || process.env.DATABASE_URL_PUBLIC;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤ Railway
const isRailway = process.env.RAILWAY_ENVIRONMENT === 'production';

// –ï—Å–ª–∏ –º—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ Railway, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
if (isRailway) {
  // –í Railway —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–∞
  // –î–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL —Å –∏–º–µ–Ω–µ–º —Å–µ—Ä–≤–∏—Å–∞ Postgres
  databaseUrl = 'postgresql://postgres:TnKaHJbWffrqtZOIklgKNSlNZHDcxsQh@Postgres:5432/railway';
  console.log('–ó–∞–ø—É—â–µ–Ω–æ –≤ Railway, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL');
}

console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${databaseUrl ? databaseUrl.split('@')[1] : '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: databaseUrl
    }
  }
});

// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è Railway
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';

// Middleware
app.use(cors({
  origin: process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : '*',
  methods: process.env.CORS_METHODS || 'GET,POST,PUT,DELETE,OPTIONS',
  credentials: process.env.CORS_CREDENTIALS === 'true'
}));
app.use(helmet());
app.use(express.json({ limit: process.env.MAX_FILE_SIZE || '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  logger.info(`${req.method} ${req.path}`);
  next();
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    message: 'VHM24 VendHub Management System',
    status: 'online',
    version: process.env.npm_package_version || '1.0.0',
    timestamp: new Date().toISOString()
  });
});

// Health check endpoint - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è Railway
app.get('/health', (req, res) => {
  // –í—ã–±–æ—Ä URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
  const redisUrl = process.env.REDIS_URL || process.env.REDIS_URL_PUBLIC;
  
  res.status(200).json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    version: process.env.npm_package_version || '1.0.0',
    environment: process.env.NODE_ENV || 'development',
    services: {
      database: 'Connected',
      redis: redisUrl ? 'Connected' : 'N/A',
      telegram: 'Configured'
    }
  });
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api', routes);

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Route not found',
    path: req.originalUrl
  });
});

// Error handler
app.use((err, req, res, next) => {
  logger.error('Server error:', err);
  res.status(500).json({
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'development' ? err.message : undefined
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, HOST, () => {
      logger.info(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${HOST}:${PORT}`);
      logger.info(`üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toISOString()}`);
      logger.info(`üîß –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);
      logger.info(`üîç Health check: http://${HOST}:${PORT}/health`);
    });
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  await prisma.$disconnect();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  await prisma.$disconnect();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer().catch(error => {
  logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
