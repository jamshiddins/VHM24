
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

// ============================================================================
// ПОЛЬЗОВАТЕЛИ И РОЛИ
// ============================================================================

model User {
  id          String   @id @default(cuid())
  telegramId  String   @unique @map("telegram_id")
  name        String
  phone       String?
  role        UserRole @default(OPERATOR)
  status      UserStatus @default(ACTIVE)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Связи
  assignedTasks     Task[]
  createdTasks      Task[] @relation("TaskCreator")
  actionLogs        ActionLog[]
  expenses          Expense[]
  incomes           Income[]
  bagIssues         BagIssue[]
  bagReturns        BagReturn[]
  taskChecklists    TaskChecklist[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  WAREHOUSE
  OPERATOR
  TECHNICIAN
  DRIVER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

// ============================================================================
// ЛОКАЦИИ И АВТОМАТЫ
// ============================================================================

model Location {
  id              String  @id @default(cuid())
  name            String
  address         String
  coordinates     String?
  rentCost        Float?  @map("rent_cost")
  electricityCost Float?  @map("electricity_cost")
  internetCost    Float?  @map("internet_cost")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Связи
  machines        Machine[]

  @@map("locations")
}

model Machine {
  id              String        @id @default(cuid())
  internalCode    String        @unique @map("internal_code")
  model           String?
  serialNumber    String?       @map("serial_number")
  type            MachineType   @default(COFFEE)
  status          MachineStatus @default(ACTIVE)
  locationId      String        @map("location_id")
  simCard         String?       @map("sim_card")
  electricityMeter String?      @map("electricity_meter")
  monthlyTraffic  Float?        @map("monthly_traffic")
  monthlyElectricity Float?     @map("monthly_electricity")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Связи
  location        Location      @relation(fields: [locationId], references: [id])
  tasks           Task[]
  bags            Bag[]
  sales           Sale[]
  expenses        Expense[]
  incomes         Income[]
  waterBottles    WaterBottle[]
  hopperInstallations HopperInstallation[]

  @@map("machines")
}

enum MachineType {
  COFFEE
  SNACKS
  DRINKS
  COMBO
  ICE
}

enum MachineStatus {
  ACTIVE
  MAINTENANCE
  OFFLINE
  BROKEN
  DECOMMISSIONED
}

// ============================================================================
// ИНГРЕДИЕНТЫ И БУНКЕРЫ
// ============================================================================

model Ingredient {
  id            String  @id @default(cuid())
  name          String
  type          IngredientType
  unit          String  // г, кг, л, мл, шт
  shelfLifeDays Int?    @map("shelf_life_days")
  minStock      Float?  @map("min_stock")
  price         Float?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Связи
  hoppers       Hopper[]
  recipeIngredients RecipeIngredient[]

  @@map("ingredients")
}

enum IngredientType {
  COFFEE
  MILK
  SUGAR
  CHOCOLATE
  TEA
  SYRUP
  WATER
  CONSUMABLE
}

model Hopper {
  id            String      @id @default(cuid())
  code          String      @unique // SET-001-4S
  ingredientId  String      @map("ingredient_id")
  weightEmpty   Float       @map("weight_empty")
  weightCurrent Float?      @map("weight_current")
  status        HopperStatus @default(ON_WAREHOUSE)
  cyclesCount   Int         @default(0) @map("cycles_count")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Связи
  ingredient    Ingredient  @relation(fields: [ingredientId], references: [id])
  bagContents   BagContent[]
  hopperInstallations HopperInstallation[]

  @@map("hoppers")
}

enum HopperStatus {
  ON_WAREHOUSE
  IN_BAG
  INSTALLED
  RETURNED
  CLEANING
  DAMAGED
}

model HopperInstallation {
  id          String   @id @default(cuid())
  hopperId    String   @map("hopper_id")
  machineId   String   @map("machine_id")
  installedAt DateTime @map("installed_at")
  removedAt   DateTime? @map("removed_at")
  weightBefore Float?  @map("weight_before")
  weightAfter  Float?  @map("weight_after")

  // Связи
  hopper      Hopper   @relation(fields: [hopperId], references: [id])
  machine     Machine  @relation(fields: [machineId], references: [id])

  @@map("hopper_installations")
}

// ============================================================================
// СИРОПЫ И ВОДА
// ============================================================================

model Syrup {
  id            String      @id @default(cuid())
  name          String
  bottleVolume  Float       @map("bottle_volume")
  status        SyrupStatus @default(ON_WAREHOUSE)
  expiryDate    DateTime?   @map("expiry_date")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Связи
  bagContents   BagContent[]

  @@map("syrups")
}

enum SyrupStatus {
  ON_WAREHOUSE
  IN_BAG
  INSTALLED
  USED
  EXPIRED
}

model WaterBottle {
  id            String           @id @default(cuid())
  uniqueCode    String           @unique @map("unique_code")
  volume        Float
  weightFull    Float            @map("weight_full")
  weightCurrent Float?           @map("weight_current")
  status        WaterBottleStatus @default(ON_WAREHOUSE)
  machineId     String?          @map("machine_id")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  // Связи
  machine       Machine?         @relation(fields: [machineId], references: [id])

  @@map("water_bottles")
}

enum WaterBottleStatus {
  ON_WAREHOUSE
  ISSUED
  INSTALLED
  RETURNED
  EMPTY
}

// ============================================================================
// СУМКИ И КОМПЛЕКТЫ
// ============================================================================

model Bag {
  id              String    @id @default(cuid())
  code            String    @unique
  assignedMachineId String? @map("assigned_machine_id")
  status          BagStatus @default(PREPARED)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Связи
  assignedMachine Machine?  @relation(fields: [assignedMachineId], references: [id])
  contents        BagContent[]
  issues          BagIssue[]
  returns         BagReturn[]
  tasks           Task[]

  @@map("bags")
}

enum BagStatus {
  PREPARED
  ISSUED
  IN_USE
  RETURNED
  CHECKED
}

model BagContent {
  id        String  @id @default(cuid())
  bagId     String  @map("bag_id")
  hopperId  String? @map("hopper_id")
  syrupId   String? @map("syrup_id")
  quantity  Int     @default(1)

  // Связи
  bag       Bag     @relation(fields: [bagId], references: [id])
  hopper    Hopper? @relation(fields: [hopperId], references: [id])
  syrup     Syrup?  @relation(fields: [syrupId], references: [id])

  @@map("bag_contents")
}

model BagIssue {
  id        String   @id @default(cuid())
  bagId     String   @map("bag_id")
  userId    String   @map("user_id")
  issuedAt  DateTime @map("issued_at")
  photoUrl  String?  @map("photo_url")

  // Связи
  bag       Bag      @relation(fields: [bagId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("bag_issues")
}

model BagReturn {
  id          String   @id @default(cuid())
  bagId       String   @map("bag_id")
  userId      String   @map("user_id")
  returnedAt  DateTime @map("returned_at")
  photoUrl    String?  @map("photo_url")
  notes       String?

  // Связи
  bag         Bag      @relation(fields: [bagId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("bag_returns")
}

// ============================================================================
// ЗАДАЧИ И ЧЕК-ЛИСТЫ
// ============================================================================

model Task {
  id              String     @id @default(cuid())
  type            TaskType
  machineId       String     @map("machine_id")
  assignedUserId  String     @map("assigned_user_id")
  createdUserId   String     @map("created_user_id")
  bagId           String?    @map("bag_id")
  status          TaskStatus @default(CREATED)
  deadline        DateTime?
  description     String?
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  completedAt     DateTime?  @map("completed_at")

  // Связи
  machine         Machine    @relation(fields: [machineId], references: [id])
  assignedUser    User       @relation(fields: [assignedUserId], references: [id])
  createdUser     User       @relation("TaskCreator", fields: [createdUserId], references: [id])
  bag             Bag?       @relation(fields: [bagId], references: [id])
  checklists      TaskChecklist[]

  @@map("tasks")
}

enum TaskType {
  REPLACE_INGREDIENTS
  REPLACE_WATER
  REPLACE_SYRUPS
  CLEANING
  MAINTENANCE
  CASH_COLLECTION
  REPAIR
  INSPECTION
  TEST_PURCHASE

  REPLACE_INGREDIENTS
  REPLACE_WATER
  REPLACE_SYRUPS
  CASH_COLLECTION
  TEST_PURCHASE
}

enum TaskStatus {
  CREATED
  ASSIGNED
  IN_PROGRESS
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
}

model TaskChecklist {
  id          String            @id @default(cuid())
  taskId      String            @map("task_id")
  stepName    String            @map("step_name")
  status      ChecklistStatus   @default(PENDING)
  photoUrl    String?           @map("photo_url")
  weight      Float?
  notes       String?
  userId      String?           @map("user_id")
  timestamp   DateTime?
  createdAt   DateTime          @default(now()) @map("created_at")

  // Связи
  task        Task              @relation(fields: [taskId], references: [id])
  user        User?             @relation(fields: [userId], references: [id])

  @@map("task_checklists")
}

enum ChecklistStatus {
  PENDING
  COMPLETED
  SKIPPED
  FAILED
}

// ============================================================================
// РЕЦЕПТЫ
// ============================================================================

model Recipe {
  id          String   @id @default(cuid())
  name        String
  description String?
  totalCost   Float?   @map("total_cost")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Связи
  ingredients RecipeIngredient[]

  @@map("recipes")
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  recipeId     String     @map("recipe_id")
  ingredientId String     @map("ingredient_id")
  amount       Float
  unit         String

  // Связи
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@map("recipe_ingredients")
}

// ============================================================================
// ПРОДАЖИ И ПЛАТЕЖИ
// ============================================================================

model Sale {
  id            String        @id @default(cuid())
  machineId     String        @map("machine_id")
  productName   String        @map("product_name")
  amount        Float
  paymentMethod PaymentMethod @map("payment_method")
  timestamp     DateTime
  isTest        Boolean       @default(false) @map("is_test")

  // Связи
  machine       Machine       @relation(fields: [machineId], references: [id])
  payments      Payment[]

  @@map("sales")
}

enum PaymentMethod {
  CASH
  QR_PAYME
  QR_CLICK
  QR_UZUM
  CARD
  VIP
  TEST
}

model Payment {
  id            String        @id @default(cuid())
  saleId        String        @map("sale_id")
  provider      String
  amount        Float
  status        PaymentStatus
  transactionId String?       @map("transaction_id")
  timestamp     DateTime

  // Связи
  sale          Sale          @relation(fields: [saleId], references: [id])

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// ============================================================================
// ФИНАНСЫ
// ============================================================================

model Expense {
  id          String   @id @default(cuid())
  category    String
  amount      Float
  date        DateTime
  machineId   String?  @map("machine_id")
  userId      String   @map("user_id")
  description String?
  receiptUrl  String?  @map("receipt_url")
  createdAt   DateTime @default(now()) @map("created_at")

  // Связи
  machine     Machine? @relation(fields: [machineId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("expenses")
}

model Income {
  id          String   @id @default(cuid())
  source      String
  amount      Float
  date        DateTime
  machineId   String?  @map("machine_id")
  userId      String   @map("user_id")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  // Связи
  machine     Machine? @relation(fields: [machineId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("incomes")
}

// ============================================================================
// ЖУРНАЛ ДЕЙСТВИЙ
// ============================================================================

model ActionLog {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  actionType String   @map("action_type")
  objectType String   @map("object_type")
  objectId   String   @map("object_id")
  details    Json?
  timestamp  DateTime @default(now())
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")

  // Связи
  user       User     @relation(fields: [userId], references: [id])

  @@map("action_logs")
}

// ============================================================================
// ИНДЕКСЫ ДЛЯ ПРОИЗВОДИТЕЛЬНОСТИ
// ============================================================================

// Индексы будут созданы автоматически для:
// - Все @unique поля
// - Все foreign key поля
// - Поля с @id

// Дополнительные индексы можно добавить при необходимости
