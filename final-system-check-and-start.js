const fs = require('fs');
const path = require('path');
const { spawn, exec } = require('child_process');
const axios = require('axios');

console.log('üîç VHM24 - –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´\n');

class SystemChecker {
  constructor() {
    this.errors = [];
    this.warnings = [];
    this.checks = [];
    this.processes = [];
  }

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  async checkFileStructure() {
    console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
    
    const requiredFiles = [
      'backend/src/index.js',
      'backend/package.json',
      'apps/web-dashboard/package.json',
      'services/telegram-bot/src/index.js',
      '.env',
      'packages/database/prisma/schema.prisma'
    ];

    const requiredDirs = [
      'backend/src/routes',
      'apps/web-dashboard',
      'services/telegram-bot',
      'packages/database'
    ];

    for (const file of requiredFiles) {
      if (fs.existsSync(file)) {
        this.checks.push(`‚úÖ ${file} - –Ω–∞–π–¥–µ–Ω`);
      } else {
        this.errors.push(`‚ùå ${file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    }

    for (const dir of requiredDirs) {
      if (fs.existsSync(dir)) {
        this.checks.push(`‚úÖ ${dir}/ - –Ω–∞–π–¥–µ–Ω–∞`);
      } else {
        this.errors.push(`‚ùå ${dir}/ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    }

    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${requiredFiles.length + requiredDirs.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  async checkEnvironmentVariables() {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    
    if (!fs.existsSync('.env')) {
      this.errors.push('‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const envContent = fs.readFileSync('.env', 'utf8');
    const requiredVars = [
      'DATABASE_URL',
      'JWT_SECRET',
      'TELEGRAM_BOT_TOKEN',
      'ADMIN_IDS'
    ];

    for (const varName of requiredVars) {
      if (envContent.includes(`${varName}=`)) {
        this.checks.push(`‚úÖ ${varName} - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞`);
      } else {
        this.errors.push(`‚ùå ${varName} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if (envContent.includes('TELEGRAM_BOT_TOKEN=8015112367:AAHi25gHhI3p1X1uyuCAt8vUnlMZRrcoKEQ')) {
      this.checks.push('‚úÖ Telegram Bot Token - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Admin ID
    if (envContent.includes('ADMIN_IDS=42283329')) {
      this.checks.push('‚úÖ Admin ID - –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  async checkDependencies() {
    console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    
    const packagePaths = [
      'backend/package.json',
      'apps/web-dashboard/package.json',
      'services/telegram-bot/package.json'
    ];

    for (const pkgPath of packagePaths) {
      if (fs.existsSync(pkgPath)) {
        try {
          const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
          const nodeModulesPath = path.join(path.dirname(pkgPath), 'node_modules');
          
          if (fs.existsSync(nodeModulesPath)) {
            this.checks.push(`‚úÖ ${pkgPath} - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`);
          } else {
            this.warnings.push(`‚ö†Ô∏è ${pkgPath} - node_modules –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
          }
        } catch (error) {
          this.errors.push(`‚ùå ${pkgPath} - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON`);
        }
      }
    }

    console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  async checkSyntax() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...');
    
    const criticalFiles = [
      'backend/src/index.js',
      'services/telegram-bot/src/index.js'
    ];

    for (const file of criticalFiles) {
      if (fs.existsSync(file)) {
        try {
          const content = fs.readFileSync(file, 'utf8');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ fs.await –æ—à–∏–±–∫–∏
          if (content.includes('fs.await')) {
            this.errors.push(`‚ùå ${file} - —Å–æ–¥–µ—Ä–∂–∏—Ç fs.await –æ—à–∏–±–∫–∏`);
          } else {
            this.checks.push(`‚úÖ ${file} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π`);
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏ try-catch
          const tryCount = (content.match(/try\s*{/g) || []).length;
          const catchCount = (content.match(/catch\s*\(/g) || []).length;
          
          if (tryCount !== catchCount) {
            this.warnings.push(`‚ö†Ô∏è ${file} - –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ try/catch –±–ª–æ–∫–æ–≤`);
          }

        } catch (error) {
          this.errors.push(`‚ùå ${file} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞`);
        }
      }
    }

    console.log('‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω');
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–æ—É—Ç–æ–≤
  async checkAPIRoutes() {
    console.log('üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–æ—É—Ç–æ–≤...');
    
    const routesDir = 'backend/src/routes';
    if (!fs.existsSync(routesDir)) {
      this.errors.push('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è routes –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const routeFiles = fs.readdirSync(routesDir).filter(f => f.endsWith('.js'));
    const expectedRoutes = [
      'auth.js', 'users.js', 'machines.js', 'tasks.js', 
      'recipes.js', 'dashboard.js', 'audit.js', 'warehouse.js',
      'ingredients.js', 'routes.js', 'data-import.js', 'incomplete-data.js'
    ];

    for (const route of expectedRoutes) {
      if (routeFiles.includes(route)) {
        this.checks.push(`‚úÖ ${route} - –Ω–∞–π–¥–µ–Ω`);
      } else {
        this.errors.push(`‚ùå ${route} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    }

    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${expectedRoutes.length} —Ä–æ—É—Ç–æ–≤`);
  }

  // 6. –£–±–∏–π—Å—Ç–≤–æ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  async killOldProcesses() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
    
    const ports = [8000, 3000, 3005];
    
    for (const port of ports) {
      await this.killPort(port);
    }
    
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  killPort(port) {
    return new Promise((resolve) => {
      if (process.platform === 'win32') {
        exec(`netstat -ano | findstr :${port}`, (err, stdout) => {
          if (stdout) {
            const lines = stdout.trim().split('\n');
            lines.forEach(line => {
              const parts = line.trim().split(/\s+/);
              const pid = parts[parts.length - 1];
              if (pid && pid !== '0') {
                try {
                  exec(`taskkill /F /PID ${pid}`, () => {});
                } catch (e) {}
              }
            });
          }
          setTimeout(resolve, 1000);
        });
      } else {
        exec(`lsof -ti:${port} | xargs kill -9`, () => {
          setTimeout(resolve, 1000);
        });
      }
    });
  }

  // 7. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
  async startServices() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...');
    
    // –ó–∞–ø—É—Å–∫ Backend
    await this.startService('backend', ['npm', 'start'], 'Backend API (–ø–æ—Ä—Ç 8000)');
    
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ backend
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –ó–∞–ø—É—Å–∫ Frontend
    await this.startService('apps/web-dashboard', ['npm', 'run', 'dev'], 'Web Dashboard (–ø–æ—Ä—Ç 3000)');
    
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ frontend
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ó–∞–ø—É—Å–∫ Telegram Bot
    await this.startService('services/telegram-bot', ['npm', 'start'], 'Telegram Bot');
    
    console.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã');
  }

  startService(cwd, command, name) {
    return new Promise((resolve) => {
      console.log(`üì¶ –ó–∞–ø—É—Å–∫ ${name}...`);
      
      const proc = spawn(command[0], command.slice(1), {
        cwd,
        shell: true,
        stdio: 'pipe',
        detached: false
      });

      proc.stdout.on('data', (data) => {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const output = data.toString();
        if (output.includes('listening') || output.includes('started') || output.includes('ready')) {
          console.log(`   ${name}: ${output.trim()}`);
        }
      });

      proc.stderr.on('data', (data) => {
        const error = data.toString();
        if (!error.includes('warning') && !error.includes('deprecated')) {
          console.error(`   ${name} ERROR: ${error.trim()}`);
        }
      });

      this.processes.push({ name, proc });
      
      setTimeout(() => {
        console.log(`‚úÖ ${name} –∑–∞–ø—É—â–µ–Ω`);
        resolve();
      }, 2000);
    });
  }

  // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints
  async testEndpoints() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints...');
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    const endpoints = [
      { url: 'http://localhost:8000/health', name: 'Backend Health' },
      { url: 'http://localhost:3000', name: 'Frontend' }
    ];

    for (const endpoint of endpoints) {
      try {
        const response = await axios.get(endpoint.url, { timeout: 5000 });
        if (response.status === 200) {
          this.checks.push(`‚úÖ ${endpoint.name} - —Ä–∞–±–æ—Ç–∞–µ—Ç`);
        } else {
          this.warnings.push(`‚ö†Ô∏è ${endpoint.name} - —Å—Ç–∞—Ç—É—Å ${response.status}`);
        }
      } catch (error) {
        this.warnings.push(`‚ö†Ô∏è ${endpoint.name} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è)`);
      }
    }

    console.log('‚úÖ Endpoints –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã');
  }

  // 9. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport() {
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:');
    console.log('=' .repeat(50));
    
    console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${this.checks.length}`);
    this.checks.forEach(check => console.log(`  ${check}`));
    
    if (this.warnings.length > 0) {
      console.log(`\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.warnings.length}`);
      this.warnings.forEach(warning => console.log(`  ${warning}`));
    }
    
    if (this.errors.length > 0) {
      console.log(`\n‚ùå –û—à–∏–±–∫–∏: ${this.errors.length}`);
      this.errors.forEach(error => console.log(`  ${error}`));
    }

    console.log('\nüöÄ –ó–ê–ü–£–©–ï–ù–ù–´–ï –°–ï–†–í–ò–°–´:');
    this.processes.forEach(proc => {
      console.log(`  ‚úÖ ${proc.name}`);
    });

    console.log('\nüåê –î–û–°–¢–£–ü –ö –°–ò–°–¢–ï–ú–ï:');
    console.log('  üìä Web Dashboard: http://localhost:3000');
    console.log('  üîå Backend API: http://localhost:8000');
    console.log('  ü§ñ Telegram Bot: @vendhubManagerbot');
    console.log('  üìã Health Check: http://localhost:8000/health');

    const totalIssues = this.errors.length;
    const successRate = ((this.checks.length / (this.checks.length + this.errors.length)) * 100).toFixed(1);

    console.log(`\nüìà –û–ë–©–ò–ô –°–¢–ê–¢–£–°:`);
    console.log(`  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
    console.log(`  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: ${this.errors.length}`);
    
    if (totalIssues === 0) {
      console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ò –ó–ê–ü–£–©–ï–ù–ê!');
    } else {
      console.log('\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏');
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
  async runFullCheck() {
    try {
      await this.checkFileStructure();
      await this.checkEnvironmentVariables();
      await this.checkDependencies();
      await this.checkSyntax();
      await this.checkAPIRoutes();
      await this.killOldProcesses();
      await this.startServices();
      await this.testEndpoints();
      
      this.generateReport();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
      const report = {
        timestamp: new Date().toISOString(),
        checks: this.checks,
        warnings: this.warnings,
        errors: this.errors,
        processes: this.processes.map(p => p.name),
        status: this.errors.length === 0 ? 'SUCCESS' : 'WARNING'
      };
      
      fs.writeFileSync('system-check-report.json', JSON.stringify(report, null, 2));
      console.log('\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: system-check-report.json');
      
    } catch (error) {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
      process.exit(1);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
const checker = new SystemChecker();
checker.runFullCheck();
