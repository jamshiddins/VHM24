const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
const envConfig = {
  backend: {
    required: ['DATABASE_URL', 'JWT_SECRET', 'NODE_ENV'],
    optional: [
      'PORT',
      'LOG_LEVEL',
      'REDIS_URL',
      'AWS_ACCESS_KEY_ID',
      'AWS_SECRET_ACCESS_KEY',
      'AWS_REGION',
      'TELEGRAM_BOT_TOKEN'
    ]
  },
  frontend: {
    required: ['NEXT_PUBLIC_API_URL'],
    optional: ['NEXT_PUBLIC_APP_NAME', 'NEXT_PUBLIC_VERSION']
  },
  telegram: {
    required: ['TELEGRAM_BOT_TOKEN', 'DATABASE_URL'],
    optional: ['WEBHOOK_URL', 'WEBHOOK_PORT']
  },
  redis: {
    required: ['REDIS_URL'],
    optional: ['REDIS_PASSWORD', 'REDIS_DB']
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞
function loadEnvFile(filePath) {
  if (!fs.existsSync(filePath)) {
    return {};
  }

  const envContent = fs.readFileSync(filePath, 'utf8');
  const envVars = {};

  envContent.split('\n').forEach(line => {
    const trimmedLine = line.trim();
    if (trimmedLine && !trimmedLine.startsWith('#')) {
      const [key, ...valueParts] = trimmedLine.split('=');
      if (key && valueParts.length > 0) {
        envVars[key.trim()] = valueParts
          .join('=')
          .trim()
          .replace(/^["']|["']$/g, '');
      }
    }
  });

  return envVars;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvironmentVariables(serviceName, config, envVars) {
  console.log(
    `${colors.cyan}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è ${serviceName}:${colors.reset}`
  );

  let hasErrors = false;
  let hasWarnings = false;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  console.log(`${colors.blue}  –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:${colors.reset}`);
  config.required.forEach(varName => {
    if (envVars[varName]) {
      console.log(`    ${colors.green}‚úì${colors.reset} ${varName}`);
    } else {
      console.log(`    ${colors.red}‚úó${colors.reset} ${varName} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
      hasErrors = true;
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  if (config.optional && config.optional.length > 0) {
    console.log(`${colors.blue}  –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:${colors.reset}`);
    config.optional.forEach(varName => {
      if (envVars[varName]) {
        console.log(`    ${colors.green}‚úì${colors.reset} ${varName}`);
      } else {
        console.log(
          `    ${colors.yellow}!${colors.reset} ${varName} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`
        );
        hasWarnings = true;
      }
    });
  }

  return { hasErrors, hasWarnings };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
function validateSpecificValues(envVars) {
  console.log(`${colors.cyan}üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:${colors.reset}`);

  let hasErrors = false;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ NODE_ENV
  if (envVars.NODE_ENV) {
    const validNodeEnvs = ['development', 'production', 'test'];
    if (validNodeEnvs.includes(envVars.NODE_ENV)) {
      console.log(
        `    ${colors.green}‚úì${colors.reset} NODE_ENV: ${envVars.NODE_ENV}`
      );
    } else {
      console.log(
        `    ${colors.red}‚úó${colors.reset} NODE_ENV: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "${envVars.NODE_ENV}"`
      );
      console.log(`      –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${validNodeEnvs.join(', ')}`);
      hasErrors = true;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ PORT
  if (envVars.PORT) {
    const port = parseInt(envVars.PORT);
    if (isNaN(port) || port < 1 || port > 65535) {
      console.log(
        `    ${colors.red}‚úó${colors.reset} PORT: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "${envVars.PORT}"`
      );
      hasErrors = true;
    } else {
      console.log(`    ${colors.green}‚úì${colors.reset} PORT: ${port}`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ DATABASE_URL
  if (envVars.DATABASE_URL) {
    if (
      envVars.DATABASE_URL.startsWith('postgresql://') ||
      envVars.DATABASE_URL.startsWith('postgres://')
    ) {
      console.log(
        `    ${colors.green}‚úì${colors.reset} DATABASE_URL: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PostgreSQL URL`
      );
    } else {
      console.log(
        `    ${colors.yellow}!${colors.reset} DATABASE_URL: –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`
      );
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT_SECRET
  if (envVars.JWT_SECRET) {
    if (envVars.JWT_SECRET.length < 32) {
      console.log(
        `    ${colors.yellow}!${colors.reset} JWT_SECRET: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤`
      );
    } else {
      console.log(
        `    ${colors.green}‚úì${colors.reset} JWT_SECRET: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª–∏–Ω–∞`
      );
    }
  }

  return hasErrors;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log(
    `${colors.magenta}üöÄ VHM24 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è${colors.reset}\n`
  );

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envFiles = ['.env', '.env.local', '.env.production'];
  let allEnvVars = { ...process.env };

  envFiles.forEach(fileName => {
    const filePath = path.join(process.cwd(), fileName);
    if (fs.existsSync(filePath)) {
      console.log(`${colors.blue}üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${fileName}${colors.reset}`);
      const fileVars = loadEnvFile(filePath);
      allEnvVars = { ...allEnvVars, ...fileVars };
    }
  });

  console.log('');

  let totalErrors = 0;
  let totalWarnings = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
  Object.entries(envConfig).forEach(([serviceName, config]) => {
    const { hasErrors, hasWarnings } = checkEnvironmentVariables(
      serviceName,
      config,
      allEnvVars
    );
    if (hasErrors) totalErrors++;
    if (hasWarnings) totalWarnings++;
    console.log('');
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const hasValidationErrors = validateSpecificValues(allEnvVars);
  if (hasValidationErrors) totalErrors++;

  console.log('');

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log(`${colors.cyan}üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:${colors.reset}`);

  if (totalErrors === 0 && totalWarnings === 0) {
    console.log(
      `${colors.green}‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!${colors.reset}`
    );
    return true;
  } else {
    if (totalErrors > 0) {
      console.log(
        `${colors.red}‚ùå –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: ${totalErrors}${colors.reset}`
      );
    }
    if (totalWarnings > 0) {
      console.log(
        `${colors.yellow}‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${totalWarnings}${colors.reset}`
      );
    }

    console.log(`\n${colors.blue}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${colors.reset}`);
    console.log('   1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example');
    console.log('   2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π');
    console.log('   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ');

    if (totalErrors > 0) {
      throw new Error(`–ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: ${totalErrors}`);
    }
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  try {
    main();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

module.exports = {
  checkEnvironmentVariables,
  validateSpecificValues,
  loadEnvFile,
  envConfig
};
