const logger = require('@vhm24/shared/logger');

#!/usr/bin/env node

/**
 * VHM24 Complete Error Fix and Start
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
 */

const { spawn, execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

logger.info('üîß –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ VHM24...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º
function runCommand(command, cwd = process.cwd()) {
  try {
    logger.info(`üì¶ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${command}`);
    execSync(command, { 
      cwd, 
      stdio: 'inherit',
      encoding: 'utf8'
    });
    logger.info(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n`);
    return true;
  } catch (error) {
    logger.info(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error.message}\n`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function createMissingDirectories() {
  logger.info('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...');
  
  const directories = [
    'services/data-import/templates',
    'services/notifications/logs',
    'services/audit/logs',
    'services/gateway/uploads',
    'services/backup/backups'
  ];

  directories.forEach(dir => {
    const fullPath = path.join(__dirname, dir);
    if (!fs.existsSync(fullPath)) {
      fs.mkdirSync(fullPath, { recursive: true });
      logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js
function killAllNodeProcesses() {
  logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js...');
  try {
    if (process.platform === 'win32') {
      execSync('taskkill /f /im node.exe', { stdio: 'ignore' });
    } else {
      execSync('pkill -f node', { stdio: 'ignore' });
    }
    logger.info('‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } catch (error) {
    logger.info('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function installDependencies() {
  logger.info('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
  
  const packages = [
    '.',
    'packages/database',
    'packages/shared',
    'packages/shared-types',
    'services/gateway',
    'services/auth',
    'services/machines',
    'services/notifications',
    'services/audit',
    'services/routes',
    'services/warehouse',
    'services/recipes'
  ];

  for (const pkg of packages) {
    const pkgPath = path.join(__dirname, pkg);
    const packageJsonPath = path.join(pkgPath, 'package.json');
    
    if (fs.existsSync(packageJsonPath)) {
      logger.info(`üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è ${pkg}...`);
      if (!runCommand('npm install --no-audit --no-fund', pkgPath)) {
        logger.info(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è ${pkg}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...\n`);
      }
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
function startService(service) {
  return new Promise((resolve) => {
    logger.info(`üîß –ó–∞–ø—É—Å–∫ ${service.name}...`);
    
    const childProcess = spawn('npm', ['start'], {
      cwd: path.join(__dirname, service.path),
      stdio: 'pipe',
      env: {
        ...process.env,
        PORT: service.port
      }
    });

    let started = false;
    let output = '';

    childProcess.stdout.on('data', (data) => {
      const text = data.toString();
      output += text;
      logger.info(`[${service.name}] ${text.trim()}`);
      
      if (!started && (text.includes('listening') || text.includes('running') || text.includes('Server listening'))) {
        started = true;
        logger.info(`‚úÖ ${service.name} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${service.port}`);
        resolve({ process: childProcess, success: true });
      }
    });

    childProcess.stderr.on('data', (data) => {
      const text = data.toString();
      if (!text.includes('ExperimentalWarning') && !text.includes('DeprecationWarning')) {
        logger.info(`[${service.name} ERROR] ${text.trim()}`);
      }
    });

    childProcess.on('close', (code) => {
      if (!started) {
        logger.info(`‚ùå ${service.name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
        resolve({ process: null, success: false });
      }
    });

    childProcess.on('error', (error) => {
      logger.info(`üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${service.name}: ${error.message}`);
      if (!started) {
        resolve({ process: null, success: false });
      }
    });

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    setTimeout(() => {
      if (!started) {
        logger.info(`‚ö†Ô∏è  ${service.name} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ...`);
        resolve({ process: childProcess, success: true });
      }
    }, 10000);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    killAllNodeProcesses();
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    createMissingDirectories();

    // 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    installDependencies();

    // 4. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    logger.info('\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...\n');
    
    const services = [
      { name: 'Auth', path: 'services/auth', port: 3001 },
      { name: 'Gateway', path: 'services/gateway', port: 8000 },
      { name: 'Machines', path: 'services/machines', port: 3002 },
      { name: 'Notifications', path: 'services/notifications', port: 3006 },
      { name: 'Audit', path: 'services/audit', port: 3007 }
    ];

    const runningProcesses = [];
    let successCount = 0;

    for (const service of services) {
      const result = await startService(service);
      if (result.success) {
        successCount++;
        if (result.process) {
          runningProcesses.push(result.process);
        }
      }
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    logger.info('\nüéâ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    logger.info(`üìä –ó–∞–ø—É—â–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${successCount}/${services.length}`);
    
    if (successCount > 0) {
      logger.info('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
      logger.info('   üåê API Gateway: http://localhost:8000');
      logger.info('   üîê Auth Service: http://localhost:3001');
      logger.info('   ü§ñ Machines Service: http://localhost:3002');
      logger.info('   üîî Notifications Service: http://localhost:3006');
      logger.info('   üîç Audit Service: http://localhost:3007');
      
      logger.info('\nüß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
      logger.info('   node test-complete-system-with-notifications.js');
      
      logger.info('\n‚ö†Ô∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      process.on('SIGINT', () => {
        logger.info('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
        runningProcesses.forEach(proc => {
          if (proc && !proc.killed) {
            proc.kill('SIGTERM');
          }
        });
        setTimeout(() => {
          logger.info('üëã –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
          process.exit(0);
        }, 2000);
      });

      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      await new Promise(() => {});
    } else {
      logger.info('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞');
      process.exit(1);
    }

  } catch (error) {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
