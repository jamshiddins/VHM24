#!/usr/bin/env node

/**
 * VendHub System Startup Script
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã VendHub
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config();

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã VendHub...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
function startProcess(name, command, args, cwd) {
  return new Promise((resolve, reject) => {
    console.log(`üì¶ –ó–∞–ø—É—Å–∫ ${name}...`);
    
    const childProcess = spawn(command, args, {
      cwd: cwd || __dirname,
      stdio: 'inherit',
      shell: true,
      env: { ...process.env } // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    });
    
    childProcess.on('error', (error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${name}:`, error);
      reject(error);
    });
    
    childProcess.on('exit', (code) => {
      if (code === 0) {
        console.log(`‚úÖ ${name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        resolve();
      } else {
        console.error(`‚ùå ${name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
        reject(new Error(`Process exited with code ${code}`));
      }
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function startVendHub() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    
    const requiredEnvVars = [
      'DATABASE_URL',
      'TELEGRAM_BOT_TOKEN'
    ];
    
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    requiredEnvVars.forEach(varName => {
      const value = process.env[varName];
      if (value) {
        console.log(`‚úÖ ${varName}: ${value.substring(0, 20)}...`);
      } else {
        console.log(`‚ùå ${varName}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    });
    
    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars.join(', '));
      console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏');
      process.exit(1);
    }
    
    console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    
    // 2. –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üóÑÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await startProcess(
      'Prisma Migrate',
      'npx',
      ['prisma', 'db', 'push'],
      path.join(__dirname, 'backend')
    );
    
    // 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client
    console.log('üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client...');
    await startProcess(
      'Prisma Generate',
      'npx',
      ['prisma', 'generate'],
      path.join(__dirname, 'backend')
    );
    
    // 4. –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üñ•Ô∏è –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...');
    const backendProcess = spawn('npm', ['start'], {
      cwd: path.join(__dirname, 'backend'),
      stdio: 'inherit',
      shell: true,
      env: { ...process.env } // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    });
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 5. –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    const botProcess = spawn('npm', ['start'], {
      cwd: path.join(__dirname, 'apps/telegram-bot'),
      stdio: 'inherit',
      shell: true,
      env: { ...process.env } // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    });
    
    console.log('üéâ –°–∏—Å—Ç–µ–º–∞ VendHub –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üì° Backend API: http://localhost:8000');
    console.log('ü§ñ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
      console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...');
      backendProcess.kill('SIGINT');
      botProcess.kill('SIGINT');
      process.exit(0);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
startVendHub();
