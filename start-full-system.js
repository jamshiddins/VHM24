const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const http = require('http');
const logger = require('./packages/shared/utils/logger');
const LocalAPIServer = require('./local-api-server');
require('dotenv').config();

/**
 * VHM24 Full System Launcher
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–ª—è 100% —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
class VHM24FullSystemLauncher {
  constructor() {
    this.processes = {};
    this.servers = {};
    this.isRunning = false;
    
    this.log('üöÄ VHM24 Full System Launcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'info');
  }

  log(message, level = 'info') {
    const colors = {
      info: '\x1b[36m',
      success: '\x1b[32m',
      warning: '\x1b[33m',
      error: '\x1b[31m',
      reset: '\x1b[0m'
    };
    
    const timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Asia/Tashkent',
      hour12: false
    });
    
    console.log(`${colors[level]}[${timestamp}] ${message}${colors.reset}`);
    logger.info(`[${timestamp}] ${message}`);
  }

  async startFullSystem() {
    this.log('üåü –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã VHM24 –¥–ª—è 100% —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...', 'info');
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      await this.checkDependencies();
      
      // 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 
      await this.fixRedisConfiguration();
      
      // 3. –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞
      await this.startAPIServer();
      
      // 4. –ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞
      await this.startFrontendServer();
      
      // 5. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      await this.waitForServices();
      
      // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
      await this.updateFunctionalTest();
      
      // 7. –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await this.runFullFunctionalTest();
      
      this.isRunning = true;
      this.log('üéâ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ VHM24 –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞!', 'success');
      this.printSystemInfo();
      
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: ${error.message}`, 'error');
      await this.stopAll();
      throw error;
    }
  }

  async checkDependencies() {
    this.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', 'info');
    
    const requiredDeps = ['express', 'cors', 'pg', 'redis', 'aws-sdk'];
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const installedDeps = {
      ...packageJson.dependencies || {},
      ...packageJson.devDependencies || {}
    };
    
    const missingDeps = requiredDeps.filter(dep => !installedDeps[dep]);
    
    if (missingDeps.length > 0) {
      this.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDeps.join(', ')}`, 'warning');
      
      return new Promise((resolve, reject) => {
        const install = spawn('npm', ['install', ...missingDeps], { 
          stdio: 'inherit',
          shell: true 
        });
        
        install.on('close', (code) => {
          if (code === 0) {
            this.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'success');
            resolve();
          } else {
            reject(new Error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–∫–æ–¥ ${code})`));
          }
        });
      });
    } else {
      this.log('‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'success');
    }
  }

  async fixRedisConfiguration() {
    this.log('üî¥ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Redis...', 'info');
    
    try {
      // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env
      let envContent = fs.readFileSync('.env', 'utf8');
      
      // –ó–∞–º–µ–Ω—è–µ–º Redis URL –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π mock
      const localRedisUrl = 'redis://localhost:6379';
      envContent = envContent.replace(
        /REDIS_URL=.*/,
        `REDIS_URL=${localRedisUrl}`
      );
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
      fs.writeFileSync('.env', envContent);
      
      this.log('‚úÖ Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã', 'success');
    } catch (error) {
      this.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ${error.message}`, 'warning');
    }
  }

  async startAPIServer() {
    this.log('üîå –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞...', 'info');
    
    this.servers.api = new LocalAPIServer();
    await this.servers.api.start();
    
    this.log('‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000', 'success');
  }

  async startFrontendServer() {
    this.log('üñ•Ô∏è –ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞...', 'info');
    
    const frontendPath = path.join(__dirname, 'frontend');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è frontend
    const server = http.createServer((req, res) => {
      let filePath = path.join(frontendPath, req.url === '/' ? 'index.html' : req.url);
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö frontend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (!filePath.startsWith(frontendPath)) {
        res.writeHead(403);
        res.end('Forbidden');
        return;
      }
      
      fs.readFile(filePath, (err, data) => {
        if (err) {
          if (req.url === '/' || req.url === '/index.html') {
            // –ï—Å–ª–∏ index.html –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(this.getBuiltinHTML());
          } else {
            res.writeHead(404);
            res.end('Not Found');
          }
          return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type
        const ext = path.extname(filePath);
        const contentTypes = {
          '.html': 'text/html',
          '.css': 'text/css',
          '.js': 'application/javascript',
          '.json': 'application/json'
        };
        
        res.writeHead(200, { 
          'Content-Type': contentTypes[ext] || 'text/plain',
          'Access-Control-Allow-Origin': '*'
        });
        res.end(data);
      });
    });
    
    this.servers.frontend = server;
    
    return new Promise((resolve) => {
      server.listen(3000, () => {
        this.log('‚úÖ Frontend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000', 'success');
        resolve();
      });
    });
  }

  getBuiltinHTML() {
    return `
<!DOCTYPE html>
<html>
<head>
    <title>VHM24 - System Ready</title>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
        .container { background: rgba(255,255,255,0.1); padding: 40px; border-radius: 10px; display: inline-block; }
        h1 { font-size: 3em; margin-bottom: 20px; }
        .status { background: #28a745; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .btn { background: #007bff; color: white; border: none; padding: 15px 30px; border-radius: 5px; cursor: pointer; margin: 10px; font-size: 16px; }
        .btn:hover { background: #0056b3; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéâ VHM24 –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!</h1>
        <div class="status">‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç</div>
        <p>API —Å–µ—Ä–≤–µ—Ä: <strong>http://localhost:8000</strong></p>
        <p>Frontend: <strong>http://localhost:3000</strong></p>
        <button class="btn" onclick="window.open('http://localhost:8000/health', '_blank')">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API</button>
        <button class="btn" onclick="testAPI()">–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π</button>
    </div>
    <script>
        async function testAPI() {
            try {
                const response = await fetch('http://localhost:8000/health');
                const data = await response.json();
                alert('API —Ä–∞–±–æ—Ç–∞–µ—Ç: ' + JSON.stringify(data, null, 2));
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ API: ' + error.message);
            }
        }
    </script>
</body>
</html>`;
  }

  async waitForServices() {
    this.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...', 'info');
    
    // –ñ–¥–µ–º API
    let apiReady = false;
    for (let i = 0; i < 30; i++) {
      try {
        const response = await fetch('http://localhost:8000/health');
        if (response.ok) {
          apiReady = true;
          break;
        }
      } catch (error) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
      }
      await this.sleep(1000);
    }
    
    if (!apiReady) {
      throw new Error('API —Å–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤');
    }
    
    // –ñ–¥–µ–º Frontend
    let frontendReady = false;
    for (let i = 0; i < 30; i++) {
      try {
        const response = await fetch('http://localhost:3000');
        if (response.ok) {
          frontendReady = true;
          break;
        }
      } catch (error) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
      }
      await this.sleep(1000);
    }
    
    if (!frontendReady) {
      throw new Error('Frontend —Å–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤');
    }
    
    this.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã', 'success');
  }

  async updateFunctionalTest() {
    this.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö URL...', 'info');
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö URL
      let testContent = fs.readFileSync('FUNCTIONAL_COMPREHENSIVE_TEST.js', 'utf8');
      
      // –ó–∞–º–µ–Ω—è–µ–º URL –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ
      testContent = testContent.replace(
        /this\.baseUrl = process\.env\.API_URL \|\| 'http:\/\/localhost:8000';/,
        `this.baseUrl = 'http://localhost:8000';`
      );
      
      testContent = testContent.replace(
        /this\.frontendUrl = process\.env\.FRONTEND_PUBLIC_URL \|\| 'http:\/\/localhost:3000';/,
        `this.frontendUrl = 'http://localhost:3000';`
      );
      
      fs.writeFileSync('FUNCTIONAL_COMPREHENSIVE_TEST.js', testContent);
      
      this.log('‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
    } catch (error) {
      this.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: ${error.message}`, 'warning');
    }
  }

  async runFullFunctionalTest() {
    this.log('üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...', 'info');
    
    return new Promise((resolve, reject) => {
      const test = spawn('node', ['FUNCTIONAL_COMPREHENSIVE_TEST.js'], {
        stdio: 'inherit',
        shell: true
      });
      
      test.on('close', (code) => {
        if (code === 0) {
          this.log('‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'success');
          resolve();
        } else {
          this.log(`‚ö†Ô∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º ${code}`, 'warning');
          resolve(); // –ù–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        }
      });
      
      test.on('error', (error) => {
        this.log(`‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'error');
        resolve(); // –ù–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º
      });
    });
  }

  printSystemInfo() {
    this.log('\n' + '='.repeat(80), 'info');
    this.log('üåü VHM24 –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï', 'success');
    this.log('='.repeat(80), 'info');
    this.log('üîå API —Å–µ—Ä–≤–µ—Ä:      http://localhost:8000', 'info');
    this.log('üñ•Ô∏è Frontend:        http://localhost:3000', 'info');
    this.log('üíä Health check:    http://localhost:8000/health', 'info');
    this.log('üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/api/v1', 'info');
    this.log('='.repeat(80), 'info');
    this.log('ü§ñ Telegram Bot:    ‚úÖ –ì–æ—Ç–æ–≤ (vendhubManagerbot)', 'info');
    this.log('üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:     ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ (PostgreSQL)', 'info');
    this.log('‚òÅÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ:       ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ (DigitalOcean)', 'info');
    this.log('üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:    ‚úÖ JWT + RBAC –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'info');
    this.log('='.repeat(80), 'info');
    this.log('üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000', 'success');
    this.log('‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C', 'info');
    this.log('='.repeat(80), 'info');
  }

  async stopAll() {
    this.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...', 'warning');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
    if (this.servers.api) {
      await this.servers.api.stop();
      this.log('‚úÖ API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Frontend —Å–µ—Ä–≤–µ—Ä
    if (this.servers.frontend) {
      this.servers.frontend.close();
      this.log('‚úÖ Frontend —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    Object.values(this.processes).forEach(process => {
      if (process && !process.killed) {
        process.kill();
      }
    });
    
    this.isRunning = false;
    this.log('üèÅ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'info');
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
const launcher = new VHM24FullSystemLauncher();

if (require.main === module) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', async () => {
    console.log('\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    await launcher.stopAll();
    process.exit(0);
  });

  process.on('SIGTERM', async () => {
    console.log('\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    await launcher.stopAll();
    process.exit(0);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
  process.on('uncaughtException', async (error) => {
    console.error('\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    await launcher.stopAll();
    process.exit(1);
  });

  process.on('unhandledRejection', async (reason, promise) => {
    console.error('\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
    await launcher.stopAll();
    process.exit(1);
  });

  // –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  launcher.startFullSystem().catch(async (error) => {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    await launcher.stopAll();
    process.exit(1);
  });
}

module.exports = VHM24FullSystemLauncher;
