const { spawn, execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const services = [
  { name: 'auth', port: 8000, color: '\x1b[31m' },        // –ö—Ä–∞—Å–Ω—ã–π
  { name: 'inventory', port: 8001, color: '\x1b[32m' },   // –ó–µ–ª–µ–Ω—ã–π
  { name: 'machines', port: 8002, color: '\x1b[33m' },    // –ñ–µ–ª—Ç—ã–π
  { name: 'warehouse', port: 8003, color: '\x1b[34m' },   // –°–∏–Ω–∏–π
  { name: 'tasks', port: 8004, color: '\x1b[35m' },       // –ü—É—Ä–ø—É—Ä–Ω—ã–π
  { name: 'data-import', port: 3009, color: '\x1b[36m' }, // –ì–æ–ª—É–±–æ–π
  { name: 'gateway', port: 3000, color: '\x1b[37m' }      // –ë–µ–ª—ã–π
];

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const RESET_COLOR = '\x1b[0m';
const LOG_PREFIX = 'üöÄ VHM24';
const ERROR_PREFIX = '‚ùå VHM24';
const SUCCESS_PREFIX = '‚úÖ VHM24';
const WARNING_PREFIX = '‚ö†Ô∏è VHM24';

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ emergency-fix.js –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
console.log(`${LOG_PREFIX} –ó–∞–ø—É—Å–∫ emergency-fix.js –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...`);
try {
  execSync('node scripts/emergency-fix.js', { stdio: 'inherit' });
  console.log(`${SUCCESS_PREFIX} –°–∫—Ä–∏–ø—Ç emergency-fix.js —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
} catch (error) {
  console.error(`${ERROR_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ emergency-fix.js: ${error.message}`);
}

// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–æ–≤
console.log(`${LOG_PREFIX} –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤...`);
try {
  execSync('node scripts/kill-ports.js', { stdio: 'inherit' });
  console.log(`${SUCCESS_PREFIX} –ü–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã`);
} catch (error) {
  console.error(`${ERROR_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –ø–æ—Ä—Ç–æ–≤: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
if (!fs.existsSync('.env')) {
  console.log(`${WARNING_PREFIX} –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∏–∑ .env.example...`);
  try {
    if (fs.existsSync('.env.example')) {
      fs.copyFileSync('.env.example', '.env');
      console.log(`${SUCCESS_PREFIX} –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ .env.example`);
    } else {
      console.error(`${ERROR_PREFIX} –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      process.exit(1);
    }
  } catch (error) {
    console.error(`${ERROR_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: ${error.message}`);
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log(`${LOG_PREFIX} –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...`);
try {
  execSync('node scripts/check-env.js', { stdio: 'inherit' });
  console.log(`${SUCCESS_PREFIX} –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã`);
} catch (error) {
  console.error(`${ERROR_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${error.message}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
function startService(service) {
  const { name, port, color } = service;
  const servicePath = path.join('services', name);
  
  console.log(`${LOG_PREFIX} –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ ${color}${name}${RESET_COLOR} –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
  if (!fs.existsSync(servicePath)) {
    console.error(`${ERROR_PREFIX} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä–≤–∏—Å–∞ ${name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return null;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è package.json
  const packageJsonPath = path.join(servicePath, 'package.json');
  if (!fs.existsSync(packageJsonPath)) {
    console.error(`${ERROR_PREFIX} –§–∞–π–ª package.json –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ ${name} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
  }
  
  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ node
  const indexPath = path.join('src', 'index.js');
  const absoluteIndexPath = path.join(servicePath, 'src', 'index.js');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ index.js
  if (!fs.existsSync(absoluteIndexPath)) {
    console.error(`${ERROR_PREFIX} –§–∞–π–ª index.js –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ ${name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ ${absoluteIndexPath}`);
    return null;
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
  const serviceProcess = spawn('node', [indexPath], {
    cwd: servicePath,
    env: { ...process.env, PORT: port.toString() },
    stdio: ['ignore', 'pipe', 'pipe']
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
  serviceProcess.stdout.on('data', (data) => {
    const lines = data.toString().trim().split('\n');
    lines.forEach(line => {
      if (line.trim()) {
        console.log(`${color}[${name}]${RESET_COLOR} ${line}`);
      }
    });
  });
  
  serviceProcess.stderr.on('data', (data) => {
    const lines = data.toString().trim().split('\n');
    lines.forEach(line => {
      if (line.trim()) {
        console.error(`${color}[${name}]${RESET_COLOR} ${line}`);
      }
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  serviceProcess.on('close', (code) => {
    if (code !== 0) {
      console.error(`${ERROR_PREFIX} –°–µ—Ä–≤–∏—Å ${color}${name}${RESET_COLOR} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
    } else {
      console.log(`${SUCCESS_PREFIX} –°–µ—Ä–≤–∏—Å ${color}${name}${RESET_COLOR} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É`);
    }
  });
  
  return serviceProcess;
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
console.log(`${LOG_PREFIX} –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...`);
const serviceProcesses = services.map(service => startService(service));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log(`\n${LOG_PREFIX} –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
  serviceProcesses.forEach(process => {
    if (process) {
      process.kill('SIGINT');
    }
  });
});

process.on('SIGTERM', () => {
  console.log(`\n${LOG_PREFIX} –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
  serviceProcesses.forEach(process => {
    if (process) {
      process.kill('SIGTERM');
    }
  });
});

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('\n=== –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===');
console.log('q - –≤—ã—Ö–æ–¥');
console.log('r <service> - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞');
console.log('s - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
console.log('h - –ø–æ–º–æ—â—å');
console.log('========================\n');

rl.on('line', (input) => {
  const args = input.trim().split(' ');
  const command = args[0];
  
  switch (command) {
    case 'q':
      console.log(`${LOG_PREFIX} –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
      serviceProcesses.forEach(process => {
        if (process) {
          process.kill('SIGINT');
        }
      });
      rl.close();
      break;
      
    case 'r':
      if (args[1]) {
        const serviceName = args[1];
        const serviceIndex = services.findIndex(s => s.name === serviceName);
        
        if (serviceIndex !== -1) {
          console.log(`${LOG_PREFIX} –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ ${services[serviceIndex].color}${serviceName}${RESET_COLOR}...`);
          
          if (serviceProcesses[serviceIndex]) {
            serviceProcesses[serviceIndex].kill('SIGINT');
          }
          
          serviceProcesses[serviceIndex] = startService(services[serviceIndex]);
        } else {
          console.error(`${ERROR_PREFIX} –°–µ—Ä–≤–∏—Å ${serviceName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
      } else {
        console.error(`${ERROR_PREFIX} –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞`);
      }
      break;
      
    case 's':
      console.log(`${LOG_PREFIX} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:`);
      services.forEach((service, index) => {
        const process = serviceProcesses[index];
        const status = process && !process.killed ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        console.log(`${service.color}${service.name}${RESET_COLOR}: ${status} (–ø–æ—Ä—Ç ${service.port})`);
      });
      break;
      
    case 'h':
      console.log('\n=== –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===');
      console.log('q - –≤—ã—Ö–æ–¥');
      console.log('r <service> - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞');
      console.log('s - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
      console.log('h - –ø–æ–º–æ—â—å');
      console.log('========================\n');
      break;
      
    default:
      console.log(`${WARNING_PREFIX} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
      break;
  }
});

rl.on('close', () => {
  console.log(`${LOG_PREFIX} –í—ã—Ö–æ–¥`);
  process.exit(0);
});
